
F407-TouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002c04c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000331c  0802c1e0  0802c1e0  0003c1e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00001186  0802f4fc  0802f4fc  0003f4fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000000a0  08030684  08030684  00040684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000148  08030724  08030724  00040724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  0803086c  0803086c  0005026c  2**0
                  CONTENTS
  7 .ARM          00000008  0803086c  0803086c  0004086c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08030874  08030874  0005026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000018  08030874  08030874  00040874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   0000000c  0803088c  0803088c  0004088c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         0000026c  20000000  08030898  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ccmram       00000000  10000000  10000000  0005026c  2**0
                  CONTENTS
 13 .bss          0000c47c  2000026c  2000026c  0005026c  2**2
                  ALLOC
 14 ._user_heap_stack 00000600  2000c6e8  2000c6e8  0005026c  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  0005026c  2**0
                  CONTENTS, READONLY
 16 .debug_info   0008f04b  00000000  00000000  0005029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000f86f  00000000  00000000  000df2e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003620  00000000  00000000  000eeb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00003268  00000000  00000000  000f2178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002b306  00000000  00000000  000f53e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0003895d  00000000  00000000  001206e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000f6026  00000000  00000000  00159043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  0024f069  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000fa50  00000000  00000000  0024f138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000026c 	.word	0x2000026c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0802c1c4 	.word	0x0802c1c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000270 	.word	0x20000270
 80001cc:	0802c1c4 	.word	0x0802c1c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <Read16>:
uint16_t ina219_calibrationValue;
int16_t ina219_currentDivider_mA;
int16_t ina219_powerMultiplier_mW;

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af04      	add	r7, sp, #16
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6818      	ldr	r0, [r3, #0]
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	b29a      	uxth	r2, r3
 800100c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001010:	9302      	str	r3, [sp, #8]
 8001012:	2302      	movs	r3, #2
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2301      	movs	r3, #1
 800101e:	2180      	movs	r1, #128	; 0x80
 8001020:	f003 fa06 	bl	8004430 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8001024:	7b3b      	ldrb	r3, [r7, #12]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b21a      	sxth	r2, r3
 800102a:	7b7b      	ldrb	r3, [r7, #13]
 800102c:	b21b      	sxth	r3, r3
 800102e:	4313      	orrs	r3, r2
 8001030:	b21b      	sxth	r3, r3
 8001032:	b29b      	uxth	r3, r3
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af04      	add	r7, sp, #16
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	70fb      	strb	r3, [r7, #3]
 8001048:	4613      	mov	r3, r2
 800104a:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 800104c:	883b      	ldrh	r3, [r7, #0]
 800104e:	0a1b      	lsrs	r3, r3, #8
 8001050:	b29b      	uxth	r3, r3
 8001052:	b2db      	uxtb	r3, r3
 8001054:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 8001056:	883b      	ldrh	r3, [r7, #0]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	b29a      	uxth	r2, r3
 8001064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001068:	9302      	str	r3, [sp, #8]
 800106a:	2302      	movs	r3, #2
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2301      	movs	r3, #1
 8001076:	2180      	movs	r1, #128	; 0x80
 8001078:	f003 f8e0 	bl	800423c <HAL_I2C_Mem_Write>
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 800108c:	2102      	movs	r1, #2
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ffb2 	bl	8000ff8 <Read16>
 8001094:	4603      	mov	r3, r0
 8001096:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 8001098:	89fb      	ldrh	r3, [r7, #14]
 800109a:	08db      	lsrs	r3, r3, #3
 800109c:	b29b      	uxth	r3, r3
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	b29b      	uxth	r3, r3

}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b084      	sub	sp, #16
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 80010b2:	2104      	movs	r1, #4
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff9f 	bl	8000ff8 <Read16>
 80010ba:	4603      	mov	r3, r0
 80010bc:	81fb      	strh	r3, [r7, #14]

	return (result );
 80010be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ffe8 	bl	80010aa <INA219_ReadCurrent_raw>
 80010da:	4603      	mov	r3, r0
 80010dc:	81fb      	strh	r3, [r7, #14]

	return (result / ina219_currentDivider_mA );
 80010de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <INA219_ReadCurrent+0x2c>)
 80010e4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80010e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80010ec:	b21b      	sxth	r3, r3
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000028a 	.word	0x2000028a
 80010fc:	00000000 	.word	0x00000000

08001100 <INA219_ReadShuntVolage>:

uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 8001108:	2101      	movs	r1, #1
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ff74 	bl	8000ff8 <Read16>
 8001110:	4603      	mov	r3, r0
 8001112:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01 );
 8001114:	89fb      	ldrh	r3, [r7, #14]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fa04 	bl	8000524 <__aeabi_i2d>
 800111c:	a308      	add	r3, pc, #32	; (adr r3, 8001140 <INA219_ReadShuntVolage+0x40>)
 800111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001122:	f7ff fa69 	bl	80005f8 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff fd3b 	bl	8000ba8 <__aeabi_d2uiz>
 8001132:	4603      	mov	r3, r0
 8001134:	b29b      	uxth	r3, r3
}
 8001136:	4618      	mov	r0, r3
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	47ae147b 	.word	0x47ae147b
 8001144:	3f847ae1 	.word	0x3f847ae1

08001148 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8001150:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001154:	2100      	movs	r1, #0
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ff70 	bl	800103c <Write16>
	HAL_Delay(1);
 800115c:	2001      	movs	r0, #1
 800115e:	f002 f81d 	bl	800319c <HAL_Delay>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	460b      	mov	r3, r1
 8001174:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	461a      	mov	r2, r3
 800117a:	2105      	movs	r1, #5
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff5d 	bl	800103c <Write16>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	460b      	mov	r3, r1
 8001194:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8001196:	887b      	ldrh	r3, [r7, #2]
 8001198:	461a      	mov	r2, r3
 800119a:	2100      	movs	r1, #0
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff4d 	bl	800103c <Write16>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 80011b4:	f643 139f 	movw	r3, #14751	; 0x399f
 80011b8:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <INA219_setCalibration_32V_2A+0x40>)
 80011bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c0:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <INA219_setCalibration_32V_2A+0x44>)
 80011c4:	220a      	movs	r2, #10
 80011c6:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <INA219_setCalibration_32V_2A+0x48>)
 80011ca:	2202      	movs	r2, #2
 80011cc:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <INA219_setCalibration_32V_2A+0x40>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	4619      	mov	r1, r3
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ffc8 	bl	800116a <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 80011da:	89fb      	ldrh	r3, [r7, #14]
 80011dc:	4619      	mov	r1, r3
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffd3 	bl	800118a <INA219_setConfig>
}
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000288 	.word	0x20000288
 80011f0:	2000028a 	.word	0x2000028a
 80011f4:	2000028c 	.word	0x2000028c

080011f8 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	4613      	mov	r3, r2
 8001204:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	79fa      	ldrb	r2, [r7, #7]
 8001210:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <INA219_Init+0x5c>)
 8001214:	2200      	movs	r2, #0
 8001216:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <INA219_Init+0x60>)
 800121a:	2200      	movs	r2, #0
 800121c:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	b29b      	uxth	r3, r3
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	b299      	uxth	r1, r3
 8001226:	2302      	movs	r3, #2
 8001228:	2203      	movs	r2, #3
 800122a:	68b8      	ldr	r0, [r7, #8]
 800122c:	f003 fb26 	bl	800487c <HAL_I2C_IsDeviceReady>
 8001230:	4603      	mov	r3, r0
 8001232:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 8001234:	7dfb      	ldrb	r3, [r7, #23]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d107      	bne.n	800124a <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f7ff ff84 	bl	8001148 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f7ff ffb3 	bl	80011ac <INA219_setCalibration_32V_2A>

		return 1;
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <INA219_Init+0x54>
	}

	else
	{
		return 0;
 800124a:	2300      	movs	r3, #0
	}
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	2000028a 	.word	0x2000028a
 8001258:	2000028c 	.word	0x2000028c

0800125c <ILI9341_Init>:
static void DC_H(void);
static void LED_H(void);

// Initialization
void ILI9341_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	ILI9341_Reset();
 8001260:	f000 f99d 	bl	800159e <ILI9341_Reset>
	ILI9341_SoftReset();
 8001264:	f000 f9ae 	bl	80015c4 <ILI9341_SoftReset>

	/* Power Control A */
	LCD_WR_REG(0xCB);
 8001268:	20cb      	movs	r0, #203	; 0xcb
 800126a:	f000 f9c5 	bl	80015f8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800126e:	2039      	movs	r0, #57	; 0x39
 8001270:	f000 f9dc 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001274:	202c      	movs	r0, #44	; 0x2c
 8001276:	f000 f9d9 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800127a:	2000      	movs	r0, #0
 800127c:	f000 f9d6 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001280:	2034      	movs	r0, #52	; 0x34
 8001282:	f000 f9d3 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001286:	2002      	movs	r0, #2
 8001288:	f000 f9d0 	bl	800162c <LCD_WR_DATA>
	/* Power Control B */
	LCD_WR_REG(0xCF);
 800128c:	20cf      	movs	r0, #207	; 0xcf
 800128e:	f000 f9b3 	bl	80015f8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001292:	2000      	movs	r0, #0
 8001294:	f000 f9ca 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001298:	20c1      	movs	r0, #193	; 0xc1
 800129a:	f000 f9c7 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x30);
 800129e:	2030      	movs	r0, #48	; 0x30
 80012a0:	f000 f9c4 	bl	800162c <LCD_WR_DATA>
	/* Driver timing control A */
	LCD_WR_REG(0xE8);
 80012a4:	20e8      	movs	r0, #232	; 0xe8
 80012a6:	f000 f9a7 	bl	80015f8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80012aa:	2085      	movs	r0, #133	; 0x85
 80012ac:	f000 f9be 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012b0:	2000      	movs	r0, #0
 80012b2:	f000 f9bb 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x78);
 80012b6:	2078      	movs	r0, #120	; 0x78
 80012b8:	f000 f9b8 	bl	800162c <LCD_WR_DATA>
	/* Driver timing control B */
	LCD_WR_REG(0xEA);
 80012bc:	20ea      	movs	r0, #234	; 0xea
 80012be:	f000 f99b 	bl	80015f8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012c2:	2000      	movs	r0, #0
 80012c4:	f000 f9b2 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012c8:	2000      	movs	r0, #0
 80012ca:	f000 f9af 	bl	800162c <LCD_WR_DATA>
	/* Power on Sequence control */
	LCD_WR_REG(0xED);
 80012ce:	20ed      	movs	r0, #237	; 0xed
 80012d0:	f000 f992 	bl	80015f8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80012d4:	2064      	movs	r0, #100	; 0x64
 80012d6:	f000 f9a9 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80012da:	2003      	movs	r0, #3
 80012dc:	f000 f9a6 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x12);
 80012e0:	2012      	movs	r0, #18
 80012e2:	f000 f9a3 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x81);
 80012e6:	2081      	movs	r0, #129	; 0x81
 80012e8:	f000 f9a0 	bl	800162c <LCD_WR_DATA>
	/* Pump ratio control */
	LCD_WR_REG(0xF7);
 80012ec:	20f7      	movs	r0, #247	; 0xf7
 80012ee:	f000 f983 	bl	80015f8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80012f2:	2020      	movs	r0, #32
 80012f4:	f000 f99a 	bl	800162c <LCD_WR_DATA>
	/* Power Control 1 */
	LCD_WR_REG(0xC0);
 80012f8:	20c0      	movs	r0, #192	; 0xc0
 80012fa:	f000 f97d 	bl	80015f8 <LCD_WR_REG>
	LCD_WR_DATA(0x10);
 80012fe:	2010      	movs	r0, #16
 8001300:	f000 f994 	bl	800162c <LCD_WR_DATA>
	/* Power Control 2 */
	LCD_WR_REG(0xC1);
 8001304:	20c1      	movs	r0, #193	; 0xc1
 8001306:	f000 f977 	bl	80015f8 <LCD_WR_REG>
	LCD_WR_DATA(0x10);
 800130a:	2010      	movs	r0, #16
 800130c:	f000 f98e 	bl	800162c <LCD_WR_DATA>
	/* VCOM Control 1 */
	LCD_WR_REG(0xC5);
 8001310:	20c5      	movs	r0, #197	; 0xc5
 8001312:	f000 f971 	bl	80015f8 <LCD_WR_REG>
	LCD_WR_DATA(0x3E);
 8001316:	203e      	movs	r0, #62	; 0x3e
 8001318:	f000 f988 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 800131c:	2028      	movs	r0, #40	; 0x28
 800131e:	f000 f985 	bl	800162c <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0xC7);
 8001322:	20c7      	movs	r0, #199	; 0xc7
 8001324:	f000 f968 	bl	80015f8 <LCD_WR_REG>
	LCD_WR_DATA(0x86);
 8001328:	2086      	movs	r0, #134	; 0x86
 800132a:	f000 f97f 	bl	800162c <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0x36);
 800132e:	2036      	movs	r0, #54	; 0x36
 8001330:	f000 f962 	bl	80015f8 <LCD_WR_REG>
	LCD_WR_DATA(0x48);
 8001334:	2048      	movs	r0, #72	; 0x48
 8001336:	f000 f979 	bl	800162c <LCD_WR_DATA>
	/* Pixel Format Set */
	LCD_WR_REG(0x3A);
 800133a:	203a      	movs	r0, #58	; 0x3a
 800133c:	f000 f95c 	bl	80015f8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);    //16bit
 8001340:	2055      	movs	r0, #85	; 0x55
 8001342:	f000 f973 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001346:	20b1      	movs	r0, #177	; 0xb1
 8001348:	f000 f956 	bl	80015f8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800134c:	2000      	movs	r0, #0
 800134e:	f000 f96d 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x18);
 8001352:	2018      	movs	r0, #24
 8001354:	f000 f96a 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x20); // Little Endian
#endif
	/* Display Function Control */
	LCD_WR_REG(0xB6);
 8001358:	20b6      	movs	r0, #182	; 0xb6
 800135a:	f000 f94d 	bl	80015f8 <LCD_WR_REG>
	LCD_WR_DATA(0x08);
 800135e:	2008      	movs	r0, #8
 8001360:	f000 f964 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x82);
 8001364:	2082      	movs	r0, #130	; 0x82
 8001366:	f000 f961 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x27);
 800136a:	2027      	movs	r0, #39	; 0x27
 800136c:	f000 f95e 	bl	800162c <LCD_WR_DATA>
	/* 3GAMMA FUNCTION DISABLE */
	LCD_WR_REG(0xF2);
 8001370:	20f2      	movs	r0, #242	; 0xf2
 8001372:	f000 f941 	bl	80015f8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001376:	2000      	movs	r0, #0
 8001378:	f000 f958 	bl	800162c <LCD_WR_DATA>
	/* GAMMA CURVE SELECTED */
	LCD_WR_REG(0x26); //Gamma set
 800137c:	2026      	movs	r0, #38	; 0x26
 800137e:	f000 f93b 	bl	80015f8 <LCD_WR_REG>
	LCD_WR_DATA(0x01); 	//Gamma Curve (G2.2)
 8001382:	2001      	movs	r0, #1
 8001384:	f000 f952 	bl	800162c <LCD_WR_DATA>
	//Positive Gamma  Correction
	LCD_WR_REG(0xE0);
 8001388:	20e0      	movs	r0, #224	; 0xe0
 800138a:	f000 f935 	bl	80015f8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800138e:	200f      	movs	r0, #15
 8001390:	f000 f94c 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x31);
 8001394:	2031      	movs	r0, #49	; 0x31
 8001396:	f000 f949 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 800139a:	202b      	movs	r0, #43	; 0x2b
 800139c:	f000 f946 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x0C);
 80013a0:	200c      	movs	r0, #12
 80013a2:	f000 f943 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80013a6:	200e      	movs	r0, #14
 80013a8:	f000 f940 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80013ac:	2008      	movs	r0, #8
 80013ae:	f000 f93d 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x4E);
 80013b2:	204e      	movs	r0, #78	; 0x4e
 80013b4:	f000 f93a 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0xF1);
 80013b8:	20f1      	movs	r0, #241	; 0xf1
 80013ba:	f000 f937 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x37);
 80013be:	2037      	movs	r0, #55	; 0x37
 80013c0:	f000 f934 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80013c4:	2007      	movs	r0, #7
 80013c6:	f000 f931 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80013ca:	2010      	movs	r0, #16
 80013cc:	f000 f92e 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80013d0:	2003      	movs	r0, #3
 80013d2:	f000 f92b 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80013d6:	200e      	movs	r0, #14
 80013d8:	f000 f928 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x09);
 80013dc:	2009      	movs	r0, #9
 80013de:	f000 f925 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 f922 	bl	800162c <LCD_WR_DATA>
	//Negative Gamma  Correction
	LCD_WR_REG(0xE1);
 80013e8:	20e1      	movs	r0, #225	; 0xe1
 80013ea:	f000 f905 	bl	80015f8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f000 f91c 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80013f4:	200e      	movs	r0, #14
 80013f6:	f000 f919 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x14);
 80013fa:	2014      	movs	r0, #20
 80013fc:	f000 f916 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001400:	2003      	movs	r0, #3
 8001402:	f000 f913 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001406:	2011      	movs	r0, #17
 8001408:	f000 f910 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800140c:	2007      	movs	r0, #7
 800140e:	f000 f90d 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x31);
 8001412:	2031      	movs	r0, #49	; 0x31
 8001414:	f000 f90a 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001418:	20c1      	movs	r0, #193	; 0xc1
 800141a:	f000 f907 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x48);
 800141e:	2048      	movs	r0, #72	; 0x48
 8001420:	f000 f904 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001424:	2008      	movs	r0, #8
 8001426:	f000 f901 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800142a:	200f      	movs	r0, #15
 800142c:	f000 f8fe 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x0C);
 8001430:	200c      	movs	r0, #12
 8001432:	f000 f8fb 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x31);
 8001436:	2031      	movs	r0, #49	; 0x31
 8001438:	f000 f8f8 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x36);
 800143c:	2036      	movs	r0, #54	; 0x36
 800143e:	f000 f8f5 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001442:	200f      	movs	r0, #15
 8001444:	f000 f8f2 	bl	800162c <LCD_WR_DATA>
	//EXIT SLEEP
	LCD_WR_REG(0x11);
 8001448:	2011      	movs	r0, #17
 800144a:	f000 f8d5 	bl	80015f8 <LCD_WR_REG>

	HAL_Delay(120);
 800144e:	2078      	movs	r0, #120	; 0x78
 8001450:	f001 fea4 	bl	800319c <HAL_Delay>

	//TURN ON DISPLAY
	LCD_WR_REG(0x29);
 8001454:	2029      	movs	r0, #41	; 0x29
 8001456:	f000 f8cf 	bl	80015f8 <LCD_WR_REG>
	LCD_WR_DATA(0x2C);
 800145a:	202c      	movs	r0, #44	; 0x2c
 800145c:	f000 f8e6 	bl	800162c <LCD_WR_DATA>

	LCD_direction(ROTATE_270);
 8001460:	2003      	movs	r0, #3
 8001462:	f000 f8fd 	bl	8001660 <LCD_direction>

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}

0800146a <ILI9341_SetWindow>:

void ILI9341_SetWindow(uint16_t start_x, uint16_t start_y, uint16_t end_x, uint16_t end_y)
{
 800146a:	b590      	push	{r4, r7, lr}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	4604      	mov	r4, r0
 8001472:	4608      	mov	r0, r1
 8001474:	4611      	mov	r1, r2
 8001476:	461a      	mov	r2, r3
 8001478:	4623      	mov	r3, r4
 800147a:	80fb      	strh	r3, [r7, #6]
 800147c:	4603      	mov	r3, r0
 800147e:	80bb      	strh	r3, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
 8001484:	4613      	mov	r3, r2
 8001486:	803b      	strh	r3, [r7, #0]
	// Set Window
	LCD_WR_REG(0x2a);
 8001488:	202a      	movs	r0, #42	; 0x2a
 800148a:	f000 f8b5 	bl	80015f8 <LCD_WR_REG>
	LCD_WR_DATA(start_x >> 8);
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	b29b      	uxth	r3, r3
 8001494:	b2db      	uxtb	r3, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f8c8 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_x);
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 f8c3 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(end_x >> 8);
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 f8bc 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_x);
 80014b4:	887b      	ldrh	r3, [r7, #2]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f8b7 	bl	800162c <LCD_WR_DATA>

	LCD_WR_REG(0x2b);
 80014be:	202b      	movs	r0, #43	; 0x2b
 80014c0:	f000 f89a 	bl	80015f8 <LCD_WR_REG>
	LCD_WR_DATA(start_y >> 8);
 80014c4:	88bb      	ldrh	r3, [r7, #4]
 80014c6:	0a1b      	lsrs	r3, r3, #8
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 f8ad 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_y);
 80014d2:	88bb      	ldrh	r3, [r7, #4]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f8a8 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(end_y >> 8);
 80014dc:	883b      	ldrh	r3, [r7, #0]
 80014de:	0a1b      	lsrs	r3, r3, #8
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 f8a1 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_y);
 80014ea:	883b      	ldrh	r3, [r7, #0]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f89c 	bl	800162c <LCD_WR_DATA>

}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd90      	pop	{r4, r7, pc}

080014fc <ConvHL>:
		Error_Handler();
	}
}

static void ConvHL(uint8_t *s, int32_t l)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
	uint8_t v;
	while (l > 0) {
 8001506:	e010      	b.n	800152a <ConvHL+0x2e>
		v = *(s+1);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	785b      	ldrb	r3, [r3, #1]
 800150c:	73fb      	strb	r3, [r7, #15]
		*(s+1) = *s;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3301      	adds	r3, #1
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	7812      	ldrb	r2, [r2, #0]
 8001516:	701a      	strb	r2, [r3, #0]
		*s = v;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7bfa      	ldrb	r2, [r7, #15]
 800151c:	701a      	strb	r2, [r3, #0]
		s += 2;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3302      	adds	r3, #2
 8001522:	607b      	str	r3, [r7, #4]
		l -= 2;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	3b02      	subs	r3, #2
 8001528:	603b      	str	r3, [r7, #0]
	while (l > 0) {
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	dceb      	bgt.n	8001508 <ConvHL+0xc>
	}
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <ILI9341_DrawBitmap>:

// Call this function after ILI9341_SetWindow
// This function is non blocked
// The variable for Callback is open. User should set by himself
void ILI9341_DrawBitmap(uint16_t w, uint16_t h, uint8_t *s)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	603a      	str	r2, [r7, #0]
 800154a:	80fb      	strh	r3, [r7, #6]
 800154c:	460b      	mov	r3, r1
 800154e:	80bb      	strh	r3, [r7, #4]
	// Enable to access GRAM
	LCD_WR_REG(0x2c);
 8001550:	202c      	movs	r0, #44	; 0x2c
 8001552:	f000 f851 	bl	80015f8 <LCD_WR_REG>

	DC_H();
 8001556:	f000 f8e7 	bl	8001728 <DC_H>
#if 0
	__HAL_SPI_DISABLE(&hspi1);
	hspi1.Instance->CR2 |= SPI_DATASIZE_16BIT; // Set 16 bit mode
	__HAL_SPI_ENABLE(&hspi1);
#endif
	ConvHL(s, (int32_t)w*h*2);
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	88ba      	ldrh	r2, [r7, #4]
 800155e:	fb02 f303 	mul.w	r3, r2, r3
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4619      	mov	r1, r3
 8001566:	6838      	ldr	r0, [r7, #0]
 8001568:	f7ff ffc8 	bl	80014fc <ConvHL>
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)s, w * h *2);
 800156c:	88fa      	ldrh	r2, [r7, #6]
 800156e:	88bb      	ldrh	r3, [r7, #4]
 8001570:	fb12 f303 	smulbb	r3, r2, r3
 8001574:	b29b      	uxth	r3, r3
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	b29b      	uxth	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	6839      	ldr	r1, [r7, #0]
 800157e:	4803      	ldr	r0, [pc, #12]	; (800158c <ILI9341_DrawBitmap+0x4c>)
 8001580:	f004 fc96 	bl	8005eb0 <HAL_SPI_Transmit_DMA>
#if 0
	__HAL_SPI_DISABLE(&hspi1);
	hspi1.Instance->CR2 &= ~(SPI_DATASIZE_16BIT); // Set 8 bit mode
	__HAL_SPI_ENABLE(&hspi1);
#endif
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200002ec 	.word	0x200002ec

08001590 <ILI9341_EndOfDrawBitmap>:

// User should call it at callback
void ILI9341_EndOfDrawBitmap(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
#if 0
	__HAL_SPI_DISABLE(&hspi1);
	hspi1.Instance->CR2 &= ~(SPI_DATASIZE_16BIT); // Set 8 bit mode
	__HAL_SPI_ENABLE(&hspi1);
#endif
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	af00      	add	r7, sp, #0
	RESET_L();
 80015a2:	f000 f891 	bl	80016c8 <RESET_L>
	HAL_Delay(100);
 80015a6:	2064      	movs	r0, #100	; 0x64
 80015a8:	f001 fdf8 	bl	800319c <HAL_Delay>
	RESET_H();
 80015ac:	f000 f898 	bl	80016e0 <RESET_H>
	HAL_Delay(100);
 80015b0:	2064      	movs	r0, #100	; 0x64
 80015b2:	f001 fdf3 	bl	800319c <HAL_Delay>
	CS_L();
 80015b6:	f000 f89f 	bl	80016f8 <CS_L>
	LED_H();
 80015ba:	f000 f8c1 	bl	8001740 <LED_H>
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <ILI9341_SoftReset>:

void ILI9341_SoftReset(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
	uint8_t cmd;
	cmd = 0x01; //Software reset
 80015ca:	2301      	movs	r3, #1
 80015cc:	71fb      	strb	r3, [r7, #7]
	DC_L();
 80015ce:	f000 f89f 	bl	8001710 <DC_L>
	if (HAL_SPI_Transmit(&hspi1, &cmd, 1, 1000) != HAL_OK) {
 80015d2:	1df9      	adds	r1, r7, #7
 80015d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d8:	2201      	movs	r2, #1
 80015da:	4806      	ldr	r0, [pc, #24]	; (80015f4 <ILI9341_SoftReset+0x30>)
 80015dc:	f004 fb2b 	bl	8005c36 <HAL_SPI_Transmit>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <ILI9341_SoftReset+0x26>
		Error_Handler();
 80015e6:	f001 f963 	bl	80028b0 <Error_Handler>
	}
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200002ec 	.word	0x200002ec

080015f8 <LCD_WR_REG>:


void LCD_WR_REG(uint8_t data)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
	DC_L();
 8001602:	f000 f885 	bl	8001710 <DC_L>
	if (HAL_SPI_Transmit(&hspi1, &data, 1, 1000) != HAL_OK) {
 8001606:	1df9      	adds	r1, r7, #7
 8001608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160c:	2201      	movs	r2, #1
 800160e:	4806      	ldr	r0, [pc, #24]	; (8001628 <LCD_WR_REG+0x30>)
 8001610:	f004 fb11 	bl	8005c36 <HAL_SPI_Transmit>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <LCD_WR_REG+0x26>
		Error_Handler();
 800161a:	f001 f949 	bl	80028b0 <Error_Handler>
	}
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200002ec 	.word	0x200002ec

0800162c <LCD_WR_DATA>:

static void LCD_WR_DATA(uint8_t data)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
	DC_H();
 8001636:	f000 f877 	bl	8001728 <DC_H>
	if (HAL_SPI_Transmit(&hspi1, &data, 1, 1000) != HAL_OK) {
 800163a:	1df9      	adds	r1, r7, #7
 800163c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001640:	2201      	movs	r2, #1
 8001642:	4806      	ldr	r0, [pc, #24]	; (800165c <LCD_WR_DATA+0x30>)
 8001644:	f004 faf7 	bl	8005c36 <HAL_SPI_Transmit>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <LCD_WR_DATA+0x26>
		Error_Handler();
 800164e:	f001 f92f 	bl	80028b0 <Error_Handler>
	}
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200002ec 	.word	0x200002ec

08001660 <LCD_direction>:
	spiDmaTransferComplete = 1;
}
*/

static void LCD_direction(LCD_Horizontal_t direction)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
	switch (direction) {
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	2b03      	cmp	r3, #3
 800166e:	d827      	bhi.n	80016c0 <LCD_direction+0x60>
 8001670:	a201      	add	r2, pc, #4	; (adr r2, 8001678 <LCD_direction+0x18>)
 8001672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001676:	bf00      	nop
 8001678:	08001689 	.word	0x08001689
 800167c:	08001697 	.word	0x08001697
 8001680:	080016a5 	.word	0x080016a5
 8001684:	080016b3 	.word	0x080016b3
	case ROTATE_0:
		LCD_WR_REG(0x36);
 8001688:	2036      	movs	r0, #54	; 0x36
 800168a:	f7ff ffb5 	bl	80015f8 <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 800168e:	2048      	movs	r0, #72	; 0x48
 8001690:	f7ff ffcc 	bl	800162c <LCD_WR_DATA>
		break;
 8001694:	e014      	b.n	80016c0 <LCD_direction+0x60>
	case ROTATE_90:
		LCD_WR_REG(0x36);
 8001696:	2036      	movs	r0, #54	; 0x36
 8001698:	f7ff ffae 	bl	80015f8 <LCD_WR_REG>
		LCD_WR_DATA(0x28);
 800169c:	2028      	movs	r0, #40	; 0x28
 800169e:	f7ff ffc5 	bl	800162c <LCD_WR_DATA>
		break;
 80016a2:	e00d      	b.n	80016c0 <LCD_direction+0x60>
	case ROTATE_180:
		LCD_WR_REG(0x36);
 80016a4:	2036      	movs	r0, #54	; 0x36
 80016a6:	f7ff ffa7 	bl	80015f8 <LCD_WR_REG>
		LCD_WR_DATA(0x88);
 80016aa:	2088      	movs	r0, #136	; 0x88
 80016ac:	f7ff ffbe 	bl	800162c <LCD_WR_DATA>
		break;
 80016b0:	e006      	b.n	80016c0 <LCD_direction+0x60>
	case ROTATE_270:
		LCD_WR_REG(0x36);
 80016b2:	2036      	movs	r0, #54	; 0x36
 80016b4:	f7ff ffa0 	bl	80015f8 <LCD_WR_REG>
		LCD_WR_DATA(0xE8);
 80016b8:	20e8      	movs	r0, #232	; 0xe8
 80016ba:	f7ff ffb7 	bl	800162c <LCD_WR_DATA>
		break;
 80016be:	bf00      	nop
	}
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <RESET_L>:

static void RESET_L(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2104      	movs	r1, #4
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <RESET_L+0x14>)
 80016d2:	f002 fc3b 	bl	8003f4c <HAL_GPIO_WritePin>
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40020800 	.word	0x40020800

080016e0 <RESET_H>:

static void RESET_H(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 80016e4:	2201      	movs	r2, #1
 80016e6:	2104      	movs	r1, #4
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <RESET_H+0x14>)
 80016ea:	f002 fc2f 	bl	8003f4c <HAL_GPIO_WritePin>
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40020800 	.word	0x40020800

080016f8 <CS_L>:

static void CS_L(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	2101      	movs	r1, #1
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <CS_L+0x14>)
 8001702:	f002 fc23 	bl	8003f4c <HAL_GPIO_WritePin>
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40020800 	.word	0x40020800

08001710 <DC_L>:

static void DC_L(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	2101      	movs	r1, #1
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <DC_L+0x14>)
 800171a:	f002 fc17 	bl	8003f4c <HAL_GPIO_WritePin>
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40020000 	.word	0x40020000

08001728 <DC_H>:

static void DC_H(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 800172c:	2201      	movs	r2, #1
 800172e:	2101      	movs	r1, #1
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <DC_H+0x14>)
 8001732:	f002 fc0b 	bl	8003f4c <HAL_GPIO_WritePin>
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40020000 	.word	0x40020000

08001740 <LED_H>:

static void LED_H(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001754:	f001 fce0 	bl	8003118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001758:	f000 f916 	bl	8001988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800175c:	f000 fabe 	bl	8001cdc <MX_GPIO_Init>
  MX_DMA_Init();
 8001760:	f000 fa7e 	bl	8001c60 <MX_DMA_Init>
  MX_SPI1_Init();
 8001764:	f000 f9bc 	bl	8001ae0 <MX_SPI1_Init>
  MX_CRC_Init();
 8001768:	f000 f978 	bl	8001a5c <MX_CRC_Init>
  MX_TIM7_Init();
 800176c:	f000 f9ee 	bl	8001b4c <MX_TIM7_Init>
  MX_USART3_UART_Init();
 8001770:	f000 fa4c 	bl	8001c0c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001774:	f000 fa20 	bl	8001bb8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001778:	f000 f984 	bl	8001a84 <MX_I2C1_Init>
  //MX_TouchGFX_Init();
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 800177c:	f00a fb3e 	bl	800bdfc <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
  HAL_Delay(50);
 8001780:	2032      	movs	r0, #50	; 0x32
 8001782:	f001 fd0b 	bl	800319c <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim7);
 8001786:	4853      	ldr	r0, [pc, #332]	; (80018d4 <main+0x184>)
 8001788:	f004 ff0c 	bl	80065a4 <HAL_TIM_Base_Start_IT>
  ILI9341_Init();
 800178c:	f7ff fd66 	bl	800125c <ILI9341_Init>
  MX_TouchGFX_Init();
 8001790:	f00a fb3b 	bl	800be0a <MX_TouchGFX_Init>

  memset(rxBuffer, 0, LORA_RX_BUF_SIZE);
 8001794:	2280      	movs	r2, #128	; 0x80
 8001796:	2100      	movs	r1, #0
 8001798:	484f      	ldr	r0, [pc, #316]	; (80018d8 <main+0x188>)
 800179a:	f026 fab3 	bl	8027d04 <memset>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuffer, LORA_RX_BUF_SIZE);
 800179e:	2280      	movs	r2, #128	; 0x80
 80017a0:	494d      	ldr	r1, [pc, #308]	; (80018d8 <main+0x188>)
 80017a2:	484e      	ldr	r0, [pc, #312]	; (80018dc <main+0x18c>)
 80017a4:	f005 faad 	bl	8006d02 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80017a8:	4b4d      	ldr	r3, [pc, #308]	; (80018e0 <main+0x190>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4b4c      	ldr	r3, [pc, #304]	; (80018e0 <main+0x190>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0208 	bic.w	r2, r2, #8
 80017b6:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80017b8:	f006 fc3c 	bl	8008034 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of transmitQ */
  transmitQHandle = osMessageQueueNew (4, sizeof(String_t), &transmitQ_attributes);
 80017bc:	4a49      	ldr	r2, [pc, #292]	; (80018e4 <main+0x194>)
 80017be:	2108      	movs	r1, #8
 80017c0:	2004      	movs	r0, #4
 80017c2:	f006 ff33 	bl	800862c <osMessageQueueNew>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4a47      	ldr	r2, [pc, #284]	; (80018e8 <main+0x198>)
 80017ca:	6013      	str	r3, [r2, #0]

  /* creation of receiveQ */
  receiveQHandle = osMessageQueueNew (4, sizeof(String_t), &receiveQ_attributes);
 80017cc:	4a47      	ldr	r2, [pc, #284]	; (80018ec <main+0x19c>)
 80017ce:	2108      	movs	r1, #8
 80017d0:	2004      	movs	r0, #4
 80017d2:	f006 ff2b 	bl	800862c <osMessageQueueNew>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4a45      	ldr	r2, [pc, #276]	; (80018f0 <main+0x1a0>)
 80017da:	6013      	str	r3, [r2, #0]

  /* creation of latitudeQ */
  latitudeQHandle = osMessageQueueNew (2, sizeof(float), &latitudeQ_attributes);
 80017dc:	4a45      	ldr	r2, [pc, #276]	; (80018f4 <main+0x1a4>)
 80017de:	2104      	movs	r1, #4
 80017e0:	2002      	movs	r0, #2
 80017e2:	f006 ff23 	bl	800862c <osMessageQueueNew>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4a43      	ldr	r2, [pc, #268]	; (80018f8 <main+0x1a8>)
 80017ea:	6013      	str	r3, [r2, #0]

  /* creation of longitudeQ */
  longitudeQHandle = osMessageQueueNew (2, sizeof(float), &longitudeQ_attributes);
 80017ec:	4a43      	ldr	r2, [pc, #268]	; (80018fc <main+0x1ac>)
 80017ee:	2104      	movs	r1, #4
 80017f0:	2002      	movs	r0, #2
 80017f2:	f006 ff1b 	bl	800862c <osMessageQueueNew>
 80017f6:	4603      	mov	r3, r0
 80017f8:	4a41      	ldr	r2, [pc, #260]	; (8001900 <main+0x1b0>)
 80017fa:	6013      	str	r3, [r2, #0]

  /* creation of testQ */
  testQHandle = osMessageQueueNew (1, sizeof(uint16_t), &testQ_attributes);
 80017fc:	4a41      	ldr	r2, [pc, #260]	; (8001904 <main+0x1b4>)
 80017fe:	2102      	movs	r1, #2
 8001800:	2001      	movs	r0, #1
 8001802:	f006 ff13 	bl	800862c <osMessageQueueNew>
 8001806:	4603      	mov	r3, r0
 8001808:	4a3f      	ldr	r2, [pc, #252]	; (8001908 <main+0x1b8>)
 800180a:	6013      	str	r3, [r2, #0]

  /* creation of keypadQ */
  keypadQHandle = osMessageQueueNew (1, sizeof(uint8_t), &keypadQ_attributes);
 800180c:	4a3f      	ldr	r2, [pc, #252]	; (800190c <main+0x1bc>)
 800180e:	2101      	movs	r1, #1
 8001810:	2001      	movs	r0, #1
 8001812:	f006 ff0b 	bl	800862c <osMessageQueueNew>
 8001816:	4603      	mov	r3, r0
 8001818:	4a3d      	ldr	r2, [pc, #244]	; (8001910 <main+0x1c0>)
 800181a:	6013      	str	r3, [r2, #0]

  /* creation of gpsLengthQ */
  gpsLengthQHandle = osMessageQueueNew (2, sizeof(uint16_t), &gpsLengthQ_attributes);
 800181c:	4a3d      	ldr	r2, [pc, #244]	; (8001914 <main+0x1c4>)
 800181e:	2102      	movs	r1, #2
 8001820:	2002      	movs	r0, #2
 8001822:	f006 ff03 	bl	800862c <osMessageQueueNew>
 8001826:	4603      	mov	r3, r0
 8001828:	4a3b      	ldr	r2, [pc, #236]	; (8001918 <main+0x1c8>)
 800182a:	6013      	str	r3, [r2, #0]

  /* creation of currentQ */
  currentQHandle = osMessageQueueNew (2, sizeof(uint16_t), &currentQ_attributes);
 800182c:	4a3b      	ldr	r2, [pc, #236]	; (800191c <main+0x1cc>)
 800182e:	2102      	movs	r1, #2
 8001830:	2002      	movs	r0, #2
 8001832:	f006 fefb 	bl	800862c <osMessageQueueNew>
 8001836:	4603      	mov	r3, r0
 8001838:	4a39      	ldr	r2, [pc, #228]	; (8001920 <main+0x1d0>)
 800183a:	6013      	str	r3, [r2, #0]

  /* creation of voltageQ */
  voltageQHandle = osMessageQueueNew (2, sizeof(uint16_t), &voltageQ_attributes);
 800183c:	4a39      	ldr	r2, [pc, #228]	; (8001924 <main+0x1d4>)
 800183e:	2102      	movs	r1, #2
 8001840:	2002      	movs	r0, #2
 8001842:	f006 fef3 	bl	800862c <osMessageQueueNew>
 8001846:	4603      	mov	r3, r0
 8001848:	4a37      	ldr	r2, [pc, #220]	; (8001928 <main+0x1d8>)
 800184a:	6013      	str	r3, [r2, #0]

  /* creation of rxLengthQ */
  rxLengthQHandle = osMessageQueueNew (2, sizeof(uint16_t), &rxLengthQ_attributes);
 800184c:	4a37      	ldr	r2, [pc, #220]	; (800192c <main+0x1dc>)
 800184e:	2102      	movs	r1, #2
 8001850:	2002      	movs	r0, #2
 8001852:	f006 feeb 	bl	800862c <osMessageQueueNew>
 8001856:	4603      	mov	r3, r0
 8001858:	4a35      	ldr	r2, [pc, #212]	; (8001930 <main+0x1e0>)
 800185a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800185c:	4a35      	ldr	r2, [pc, #212]	; (8001934 <main+0x1e4>)
 800185e:	2100      	movs	r1, #0
 8001860:	4835      	ldr	r0, [pc, #212]	; (8001938 <main+0x1e8>)
 8001862:	f006 fc46 	bl	80080f2 <osThreadNew>
 8001866:	4603      	mov	r3, r0
 8001868:	4a34      	ldr	r2, [pc, #208]	; (800193c <main+0x1ec>)
 800186a:	6013      	str	r3, [r2, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(StartBlinkTask, NULL, &blinkTask_attributes);
 800186c:	4a34      	ldr	r2, [pc, #208]	; (8001940 <main+0x1f0>)
 800186e:	2100      	movs	r1, #0
 8001870:	4834      	ldr	r0, [pc, #208]	; (8001944 <main+0x1f4>)
 8001872:	f006 fc3e 	bl	80080f2 <osThreadNew>
 8001876:	4603      	mov	r3, r0
 8001878:	4a33      	ldr	r2, [pc, #204]	; (8001948 <main+0x1f8>)
 800187a:	6013      	str	r3, [r2, #0]

  /* creation of gpsTask */
  gpsTaskHandle = osThreadNew(StartGPSTask, NULL, &gpsTask_attributes);
 800187c:	4a33      	ldr	r2, [pc, #204]	; (800194c <main+0x1fc>)
 800187e:	2100      	movs	r1, #0
 8001880:	4833      	ldr	r0, [pc, #204]	; (8001950 <main+0x200>)
 8001882:	f006 fc36 	bl	80080f2 <osThreadNew>
 8001886:	4603      	mov	r3, r0
 8001888:	4a32      	ldr	r2, [pc, #200]	; (8001954 <main+0x204>)
 800188a:	6013      	str	r3, [r2, #0]

  /* creation of keypadScanTask */
  keypadScanTaskHandle = osThreadNew(StartKeypadScanTask, NULL, &keypadScanTask_attributes);
 800188c:	4a32      	ldr	r2, [pc, #200]	; (8001958 <main+0x208>)
 800188e:	2100      	movs	r1, #0
 8001890:	4832      	ldr	r0, [pc, #200]	; (800195c <main+0x20c>)
 8001892:	f006 fc2e 	bl	80080f2 <osThreadNew>
 8001896:	4603      	mov	r3, r0
 8001898:	4a31      	ldr	r2, [pc, #196]	; (8001960 <main+0x210>)
 800189a:	6013      	str	r3, [r2, #0]

  /* creation of INA219Task */
  INA219TaskHandle = osThreadNew(StartINATask, NULL, &INA219Task_attributes);
 800189c:	4a31      	ldr	r2, [pc, #196]	; (8001964 <main+0x214>)
 800189e:	2100      	movs	r1, #0
 80018a0:	4831      	ldr	r0, [pc, #196]	; (8001968 <main+0x218>)
 80018a2:	f006 fc26 	bl	80080f2 <osThreadNew>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4a30      	ldr	r2, [pc, #192]	; (800196c <main+0x21c>)
 80018aa:	6013      	str	r3, [r2, #0]

  /* creation of loraTask */
  loraTaskHandle = osThreadNew(StartLoRaTask, NULL, &loraTask_attributes);
 80018ac:	4a30      	ldr	r2, [pc, #192]	; (8001970 <main+0x220>)
 80018ae:	2100      	movs	r1, #0
 80018b0:	4830      	ldr	r0, [pc, #192]	; (8001974 <main+0x224>)
 80018b2:	f006 fc1e 	bl	80080f2 <osThreadNew>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a2f      	ldr	r2, [pc, #188]	; (8001978 <main+0x228>)
 80018ba:	6013      	str	r3, [r2, #0]

  /* creation of loraSendTask */
  loraSendTaskHandle = osThreadNew(StartLoraSendTask, NULL, &loraSendTask_attributes);
 80018bc:	4a2f      	ldr	r2, [pc, #188]	; (800197c <main+0x22c>)
 80018be:	2100      	movs	r1, #0
 80018c0:	482f      	ldr	r0, [pc, #188]	; (8001980 <main+0x230>)
 80018c2:	f006 fc16 	bl	80080f2 <osThreadNew>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4a2e      	ldr	r2, [pc, #184]	; (8001984 <main+0x234>)
 80018ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80018cc:	f006 fbd6 	bl	800807c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <main+0x180>
 80018d2:	bf00      	nop
 80018d4:	200003a4 	.word	0x200003a4
 80018d8:	20000578 	.word	0x20000578
 80018dc:	200003ec 	.word	0x200003ec
 80018e0:	20000474 	.word	0x20000474
 80018e4:	0802d7b4 	.word	0x0802d7b4
 80018e8:	20000550 	.word	0x20000550
 80018ec:	0802d7cc 	.word	0x0802d7cc
 80018f0:	20000554 	.word	0x20000554
 80018f4:	0802d7e4 	.word	0x0802d7e4
 80018f8:	20000558 	.word	0x20000558
 80018fc:	0802d7fc 	.word	0x0802d7fc
 8001900:	2000055c 	.word	0x2000055c
 8001904:	0802d814 	.word	0x0802d814
 8001908:	20000560 	.word	0x20000560
 800190c:	0802d82c 	.word	0x0802d82c
 8001910:	20000564 	.word	0x20000564
 8001914:	0802d844 	.word	0x0802d844
 8001918:	20000568 	.word	0x20000568
 800191c:	0802d85c 	.word	0x0802d85c
 8001920:	2000056c 	.word	0x2000056c
 8001924:	0802d874 	.word	0x0802d874
 8001928:	20000570 	.word	0x20000570
 800192c:	0802d88c 	.word	0x0802d88c
 8001930:	20000574 	.word	0x20000574
 8001934:	0802d6b8 	.word	0x0802d6b8
 8001938:	08001fb1 	.word	0x08001fb1
 800193c:	20000534 	.word	0x20000534
 8001940:	0802d6dc 	.word	0x0802d6dc
 8001944:	08001fc9 	.word	0x08001fc9
 8001948:	20000538 	.word	0x20000538
 800194c:	0802d700 	.word	0x0802d700
 8001950:	08002009 	.word	0x08002009
 8001954:	2000053c 	.word	0x2000053c
 8001958:	0802d724 	.word	0x0802d724
 800195c:	08002475 	.word	0x08002475
 8001960:	20000540 	.word	0x20000540
 8001964:	0802d748 	.word	0x0802d748
 8001968:	080026ed 	.word	0x080026ed
 800196c:	20000544 	.word	0x20000544
 8001970:	0802d76c 	.word	0x0802d76c
 8001974:	08002785 	.word	0x08002785
 8001978:	20000548 	.word	0x20000548
 800197c:	0802d790 	.word	0x0802d790
 8001980:	08002799 	.word	0x08002799
 8001984:	2000054c 	.word	0x2000054c

08001988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b094      	sub	sp, #80	; 0x50
 800198c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198e:	f107 0320 	add.w	r3, r7, #32
 8001992:	2230      	movs	r2, #48	; 0x30
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f026 f9b4 	bl	8027d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ac:	2300      	movs	r3, #0
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <SystemClock_Config+0xcc>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	4a27      	ldr	r2, [pc, #156]	; (8001a54 <SystemClock_Config+0xcc>)
 80019b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ba:	6413      	str	r3, [r2, #64]	; 0x40
 80019bc:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <SystemClock_Config+0xcc>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c8:	2300      	movs	r3, #0
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <SystemClock_Config+0xd0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a21      	ldr	r2, [pc, #132]	; (8001a58 <SystemClock_Config+0xd0>)
 80019d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <SystemClock_Config+0xd0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019e4:	2301      	movs	r3, #1
 80019e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ee:	2302      	movs	r3, #2
 80019f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019f8:	2304      	movs	r3, #4
 80019fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019fc:	23a8      	movs	r3, #168	; 0xa8
 80019fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a00:	2302      	movs	r3, #2
 8001a02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a04:	2307      	movs	r3, #7
 8001a06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a08:	f107 0320 	add.w	r3, r7, #32
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f003 fbbf 	bl	8005190 <HAL_RCC_OscConfig>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a18:	f000 ff4a 	bl	80028b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a1c:	230f      	movs	r3, #15
 8001a1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a20:	2302      	movs	r3, #2
 8001a22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	2105      	movs	r1, #5
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f003 fe20 	bl	8005680 <HAL_RCC_ClockConfig>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a46:	f000 ff33 	bl	80028b0 <Error_Handler>
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	3750      	adds	r7, #80	; 0x50
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40007000 	.word	0x40007000

08001a5c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <MX_CRC_Init+0x20>)
 8001a62:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <MX_CRC_Init+0x24>)
 8001a64:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001a66:	4805      	ldr	r0, [pc, #20]	; (8001a7c <MX_CRC_Init+0x20>)
 8001a68:	f001 fc9e 	bl	80033a8 <HAL_CRC_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001a72:	f000 ff1d 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000290 	.word	0x20000290
 8001a80:	40023000 	.word	0x40023000

08001a84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <MX_I2C1_Init+0x50>)
 8001a8a:	4a13      	ldr	r2, [pc, #76]	; (8001ad8 <MX_I2C1_Init+0x54>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <MX_I2C1_Init+0x50>)
 8001a90:	4a12      	ldr	r2, [pc, #72]	; (8001adc <MX_I2C1_Init+0x58>)
 8001a92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <MX_I2C1_Init+0x50>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <MX_I2C1_Init+0x50>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <MX_I2C1_Init+0x50>)
 8001aa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aa6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <MX_I2C1_Init+0x50>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <MX_I2C1_Init+0x50>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ab4:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <MX_I2C1_Init+0x50>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MX_I2C1_Init+0x50>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ac0:	4804      	ldr	r0, [pc, #16]	; (8001ad4 <MX_I2C1_Init+0x50>)
 8001ac2:	f002 fa77 	bl	8003fb4 <HAL_I2C_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001acc:	f000 fef0 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000298 	.word	0x20000298
 8001ad8:	40005400 	.word	0x40005400
 8001adc:	000186a0 	.word	0x000186a0

08001ae0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ae4:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <MX_SPI1_Init+0x64>)
 8001ae6:	4a18      	ldr	r2, [pc, #96]	; (8001b48 <MX_SPI1_Init+0x68>)
 8001ae8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <MX_SPI1_Init+0x64>)
 8001aec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001af0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001af2:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <MX_SPI1_Init+0x64>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <MX_SPI1_Init+0x64>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <MX_SPI1_Init+0x64>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <MX_SPI1_Init+0x64>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <MX_SPI1_Init+0x64>)
 8001b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b12:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <MX_SPI1_Init+0x64>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <MX_SPI1_Init+0x64>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_SPI1_Init+0x64>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b24:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <MX_SPI1_Init+0x64>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <MX_SPI1_Init+0x64>)
 8001b2c:	220a      	movs	r2, #10
 8001b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b30:	4804      	ldr	r0, [pc, #16]	; (8001b44 <MX_SPI1_Init+0x64>)
 8001b32:	f003 fff7 	bl	8005b24 <HAL_SPI_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b3c:	f000 feb8 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	200002ec 	.word	0x200002ec
 8001b48:	40013000 	.word	0x40013000

08001b4c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b52:	463b      	mov	r3, r7
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <MX_TIM7_Init+0x64>)
 8001b5c:	4a15      	ldr	r2, [pc, #84]	; (8001bb4 <MX_TIM7_Init+0x68>)
 8001b5e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 168 - 1;
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <MX_TIM7_Init+0x64>)
 8001b62:	22a7      	movs	r2, #167	; 0xa7
 8001b64:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <MX_TIM7_Init+0x64>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 30000 - 1;
 8001b6c:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <MX_TIM7_Init+0x64>)
 8001b6e:	f247 522f 	movw	r2, #29999	; 0x752f
 8001b72:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b74:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <MX_TIM7_Init+0x64>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001b7a:	480d      	ldr	r0, [pc, #52]	; (8001bb0 <MX_TIM7_Init+0x64>)
 8001b7c:	f004 fcc2 	bl	8006504 <HAL_TIM_Base_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001b86:	f000 fe93 	bl	80028b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001b92:	463b      	mov	r3, r7
 8001b94:	4619      	mov	r1, r3
 8001b96:	4806      	ldr	r0, [pc, #24]	; (8001bb0 <MX_TIM7_Init+0x64>)
 8001b98:	f004 ff44 	bl	8006a24 <HAL_TIMEx_MasterConfigSynchronization>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001ba2:	f000 fe85 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200003a4 	.word	0x200003a4
 8001bb4:	40001400 	.word	0x40001400

08001bb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bbe:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <MX_USART2_UART_Init+0x50>)
 8001bc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bc4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bde:	220c      	movs	r2, #12
 8001be0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bee:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bf0:	f004 ffa8 	bl	8006b44 <HAL_UART_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bfa:	f000 fe59 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200003ec 	.word	0x200003ec
 8001c08:	40004400 	.word	0x40004400

08001c0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <MX_USART3_UART_Init+0x4c>)
 8001c12:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <MX_USART3_UART_Init+0x50>)
 8001c14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <MX_USART3_UART_Init+0x4c>)
 8001c18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <MX_USART3_UART_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <MX_USART3_UART_Init+0x4c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <MX_USART3_UART_Init+0x4c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <MX_USART3_UART_Init+0x4c>)
 8001c32:	220c      	movs	r2, #12
 8001c34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <MX_USART3_UART_Init+0x4c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <MX_USART3_UART_Init+0x4c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c42:	4805      	ldr	r0, [pc, #20]	; (8001c58 <MX_USART3_UART_Init+0x4c>)
 8001c44:	f004 ff7e 	bl	8006b44 <HAL_UART_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c4e:	f000 fe2f 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000430 	.word	0x20000430
 8001c5c:	40004800 	.word	0x40004800

08001c60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <MX_DMA_Init+0x78>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a1a      	ldr	r2, [pc, #104]	; (8001cd8 <MX_DMA_Init+0x78>)
 8001c70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <MX_DMA_Init+0x78>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	603b      	str	r3, [r7, #0]
 8001c86:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <MX_DMA_Init+0x78>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a13      	ldr	r2, [pc, #76]	; (8001cd8 <MX_DMA_Init+0x78>)
 8001c8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <MX_DMA_Init+0x78>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2105      	movs	r1, #5
 8001ca2:	200c      	movs	r0, #12
 8001ca4:	f001 fb56 	bl	8003354 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001ca8:	200c      	movs	r0, #12
 8001caa:	f001 fb6f 	bl	800338c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2105      	movs	r1, #5
 8001cb2:	2010      	movs	r0, #16
 8001cb4:	f001 fb4e 	bl	8003354 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001cb8:	2010      	movs	r0, #16
 8001cba:	f001 fb67 	bl	800338c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2105      	movs	r1, #5
 8001cc2:	203b      	movs	r0, #59	; 0x3b
 8001cc4:	f001 fb46 	bl	8003354 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001cc8:	203b      	movs	r0, #59	; 0x3b
 8001cca:	f001 fb5f 	bl	800338c <HAL_NVIC_EnableIRQ>

}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800

08001cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08c      	sub	sp, #48	; 0x30
 8001ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce2:	f107 031c 	add.w	r3, r7, #28
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
 8001cf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	4b7e      	ldr	r3, [pc, #504]	; (8001ef0 <MX_GPIO_Init+0x214>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a7d      	ldr	r2, [pc, #500]	; (8001ef0 <MX_GPIO_Init+0x214>)
 8001cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b7b      	ldr	r3, [pc, #492]	; (8001ef0 <MX_GPIO_Init+0x214>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	4b77      	ldr	r3, [pc, #476]	; (8001ef0 <MX_GPIO_Init+0x214>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a76      	ldr	r2, [pc, #472]	; (8001ef0 <MX_GPIO_Init+0x214>)
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b74      	ldr	r3, [pc, #464]	; (8001ef0 <MX_GPIO_Init+0x214>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	4b70      	ldr	r3, [pc, #448]	; (8001ef0 <MX_GPIO_Init+0x214>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a6f      	ldr	r2, [pc, #444]	; (8001ef0 <MX_GPIO_Init+0x214>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b6d      	ldr	r3, [pc, #436]	; (8001ef0 <MX_GPIO_Init+0x214>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	4b69      	ldr	r3, [pc, #420]	; (8001ef0 <MX_GPIO_Init+0x214>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a68      	ldr	r2, [pc, #416]	; (8001ef0 <MX_GPIO_Init+0x214>)
 8001d50:	f043 0310 	orr.w	r3, r3, #16
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b66      	ldr	r3, [pc, #408]	; (8001ef0 <MX_GPIO_Init+0x214>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0310 	and.w	r3, r3, #16
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	4b62      	ldr	r3, [pc, #392]	; (8001ef0 <MX_GPIO_Init+0x214>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a61      	ldr	r2, [pc, #388]	; (8001ef0 <MX_GPIO_Init+0x214>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b5f      	ldr	r3, [pc, #380]	; (8001ef0 <MX_GPIO_Init+0x214>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4b5b      	ldr	r3, [pc, #364]	; (8001ef0 <MX_GPIO_Init+0x214>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a5a      	ldr	r2, [pc, #360]	; (8001ef0 <MX_GPIO_Init+0x214>)
 8001d88:	f043 0308 	orr.w	r3, r3, #8
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b58      	ldr	r3, [pc, #352]	; (8001ef0 <MX_GPIO_Init+0x214>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_NSS_Pin|RESET_Pin, GPIO_PIN_RESET);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2105      	movs	r1, #5
 8001d9e:	4855      	ldr	r0, [pc, #340]	; (8001ef4 <MX_GPIO_Init+0x218>)
 8001da0:	f002 f8d4 	bl	8003f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2101      	movs	r1, #1
 8001da8:	4853      	ldr	r0, [pc, #332]	; (8001ef8 <MX_GPIO_Init+0x21c>)
 8001daa:	f002 f8cf 	bl	8003f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001dae:	2201      	movs	r2, #1
 8001db0:	2110      	movs	r1, #16
 8001db2:	4850      	ldr	r0, [pc, #320]	; (8001ef4 <MX_GPIO_Init+0x218>)
 8001db4:	f002 f8ca 	bl	8003f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, GPIO_PIN_SET);
 8001db8:	2201      	movs	r2, #1
 8001dba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dbe:	484f      	ldr	r0, [pc, #316]	; (8001efc <MX_GPIO_Init+0x220>)
 8001dc0:	f002 f8c4 	bl	8003f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8001dca:	484c      	ldr	r0, [pc, #304]	; (8001efc <MX_GPIO_Init+0x220>)
 8001dcc:	f002 f8be 	bl	8003f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, M0_Pin|M1_Pin, GPIO_PIN_RESET);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	210c      	movs	r1, #12
 8001dd4:	484a      	ldr	r0, [pc, #296]	; (8001f00 <MX_GPIO_Init+0x224>)
 8001dd6:	f002 f8b9 	bl	8003f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYPAD_R1_Pin|KEYPAD_R2_Pin|KEYPAD_R3_Pin|KEYPAD_R4_Pin, GPIO_PIN_SET);
 8001dda:	2201      	movs	r2, #1
 8001ddc:	21f0      	movs	r1, #240	; 0xf0
 8001dde:	4848      	ldr	r0, [pc, #288]	; (8001f00 <MX_GPIO_Init+0x224>)
 8001de0:	f002 f8b4 	bl	8003f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8001de4:	2301      	movs	r3, #1
 8001de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de8:	2301      	movs	r3, #1
 8001dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df0:	2302      	movs	r3, #2
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8001df4:	f107 031c 	add.w	r3, r7, #28
 8001df8:	4619      	mov	r1, r3
 8001dfa:	483e      	ldr	r0, [pc, #248]	; (8001ef4 <MX_GPIO_Init+0x218>)
 8001dfc:	f001 fef2 	bl	8003be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin LED_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|LED_Pin;
 8001e00:	2314      	movs	r3, #20
 8001e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e04:	2301      	movs	r3, #1
 8001e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	4619      	mov	r1, r3
 8001e16:	4837      	ldr	r0, [pc, #220]	; (8001ef4 <MX_GPIO_Init+0x218>)
 8001e18:	f001 fee4 	bl	8003be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DC_Pin */
  GPIO_InitStruct.Pin = DC_Pin;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e20:	2301      	movs	r3, #1
 8001e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	4619      	mov	r1, r3
 8001e32:	4831      	ldr	r0, [pc, #196]	; (8001ef8 <MX_GPIO_Init+0x21c>)
 8001e34:	f001 fed6 	bl	8003be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_CS_Pin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 8001e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e46:	2303      	movs	r3, #3
 8001e48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 8001e4a:	f107 031c 	add.w	r3, r7, #28
 8001e4e:	4619      	mov	r1, r3
 8001e50:	482a      	ldr	r0, [pc, #168]	; (8001efc <MX_GPIO_Init+0x220>)
 8001e52:	f001 fec7 	bl	8003be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin;
 8001e56:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8001e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4823      	ldr	r0, [pc, #140]	; (8001efc <MX_GPIO_Init+0x220>)
 8001e70:	f001 feb8 	bl	8003be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8001e74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	4619      	mov	r1, r3
 8001e88:	481c      	ldr	r0, [pc, #112]	; (8001efc <MX_GPIO_Init+0x220>)
 8001e8a:	f001 feab 	bl	8003be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ea0:	230a      	movs	r3, #10
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea4:	f107 031c 	add.w	r3, r7, #28
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4813      	ldr	r0, [pc, #76]	; (8001ef8 <MX_GPIO_Init+0x21c>)
 8001eac:	f001 fe9a 	bl	8003be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin KEYPAD_R1_Pin KEYPAD_R2_Pin
                           KEYPAD_R3_Pin KEYPAD_R4_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|KEYPAD_R1_Pin|KEYPAD_R2_Pin
 8001eb0:	23fc      	movs	r3, #252	; 0xfc
 8001eb2:	61fb      	str	r3, [r7, #28]
                          |KEYPAD_R3_Pin|KEYPAD_R4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ec0:	f107 031c 	add.w	r3, r7, #28
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	480e      	ldr	r0, [pc, #56]	; (8001f00 <MX_GPIO_Init+0x224>)
 8001ec8:	f001 fe8c 	bl	8003be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_C1_Pin KEYPAD_C2_Pin KEYPAD_C3_Pin KEYPAD_C4_Pin */
  GPIO_InitStruct.Pin = KEYPAD_C1_Pin|KEYPAD_C2_Pin|KEYPAD_C3_Pin|KEYPAD_C4_Pin;
 8001ecc:	f44f 734a 	mov.w	r3, #808	; 0x328
 8001ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4808      	ldr	r0, [pc, #32]	; (8001f04 <MX_GPIO_Init+0x228>)
 8001ee2:	f001 fe7f 	bl	8003be4 <HAL_GPIO_Init>

}
 8001ee6:	bf00      	nop
 8001ee8:	3730      	adds	r7, #48	; 0x30
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020800 	.word	0x40020800
 8001ef8:	40020000 	.word	0x40020000
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40020c00 	.word	0x40020c00
 8001f04:	40020400 	.word	0x40020400

08001f08 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
extern void touchgfxSignalVSync(void);

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	807b      	strh	r3, [r7, #2]
	static String_t rxQueueSend;
	if(huart->Instance == USART3){
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a1c      	ldr	r2, [pc, #112]	; (8001f8c <HAL_UARTEx_RxEventCallback+0x84>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d10d      	bne.n	8001f3a <HAL_UARTEx_RxEventCallback+0x32>
		//GPSUSARTLength = Size;
		osMessageQueuePut(gpsLengthQHandle, &Size, 0U, 0U);
 8001f1e:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <HAL_UARTEx_RxEventCallback+0x88>)
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	1cb9      	adds	r1, r7, #2
 8001f24:	2300      	movs	r3, #0
 8001f26:	2200      	movs	r2, #0
 8001f28:	f006 fbf4 	bl	8008714 <osMessageQueuePut>
		osThreadFlagsSet(gpsTaskHandle, 0x01);
 8001f2c:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_UARTEx_RxEventCallback+0x8c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2101      	movs	r1, #1
 8001f32:	4618      	mov	r0, r3
 8001f34:	f006 f970 	bl	8008218 <osThreadFlagsSet>

		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuffer, LORA_RX_BUF_SIZE);
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);

	}
}
 8001f38:	e024      	b.n	8001f84 <HAL_UARTEx_RxEventCallback+0x7c>
	else if(huart->Instance == USART2){
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a16      	ldr	r2, [pc, #88]	; (8001f98 <HAL_UARTEx_RxEventCallback+0x90>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d11f      	bne.n	8001f84 <HAL_UARTEx_RxEventCallback+0x7c>
		rxQueueSend.message = rxBuffer;
 8001f44:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <HAL_UARTEx_RxEventCallback+0x94>)
 8001f46:	4a16      	ldr	r2, [pc, #88]	; (8001fa0 <HAL_UARTEx_RxEventCallback+0x98>)
 8001f48:	601a      	str	r2, [r3, #0]
		rxQueueSend.message[Size] = '\0';
 8001f4a:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <HAL_UARTEx_RxEventCallback+0x94>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	887a      	ldrh	r2, [r7, #2]
 8001f50:	4413      	add	r3, r2
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
		rxQueueSend.length = Size;
 8001f56:	887a      	ldrh	r2, [r7, #2]
 8001f58:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <HAL_UARTEx_RxEventCallback+0x94>)
 8001f5a:	809a      	strh	r2, [r3, #4]
		osMessageQueuePut(receiveQHandle, &rxQueueSend, 0U, 0U);
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <HAL_UARTEx_RxEventCallback+0x9c>)
 8001f5e:	6818      	ldr	r0, [r3, #0]
 8001f60:	2300      	movs	r3, #0
 8001f62:	2200      	movs	r2, #0
 8001f64:	490d      	ldr	r1, [pc, #52]	; (8001f9c <HAL_UARTEx_RxEventCallback+0x94>)
 8001f66:	f006 fbd5 	bl	8008714 <osMessageQueuePut>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuffer, LORA_RX_BUF_SIZE);
 8001f6a:	2280      	movs	r2, #128	; 0x80
 8001f6c:	490c      	ldr	r1, [pc, #48]	; (8001fa0 <HAL_UARTEx_RxEventCallback+0x98>)
 8001f6e:	480e      	ldr	r0, [pc, #56]	; (8001fa8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8001f70:	f004 fec7 	bl	8006d02 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001f74:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <HAL_UARTEx_RxEventCallback+0xa4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <HAL_UARTEx_RxEventCallback+0xa4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0208 	bic.w	r2, r2, #8
 8001f82:	601a      	str	r2, [r3, #0]
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40004800 	.word	0x40004800
 8001f90:	20000568 	.word	0x20000568
 8001f94:	2000053c 	.word	0x2000053c
 8001f98:	40004400 	.word	0x40004400
 8001f9c:	20000600 	.word	0x20000600
 8001fa0:	20000578 	.word	0x20000578
 8001fa4:	20000554 	.word	0x20000554
 8001fa8:	200003ec 	.word	0x200003ec
 8001fac:	20000474 	.word	0x20000474

08001fb0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8001fb8:	f009 ff2d 	bl	800be16 <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    osDelay(osWaitForever);
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f006 f9f9 	bl	80083b6 <osDelay>
 8001fc4:	e7fa      	b.n	8001fbc <StartDefaultTask+0xc>
	...

08001fc8 <StartBlinkTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkTask */
void StartBlinkTask(void *argument)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08c      	sub	sp, #48	; 0x30
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkTask */
	uint16_t count = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint8_t message[32];
  /* Infinite loop */
  for(;;)
  {
	osMessageQueuePut(testQHandle, &count, 0, 0);
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <StartBlinkTask+0x38>)
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 8001fdc:	2300      	movs	r3, #0
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f006 fb98 	bl	8008714 <osMessageQueuePut>
	count++;
 8001fe4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	85fb      	strh	r3, [r7, #46]	; 0x2e
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001fec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ff0:	4804      	ldr	r0, [pc, #16]	; (8002004 <StartBlinkTask+0x3c>)
 8001ff2:	f001 ffc4 	bl	8003f7e <HAL_GPIO_TogglePin>
    osDelay(1000);
 8001ff6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ffa:	f006 f9dc 	bl	80083b6 <osDelay>
	osMessageQueuePut(testQHandle, &count, 0, 0);
 8001ffe:	e7e9      	b.n	8001fd4 <StartBlinkTask+0xc>
 8002000:	20000560 	.word	0x20000560
 8002004:	40021000 	.word	0x40021000

08002008 <StartGPSTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGPSTask */
void StartGPSTask(void *argument)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002016:	f843 0c34 	str.w	r0, [r3, #-52]
	int8_t lat_dd;
	float lat_mm ;
	int8_t lon_dd ;
	float lon_mm;
	float velocity;
	uint16_t gpsLength = 0;
 800201a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800201e:	2200      	movs	r2, #0
 8002020:	f823 2c2a 	strh.w	r2, [r3, #-42]

	memset(GPSBuffer, 0, GPS_BUF_SIZE);
 8002024:	f107 0318 	add.w	r3, r7, #24
 8002028:	3b08      	subs	r3, #8
 800202a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800202e:	2100      	movs	r1, #0
 8002030:	4618      	mov	r0, r3
 8002032:	f025 fe67 	bl	8027d04 <memset>
	memset(USART3Buffer, 0, GPS_BUF_SIZE);
 8002036:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800203a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800203e:	2100      	movs	r1, #0
 8002040:	4618      	mov	r0, r3
 8002042:	f025 fe5f 	bl	8027d04 <memset>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, USART3Buffer, GPS_BUF_SIZE);
 8002046:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800204a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800204e:	4619      	mov	r1, r3
 8002050:	48ea      	ldr	r0, [pc, #936]	; (80023fc <StartGPSTask+0x3f4>)
 8002052:	f004 fe56 	bl	8006d02 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002056:	4bea      	ldr	r3, [pc, #936]	; (8002400 <StartGPSTask+0x3f8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4be8      	ldr	r3, [pc, #928]	; (8002400 <StartGPSTask+0x3f8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0208 	bic.w	r2, r2, #8
 8002064:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  for(;;)
  {
	osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8002066:	f04f 32ff 	mov.w	r2, #4294967295
 800206a:	2100      	movs	r1, #0
 800206c:	2001      	movs	r0, #1
 800206e:	f006 f921 	bl	80082b4 <osThreadFlagsWait>
	if(osMessageQueueGet(gpsLengthQHandle, &gpsLength, 0U, 0U) != osOK) continue;
 8002072:	4be4      	ldr	r3, [pc, #912]	; (8002404 <StartGPSTask+0x3fc>)
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	f107 0118 	add.w	r1, r7, #24
 800207a:	390a      	subs	r1, #10
 800207c:	2300      	movs	r3, #0
 800207e:	2200      	movs	r2, #0
 8002080:	f006 fba8 	bl	80087d4 <osMessageQueueGet>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	f040 81ea 	bne.w	8002460 <StartGPSTask+0x458>
	uint8_t *ch_in_str;
	uint8_t *cek_valid;

	memcpy((uint8_t*)GPSBuffer, (uint8_t*)USART3Buffer, gpsLength);
 800208c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002090:	f833 3c2a 	ldrh.w	r3, [r3, #-42]
 8002094:	461a      	mov	r2, r3
 8002096:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 800209a:	f107 0318 	add.w	r3, r7, #24
 800209e:	3b08      	subs	r3, #8
 80020a0:	4618      	mov	r0, r3
 80020a2:	f025 fe21 	bl	8027ce8 <memcpy>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, USART3Buffer, GPS_BUF_SIZE);
 80020a6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80020aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020ae:	4619      	mov	r1, r3
 80020b0:	48d2      	ldr	r0, [pc, #840]	; (80023fc <StartGPSTask+0x3f4>)
 80020b2:	f004 fe26 	bl	8006d02 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80020b6:	4bd2      	ldr	r3, [pc, #840]	; (8002400 <StartGPSTask+0x3f8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4bd0      	ldr	r3, [pc, #832]	; (8002400 <StartGPSTask+0x3f8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0208 	bic.w	r2, r2, #8
 80020c4:	601a      	str	r2, [r3, #0]

	if ((ch_in_str = (uint8_t*)strstr((char*)GPSBuffer, "RMC")) != NULL) {
 80020c6:	f107 0318 	add.w	r3, r7, #24
 80020ca:	3b08      	subs	r3, #8
 80020cc:	49ce      	ldr	r1, [pc, #824]	; (8002408 <StartGPSTask+0x400>)
 80020ce:	4618      	mov	r0, r3
 80020d0:	f026 fdf2 	bl	8028cb8 <strstr>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020da:	f842 3c30 	str.w	r3, [r2, #-48]
 80020de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020e2:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 81b0 	beq.w	800244c <StartGPSTask+0x444>
		ch_in_str = (uint8_t*)strchr((char*)++ch_in_str, ',');
 80020ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020f0:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80020f4:	3301      	adds	r3, #1
 80020f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020fa:	f842 3c30 	str.w	r3, [r2, #-48]
 80020fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002102:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002106:	212c      	movs	r1, #44	; 0x2c
 8002108:	4618      	mov	r0, r3
 800210a:	f026 fdc8 	bl	8028c9e <strchr>
 800210e:	4603      	mov	r3, r0
 8002110:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002114:	f842 3c30 	str.w	r3, [r2, #-48]
		ch_in_str = (uint8_t*)strchr((char*)++ch_in_str, ',');
 8002118:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800211c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002120:	3301      	adds	r3, #1
 8002122:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002126:	f842 3c30 	str.w	r3, [r2, #-48]
 800212a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800212e:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002132:	212c      	movs	r1, #44	; 0x2c
 8002134:	4618      	mov	r0, r3
 8002136:	f026 fdb2 	bl	8028c9e <strchr>
 800213a:	4603      	mov	r3, r0
 800213c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002140:	f842 3c30 	str.w	r3, [r2, #-48]

		if(ch_in_str[1] != 'A');
 8002144:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002148:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800214c:	3301      	adds	r3, #1
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b41      	cmp	r3, #65	; 0x41
 8002152:	f040 817b 	bne.w	800244c <StartGPSTask+0x444>
		//if (strchr((char*)ch_in_str, 'A') == NULL);
		else {
			//Mencari koma
			if ((ch_in_str = (uint8_t*)strchr((char*)++ch_in_str, ',')) != NULL) {
 8002156:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800215a:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800215e:	3301      	adds	r3, #1
 8002160:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002164:	f842 3c30 	str.w	r3, [r2, #-48]
 8002168:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800216c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002170:	212c      	movs	r1, #44	; 0x2c
 8002172:	4618      	mov	r0, r3
 8002174:	f026 fd93 	bl	8028c9e <strchr>
 8002178:	4603      	mov	r3, r0
 800217a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800217e:	f842 3c30 	str.w	r3, [r2, #-48]
 8002182:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002186:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 815e 	beq.w	800244c <StartGPSTask+0x444>

				//Parsing Nilai latitude dengan membagi 100 (integer)
				lat_dd = (short) strtoul((char*)++ch_in_str, NULL, 10) / 100;
 8002190:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002194:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002198:	3301      	adds	r3, #1
 800219a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800219e:	f842 3c30 	str.w	r3, [r2, #-48]
 80021a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021a6:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80021aa:	220a      	movs	r2, #10
 80021ac:	2100      	movs	r1, #0
 80021ae:	4618      	mov	r0, r3
 80021b0:	f027 fc8a 	bl	8029ac8 <strtoul>
 80021b4:	4603      	mov	r3, r0
 80021b6:	b21b      	sxth	r3, r3
 80021b8:	4a94      	ldr	r2, [pc, #592]	; (800240c <StartGPSTask+0x404>)
 80021ba:	fb82 1203 	smull	r1, r2, r2, r3
 80021be:	1152      	asrs	r2, r2, #5
 80021c0:	17db      	asrs	r3, r3, #31
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	b21b      	sxth	r3, r3
 80021c6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80021ca:	f102 0217 	add.w	r2, r2, #23
 80021ce:	7013      	strb	r3, [r2, #0]

				//Mengarah ke nilai mm
				++ch_in_str;
 80021d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021d4:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80021d8:	3301      	adds	r3, #1
 80021da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021de:	f842 3c30 	str.w	r3, [r2, #-48]
				lat_mm = strtof((char*)++ch_in_str, &ch_in_str);
 80021e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021e6:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80021ea:	3301      	adds	r3, #1
 80021ec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021f0:	f842 3c30 	str.w	r3, [r2, #-48]
 80021f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021f8:	f853 2c30 	ldr.w	r2, [r3, #-48]
 80021fc:	f107 0318 	add.w	r3, r7, #24
 8002200:	3b10      	subs	r3, #16
 8002202:	4619      	mov	r1, r3
 8002204:	4610      	mov	r0, r2
 8002206:	f027 fb91 	bl	802992c <strtof>
 800220a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800220e:	f103 0310 	add.w	r3, r3, #16
 8002212:	ed83 0a00 	vstr	s0, [r3]

				if (*(++ch_in_str) == 'S') {
 8002216:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800221a:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800221e:	3301      	adds	r3, #1
 8002220:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002224:	f842 3c30 	str.w	r3, [r2, #-48]
 8002228:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800222c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b53      	cmp	r3, #83	; 0x53
 8002234:	d119      	bne.n	800226a <StartGPSTask+0x262>
					lat_dd *= -1;
 8002236:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800223a:	f103 0317 	add.w	r3, r3, #23
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	425b      	negs	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002248:	f102 0217 	add.w	r2, r2, #23
 800224c:	7013      	strb	r3, [r2, #0]
					lat_mm *= -1;
 800224e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002252:	f103 0310 	add.w	r3, r3, #16
 8002256:	edd3 7a00 	vldr	s15, [r3]
 800225a:	eef1 7a67 	vneg.f32	s15, s15
 800225e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002262:	f103 0310 	add.w	r3, r3, #16
 8002266:	edc3 7a00 	vstr	s15, [r3]
				}

				latitude = lat_dd + (lat_mm / 60);
 800226a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800226e:	f103 0317 	add.w	r3, r3, #23
 8002272:	f993 3000 	ldrsb.w	r3, [r3]
 8002276:	ee07 3a90 	vmov	s15, r3
 800227a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800227e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002282:	f103 0310 	add.w	r3, r3, #16
 8002286:	edd3 6a00 	vldr	s13, [r3]
 800228a:	ed9f 6a61 	vldr	s12, [pc, #388]	; 8002410 <StartGPSTask+0x408>
 800228e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002296:	4b5f      	ldr	r3, [pc, #380]	; (8002414 <StartGPSTask+0x40c>)
 8002298:	edc3 7a00 	vstr	s15, [r3]

				//Mencari koma longitude
				++ch_in_str;
 800229c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022a0:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80022a4:	3301      	adds	r3, #1
 80022a6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022aa:	f842 3c30 	str.w	r3, [r2, #-48]
				++ch_in_str;
 80022ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022b2:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80022b6:	3301      	adds	r3, #1
 80022b8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022bc:	f842 3c30 	str.w	r3, [r2, #-48]
				lon_dd = (short) strtoul((char*)ch_in_str, NULL, 10) / 100;
 80022c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022c4:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80022c8:	220a      	movs	r2, #10
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f027 fbfb 	bl	8029ac8 <strtoul>
 80022d2:	4603      	mov	r3, r0
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	4a4d      	ldr	r2, [pc, #308]	; (800240c <StartGPSTask+0x404>)
 80022d8:	fb82 1203 	smull	r1, r2, r2, r3
 80022dc:	1152      	asrs	r2, r2, #5
 80022de:	17db      	asrs	r3, r3, #31
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	b21b      	sxth	r3, r3
 80022e4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80022e8:	f102 020f 	add.w	r2, r2, #15
 80022ec:	7013      	strb	r3, [r2, #0]

				//Mengacu pada nilai mm
				++ch_in_str;
 80022ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022f2:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80022f6:	3301      	adds	r3, #1
 80022f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022fc:	f842 3c30 	str.w	r3, [r2, #-48]
				++ch_in_str;
 8002300:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002304:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002308:	3301      	adds	r3, #1
 800230a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800230e:	f842 3c30 	str.w	r3, [r2, #-48]
				lon_mm = strtof((char*)++ch_in_str, &ch_in_str);
 8002312:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002316:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800231a:	3301      	adds	r3, #1
 800231c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002320:	f842 3c30 	str.w	r3, [r2, #-48]
 8002324:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002328:	f853 2c30 	ldr.w	r2, [r3, #-48]
 800232c:	f107 0318 	add.w	r3, r7, #24
 8002330:	3b10      	subs	r3, #16
 8002332:	4619      	mov	r1, r3
 8002334:	4610      	mov	r0, r2
 8002336:	f027 faf9 	bl	802992c <strtof>
 800233a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800233e:	f103 0308 	add.w	r3, r3, #8
 8002342:	ed83 0a00 	vstr	s0, [r3]

				//Apabila longitude W
				if (*(++ch_in_str) == 'W') {
 8002346:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800234a:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800234e:	3301      	adds	r3, #1
 8002350:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002354:	f842 3c30 	str.w	r3, [r2, #-48]
 8002358:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800235c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b57      	cmp	r3, #87	; 0x57
 8002364:	d119      	bne.n	800239a <StartGPSTask+0x392>
					lon_dd *= -1;
 8002366:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800236a:	f103 030f 	add.w	r3, r3, #15
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	425b      	negs	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002378:	f102 020f 	add.w	r2, r2, #15
 800237c:	7013      	strb	r3, [r2, #0]
					lon_mm *= -1;
 800237e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002382:	f103 0308 	add.w	r3, r3, #8
 8002386:	edd3 7a00 	vldr	s15, [r3]
 800238a:	eef1 7a67 	vneg.f32	s15, s15
 800238e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002392:	f103 0308 	add.w	r3, r3, #8
 8002396:	edc3 7a00 	vstr	s15, [r3]
				}

				longitude = lon_dd + (lon_mm / 60);
 800239a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800239e:	f103 030f 	add.w	r3, r3, #15
 80023a2:	f993 3000 	ldrsb.w	r3, [r3]
 80023a6:	ee07 3a90 	vmov	s15, r3
 80023aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023ae:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80023b2:	f103 0308 	add.w	r3, r3, #8
 80023b6:	edd3 6a00 	vldr	s13, [r3]
 80023ba:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8002410 <StartGPSTask+0x408>
 80023be:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80023c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c6:	4b14      	ldr	r3, [pc, #80]	; (8002418 <StartGPSTask+0x410>)
 80023c8:	edc3 7a00 	vstr	s15, [r3]

				//Mengacu pada nilai velocity
				++ch_in_str;
 80023cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023d0:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80023d4:	3301      	adds	r3, #1
 80023d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023da:	f842 3c30 	str.w	r3, [r2, #-48]
				velocity = strtof((char*)++ch_in_str, NULL);
 80023de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023e2:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80023e6:	3301      	adds	r3, #1
 80023e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023ec:	f842 3c30 	str.w	r3, [r2, #-48]
 80023f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023f4:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80023f8:	e010      	b.n	800241c <StartGPSTask+0x414>
 80023fa:	bf00      	nop
 80023fc:	20000430 	.word	0x20000430
 8002400:	200004d4 	.word	0x200004d4
 8002404:	20000568 	.word	0x20000568
 8002408:	0802c2a8 	.word	0x0802c2a8
 800240c:	51eb851f 	.word	0x51eb851f
 8002410:	42700000 	.word	0x42700000
 8002414:	200005f8 	.word	0x200005f8
 8002418:	200005fc 	.word	0x200005fc
 800241c:	2100      	movs	r1, #0
 800241e:	4618      	mov	r0, r3
 8002420:	f027 fa84 	bl	802992c <strtof>
 8002424:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002428:	f103 0304 	add.w	r3, r3, #4
 800242c:	ed83 0a00 	vstr	s0, [r3]
				//printf("GNRMC: latitude: %f\tlongitude: %f\tvelo: %f\r\n", latitude, longitude, velocity);
				//bufferLength = sprintf((char*)buffer, "GNRMC = latitude: %f\tlongitude: %f\tvelo: %f\r\n", latitude, longitude, velocity);
				//CDC_Transmit_FS(buffer, bufferLength);
				osMessageQueuePut(latitudeQHandle, &latitude, 0U, 0U);
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <StartGPSTask+0x45c>)
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	2300      	movs	r3, #0
 8002436:	2200      	movs	r2, #0
 8002438:	490b      	ldr	r1, [pc, #44]	; (8002468 <StartGPSTask+0x460>)
 800243a:	f006 f96b 	bl	8008714 <osMessageQueuePut>
				osMessageQueuePut(longitudeQHandle, &longitude, 0U, 0U);
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <StartGPSTask+0x464>)
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	2300      	movs	r3, #0
 8002444:	2200      	movs	r2, #0
 8002446:	490a      	ldr	r1, [pc, #40]	; (8002470 <StartGPSTask+0x468>)
 8002448:	f006 f964 	bl	8008714 <osMessageQueuePut>
			//printf("GNGGA: latitude: %f\tlongitude: %f\talti: %f\r\n", lat_gps, lon_gps, alti);
		}

	}
	//printf("vel: %f\tlat: %f\tlon: %f\r\n", velocity, latitude, longitude);*/
	memset(GPSBuffer, 0, GPS_BUF_SIZE);
 800244c:	f107 0318 	add.w	r3, r7, #24
 8002450:	3b08      	subs	r3, #8
 8002452:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002456:	2100      	movs	r1, #0
 8002458:	4618      	mov	r0, r3
 800245a:	f025 fc53 	bl	8027d04 <memset>
 800245e:	e602      	b.n	8002066 <StartGPSTask+0x5e>
	if(osMessageQueueGet(gpsLengthQHandle, &gpsLength, 0U, 0U) != osOK) continue;
 8002460:	bf00      	nop
  {
 8002462:	e600      	b.n	8002066 <StartGPSTask+0x5e>
 8002464:	20000558 	.word	0x20000558
 8002468:	200005f8 	.word	0x200005f8
 800246c:	2000055c 	.word	0x2000055c
 8002470:	200005fc 	.word	0x200005fc

08002474 <StartKeypadScanTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKeypadScanTask */
void StartKeypadScanTask(void *argument)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08e      	sub	sp, #56	; 0x38
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKeypadScanTask */
	uint8_t numberPressed = 11;
 800247c:	230b      	movs	r3, #11
 800247e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t prevNumberPressed = 11;
 8002482:	230b      	movs	r3, #11
 8002484:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint32_t sameKeyTick = 0, prevKeyTick = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
 800248c:	2300      	movs	r3, #0
 800248e:	637b      	str	r3, [r7, #52]	; 0x34
	uint16_t RPin[4] = {KEYPAD_R1_Pin, KEYPAD_R2_Pin, KEYPAD_R3_Pin, KEYPAD_R4_Pin};
 8002490:	4a91      	ldr	r2, [pc, #580]	; (80026d8 <StartKeypadScanTask+0x264>)
 8002492:	f107 0318 	add.w	r3, r7, #24
 8002496:	e892 0003 	ldmia.w	r2, {r0, r1}
 800249a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t CPin[4] = {KEYPAD_C1_Pin, KEYPAD_C2_Pin, KEYPAD_C3_Pin, KEYPAD_C4_Pin};
 800249e:	4a8f      	ldr	r2, [pc, #572]	; (80026dc <StartKeypadScanTask+0x268>)
 80024a0:	f107 0310 	add.w	r3, r7, #16
 80024a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024a8:	e883 0003 	stmia.w	r3, {r0, r1}
  /* Infinite loop */
  for(;;)
  {
		uint8_t buttonPressed[2] = {255, 255};
 80024ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024b0:	81bb      	strh	r3, [r7, #12]

		for(int i = 0; i < 4; i++){
 80024b2:	2300      	movs	r3, #0
 80024b4:	633b      	str	r3, [r7, #48]	; 0x30
 80024b6:	e039      	b.n	800252c <StartKeypadScanTask+0xb8>
			HAL_GPIO_WritePin(GPIOD, KEYPAD_R1_Pin | KEYPAD_R2_Pin | KEYPAD_R3_Pin | KEYPAD_R4_Pin, GPIO_PIN_SET);
 80024b8:	2201      	movs	r2, #1
 80024ba:	21f0      	movs	r1, #240	; 0xf0
 80024bc:	4888      	ldr	r0, [pc, #544]	; (80026e0 <StartKeypadScanTask+0x26c>)
 80024be:	f001 fd45 	bl	8003f4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, RPin[i], GPIO_PIN_RESET);
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	3338      	adds	r3, #56	; 0x38
 80024c8:	443b      	add	r3, r7
 80024ca:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80024ce:	2200      	movs	r2, #0
 80024d0:	4619      	mov	r1, r3
 80024d2:	4883      	ldr	r0, [pc, #524]	; (80026e0 <StartKeypadScanTask+0x26c>)
 80024d4:	f001 fd3a 	bl	8003f4c <HAL_GPIO_WritePin>

			for(int j = 0; j < 4; j++){
 80024d8:	2300      	movs	r3, #0
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024dc:	e01a      	b.n	8002514 <StartKeypadScanTask+0xa0>
				if(HAL_GPIO_ReadPin(GPIOB, CPin[j]) == GPIO_PIN_RESET){
 80024de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	3338      	adds	r3, #56	; 0x38
 80024e4:	443b      	add	r3, r7
 80024e6:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 80024ea:	4619      	mov	r1, r3
 80024ec:	487d      	ldr	r0, [pc, #500]	; (80026e4 <StartKeypadScanTask+0x270>)
 80024ee:	f001 fd15 	bl	8003f1c <HAL_GPIO_ReadPin>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10a      	bne.n	800250e <StartKeypadScanTask+0x9a>
					buttonPressed[1] = j + 1;
 80024f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	3301      	adds	r3, #1
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	737b      	strb	r3, [r7, #13]
					buttonPressed[0] = i + 1;
 8002502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002504:	b2db      	uxtb	r3, r3
 8002506:	3301      	adds	r3, #1
 8002508:	b2db      	uxtb	r3, r3
 800250a:	733b      	strb	r3, [r7, #12]
					break;
 800250c:	e005      	b.n	800251a <StartKeypadScanTask+0xa6>
			for(int j = 0; j < 4; j++){
 800250e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002510:	3301      	adds	r3, #1
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002516:	2b03      	cmp	r3, #3
 8002518:	dde1      	ble.n	80024de <StartKeypadScanTask+0x6a>
				}
			}
			if(buttonPressed[0] != 255 && buttonPressed[1] != 255) break;
 800251a:	7b3b      	ldrb	r3, [r7, #12]
 800251c:	2bff      	cmp	r3, #255	; 0xff
 800251e:	d002      	beq.n	8002526 <StartKeypadScanTask+0xb2>
 8002520:	7b7b      	ldrb	r3, [r7, #13]
 8002522:	2bff      	cmp	r3, #255	; 0xff
 8002524:	d106      	bne.n	8002534 <StartKeypadScanTask+0xc0>
		for(int i = 0; i < 4; i++){
 8002526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002528:	3301      	adds	r3, #1
 800252a:	633b      	str	r3, [r7, #48]	; 0x30
 800252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252e:	2b03      	cmp	r3, #3
 8002530:	ddc2      	ble.n	80024b8 <StartKeypadScanTask+0x44>
 8002532:	e000      	b.n	8002536 <StartKeypadScanTask+0xc2>
			if(buttonPressed[0] != 255 && buttonPressed[1] != 255) break;
 8002534:	bf00      	nop
		}

		if(buttonPressed[0] != 255 && buttonPressed[1] != 255){
 8002536:	7b3b      	ldrb	r3, [r7, #12]
 8002538:	2bff      	cmp	r3, #255	; 0xff
 800253a:	f000 80c9 	beq.w	80026d0 <StartKeypadScanTask+0x25c>
 800253e:	7b7b      	ldrb	r3, [r7, #13]
 8002540:	2bff      	cmp	r3, #255	; 0xff
 8002542:	f000 80c5 	beq.w	80026d0 <StartKeypadScanTask+0x25c>
			prevNumberPressed = numberPressed;
 8002546:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800254a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			sameKeyTick = osKernelGetTickCount() - prevKeyTick;
 800254e:	f005 fdbb 	bl	80080c8 <osKernelGetTickCount>
 8002552:	4602      	mov	r2, r0
 8002554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
			if(buttonPressed[0] == 4 && buttonPressed[1] == 4) numberPressed = 1;
 800255a:	7b3b      	ldrb	r3, [r7, #12]
 800255c:	2b04      	cmp	r3, #4
 800255e:	d106      	bne.n	800256e <StartKeypadScanTask+0xfa>
 8002560:	7b7b      	ldrb	r3, [r7, #13]
 8002562:	2b04      	cmp	r3, #4
 8002564:	d103      	bne.n	800256e <StartKeypadScanTask+0xfa>
 8002566:	2301      	movs	r3, #1
 8002568:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800256c:	e094      	b.n	8002698 <StartKeypadScanTask+0x224>
			else if(buttonPressed[0] == 3 && buttonPressed[1] == 4) numberPressed = 2;
 800256e:	7b3b      	ldrb	r3, [r7, #12]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d106      	bne.n	8002582 <StartKeypadScanTask+0x10e>
 8002574:	7b7b      	ldrb	r3, [r7, #13]
 8002576:	2b04      	cmp	r3, #4
 8002578:	d103      	bne.n	8002582 <StartKeypadScanTask+0x10e>
 800257a:	2302      	movs	r3, #2
 800257c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002580:	e08a      	b.n	8002698 <StartKeypadScanTask+0x224>
			else if(buttonPressed[0] == 2 && buttonPressed[1] == 4) numberPressed = 3;
 8002582:	7b3b      	ldrb	r3, [r7, #12]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d106      	bne.n	8002596 <StartKeypadScanTask+0x122>
 8002588:	7b7b      	ldrb	r3, [r7, #13]
 800258a:	2b04      	cmp	r3, #4
 800258c:	d103      	bne.n	8002596 <StartKeypadScanTask+0x122>
 800258e:	2303      	movs	r3, #3
 8002590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002594:	e080      	b.n	8002698 <StartKeypadScanTask+0x224>
			else if(buttonPressed[0] == 1 && buttonPressed[1] == 4) numberPressed = 'A';
 8002596:	7b3b      	ldrb	r3, [r7, #12]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d106      	bne.n	80025aa <StartKeypadScanTask+0x136>
 800259c:	7b7b      	ldrb	r3, [r7, #13]
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d103      	bne.n	80025aa <StartKeypadScanTask+0x136>
 80025a2:	2341      	movs	r3, #65	; 0x41
 80025a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025a8:	e076      	b.n	8002698 <StartKeypadScanTask+0x224>
			else if(buttonPressed[0] == 4 && buttonPressed[1] == 3) numberPressed = 4;
 80025aa:	7b3b      	ldrb	r3, [r7, #12]
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d106      	bne.n	80025be <StartKeypadScanTask+0x14a>
 80025b0:	7b7b      	ldrb	r3, [r7, #13]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d103      	bne.n	80025be <StartKeypadScanTask+0x14a>
 80025b6:	2304      	movs	r3, #4
 80025b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025bc:	e06c      	b.n	8002698 <StartKeypadScanTask+0x224>
			else if(buttonPressed[0] == 3 && buttonPressed[1] == 3) numberPressed = 5;
 80025be:	7b3b      	ldrb	r3, [r7, #12]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d106      	bne.n	80025d2 <StartKeypadScanTask+0x15e>
 80025c4:	7b7b      	ldrb	r3, [r7, #13]
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d103      	bne.n	80025d2 <StartKeypadScanTask+0x15e>
 80025ca:	2305      	movs	r3, #5
 80025cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025d0:	e062      	b.n	8002698 <StartKeypadScanTask+0x224>
			else if(buttonPressed[0] == 2 && buttonPressed[1] == 3) numberPressed = 6;
 80025d2:	7b3b      	ldrb	r3, [r7, #12]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d106      	bne.n	80025e6 <StartKeypadScanTask+0x172>
 80025d8:	7b7b      	ldrb	r3, [r7, #13]
 80025da:	2b03      	cmp	r3, #3
 80025dc:	d103      	bne.n	80025e6 <StartKeypadScanTask+0x172>
 80025de:	2306      	movs	r3, #6
 80025e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025e4:	e058      	b.n	8002698 <StartKeypadScanTask+0x224>
			else if(buttonPressed[0] == 1 && buttonPressed[1] == 3) numberPressed = 'B';
 80025e6:	7b3b      	ldrb	r3, [r7, #12]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d106      	bne.n	80025fa <StartKeypadScanTask+0x186>
 80025ec:	7b7b      	ldrb	r3, [r7, #13]
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d103      	bne.n	80025fa <StartKeypadScanTask+0x186>
 80025f2:	2342      	movs	r3, #66	; 0x42
 80025f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025f8:	e04e      	b.n	8002698 <StartKeypadScanTask+0x224>
			else if(buttonPressed[0] == 4 && buttonPressed[1] == 2) numberPressed = 7;
 80025fa:	7b3b      	ldrb	r3, [r7, #12]
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d106      	bne.n	800260e <StartKeypadScanTask+0x19a>
 8002600:	7b7b      	ldrb	r3, [r7, #13]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d103      	bne.n	800260e <StartKeypadScanTask+0x19a>
 8002606:	2307      	movs	r3, #7
 8002608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800260c:	e044      	b.n	8002698 <StartKeypadScanTask+0x224>
			else if(buttonPressed[0] == 3 && buttonPressed[1] == 2) numberPressed = 8;
 800260e:	7b3b      	ldrb	r3, [r7, #12]
 8002610:	2b03      	cmp	r3, #3
 8002612:	d106      	bne.n	8002622 <StartKeypadScanTask+0x1ae>
 8002614:	7b7b      	ldrb	r3, [r7, #13]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d103      	bne.n	8002622 <StartKeypadScanTask+0x1ae>
 800261a:	2308      	movs	r3, #8
 800261c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002620:	e03a      	b.n	8002698 <StartKeypadScanTask+0x224>
			else if(buttonPressed[0] == 2 && buttonPressed[1] == 2) numberPressed = 9;
 8002622:	7b3b      	ldrb	r3, [r7, #12]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d106      	bne.n	8002636 <StartKeypadScanTask+0x1c2>
 8002628:	7b7b      	ldrb	r3, [r7, #13]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d103      	bne.n	8002636 <StartKeypadScanTask+0x1c2>
 800262e:	2309      	movs	r3, #9
 8002630:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002634:	e030      	b.n	8002698 <StartKeypadScanTask+0x224>
			else if(buttonPressed[0] == 1 && buttonPressed[1] == 2) numberPressed = 'C';
 8002636:	7b3b      	ldrb	r3, [r7, #12]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d106      	bne.n	800264a <StartKeypadScanTask+0x1d6>
 800263c:	7b7b      	ldrb	r3, [r7, #13]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d103      	bne.n	800264a <StartKeypadScanTask+0x1d6>
 8002642:	2343      	movs	r3, #67	; 0x43
 8002644:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002648:	e026      	b.n	8002698 <StartKeypadScanTask+0x224>
			else if(buttonPressed[0] == 4 && buttonPressed[1] == 1) numberPressed = 'X';
 800264a:	7b3b      	ldrb	r3, [r7, #12]
 800264c:	2b04      	cmp	r3, #4
 800264e:	d106      	bne.n	800265e <StartKeypadScanTask+0x1ea>
 8002650:	7b7b      	ldrb	r3, [r7, #13]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d103      	bne.n	800265e <StartKeypadScanTask+0x1ea>
 8002656:	2358      	movs	r3, #88	; 0x58
 8002658:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800265c:	e01c      	b.n	8002698 <StartKeypadScanTask+0x224>
			else if(buttonPressed[0] == 3 && buttonPressed[1] == 1) numberPressed = 0;
 800265e:	7b3b      	ldrb	r3, [r7, #12]
 8002660:	2b03      	cmp	r3, #3
 8002662:	d106      	bne.n	8002672 <StartKeypadScanTask+0x1fe>
 8002664:	7b7b      	ldrb	r3, [r7, #13]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d103      	bne.n	8002672 <StartKeypadScanTask+0x1fe>
 800266a:	2300      	movs	r3, #0
 800266c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002670:	e012      	b.n	8002698 <StartKeypadScanTask+0x224>
			else if(buttonPressed[0] == 2 && buttonPressed[1] == 1) numberPressed = 'Y';
 8002672:	7b3b      	ldrb	r3, [r7, #12]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d106      	bne.n	8002686 <StartKeypadScanTask+0x212>
 8002678:	7b7b      	ldrb	r3, [r7, #13]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d103      	bne.n	8002686 <StartKeypadScanTask+0x212>
 800267e:	2359      	movs	r3, #89	; 0x59
 8002680:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002684:	e008      	b.n	8002698 <StartKeypadScanTask+0x224>
			else if(buttonPressed[0] == 1 && buttonPressed[1] == 1) numberPressed = 'D';
 8002686:	7b3b      	ldrb	r3, [r7, #12]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d105      	bne.n	8002698 <StartKeypadScanTask+0x224>
 800268c:	7b7b      	ldrb	r3, [r7, #13]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d102      	bne.n	8002698 <StartKeypadScanTask+0x224>
 8002692:	2344      	movs	r3, #68	; 0x44
 8002694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			prevKeyTick = osKernelGetTickCount();
 8002698:	f005 fd16 	bl	80080c8 <osKernelGetTickCount>
 800269c:	6378      	str	r0, [r7, #52]	; 0x34

			if(prevNumberPressed == numberPressed && sameKeyTick <= 100);
 800269e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026a2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d102      	bne.n	80026b0 <StartKeypadScanTask+0x23c>
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	2b64      	cmp	r3, #100	; 0x64
 80026ae:	d90f      	bls.n	80026d0 <StartKeypadScanTask+0x25c>
			else {
				osMessageQueuePut(keypadQHandle, &numberPressed, 0U, 0U);
 80026b0:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <StartKeypadScanTask+0x274>)
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80026b8:	2300      	movs	r3, #0
 80026ba:	2200      	movs	r2, #0
 80026bc:	f006 f82a 	bl	8008714 <osMessageQueuePut>
				if(numberPressed == 'Y') osDelay(1000);
 80026c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026c4:	2b59      	cmp	r3, #89	; 0x59
 80026c6:	d103      	bne.n	80026d0 <StartKeypadScanTask+0x25c>
 80026c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026cc:	f005 fe73 	bl	80083b6 <osDelay>
			}
		}

		osDelay(10);
 80026d0:	200a      	movs	r0, #10
 80026d2:	f005 fe70 	bl	80083b6 <osDelay>
  {
 80026d6:	e6e9      	b.n	80024ac <StartKeypadScanTask+0x38>
 80026d8:	0802c2ac 	.word	0x0802c2ac
 80026dc:	0802c2b4 	.word	0x0802c2b4
 80026e0:	40020c00 	.word	0x40020c00
 80026e4:	40020400 	.word	0x40020400
 80026e8:	20000564 	.word	0x20000564

080026ec <StartINATask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartINATask */
void StartINATask(void *argument)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartINATask */
  INA219_t ina219;
  uint16_t vbus, vshunt, current;

  while(!INA219_Init(&ina219, &hi2c1, INA219_ADDRESS)){
 80026f4:	e008      	b.n	8002708 <StartINATask+0x1c>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80026f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026fa:	481e      	ldr	r0, [pc, #120]	; (8002774 <StartINATask+0x88>)
 80026fc:	f001 fc3f 	bl	8003f7e <HAL_GPIO_TogglePin>
	  osDelay(2000);
 8002700:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002704:	f005 fe57 	bl	80083b6 <osDelay>
  while(!INA219_Init(&ina219, &hi2c1, INA219_ADDRESS)){
 8002708:	f107 030c 	add.w	r3, r7, #12
 800270c:	2240      	movs	r2, #64	; 0x40
 800270e:	491a      	ldr	r1, [pc, #104]	; (8002778 <StartINATask+0x8c>)
 8002710:	4618      	mov	r0, r3
 8002712:	f7fe fd71 	bl	80011f8 <INA219_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0ec      	beq.n	80026f6 <StartINATask+0xa>
  }
  /* Infinite loop */
  for(;;)
  {
	vbus = INA219_ReadBusVoltage(&ina219);
 800271c:	f107 030c 	add.w	r3, r7, #12
 8002720:	4618      	mov	r0, r3
 8002722:	f7fe fcaf 	bl	8001084 <INA219_ReadBusVoltage>
 8002726:	4603      	mov	r3, r0
 8002728:	817b      	strh	r3, [r7, #10]
	vshunt = INA219_ReadShuntVolage(&ina219);
 800272a:	f107 030c 	add.w	r3, r7, #12
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe fce6 	bl	8001100 <INA219_ReadShuntVolage>
 8002734:	4603      	mov	r3, r0
 8002736:	82fb      	strh	r3, [r7, #22]
	current = INA219_ReadCurrent(&ina219);
 8002738:	f107 030c 	add.w	r3, r7, #12
 800273c:	4618      	mov	r0, r3
 800273e:	f7fe fcc5 	bl	80010cc <INA219_ReadCurrent>
 8002742:	4603      	mov	r3, r0
 8002744:	b29b      	uxth	r3, r3
 8002746:	813b      	strh	r3, [r7, #8]
	osMessageQueuePut(currentQHandle, &current, 0U, 0U);
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <StartINATask+0x90>)
 800274a:	6818      	ldr	r0, [r3, #0]
 800274c:	f107 0108 	add.w	r1, r7, #8
 8002750:	2300      	movs	r3, #0
 8002752:	2200      	movs	r2, #0
 8002754:	f005 ffde 	bl	8008714 <osMessageQueuePut>
	osMessageQueuePut(voltageQHandle, &vbus, 0U, 0U);
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <StartINATask+0x94>)
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	f107 010a 	add.w	r1, r7, #10
 8002760:	2300      	movs	r3, #0
 8002762:	2200      	movs	r2, #0
 8002764:	f005 ffd6 	bl	8008714 <osMessageQueuePut>
    osDelay(1000);
 8002768:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800276c:	f005 fe23 	bl	80083b6 <osDelay>
	vbus = INA219_ReadBusVoltage(&ina219);
 8002770:	e7d4      	b.n	800271c <StartINATask+0x30>
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000
 8002778:	20000298 	.word	0x20000298
 800277c:	2000056c 	.word	0x2000056c
 8002780:	20000570 	.word	0x20000570

08002784 <StartLoRaTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoRaTask */
void StartLoRaTask(void *argument)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLoRaTask */
	//uint8_t txBuffer[LORA_TX_BUF_SIZE];
  /* Infinite loop */
  for(;;)
  {
	  osDelay(osWaitForever);
 800278c:	f04f 30ff 	mov.w	r0, #4294967295
 8002790:	f005 fe11 	bl	80083b6 <osDelay>
 8002794:	e7fa      	b.n	800278c <StartLoRaTask+0x8>
	...

08002798 <StartLoraSendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoraSendTask */
void StartLoraSendTask(void *argument)
{
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	b0af      	sub	sp, #188	; 0xbc
 800279c:	af06      	add	r7, sp, #24
 800279e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLoraSendTask */
	uint8_t message[128];
	String_t sendMessageString;
	uint16_t messageLength = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	uint32_t idMessage = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  /* Infinite loop */
	for (;;) {
		if(osMessageQueueGet(transmitQHandle, &sendMessageString, 0U, 10) == osOK){
 80027ac:	4b2c      	ldr	r3, [pc, #176]	; (8002860 <StartLoraSendTask+0xc8>)
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	f107 010c 	add.w	r1, r7, #12
 80027b4:	230a      	movs	r3, #10
 80027b6:	2200      	movs	r2, #0
 80027b8:	f006 f80c 	bl	80087d4 <osMessageQueueGet>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f4      	bne.n	80027ac <StartLoraSendTask+0x14>
			for(int i = 0; i < sendMessageString.length; i++) idMessage += sendMessageString.message[i];
 80027c2:	2300      	movs	r3, #0
 80027c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027c8:	e00f      	b.n	80027ea <StartLoraSendTask+0x52>
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027d0:	4413      	add	r3, r2
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027da:	4413      	add	r3, r2
 80027dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80027e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027e4:	3301      	adds	r3, #1
 80027e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027ea:	8a3b      	ldrh	r3, [r7, #16]
 80027ec:	461a      	mov	r2, r3
 80027ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027f2:	4293      	cmp	r3, r2
 80027f4:	dbe9      	blt.n	80027ca <StartLoraSendTask+0x32>
			idMessage += (DEVICE_ADDRESS + (TIM10->CNT * sendMessageString.length));
 80027f6:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <StartLoraSendTask+0xcc>)
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	8a3a      	ldrh	r2, [r7, #16]
 80027fc:	fb02 f303 	mul.w	r3, r2, r3
 8002800:	3341      	adds	r3, #65	; 0x41
 8002802:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002806:	4413      	add	r3, r2
 8002808:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			messageLength = sprintf((char*)message, "%c,%f,%f,%s,%lu", DEVICE_ADDRESS, latitude, longitude, sendMessageString.message, idMessage);
 800280c:	4b16      	ldr	r3, [pc, #88]	; (8002868 <StartLoraSendTask+0xd0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7fd fe99 	bl	8000548 <__aeabi_f2d>
 8002816:	4604      	mov	r4, r0
 8002818:	460d      	mov	r5, r1
 800281a:	4b14      	ldr	r3, [pc, #80]	; (800286c <StartLoraSendTask+0xd4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fd fe92 	bl	8000548 <__aeabi_f2d>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	68f9      	ldr	r1, [r7, #12]
 800282a:	f107 0614 	add.w	r6, r7, #20
 800282e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002832:	9005      	str	r0, [sp, #20]
 8002834:	9104      	str	r1, [sp, #16]
 8002836:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800283a:	e9cd 4500 	strd	r4, r5, [sp]
 800283e:	2241      	movs	r2, #65	; 0x41
 8002840:	490b      	ldr	r1, [pc, #44]	; (8002870 <StartLoraSendTask+0xd8>)
 8002842:	4630      	mov	r0, r6
 8002844:	f026 f9c8 	bl	8028bd8 <siprintf>
 8002848:	4603      	mov	r3, r0
 800284a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
			HAL_UART_Transmit(&huart2, message, messageLength, 100);
 800284e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8002852:	f107 0114 	add.w	r1, r7, #20
 8002856:	2364      	movs	r3, #100	; 0x64
 8002858:	4806      	ldr	r0, [pc, #24]	; (8002874 <StartLoraSendTask+0xdc>)
 800285a:	f004 f9c0 	bl	8006bde <HAL_UART_Transmit>
		if(osMessageQueueGet(transmitQHandle, &sendMessageString, 0U, 10) == osOK){
 800285e:	e7a5      	b.n	80027ac <StartLoraSendTask+0x14>
 8002860:	20000550 	.word	0x20000550
 8002864:	40014400 	.word	0x40014400
 8002868:	200005f8 	.word	0x200005f8
 800286c:	200005fc 	.word	0x200005fc
 8002870:	0802c2bc 	.word	0x0802c2bc
 8002874:	200003ec 	.word	0x200003ec

08002878 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a08      	ldr	r2, [pc, #32]	; (80028a8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d102      	bne.n	8002890 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800288a:	f000 fc67 	bl	800315c <HAL_IncTick>
	  touchgfxSignalVSync();
		//bufferLength = sprintf((char*)buffer, "Hello World!\r\n");
		//CDC_Transmit_FS(buffer, bufferLength);
  }
  /* USER CODE END Callback 1 */
}
 800288e:	e006      	b.n	800289e <HAL_TIM_PeriodElapsedCallback+0x26>
  else if(htim->Instance == TIM7){
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a05      	ldr	r2, [pc, #20]	; (80028ac <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d101      	bne.n	800289e <HAL_TIM_PeriodElapsedCallback+0x26>
	  touchgfxSignalVSync();
 800289a:	f00f fed9 	bl	8012650 <touchgfxSignalVSync>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40014400 	.word	0x40014400
 80028ac:	40001400 	.word	0x40001400

080028b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80028b4:	2201      	movs	r2, #1
 80028b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028ba:	4809      	ldr	r0, [pc, #36]	; (80028e0 <Error_Handler+0x30>)
 80028bc:	f001 fb46 	bl	8003f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80028c0:	2201      	movs	r2, #1
 80028c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028c6:	4806      	ldr	r0, [pc, #24]	; (80028e0 <Error_Handler+0x30>)
 80028c8:	f001 fb40 	bl	8003f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80028cc:	2201      	movs	r2, #1
 80028ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028d2:	4803      	ldr	r0, [pc, #12]	; (80028e0 <Error_Handler+0x30>)
 80028d4:	f001 fb3a 	bl	8003f4c <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028d8:	b672      	cpsid	i
}
 80028da:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028dc:	e7fe      	b.n	80028dc <Error_Handler+0x2c>
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000

080028e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	607b      	str	r3, [r7, #4]
 80028ee:	4b12      	ldr	r3, [pc, #72]	; (8002938 <HAL_MspInit+0x54>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	4a11      	ldr	r2, [pc, #68]	; (8002938 <HAL_MspInit+0x54>)
 80028f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f8:	6453      	str	r3, [r2, #68]	; 0x44
 80028fa:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <HAL_MspInit+0x54>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002902:	607b      	str	r3, [r7, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	603b      	str	r3, [r7, #0]
 800290a:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <HAL_MspInit+0x54>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <HAL_MspInit+0x54>)
 8002910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002914:	6413      	str	r3, [r2, #64]	; 0x40
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <HAL_MspInit+0x54>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	210f      	movs	r1, #15
 8002926:	f06f 0001 	mvn.w	r0, #1
 800292a:	f000 fd13 	bl	8003354 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800

0800293c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a0b      	ldr	r2, [pc, #44]	; (8002978 <HAL_CRC_MspInit+0x3c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d10d      	bne.n	800296a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_CRC_MspInit+0x40>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a09      	ldr	r2, [pc, #36]	; (800297c <HAL_CRC_MspInit+0x40>)
 8002958:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b07      	ldr	r3, [pc, #28]	; (800297c <HAL_CRC_MspInit+0x40>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800296a:	bf00      	nop
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40023000 	.word	0x40023000
 800297c:	40023800 	.word	0x40023800

08002980 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	; 0x28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a19      	ldr	r2, [pc, #100]	; (8002a04 <HAL_I2C_MspInit+0x84>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d12b      	bne.n	80029fa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	4b18      	ldr	r3, [pc, #96]	; (8002a08 <HAL_I2C_MspInit+0x88>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	4a17      	ldr	r2, [pc, #92]	; (8002a08 <HAL_I2C_MspInit+0x88>)
 80029ac:	f043 0302 	orr.w	r3, r3, #2
 80029b0:	6313      	str	r3, [r2, #48]	; 0x30
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <HAL_I2C_MspInit+0x88>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029be:	23c0      	movs	r3, #192	; 0xc0
 80029c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029c2:	2312      	movs	r3, #18
 80029c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ca:	2303      	movs	r3, #3
 80029cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029ce:	2304      	movs	r3, #4
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d2:	f107 0314 	add.w	r3, r7, #20
 80029d6:	4619      	mov	r1, r3
 80029d8:	480c      	ldr	r0, [pc, #48]	; (8002a0c <HAL_I2C_MspInit+0x8c>)
 80029da:	f001 f903 	bl	8003be4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <HAL_I2C_MspInit+0x88>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	4a08      	ldr	r2, [pc, #32]	; (8002a08 <HAL_I2C_MspInit+0x88>)
 80029e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029ec:	6413      	str	r3, [r2, #64]	; 0x40
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HAL_I2C_MspInit+0x88>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029fa:	bf00      	nop
 80029fc:	3728      	adds	r7, #40	; 0x28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40005400 	.word	0x40005400
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40020400 	.word	0x40020400

08002a10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	; 0x28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a38      	ldr	r2, [pc, #224]	; (8002b10 <HAL_SPI_MspInit+0x100>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d16a      	bne.n	8002b08 <HAL_SPI_MspInit+0xf8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	4b37      	ldr	r3, [pc, #220]	; (8002b14 <HAL_SPI_MspInit+0x104>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	4a36      	ldr	r2, [pc, #216]	; (8002b14 <HAL_SPI_MspInit+0x104>)
 8002a3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a40:	6453      	str	r3, [r2, #68]	; 0x44
 8002a42:	4b34      	ldr	r3, [pc, #208]	; (8002b14 <HAL_SPI_MspInit+0x104>)
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	4b30      	ldr	r3, [pc, #192]	; (8002b14 <HAL_SPI_MspInit+0x104>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	4a2f      	ldr	r2, [pc, #188]	; (8002b14 <HAL_SPI_MspInit+0x104>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5e:	4b2d      	ldr	r3, [pc, #180]	; (8002b14 <HAL_SPI_MspInit+0x104>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002a6a:	23e0      	movs	r3, #224	; 0xe0
 8002a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a76:	2303      	movs	r3, #3
 8002a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a7a:	2305      	movs	r3, #5
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7e:	f107 0314 	add.w	r3, r7, #20
 8002a82:	4619      	mov	r1, r3
 8002a84:	4824      	ldr	r0, [pc, #144]	; (8002b18 <HAL_SPI_MspInit+0x108>)
 8002a86:	f001 f8ad 	bl	8003be4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002a8a:	4b24      	ldr	r3, [pc, #144]	; (8002b1c <HAL_SPI_MspInit+0x10c>)
 8002a8c:	4a24      	ldr	r2, [pc, #144]	; (8002b20 <HAL_SPI_MspInit+0x110>)
 8002a8e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002a90:	4b22      	ldr	r3, [pc, #136]	; (8002b1c <HAL_SPI_MspInit+0x10c>)
 8002a92:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002a96:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a98:	4b20      	ldr	r3, [pc, #128]	; (8002b1c <HAL_SPI_MspInit+0x10c>)
 8002a9a:	2240      	movs	r2, #64	; 0x40
 8002a9c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a9e:	4b1f      	ldr	r3, [pc, #124]	; (8002b1c <HAL_SPI_MspInit+0x10c>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002aa4:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <HAL_SPI_MspInit+0x10c>)
 8002aa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aaa:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aac:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <HAL_SPI_MspInit+0x10c>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ab2:	4b1a      	ldr	r3, [pc, #104]	; (8002b1c <HAL_SPI_MspInit+0x10c>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002ab8:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <HAL_SPI_MspInit+0x10c>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002abe:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <HAL_SPI_MspInit+0x10c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002ac4:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <HAL_SPI_MspInit+0x10c>)
 8002ac6:	2204      	movs	r2, #4
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <HAL_SPI_MspInit+0x10c>)
 8002acc:	2203      	movs	r2, #3
 8002ace:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002ad0:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <HAL_SPI_MspInit+0x10c>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002ad6:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <HAL_SPI_MspInit+0x10c>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002adc:	480f      	ldr	r0, [pc, #60]	; (8002b1c <HAL_SPI_MspInit+0x10c>)
 8002ade:	f000 fc7f 	bl	80033e0 <HAL_DMA_Init>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_SPI_MspInit+0xdc>
    {
      Error_Handler();
 8002ae8:	f7ff fee2 	bl	80028b0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a0b      	ldr	r2, [pc, #44]	; (8002b1c <HAL_SPI_MspInit+0x10c>)
 8002af0:	649a      	str	r2, [r3, #72]	; 0x48
 8002af2:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <HAL_SPI_MspInit+0x10c>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002af8:	2200      	movs	r2, #0
 8002afa:	2105      	movs	r1, #5
 8002afc:	2023      	movs	r0, #35	; 0x23
 8002afe:	f000 fc29 	bl	8003354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002b02:	2023      	movs	r0, #35	; 0x23
 8002b04:	f000 fc42 	bl	800338c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b08:	bf00      	nop
 8002b0a:	3728      	adds	r7, #40	; 0x28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40013000 	.word	0x40013000
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40020000 	.word	0x40020000
 8002b1c:	20000344 	.word	0x20000344
 8002b20:	40026458 	.word	0x40026458

08002b24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0e      	ldr	r2, [pc, #56]	; (8002b6c <HAL_TIM_Base_MspInit+0x48>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d115      	bne.n	8002b62 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	4b0d      	ldr	r3, [pc, #52]	; (8002b70 <HAL_TIM_Base_MspInit+0x4c>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	4a0c      	ldr	r2, [pc, #48]	; (8002b70 <HAL_TIM_Base_MspInit+0x4c>)
 8002b40:	f043 0320 	orr.w	r3, r3, #32
 8002b44:	6413      	str	r3, [r2, #64]	; 0x40
 8002b46:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <HAL_TIM_Base_MspInit+0x4c>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002b52:	2200      	movs	r2, #0
 8002b54:	2105      	movs	r1, #5
 8002b56:	2037      	movs	r0, #55	; 0x37
 8002b58:	f000 fbfc 	bl	8003354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002b5c:	2037      	movs	r0, #55	; 0x37
 8002b5e:	f000 fc15 	bl	800338c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002b62:	bf00      	nop
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40001400 	.word	0x40001400
 8002b70:	40023800 	.word	0x40023800

08002b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08c      	sub	sp, #48	; 0x30
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	f107 031c 	add.w	r3, r7, #28
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a68      	ldr	r2, [pc, #416]	; (8002d34 <HAL_UART_MspInit+0x1c0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d162      	bne.n	8002c5c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	4b67      	ldr	r3, [pc, #412]	; (8002d38 <HAL_UART_MspInit+0x1c4>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	4a66      	ldr	r2, [pc, #408]	; (8002d38 <HAL_UART_MspInit+0x1c4>)
 8002ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba6:	4b64      	ldr	r3, [pc, #400]	; (8002d38 <HAL_UART_MspInit+0x1c4>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	4b60      	ldr	r3, [pc, #384]	; (8002d38 <HAL_UART_MspInit+0x1c4>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	4a5f      	ldr	r2, [pc, #380]	; (8002d38 <HAL_UART_MspInit+0x1c4>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc2:	4b5d      	ldr	r3, [pc, #372]	; (8002d38 <HAL_UART_MspInit+0x1c4>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LORA_TX_Pin|LORA_RX_Pin;
 8002bce:	230c      	movs	r3, #12
 8002bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bde:	2307      	movs	r3, #7
 8002be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be2:	f107 031c 	add.w	r3, r7, #28
 8002be6:	4619      	mov	r1, r3
 8002be8:	4854      	ldr	r0, [pc, #336]	; (8002d3c <HAL_UART_MspInit+0x1c8>)
 8002bea:	f000 fffb 	bl	8003be4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002bee:	4b54      	ldr	r3, [pc, #336]	; (8002d40 <HAL_UART_MspInit+0x1cc>)
 8002bf0:	4a54      	ldr	r2, [pc, #336]	; (8002d44 <HAL_UART_MspInit+0x1d0>)
 8002bf2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002bf4:	4b52      	ldr	r3, [pc, #328]	; (8002d40 <HAL_UART_MspInit+0x1cc>)
 8002bf6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bfa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bfc:	4b50      	ldr	r3, [pc, #320]	; (8002d40 <HAL_UART_MspInit+0x1cc>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c02:	4b4f      	ldr	r3, [pc, #316]	; (8002d40 <HAL_UART_MspInit+0x1cc>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c08:	4b4d      	ldr	r3, [pc, #308]	; (8002d40 <HAL_UART_MspInit+0x1cc>)
 8002c0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c0e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c10:	4b4b      	ldr	r3, [pc, #300]	; (8002d40 <HAL_UART_MspInit+0x1cc>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c16:	4b4a      	ldr	r3, [pc, #296]	; (8002d40 <HAL_UART_MspInit+0x1cc>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002c1c:	4b48      	ldr	r3, [pc, #288]	; (8002d40 <HAL_UART_MspInit+0x1cc>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c22:	4b47      	ldr	r3, [pc, #284]	; (8002d40 <HAL_UART_MspInit+0x1cc>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c28:	4b45      	ldr	r3, [pc, #276]	; (8002d40 <HAL_UART_MspInit+0x1cc>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002c2e:	4844      	ldr	r0, [pc, #272]	; (8002d40 <HAL_UART_MspInit+0x1cc>)
 8002c30:	f000 fbd6 	bl	80033e0 <HAL_DMA_Init>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002c3a:	f7ff fe39 	bl	80028b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a3f      	ldr	r2, [pc, #252]	; (8002d40 <HAL_UART_MspInit+0x1cc>)
 8002c42:	639a      	str	r2, [r3, #56]	; 0x38
 8002c44:	4a3e      	ldr	r2, [pc, #248]	; (8002d40 <HAL_UART_MspInit+0x1cc>)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2105      	movs	r1, #5
 8002c4e:	2026      	movs	r0, #38	; 0x26
 8002c50:	f000 fb80 	bl	8003354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c54:	2026      	movs	r0, #38	; 0x26
 8002c56:	f000 fb99 	bl	800338c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c5a:	e067      	b.n	8002d2c <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART3)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a39      	ldr	r2, [pc, #228]	; (8002d48 <HAL_UART_MspInit+0x1d4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d162      	bne.n	8002d2c <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	4b33      	ldr	r3, [pc, #204]	; (8002d38 <HAL_UART_MspInit+0x1c4>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	4a32      	ldr	r2, [pc, #200]	; (8002d38 <HAL_UART_MspInit+0x1c4>)
 8002c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c74:	6413      	str	r3, [r2, #64]	; 0x40
 8002c76:	4b30      	ldr	r3, [pc, #192]	; (8002d38 <HAL_UART_MspInit+0x1c4>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	4b2c      	ldr	r3, [pc, #176]	; (8002d38 <HAL_UART_MspInit+0x1c4>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	4a2b      	ldr	r2, [pc, #172]	; (8002d38 <HAL_UART_MspInit+0x1c4>)
 8002c8c:	f043 0302 	orr.w	r3, r3, #2
 8002c90:	6313      	str	r3, [r2, #48]	; 0x30
 8002c92:	4b29      	ldr	r3, [pc, #164]	; (8002d38 <HAL_UART_MspInit+0x1c4>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8002c9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cac:	2303      	movs	r3, #3
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cb0:	2307      	movs	r3, #7
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb4:	f107 031c 	add.w	r3, r7, #28
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4824      	ldr	r0, [pc, #144]	; (8002d4c <HAL_UART_MspInit+0x1d8>)
 8002cbc:	f000 ff92 	bl	8003be4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002cc0:	4b23      	ldr	r3, [pc, #140]	; (8002d50 <HAL_UART_MspInit+0x1dc>)
 8002cc2:	4a24      	ldr	r2, [pc, #144]	; (8002d54 <HAL_UART_MspInit+0x1e0>)
 8002cc4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002cc6:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <HAL_UART_MspInit+0x1dc>)
 8002cc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ccc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cce:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <HAL_UART_MspInit+0x1dc>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cd4:	4b1e      	ldr	r3, [pc, #120]	; (8002d50 <HAL_UART_MspInit+0x1dc>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cda:	4b1d      	ldr	r3, [pc, #116]	; (8002d50 <HAL_UART_MspInit+0x1dc>)
 8002cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ce0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ce2:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <HAL_UART_MspInit+0x1dc>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ce8:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <HAL_UART_MspInit+0x1dc>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002cee:	4b18      	ldr	r3, [pc, #96]	; (8002d50 <HAL_UART_MspInit+0x1dc>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cf4:	4b16      	ldr	r3, [pc, #88]	; (8002d50 <HAL_UART_MspInit+0x1dc>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <HAL_UART_MspInit+0x1dc>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002d00:	4813      	ldr	r0, [pc, #76]	; (8002d50 <HAL_UART_MspInit+0x1dc>)
 8002d02:	f000 fb6d 	bl	80033e0 <HAL_DMA_Init>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8002d0c:	f7ff fdd0 	bl	80028b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a0f      	ldr	r2, [pc, #60]	; (8002d50 <HAL_UART_MspInit+0x1dc>)
 8002d14:	639a      	str	r2, [r3, #56]	; 0x38
 8002d16:	4a0e      	ldr	r2, [pc, #56]	; (8002d50 <HAL_UART_MspInit+0x1dc>)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2105      	movs	r1, #5
 8002d20:	2027      	movs	r0, #39	; 0x27
 8002d22:	f000 fb17 	bl	8003354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d26:	2027      	movs	r0, #39	; 0x27
 8002d28:	f000 fb30 	bl	800338c <HAL_NVIC_EnableIRQ>
}
 8002d2c:	bf00      	nop
 8002d2e:	3730      	adds	r7, #48	; 0x30
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40004400 	.word	0x40004400
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40020000 	.word	0x40020000
 8002d40:	20000474 	.word	0x20000474
 8002d44:	40026088 	.word	0x40026088
 8002d48:	40004800 	.word	0x40004800
 8002d4c:	40020400 	.word	0x40020400
 8002d50:	200004d4 	.word	0x200004d4
 8002d54:	40026028 	.word	0x40026028

08002d58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08c      	sub	sp, #48	; 0x30
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	4b2f      	ldr	r3, [pc, #188]	; (8002e2c <HAL_InitTick+0xd4>)
 8002d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d70:	4a2e      	ldr	r2, [pc, #184]	; (8002e2c <HAL_InitTick+0xd4>)
 8002d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d76:	6453      	str	r3, [r2, #68]	; 0x44
 8002d78:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <HAL_InitTick+0xd4>)
 8002d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d80:	60bb      	str	r3, [r7, #8]
 8002d82:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d84:	f107 020c 	add.w	r2, r7, #12
 8002d88:	f107 0310 	add.w	r3, r7, #16
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f002 fe96 	bl	8005ac0 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002d94:	f002 fe80 	bl	8005a98 <HAL_RCC_GetPCLK2Freq>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	4a23      	ldr	r2, [pc, #140]	; (8002e30 <HAL_InitTick+0xd8>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	0c9b      	lsrs	r3, r3, #18
 8002da8:	3b01      	subs	r3, #1
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8002dac:	4b21      	ldr	r3, [pc, #132]	; (8002e34 <HAL_InitTick+0xdc>)
 8002dae:	4a22      	ldr	r2, [pc, #136]	; (8002e38 <HAL_InitTick+0xe0>)
 8002db0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8002db2:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <HAL_InitTick+0xdc>)
 8002db4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002db8:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8002dba:	4a1e      	ldr	r2, [pc, #120]	; (8002e34 <HAL_InitTick+0xdc>)
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8002dc0:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <HAL_InitTick+0xdc>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dc6:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <HAL_InitTick+0xdc>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dcc:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <HAL_InitTick+0xdc>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8002dd2:	4818      	ldr	r0, [pc, #96]	; (8002e34 <HAL_InitTick+0xdc>)
 8002dd4:	f003 fb96 	bl	8006504 <HAL_TIM_Base_Init>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002dde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d11b      	bne.n	8002e1e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8002de6:	4813      	ldr	r0, [pc, #76]	; (8002e34 <HAL_InitTick+0xdc>)
 8002de8:	f003 fbdc 	bl	80065a4 <HAL_TIM_Base_Start_IT>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002df2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d111      	bne.n	8002e1e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002dfa:	2019      	movs	r0, #25
 8002dfc:	f000 fac6 	bl	800338c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b0f      	cmp	r3, #15
 8002e04:	d808      	bhi.n	8002e18 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002e06:	2200      	movs	r2, #0
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	2019      	movs	r0, #25
 8002e0c:	f000 faa2 	bl	8003354 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e10:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <HAL_InitTick+0xe4>)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e002      	b.n	8002e1e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002e1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3730      	adds	r7, #48	; 0x30
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	431bde83 	.word	0x431bde83
 8002e34:	20000608 	.word	0x20000608
 8002e38:	40014400 	.word	0x40014400
 8002e3c:	20000008 	.word	0x20000008

08002e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e44:	e7fe      	b.n	8002e44 <NMI_Handler+0x4>

08002e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e46:	b480      	push	{r7}
 8002e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e4a:	e7fe      	b.n	8002e4a <HardFault_Handler+0x4>

08002e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e50:	e7fe      	b.n	8002e50 <MemManage_Handler+0x4>

08002e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e52:	b480      	push	{r7}
 8002e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e56:	e7fe      	b.n	8002e56 <BusFault_Handler+0x4>

08002e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e5c:	e7fe      	b.n	8002e5c <UsageFault_Handler+0x4>

08002e5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e62:	bf00      	nop
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002e70:	4802      	ldr	r0, [pc, #8]	; (8002e7c <DMA1_Stream1_IRQHandler+0x10>)
 8002e72:	f000 fc4d 	bl	8003710 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	200004d4 	.word	0x200004d4

08002e80 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002e84:	4802      	ldr	r0, [pc, #8]	; (8002e90 <DMA1_Stream5_IRQHandler+0x10>)
 8002e86:	f000 fc43 	bl	8003710 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000474 	.word	0x20000474

08002e94 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002e98:	4802      	ldr	r0, [pc, #8]	; (8002ea4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002e9a:	f003 fbf3 	bl	8006684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000608 	.word	0x20000608

08002ea8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002eac:	4802      	ldr	r0, [pc, #8]	; (8002eb8 <SPI1_IRQHandler+0x10>)
 8002eae:	f003 f8b5 	bl	800601c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	200002ec 	.word	0x200002ec

08002ebc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ec0:	4802      	ldr	r0, [pc, #8]	; (8002ecc <USART2_IRQHandler+0x10>)
 8002ec2:	f003 ff83 	bl	8006dcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	200003ec 	.word	0x200003ec

08002ed0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ed4:	4802      	ldr	r0, [pc, #8]	; (8002ee0 <USART3_IRQHandler+0x10>)
 8002ed6:	f003 ff79 	bl	8006dcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000430 	.word	0x20000430

08002ee4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002ee8:	4802      	ldr	r0, [pc, #8]	; (8002ef4 <TIM7_IRQHandler+0x10>)
 8002eea:	f003 fbcb 	bl	8006684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	200003a4 	.word	0x200003a4

08002ef8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002efc:	4802      	ldr	r0, [pc, #8]	; (8002f08 <DMA2_Stream3_IRQHandler+0x10>)
 8002efe:	f000 fc07 	bl	8003710 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20000344 	.word	0x20000344

08002f0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
	return 1;
 8002f10:	2301      	movs	r3, #1
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <_kill>:

int _kill(int pid, int sig)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f26:	f024 fd99 	bl	8027a5c <__errno>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2216      	movs	r2, #22
 8002f2e:	601a      	str	r2, [r3, #0]
	return -1;
 8002f30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <_exit>:

void _exit (int status)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f44:	f04f 31ff 	mov.w	r1, #4294967295
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ffe7 	bl	8002f1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f4e:	e7fe      	b.n	8002f4e <_exit+0x12>

08002f50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	e00a      	b.n	8002f78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f62:	f3af 8000 	nop.w
 8002f66:	4601      	mov	r1, r0
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	60ba      	str	r2, [r7, #8]
 8002f6e:	b2ca      	uxtb	r2, r1
 8002f70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	3301      	adds	r3, #1
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	dbf0      	blt.n	8002f62 <_read+0x12>
	}

return len;
 8002f80:	687b      	ldr	r3, [r7, #4]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b086      	sub	sp, #24
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	e009      	b.n	8002fb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	60ba      	str	r2, [r7, #8]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	3301      	adds	r3, #1
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	dbf1      	blt.n	8002f9c <_write+0x12>
	}
	return len;
 8002fb8:	687b      	ldr	r3, [r7, #4]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <_close>:

int _close(int file)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
	return -1;
 8002fca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fea:	605a      	str	r2, [r3, #4]
	return 0;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <_isatty>:

int _isatty(int file)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
	return 1;
 8003002:	2301      	movs	r3, #1
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
	return 0;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003034:	4a14      	ldr	r2, [pc, #80]	; (8003088 <_sbrk+0x5c>)
 8003036:	4b15      	ldr	r3, [pc, #84]	; (800308c <_sbrk+0x60>)
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003040:	4b13      	ldr	r3, [pc, #76]	; (8003090 <_sbrk+0x64>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d102      	bne.n	800304e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003048:	4b11      	ldr	r3, [pc, #68]	; (8003090 <_sbrk+0x64>)
 800304a:	4a12      	ldr	r2, [pc, #72]	; (8003094 <_sbrk+0x68>)
 800304c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800304e:	4b10      	ldr	r3, [pc, #64]	; (8003090 <_sbrk+0x64>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	429a      	cmp	r2, r3
 800305a:	d207      	bcs.n	800306c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800305c:	f024 fcfe 	bl	8027a5c <__errno>
 8003060:	4603      	mov	r3, r0
 8003062:	220c      	movs	r2, #12
 8003064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003066:	f04f 33ff 	mov.w	r3, #4294967295
 800306a:	e009      	b.n	8003080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800306c:	4b08      	ldr	r3, [pc, #32]	; (8003090 <_sbrk+0x64>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003072:	4b07      	ldr	r3, [pc, #28]	; (8003090 <_sbrk+0x64>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	4a05      	ldr	r2, [pc, #20]	; (8003090 <_sbrk+0x64>)
 800307c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800307e:	68fb      	ldr	r3, [r7, #12]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20020000 	.word	0x20020000
 800308c:	00000400 	.word	0x00000400
 8003090:	20000650 	.word	0x20000650
 8003094:	2000c6e8 	.word	0x2000c6e8

08003098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800309c:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <SystemInit+0x28>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a2:	4a07      	ldr	r2, [pc, #28]	; (80030c0 <SystemInit+0x28>)
 80030a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80030ac:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <SystemInit+0x28>)
 80030ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030b2:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030c8:	480d      	ldr	r0, [pc, #52]	; (8003100 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030ca:	490e      	ldr	r1, [pc, #56]	; (8003104 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030cc:	4a0e      	ldr	r2, [pc, #56]	; (8003108 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030d0:	e002      	b.n	80030d8 <LoopCopyDataInit>

080030d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030d6:	3304      	adds	r3, #4

080030d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030dc:	d3f9      	bcc.n	80030d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030de:	4a0b      	ldr	r2, [pc, #44]	; (800310c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030e0:	4c0b      	ldr	r4, [pc, #44]	; (8003110 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030e4:	e001      	b.n	80030ea <LoopFillZerobss>

080030e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030e8:	3204      	adds	r2, #4

080030ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030ec:	d3fb      	bcc.n	80030e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030ee:	f7ff ffd3 	bl	8003098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030f2:	f024 fdc1 	bl	8027c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030f6:	f7fe fb2b 	bl	8001750 <main>
  bx  lr    
 80030fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003104:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8003108:	08030898 	.word	0x08030898
  ldr r2, =_sbss
 800310c:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 8003110:	2000c6e8 	.word	0x2000c6e8

08003114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003114:	e7fe      	b.n	8003114 <ADC_IRQHandler>
	...

08003118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800311c:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <HAL_Init+0x40>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a0d      	ldr	r2, [pc, #52]	; (8003158 <HAL_Init+0x40>)
 8003122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003126:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <HAL_Init+0x40>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0a      	ldr	r2, [pc, #40]	; (8003158 <HAL_Init+0x40>)
 800312e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003132:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003134:	4b08      	ldr	r3, [pc, #32]	; (8003158 <HAL_Init+0x40>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a07      	ldr	r2, [pc, #28]	; (8003158 <HAL_Init+0x40>)
 800313a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003140:	2003      	movs	r0, #3
 8003142:	f000 f8fc 	bl	800333e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003146:	200f      	movs	r0, #15
 8003148:	f7ff fe06 	bl	8002d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800314c:	f7ff fbca 	bl	80028e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40023c00 	.word	0x40023c00

0800315c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003160:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_IncTick+0x20>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_IncTick+0x24>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4413      	add	r3, r2
 800316c:	4a04      	ldr	r2, [pc, #16]	; (8003180 <HAL_IncTick+0x24>)
 800316e:	6013      	str	r3, [r2, #0]
}
 8003170:	bf00      	nop
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	2000000c 	.word	0x2000000c
 8003180:	20000654 	.word	0x20000654

08003184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return uwTick;
 8003188:	4b03      	ldr	r3, [pc, #12]	; (8003198 <HAL_GetTick+0x14>)
 800318a:	681b      	ldr	r3, [r3, #0]
}
 800318c:	4618      	mov	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	20000654 	.word	0x20000654

0800319c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031a4:	f7ff ffee 	bl	8003184 <HAL_GetTick>
 80031a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b4:	d005      	beq.n	80031c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031b6:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <HAL_Delay+0x44>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4413      	add	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031c2:	bf00      	nop
 80031c4:	f7ff ffde 	bl	8003184 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d8f7      	bhi.n	80031c4 <HAL_Delay+0x28>
  {
  }
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	2000000c 	.word	0x2000000c

080031e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <__NVIC_SetPriorityGrouping+0x44>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003200:	4013      	ands	r3, r2
 8003202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800320c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003216:	4a04      	ldr	r2, [pc, #16]	; (8003228 <__NVIC_SetPriorityGrouping+0x44>)
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	60d3      	str	r3, [r2, #12]
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003230:	4b04      	ldr	r3, [pc, #16]	; (8003244 <__NVIC_GetPriorityGrouping+0x18>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	0a1b      	lsrs	r3, r3, #8
 8003236:	f003 0307 	and.w	r3, r3, #7
}
 800323a:	4618      	mov	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	2b00      	cmp	r3, #0
 8003258:	db0b      	blt.n	8003272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	f003 021f 	and.w	r2, r3, #31
 8003260:	4907      	ldr	r1, [pc, #28]	; (8003280 <__NVIC_EnableIRQ+0x38>)
 8003262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	2001      	movs	r0, #1
 800326a:	fa00 f202 	lsl.w	r2, r0, r2
 800326e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	e000e100 	.word	0xe000e100

08003284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	6039      	str	r1, [r7, #0]
 800328e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003294:	2b00      	cmp	r3, #0
 8003296:	db0a      	blt.n	80032ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	b2da      	uxtb	r2, r3
 800329c:	490c      	ldr	r1, [pc, #48]	; (80032d0 <__NVIC_SetPriority+0x4c>)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	0112      	lsls	r2, r2, #4
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	440b      	add	r3, r1
 80032a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032ac:	e00a      	b.n	80032c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	4908      	ldr	r1, [pc, #32]	; (80032d4 <__NVIC_SetPriority+0x50>)
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	3b04      	subs	r3, #4
 80032bc:	0112      	lsls	r2, r2, #4
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	440b      	add	r3, r1
 80032c2:	761a      	strb	r2, [r3, #24]
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	e000e100 	.word	0xe000e100
 80032d4:	e000ed00 	.word	0xe000ed00

080032d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d8:	b480      	push	{r7}
 80032da:	b089      	sub	sp, #36	; 0x24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f1c3 0307 	rsb	r3, r3, #7
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	bf28      	it	cs
 80032f6:	2304      	movcs	r3, #4
 80032f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3304      	adds	r3, #4
 80032fe:	2b06      	cmp	r3, #6
 8003300:	d902      	bls.n	8003308 <NVIC_EncodePriority+0x30>
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3b03      	subs	r3, #3
 8003306:	e000      	b.n	800330a <NVIC_EncodePriority+0x32>
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800330c:	f04f 32ff 	mov.w	r2, #4294967295
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43da      	mvns	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	401a      	ands	r2, r3
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003320:	f04f 31ff 	mov.w	r1, #4294967295
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	fa01 f303 	lsl.w	r3, r1, r3
 800332a:	43d9      	mvns	r1, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003330:	4313      	orrs	r3, r2
         );
}
 8003332:	4618      	mov	r0, r3
 8003334:	3724      	adds	r7, #36	; 0x24
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ff4c 	bl	80031e4 <__NVIC_SetPriorityGrouping>
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003366:	f7ff ff61 	bl	800322c <__NVIC_GetPriorityGrouping>
 800336a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	6978      	ldr	r0, [r7, #20]
 8003372:	f7ff ffb1 	bl	80032d8 <NVIC_EncodePriority>
 8003376:	4602      	mov	r2, r0
 8003378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337c:	4611      	mov	r1, r2
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff ff80 	bl	8003284 <__NVIC_SetPriority>
}
 8003384:	bf00      	nop
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff ff54 	bl	8003248 <__NVIC_EnableIRQ>
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e00e      	b.n	80033d8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	795b      	ldrb	r3, [r3, #5]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d105      	bne.n	80033d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff fab6 	bl	800293c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033ec:	f7ff feca 	bl	8003184 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e099      	b.n	8003530 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800341c:	e00f      	b.n	800343e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800341e:	f7ff feb1 	bl	8003184 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b05      	cmp	r3, #5
 800342a:	d908      	bls.n	800343e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2203      	movs	r2, #3
 8003436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e078      	b.n	8003530 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1e8      	bne.n	800341e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4b38      	ldr	r3, [pc, #224]	; (8003538 <HAL_DMA_Init+0x158>)
 8003458:	4013      	ands	r3, r2
 800345a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800346a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003476:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003482:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	2b04      	cmp	r3, #4
 8003496:	d107      	bne.n	80034a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	4313      	orrs	r3, r2
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f023 0307 	bic.w	r3, r3, #7
 80034be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d117      	bne.n	8003502 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00e      	beq.n	8003502 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fb01 	bl	8003aec <DMA_CheckFifoParam>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2240      	movs	r2, #64	; 0x40
 80034f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034fe:	2301      	movs	r3, #1
 8003500:	e016      	b.n	8003530 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fab8 	bl	8003a80 <DMA_CalcBaseAndBitshift>
 8003510:	4603      	mov	r3, r0
 8003512:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003518:	223f      	movs	r2, #63	; 0x3f
 800351a:	409a      	lsls	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	f010803f 	.word	0xf010803f

0800353c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003552:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_DMA_Start_IT+0x26>
 800355e:	2302      	movs	r3, #2
 8003560:	e040      	b.n	80035e4 <HAL_DMA_Start_IT+0xa8>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	d12f      	bne.n	80035d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2202      	movs	r2, #2
 800357a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 fa4a 	bl	8003a24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003594:	223f      	movs	r2, #63	; 0x3f
 8003596:	409a      	lsls	r2, r3
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0216 	orr.w	r2, r2, #22
 80035aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d007      	beq.n	80035c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0208 	orr.w	r2, r2, #8
 80035c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	e005      	b.n	80035e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035de:	2302      	movs	r3, #2
 80035e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035fa:	f7ff fdc3 	bl	8003184 <HAL_GetTick>
 80035fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d008      	beq.n	800361e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2280      	movs	r2, #128	; 0x80
 8003610:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e052      	b.n	80036c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0216 	bic.w	r2, r2, #22
 800362c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800363c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	d103      	bne.n	800364e <HAL_DMA_Abort+0x62>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0208 	bic.w	r2, r2, #8
 800365c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0201 	bic.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800366e:	e013      	b.n	8003698 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003670:	f7ff fd88 	bl	8003184 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b05      	cmp	r3, #5
 800367c:	d90c      	bls.n	8003698 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2203      	movs	r2, #3
 8003688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e015      	b.n	80036c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1e4      	bne.n	8003670 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036aa:	223f      	movs	r2, #63	; 0x3f
 80036ac:	409a      	lsls	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d004      	beq.n	80036ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2280      	movs	r2, #128	; 0x80
 80036e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e00c      	b.n	8003704 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2205      	movs	r2, #5
 80036ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0201 	bic.w	r2, r2, #1
 8003700:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800371c:	4b8e      	ldr	r3, [pc, #568]	; (8003958 <HAL_DMA_IRQHandler+0x248>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a8e      	ldr	r2, [pc, #568]	; (800395c <HAL_DMA_IRQHandler+0x24c>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	0a9b      	lsrs	r3, r3, #10
 8003728:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373a:	2208      	movs	r2, #8
 800373c:	409a      	lsls	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4013      	ands	r3, r2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d01a      	beq.n	800377c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d013      	beq.n	800377c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0204 	bic.w	r2, r2, #4
 8003762:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003768:	2208      	movs	r2, #8
 800376a:	409a      	lsls	r2, r3
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003774:	f043 0201 	orr.w	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003780:	2201      	movs	r2, #1
 8003782:	409a      	lsls	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d012      	beq.n	80037b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00b      	beq.n	80037b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379e:	2201      	movs	r2, #1
 80037a0:	409a      	lsls	r2, r3
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037aa:	f043 0202 	orr.w	r2, r3, #2
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b6:	2204      	movs	r2, #4
 80037b8:	409a      	lsls	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4013      	ands	r3, r2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d012      	beq.n	80037e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00b      	beq.n	80037e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d4:	2204      	movs	r2, #4
 80037d6:	409a      	lsls	r2, r3
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e0:	f043 0204 	orr.w	r2, r3, #4
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ec:	2210      	movs	r2, #16
 80037ee:	409a      	lsls	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d043      	beq.n	8003880 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d03c      	beq.n	8003880 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380a:	2210      	movs	r2, #16
 800380c:	409a      	lsls	r2, r3
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d018      	beq.n	8003852 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d108      	bne.n	8003840 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	d024      	beq.n	8003880 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4798      	blx	r3
 800383e:	e01f      	b.n	8003880 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01b      	beq.n	8003880 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	4798      	blx	r3
 8003850:	e016      	b.n	8003880 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385c:	2b00      	cmp	r3, #0
 800385e:	d107      	bne.n	8003870 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0208 	bic.w	r2, r2, #8
 800386e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003884:	2220      	movs	r2, #32
 8003886:	409a      	lsls	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4013      	ands	r3, r2
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 808f 	beq.w	80039b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 8087 	beq.w	80039b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a6:	2220      	movs	r2, #32
 80038a8:	409a      	lsls	r2, r3
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b05      	cmp	r3, #5
 80038b8:	d136      	bne.n	8003928 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0216 	bic.w	r2, r2, #22
 80038c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695a      	ldr	r2, [r3, #20]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d103      	bne.n	80038ea <HAL_DMA_IRQHandler+0x1da>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d007      	beq.n	80038fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0208 	bic.w	r2, r2, #8
 80038f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fe:	223f      	movs	r2, #63	; 0x3f
 8003900:	409a      	lsls	r2, r3
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391a:	2b00      	cmp	r3, #0
 800391c:	d07e      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	4798      	blx	r3
        }
        return;
 8003926:	e079      	b.n	8003a1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d01d      	beq.n	8003972 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10d      	bne.n	8003960 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003948:	2b00      	cmp	r3, #0
 800394a:	d031      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	4798      	blx	r3
 8003954:	e02c      	b.n	80039b0 <HAL_DMA_IRQHandler+0x2a0>
 8003956:	bf00      	nop
 8003958:	20000004 	.word	0x20000004
 800395c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003964:	2b00      	cmp	r3, #0
 8003966:	d023      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
 8003970:	e01e      	b.n	80039b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10f      	bne.n	80039a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0210 	bic.w	r2, r2, #16
 800398e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d032      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d022      	beq.n	8003a0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2205      	movs	r2, #5
 80039c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	3301      	adds	r3, #1
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d307      	bcc.n	80039f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f2      	bne.n	80039dc <HAL_DMA_IRQHandler+0x2cc>
 80039f6:	e000      	b.n	80039fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80039f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	4798      	blx	r3
 8003a1a:	e000      	b.n	8003a1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a1c:	bf00      	nop
    }
  }
}
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b40      	cmp	r3, #64	; 0x40
 8003a50:	d108      	bne.n	8003a64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a62:	e007      	b.n	8003a74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	60da      	str	r2, [r3, #12]
}
 8003a74:	bf00      	nop
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	3b10      	subs	r3, #16
 8003a90:	4a14      	ldr	r2, [pc, #80]	; (8003ae4 <DMA_CalcBaseAndBitshift+0x64>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	091b      	lsrs	r3, r3, #4
 8003a98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a9a:	4a13      	ldr	r2, [pc, #76]	; (8003ae8 <DMA_CalcBaseAndBitshift+0x68>)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d909      	bls.n	8003ac2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ab6:	f023 0303 	bic.w	r3, r3, #3
 8003aba:	1d1a      	adds	r2, r3, #4
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	659a      	str	r2, [r3, #88]	; 0x58
 8003ac0:	e007      	b.n	8003ad2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003aca:	f023 0303 	bic.w	r3, r3, #3
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	aaaaaaab 	.word	0xaaaaaaab
 8003ae8:	0802d8bc 	.word	0x0802d8bc

08003aec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d11f      	bne.n	8003b46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d856      	bhi.n	8003bba <DMA_CheckFifoParam+0xce>
 8003b0c:	a201      	add	r2, pc, #4	; (adr r2, 8003b14 <DMA_CheckFifoParam+0x28>)
 8003b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b12:	bf00      	nop
 8003b14:	08003b25 	.word	0x08003b25
 8003b18:	08003b37 	.word	0x08003b37
 8003b1c:	08003b25 	.word	0x08003b25
 8003b20:	08003bbb 	.word	0x08003bbb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d046      	beq.n	8003bbe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b34:	e043      	b.n	8003bbe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b3e:	d140      	bne.n	8003bc2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b44:	e03d      	b.n	8003bc2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b4e:	d121      	bne.n	8003b94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d837      	bhi.n	8003bc6 <DMA_CheckFifoParam+0xda>
 8003b56:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <DMA_CheckFifoParam+0x70>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003b6d 	.word	0x08003b6d
 8003b60:	08003b73 	.word	0x08003b73
 8003b64:	08003b6d 	.word	0x08003b6d
 8003b68:	08003b85 	.word	0x08003b85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b70:	e030      	b.n	8003bd4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d025      	beq.n	8003bca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b82:	e022      	b.n	8003bca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b8c:	d11f      	bne.n	8003bce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b92:	e01c      	b.n	8003bce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d903      	bls.n	8003ba2 <DMA_CheckFifoParam+0xb6>
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d003      	beq.n	8003ba8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ba0:	e018      	b.n	8003bd4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba6:	e015      	b.n	8003bd4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00e      	beq.n	8003bd2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb8:	e00b      	b.n	8003bd2 <DMA_CheckFifoParam+0xe6>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e00a      	b.n	8003bd4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bbe:	bf00      	nop
 8003bc0:	e008      	b.n	8003bd4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bc2:	bf00      	nop
 8003bc4:	e006      	b.n	8003bd4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bc6:	bf00      	nop
 8003bc8:	e004      	b.n	8003bd4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bca:	bf00      	nop
 8003bcc:	e002      	b.n	8003bd4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003bce:	bf00      	nop
 8003bd0:	e000      	b.n	8003bd4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bd2:	bf00      	nop
    }
  } 
  
  return status; 
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop

08003be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b089      	sub	sp, #36	; 0x24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
 8003bfe:	e16b      	b.n	8003ed8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c00:	2201      	movs	r2, #1
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4013      	ands	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	f040 815a 	bne.w	8003ed2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d005      	beq.n	8003c36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d130      	bne.n	8003c98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	2203      	movs	r2, #3
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	43db      	mvns	r3, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	091b      	lsrs	r3, r3, #4
 8003c82:	f003 0201 	and.w	r2, r3, #1
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d017      	beq.n	8003cd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	2203      	movs	r2, #3
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 0303 	and.w	r3, r3, #3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d123      	bne.n	8003d28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	08da      	lsrs	r2, r3, #3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3208      	adds	r2, #8
 8003ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	220f      	movs	r2, #15
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4013      	ands	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	08da      	lsrs	r2, r3, #3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3208      	adds	r2, #8
 8003d22:	69b9      	ldr	r1, [r7, #24]
 8003d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	2203      	movs	r2, #3
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 0203 	and.w	r2, r3, #3
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80b4 	beq.w	8003ed2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	4b60      	ldr	r3, [pc, #384]	; (8003ef0 <HAL_GPIO_Init+0x30c>)
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	4a5f      	ldr	r2, [pc, #380]	; (8003ef0 <HAL_GPIO_Init+0x30c>)
 8003d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d78:	6453      	str	r3, [r2, #68]	; 0x44
 8003d7a:	4b5d      	ldr	r3, [pc, #372]	; (8003ef0 <HAL_GPIO_Init+0x30c>)
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d86:	4a5b      	ldr	r2, [pc, #364]	; (8003ef4 <HAL_GPIO_Init+0x310>)
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	089b      	lsrs	r3, r3, #2
 8003d8c:	3302      	adds	r3, #2
 8003d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	220f      	movs	r2, #15
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	43db      	mvns	r3, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4013      	ands	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a52      	ldr	r2, [pc, #328]	; (8003ef8 <HAL_GPIO_Init+0x314>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d02b      	beq.n	8003e0a <HAL_GPIO_Init+0x226>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a51      	ldr	r2, [pc, #324]	; (8003efc <HAL_GPIO_Init+0x318>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d025      	beq.n	8003e06 <HAL_GPIO_Init+0x222>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a50      	ldr	r2, [pc, #320]	; (8003f00 <HAL_GPIO_Init+0x31c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d01f      	beq.n	8003e02 <HAL_GPIO_Init+0x21e>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a4f      	ldr	r2, [pc, #316]	; (8003f04 <HAL_GPIO_Init+0x320>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d019      	beq.n	8003dfe <HAL_GPIO_Init+0x21a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a4e      	ldr	r2, [pc, #312]	; (8003f08 <HAL_GPIO_Init+0x324>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d013      	beq.n	8003dfa <HAL_GPIO_Init+0x216>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a4d      	ldr	r2, [pc, #308]	; (8003f0c <HAL_GPIO_Init+0x328>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00d      	beq.n	8003df6 <HAL_GPIO_Init+0x212>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a4c      	ldr	r2, [pc, #304]	; (8003f10 <HAL_GPIO_Init+0x32c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d007      	beq.n	8003df2 <HAL_GPIO_Init+0x20e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a4b      	ldr	r2, [pc, #300]	; (8003f14 <HAL_GPIO_Init+0x330>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d101      	bne.n	8003dee <HAL_GPIO_Init+0x20a>
 8003dea:	2307      	movs	r3, #7
 8003dec:	e00e      	b.n	8003e0c <HAL_GPIO_Init+0x228>
 8003dee:	2308      	movs	r3, #8
 8003df0:	e00c      	b.n	8003e0c <HAL_GPIO_Init+0x228>
 8003df2:	2306      	movs	r3, #6
 8003df4:	e00a      	b.n	8003e0c <HAL_GPIO_Init+0x228>
 8003df6:	2305      	movs	r3, #5
 8003df8:	e008      	b.n	8003e0c <HAL_GPIO_Init+0x228>
 8003dfa:	2304      	movs	r3, #4
 8003dfc:	e006      	b.n	8003e0c <HAL_GPIO_Init+0x228>
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e004      	b.n	8003e0c <HAL_GPIO_Init+0x228>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e002      	b.n	8003e0c <HAL_GPIO_Init+0x228>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <HAL_GPIO_Init+0x228>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	f002 0203 	and.w	r2, r2, #3
 8003e12:	0092      	lsls	r2, r2, #2
 8003e14:	4093      	lsls	r3, r2
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e1c:	4935      	ldr	r1, [pc, #212]	; (8003ef4 <HAL_GPIO_Init+0x310>)
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	089b      	lsrs	r3, r3, #2
 8003e22:	3302      	adds	r3, #2
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e2a:	4b3b      	ldr	r3, [pc, #236]	; (8003f18 <HAL_GPIO_Init+0x334>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	43db      	mvns	r3, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4013      	ands	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e4e:	4a32      	ldr	r2, [pc, #200]	; (8003f18 <HAL_GPIO_Init+0x334>)
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e54:	4b30      	ldr	r3, [pc, #192]	; (8003f18 <HAL_GPIO_Init+0x334>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4013      	ands	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e78:	4a27      	ldr	r2, [pc, #156]	; (8003f18 <HAL_GPIO_Init+0x334>)
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e7e:	4b26      	ldr	r3, [pc, #152]	; (8003f18 <HAL_GPIO_Init+0x334>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	43db      	mvns	r3, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ea2:	4a1d      	ldr	r2, [pc, #116]	; (8003f18 <HAL_GPIO_Init+0x334>)
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <HAL_GPIO_Init+0x334>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ecc:	4a12      	ldr	r2, [pc, #72]	; (8003f18 <HAL_GPIO_Init+0x334>)
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	61fb      	str	r3, [r7, #28]
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	2b0f      	cmp	r3, #15
 8003edc:	f67f ae90 	bls.w	8003c00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	3724      	adds	r7, #36	; 0x24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40013800 	.word	0x40013800
 8003ef8:	40020000 	.word	0x40020000
 8003efc:	40020400 	.word	0x40020400
 8003f00:	40020800 	.word	0x40020800
 8003f04:	40020c00 	.word	0x40020c00
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	40021400 	.word	0x40021400
 8003f10:	40021800 	.word	0x40021800
 8003f14:	40021c00 	.word	0x40021c00
 8003f18:	40013c00 	.word	0x40013c00

08003f1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	887b      	ldrh	r3, [r7, #2]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
 8003f38:	e001      	b.n	8003f3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	807b      	strh	r3, [r7, #2]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f5c:	787b      	ldrb	r3, [r7, #1]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f62:	887a      	ldrh	r2, [r7, #2]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f68:	e003      	b.n	8003f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f6a:	887b      	ldrh	r3, [r7, #2]
 8003f6c:	041a      	lsls	r2, r3, #16
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	619a      	str	r2, [r3, #24]
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	460b      	mov	r3, r1
 8003f88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f90:	887a      	ldrh	r2, [r7, #2]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	4013      	ands	r3, r2
 8003f96:	041a      	lsls	r2, r3, #16
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	43d9      	mvns	r1, r3
 8003f9c:	887b      	ldrh	r3, [r7, #2]
 8003f9e:	400b      	ands	r3, r1
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	619a      	str	r2, [r3, #24]
}
 8003fa6:	bf00      	nop
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e12b      	b.n	800421e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fe fcd0 	bl	8002980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2224      	movs	r2, #36	; 0x24
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0201 	bic.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004006:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004016:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004018:	f001 fd2a 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 800401c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	4a81      	ldr	r2, [pc, #516]	; (8004228 <HAL_I2C_Init+0x274>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d807      	bhi.n	8004038 <HAL_I2C_Init+0x84>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4a80      	ldr	r2, [pc, #512]	; (800422c <HAL_I2C_Init+0x278>)
 800402c:	4293      	cmp	r3, r2
 800402e:	bf94      	ite	ls
 8004030:	2301      	movls	r3, #1
 8004032:	2300      	movhi	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	e006      	b.n	8004046 <HAL_I2C_Init+0x92>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4a7d      	ldr	r2, [pc, #500]	; (8004230 <HAL_I2C_Init+0x27c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	bf94      	ite	ls
 8004040:	2301      	movls	r3, #1
 8004042:	2300      	movhi	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e0e7      	b.n	800421e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4a78      	ldr	r2, [pc, #480]	; (8004234 <HAL_I2C_Init+0x280>)
 8004052:	fba2 2303 	umull	r2, r3, r2, r3
 8004056:	0c9b      	lsrs	r3, r3, #18
 8004058:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	430a      	orrs	r2, r1
 800406c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	4a6a      	ldr	r2, [pc, #424]	; (8004228 <HAL_I2C_Init+0x274>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d802      	bhi.n	8004088 <HAL_I2C_Init+0xd4>
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	3301      	adds	r3, #1
 8004086:	e009      	b.n	800409c <HAL_I2C_Init+0xe8>
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800408e:	fb02 f303 	mul.w	r3, r2, r3
 8004092:	4a69      	ldr	r2, [pc, #420]	; (8004238 <HAL_I2C_Init+0x284>)
 8004094:	fba2 2303 	umull	r2, r3, r2, r3
 8004098:	099b      	lsrs	r3, r3, #6
 800409a:	3301      	adds	r3, #1
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6812      	ldr	r2, [r2, #0]
 80040a0:	430b      	orrs	r3, r1
 80040a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	495c      	ldr	r1, [pc, #368]	; (8004228 <HAL_I2C_Init+0x274>)
 80040b8:	428b      	cmp	r3, r1
 80040ba:	d819      	bhi.n	80040f0 <HAL_I2C_Init+0x13c>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	1e59      	subs	r1, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040ca:	1c59      	adds	r1, r3, #1
 80040cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80040d0:	400b      	ands	r3, r1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <HAL_I2C_Init+0x138>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1e59      	subs	r1, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80040e4:	3301      	adds	r3, #1
 80040e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ea:	e051      	b.n	8004190 <HAL_I2C_Init+0x1dc>
 80040ec:	2304      	movs	r3, #4
 80040ee:	e04f      	b.n	8004190 <HAL_I2C_Init+0x1dc>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d111      	bne.n	800411c <HAL_I2C_Init+0x168>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	1e58      	subs	r0, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6859      	ldr	r1, [r3, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	440b      	add	r3, r1
 8004106:	fbb0 f3f3 	udiv	r3, r0, r3
 800410a:	3301      	adds	r3, #1
 800410c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004110:	2b00      	cmp	r3, #0
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	e012      	b.n	8004142 <HAL_I2C_Init+0x18e>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	1e58      	subs	r0, r3, #1
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6859      	ldr	r1, [r3, #4]
 8004124:	460b      	mov	r3, r1
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	0099      	lsls	r1, r3, #2
 800412c:	440b      	add	r3, r1
 800412e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004132:	3301      	adds	r3, #1
 8004134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004138:	2b00      	cmp	r3, #0
 800413a:	bf0c      	ite	eq
 800413c:	2301      	moveq	r3, #1
 800413e:	2300      	movne	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <HAL_I2C_Init+0x196>
 8004146:	2301      	movs	r3, #1
 8004148:	e022      	b.n	8004190 <HAL_I2C_Init+0x1dc>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10e      	bne.n	8004170 <HAL_I2C_Init+0x1bc>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	1e58      	subs	r0, r3, #1
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6859      	ldr	r1, [r3, #4]
 800415a:	460b      	mov	r3, r1
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	440b      	add	r3, r1
 8004160:	fbb0 f3f3 	udiv	r3, r0, r3
 8004164:	3301      	adds	r3, #1
 8004166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800416a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800416e:	e00f      	b.n	8004190 <HAL_I2C_Init+0x1dc>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	1e58      	subs	r0, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6859      	ldr	r1, [r3, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	0099      	lsls	r1, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	fbb0 f3f3 	udiv	r3, r0, r3
 8004186:	3301      	adds	r3, #1
 8004188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800418c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	6809      	ldr	r1, [r1, #0]
 8004194:	4313      	orrs	r3, r2
 8004196:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69da      	ldr	r2, [r3, #28]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6911      	ldr	r1, [r2, #16]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	68d2      	ldr	r2, [r2, #12]
 80041ca:	4311      	orrs	r1, r2
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	430b      	orrs	r3, r1
 80041d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695a      	ldr	r2, [r3, #20]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0201 	orr.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	000186a0 	.word	0x000186a0
 800422c:	001e847f 	.word	0x001e847f
 8004230:	003d08ff 	.word	0x003d08ff
 8004234:	431bde83 	.word	0x431bde83
 8004238:	10624dd3 	.word	0x10624dd3

0800423c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	4608      	mov	r0, r1
 8004246:	4611      	mov	r1, r2
 8004248:	461a      	mov	r2, r3
 800424a:	4603      	mov	r3, r0
 800424c:	817b      	strh	r3, [r7, #10]
 800424e:	460b      	mov	r3, r1
 8004250:	813b      	strh	r3, [r7, #8]
 8004252:	4613      	mov	r3, r2
 8004254:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004256:	f7fe ff95 	bl	8003184 <HAL_GetTick>
 800425a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b20      	cmp	r3, #32
 8004266:	f040 80d9 	bne.w	800441c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	2319      	movs	r3, #25
 8004270:	2201      	movs	r2, #1
 8004272:	496d      	ldr	r1, [pc, #436]	; (8004428 <HAL_I2C_Mem_Write+0x1ec>)
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 fdad 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004280:	2302      	movs	r3, #2
 8004282:	e0cc      	b.n	800441e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_I2C_Mem_Write+0x56>
 800428e:	2302      	movs	r3, #2
 8004290:	e0c5      	b.n	800441e <HAL_I2C_Mem_Write+0x1e2>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d007      	beq.n	80042b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2221      	movs	r2, #33	; 0x21
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2240      	movs	r2, #64	; 0x40
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a3a      	ldr	r2, [r7, #32]
 80042e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80042e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4a4d      	ldr	r2, [pc, #308]	; (800442c <HAL_I2C_Mem_Write+0x1f0>)
 80042f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042fa:	88f8      	ldrh	r0, [r7, #6]
 80042fc:	893a      	ldrh	r2, [r7, #8]
 80042fe:	8979      	ldrh	r1, [r7, #10]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	9301      	str	r3, [sp, #4]
 8004304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	4603      	mov	r3, r0
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 fbe4 	bl	8004ad8 <I2C_RequestMemoryWrite>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d052      	beq.n	80043bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e081      	b.n	800441e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 fe2e 	bl	8004f80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00d      	beq.n	8004346 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	2b04      	cmp	r3, #4
 8004330:	d107      	bne.n	8004342 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004340:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e06b      	b.n	800441e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	781a      	ldrb	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b04      	cmp	r3, #4
 8004382:	d11b      	bne.n	80043bc <HAL_I2C_Mem_Write+0x180>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004388:	2b00      	cmp	r3, #0
 800438a:	d017      	beq.n	80043bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	781a      	ldrb	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1aa      	bne.n	800431a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 fe1a 	bl	8005002 <I2C_WaitOnBTFFlagUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00d      	beq.n	80043f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d107      	bne.n	80043ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e016      	b.n	800441e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	e000      	b.n	800441e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800441c:	2302      	movs	r3, #2
  }
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	00100002 	.word	0x00100002
 800442c:	ffff0000 	.word	0xffff0000

08004430 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b08c      	sub	sp, #48	; 0x30
 8004434:	af02      	add	r7, sp, #8
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	4608      	mov	r0, r1
 800443a:	4611      	mov	r1, r2
 800443c:	461a      	mov	r2, r3
 800443e:	4603      	mov	r3, r0
 8004440:	817b      	strh	r3, [r7, #10]
 8004442:	460b      	mov	r3, r1
 8004444:	813b      	strh	r3, [r7, #8]
 8004446:	4613      	mov	r3, r2
 8004448:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800444a:	f7fe fe9b 	bl	8003184 <HAL_GetTick>
 800444e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b20      	cmp	r3, #32
 800445a:	f040 8208 	bne.w	800486e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	2319      	movs	r3, #25
 8004464:	2201      	movs	r2, #1
 8004466:	497b      	ldr	r1, [pc, #492]	; (8004654 <HAL_I2C_Mem_Read+0x224>)
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 fcb3 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004474:	2302      	movs	r3, #2
 8004476:	e1fb      	b.n	8004870 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_I2C_Mem_Read+0x56>
 8004482:	2302      	movs	r3, #2
 8004484:	e1f4      	b.n	8004870 <HAL_I2C_Mem_Read+0x440>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b01      	cmp	r3, #1
 800449a:	d007      	beq.n	80044ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2222      	movs	r2, #34	; 0x22
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2240      	movs	r2, #64	; 0x40
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80044dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4a5b      	ldr	r2, [pc, #364]	; (8004658 <HAL_I2C_Mem_Read+0x228>)
 80044ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044ee:	88f8      	ldrh	r0, [r7, #6]
 80044f0:	893a      	ldrh	r2, [r7, #8]
 80044f2:	8979      	ldrh	r1, [r7, #10]
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	9301      	str	r3, [sp, #4]
 80044f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	4603      	mov	r3, r0
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 fb80 	bl	8004c04 <I2C_RequestMemoryRead>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e1b0      	b.n	8004870 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004512:	2b00      	cmp	r3, #0
 8004514:	d113      	bne.n	800453e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004516:	2300      	movs	r3, #0
 8004518:	623b      	str	r3, [r7, #32]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	623b      	str	r3, [r7, #32]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	623b      	str	r3, [r7, #32]
 800452a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	e184      	b.n	8004848 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004542:	2b01      	cmp	r3, #1
 8004544:	d11b      	bne.n	800457e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004554:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004556:	2300      	movs	r3, #0
 8004558:	61fb      	str	r3, [r7, #28]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	e164      	b.n	8004848 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004582:	2b02      	cmp	r3, #2
 8004584:	d11b      	bne.n	80045be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004594:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a6:	2300      	movs	r3, #0
 80045a8:	61bb      	str	r3, [r7, #24]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	61bb      	str	r3, [r7, #24]
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	e144      	b.n	8004848 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80045d4:	e138      	b.n	8004848 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045da:	2b03      	cmp	r3, #3
 80045dc:	f200 80f1 	bhi.w	80047c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d123      	bne.n	8004630 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 fd49 	bl	8005084 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e139      	b.n	8004870 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004618:	3b01      	subs	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800462e:	e10b      	b.n	8004848 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004634:	2b02      	cmp	r3, #2
 8004636:	d14e      	bne.n	80046d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463e:	2200      	movs	r2, #0
 8004640:	4906      	ldr	r1, [pc, #24]	; (800465c <HAL_I2C_Mem_Read+0x22c>)
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 fbc6 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d008      	beq.n	8004660 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e10e      	b.n	8004870 <HAL_I2C_Mem_Read+0x440>
 8004652:	bf00      	nop
 8004654:	00100002 	.word	0x00100002
 8004658:	ffff0000 	.word	0xffff0000
 800465c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800466e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004698:	b29b      	uxth	r3, r3
 800469a:	3b01      	subs	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046d4:	e0b8      	b.n	8004848 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046dc:	2200      	movs	r2, #0
 80046de:	4966      	ldr	r1, [pc, #408]	; (8004878 <HAL_I2C_Mem_Read+0x448>)
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 fb77 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0bf      	b.n	8004870 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691a      	ldr	r2, [r3, #16]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004738:	2200      	movs	r2, #0
 800473a:	494f      	ldr	r1, [pc, #316]	; (8004878 <HAL_I2C_Mem_Read+0x448>)
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fb49 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e091      	b.n	8004870 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800475a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004778:	3b01      	subs	r3, #1
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004784:	b29b      	uxth	r3, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	1c5a      	adds	r2, r3, #1
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047aa:	3b01      	subs	r3, #1
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047c0:	e042      	b.n	8004848 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 fc5c 	bl	8005084 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e04c      	b.n	8004870 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fe:	b29b      	uxth	r3, r3
 8004800:	3b01      	subs	r3, #1
 8004802:	b29a      	uxth	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b04      	cmp	r3, #4
 8004814:	d118      	bne.n	8004848 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004832:	3b01      	subs	r3, #1
 8004834:	b29a      	uxth	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484c:	2b00      	cmp	r3, #0
 800484e:	f47f aec2 	bne.w	80045d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2220      	movs	r2, #32
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	e000      	b.n	8004870 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800486e:	2302      	movs	r3, #2
  }
}
 8004870:	4618      	mov	r0, r3
 8004872:	3728      	adds	r7, #40	; 0x28
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	00010004 	.word	0x00010004

0800487c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08a      	sub	sp, #40	; 0x28
 8004880:	af02      	add	r7, sp, #8
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	607a      	str	r2, [r7, #4]
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	460b      	mov	r3, r1
 800488a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800488c:	f7fe fc7a 	bl	8003184 <HAL_GetTick>
 8004890:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b20      	cmp	r3, #32
 80048a0:	f040 8111 	bne.w	8004ac6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	2319      	movs	r3, #25
 80048aa:	2201      	movs	r2, #1
 80048ac:	4988      	ldr	r1, [pc, #544]	; (8004ad0 <HAL_I2C_IsDeviceReady+0x254>)
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 fa90 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80048ba:	2302      	movs	r3, #2
 80048bc:	e104      	b.n	8004ac8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_I2C_IsDeviceReady+0x50>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e0fd      	b.n	8004ac8 <HAL_I2C_IsDeviceReady+0x24c>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d007      	beq.n	80048f2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f042 0201 	orr.w	r2, r2, #1
 80048f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004900:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2224      	movs	r2, #36	; 0x24
 8004906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4a70      	ldr	r2, [pc, #448]	; (8004ad4 <HAL_I2C_IsDeviceReady+0x258>)
 8004914:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004924:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2200      	movs	r2, #0
 800492e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 fa4e 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00d      	beq.n	800495a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800494c:	d103      	bne.n	8004956 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004954:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e0b6      	b.n	8004ac8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800495a:	897b      	ldrh	r3, [r7, #10]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004968:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800496a:	f7fe fc0b 	bl	8003184 <HAL_GetTick>
 800496e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b02      	cmp	r3, #2
 800497c:	bf0c      	ite	eq
 800497e:	2301      	moveq	r3, #1
 8004980:	2300      	movne	r3, #0
 8004982:	b2db      	uxtb	r3, r3
 8004984:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004994:	bf0c      	ite	eq
 8004996:	2301      	moveq	r3, #1
 8004998:	2300      	movne	r3, #0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800499e:	e025      	b.n	80049ec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80049a0:	f7fe fbf0 	bl	8003184 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d302      	bcc.n	80049b6 <HAL_I2C_IsDeviceReady+0x13a>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d103      	bne.n	80049be <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	22a0      	movs	r2, #160	; 0xa0
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	bf0c      	ite	eq
 80049cc:	2301      	moveq	r3, #1
 80049ce:	2300      	movne	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e2:	bf0c      	ite	eq
 80049e4:	2301      	moveq	r3, #1
 80049e6:	2300      	movne	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2ba0      	cmp	r3, #160	; 0xa0
 80049f6:	d005      	beq.n	8004a04 <HAL_I2C_IsDeviceReady+0x188>
 80049f8:	7dfb      	ldrb	r3, [r7, #23]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d102      	bne.n	8004a04 <HAL_I2C_IsDeviceReady+0x188>
 80049fe:	7dbb      	ldrb	r3, [r7, #22]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0cd      	beq.n	80049a0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d129      	bne.n	8004a6e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a28:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	613b      	str	r3, [r7, #16]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	613b      	str	r3, [r7, #16]
 8004a3e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	2319      	movs	r3, #25
 8004a46:	2201      	movs	r2, #1
 8004a48:	4921      	ldr	r1, [pc, #132]	; (8004ad0 <HAL_I2C_IsDeviceReady+0x254>)
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 f9c2 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e036      	b.n	8004ac8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e02c      	b.n	8004ac8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a86:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	2319      	movs	r3, #25
 8004a8e:	2201      	movs	r2, #1
 8004a90:	490f      	ldr	r1, [pc, #60]	; (8004ad0 <HAL_I2C_IsDeviceReady+0x254>)
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f99e 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e012      	b.n	8004ac8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	f4ff af32 	bcc.w	8004916 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004ac6:	2302      	movs	r3, #2
  }
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3720      	adds	r7, #32
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	00100002 	.word	0x00100002
 8004ad4:	ffff0000 	.word	0xffff0000

08004ad8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	4608      	mov	r0, r1
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	817b      	strh	r3, [r7, #10]
 8004aea:	460b      	mov	r3, r1
 8004aec:	813b      	strh	r3, [r7, #8]
 8004aee:	4613      	mov	r3, r2
 8004af0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 f960 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00d      	beq.n	8004b36 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b28:	d103      	bne.n	8004b32 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e05f      	b.n	8004bf6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b36:	897b      	ldrh	r3, [r7, #10]
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	6a3a      	ldr	r2, [r7, #32]
 8004b4a:	492d      	ldr	r1, [pc, #180]	; (8004c00 <I2C_RequestMemoryWrite+0x128>)
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 f998 	bl	8004e82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e04c      	b.n	8004bf6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b74:	6a39      	ldr	r1, [r7, #32]
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 fa02 	bl	8004f80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00d      	beq.n	8004b9e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d107      	bne.n	8004b9a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e02b      	b.n	8004bf6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b9e:	88fb      	ldrh	r3, [r7, #6]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d105      	bne.n	8004bb0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ba4:	893b      	ldrh	r3, [r7, #8]
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	611a      	str	r2, [r3, #16]
 8004bae:	e021      	b.n	8004bf4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004bb0:	893b      	ldrh	r3, [r7, #8]
 8004bb2:	0a1b      	lsrs	r3, r3, #8
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc0:	6a39      	ldr	r1, [r7, #32]
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 f9dc 	bl	8004f80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00d      	beq.n	8004bea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d107      	bne.n	8004be6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e005      	b.n	8004bf6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bea:	893b      	ldrh	r3, [r7, #8]
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	00010002 	.word	0x00010002

08004c04 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b088      	sub	sp, #32
 8004c08:	af02      	add	r7, sp, #8
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	4608      	mov	r0, r1
 8004c0e:	4611      	mov	r1, r2
 8004c10:	461a      	mov	r2, r3
 8004c12:	4603      	mov	r3, r0
 8004c14:	817b      	strh	r3, [r7, #10]
 8004c16:	460b      	mov	r3, r1
 8004c18:	813b      	strh	r3, [r7, #8]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c2c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 f8c2 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00d      	beq.n	8004c72 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c64:	d103      	bne.n	8004c6e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e0aa      	b.n	8004dc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c72:	897b      	ldrh	r3, [r7, #10]
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	461a      	mov	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	6a3a      	ldr	r2, [r7, #32]
 8004c86:	4952      	ldr	r1, [pc, #328]	; (8004dd0 <I2C_RequestMemoryRead+0x1cc>)
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 f8fa 	bl	8004e82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e097      	b.n	8004dc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb0:	6a39      	ldr	r1, [r7, #32]
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 f964 	bl	8004f80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00d      	beq.n	8004cda <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d107      	bne.n	8004cd6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e076      	b.n	8004dc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cda:	88fb      	ldrh	r3, [r7, #6]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d105      	bne.n	8004cec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ce0:	893b      	ldrh	r3, [r7, #8]
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	611a      	str	r2, [r3, #16]
 8004cea:	e021      	b.n	8004d30 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cec:	893b      	ldrh	r3, [r7, #8]
 8004cee:	0a1b      	lsrs	r3, r3, #8
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfc:	6a39      	ldr	r1, [r7, #32]
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 f93e 	bl	8004f80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00d      	beq.n	8004d26 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d107      	bne.n	8004d22 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e050      	b.n	8004dc8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d26:	893b      	ldrh	r3, [r7, #8]
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d32:	6a39      	ldr	r1, [r7, #32]
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 f923 	bl	8004f80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00d      	beq.n	8004d5c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d44:	2b04      	cmp	r3, #4
 8004d46:	d107      	bne.n	8004d58 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d56:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e035      	b.n	8004dc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d6a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 f82b 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00d      	beq.n	8004da0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d92:	d103      	bne.n	8004d9c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e013      	b.n	8004dc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004da0:	897b      	ldrh	r3, [r7, #10]
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	6a3a      	ldr	r2, [r7, #32]
 8004db4:	4906      	ldr	r1, [pc, #24]	; (8004dd0 <I2C_RequestMemoryRead+0x1cc>)
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 f863 	bl	8004e82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	00010002 	.word	0x00010002

08004dd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	4613      	mov	r3, r2
 8004de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004de4:	e025      	b.n	8004e32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dec:	d021      	beq.n	8004e32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dee:	f7fe f9c9 	bl	8003184 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d302      	bcc.n	8004e04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d116      	bne.n	8004e32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	f043 0220 	orr.w	r2, r3, #32
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e023      	b.n	8004e7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	0c1b      	lsrs	r3, r3, #16
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d10d      	bne.n	8004e58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	43da      	mvns	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4013      	ands	r3, r2
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	bf0c      	ite	eq
 8004e4e:	2301      	moveq	r3, #1
 8004e50:	2300      	movne	r3, #0
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	461a      	mov	r2, r3
 8004e56:	e00c      	b.n	8004e72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	43da      	mvns	r2, r3
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4013      	ands	r3, r2
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	bf0c      	ite	eq
 8004e6a:	2301      	moveq	r3, #1
 8004e6c:	2300      	movne	r3, #0
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d0b6      	beq.n	8004de6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	607a      	str	r2, [r7, #4]
 8004e8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e90:	e051      	b.n	8004f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea0:	d123      	bne.n	8004eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004eba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f043 0204 	orr.w	r2, r3, #4
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e046      	b.n	8004f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef0:	d021      	beq.n	8004f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef2:	f7fe f947 	bl	8003184 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d302      	bcc.n	8004f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d116      	bne.n	8004f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	f043 0220 	orr.w	r2, r3, #32
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e020      	b.n	8004f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	0c1b      	lsrs	r3, r3, #16
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d10c      	bne.n	8004f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	43da      	mvns	r2, r3
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	bf14      	ite	ne
 8004f52:	2301      	movne	r3, #1
 8004f54:	2300      	moveq	r3, #0
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	e00b      	b.n	8004f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	43da      	mvns	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	4013      	ands	r3, r2
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	bf14      	ite	ne
 8004f6c:	2301      	movne	r3, #1
 8004f6e:	2300      	moveq	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d18d      	bne.n	8004e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f8c:	e02d      	b.n	8004fea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 f8ce 	bl	8005130 <I2C_IsAcknowledgeFailed>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e02d      	b.n	8004ffa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa4:	d021      	beq.n	8004fea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa6:	f7fe f8ed 	bl	8003184 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d302      	bcc.n	8004fbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d116      	bne.n	8004fea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	f043 0220 	orr.w	r2, r3, #32
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e007      	b.n	8004ffa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff4:	2b80      	cmp	r3, #128	; 0x80
 8004ff6:	d1ca      	bne.n	8004f8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	60f8      	str	r0, [r7, #12]
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800500e:	e02d      	b.n	800506c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 f88d 	bl	8005130 <I2C_IsAcknowledgeFailed>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e02d      	b.n	800507c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005026:	d021      	beq.n	800506c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005028:	f7fe f8ac 	bl	8003184 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	429a      	cmp	r2, r3
 8005036:	d302      	bcc.n	800503e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d116      	bne.n	800506c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005058:	f043 0220 	orr.w	r2, r3, #32
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e007      	b.n	800507c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	f003 0304 	and.w	r3, r3, #4
 8005076:	2b04      	cmp	r3, #4
 8005078:	d1ca      	bne.n	8005010 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005090:	e042      	b.n	8005118 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	f003 0310 	and.w	r3, r3, #16
 800509c:	2b10      	cmp	r3, #16
 800509e:	d119      	bne.n	80050d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0210 	mvn.w	r2, #16
 80050a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e029      	b.n	8005128 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d4:	f7fe f856 	bl	8003184 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d302      	bcc.n	80050ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d116      	bne.n	8005118 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005104:	f043 0220 	orr.w	r2, r3, #32
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e007      	b.n	8005128 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005122:	2b40      	cmp	r3, #64	; 0x40
 8005124:	d1b5      	bne.n	8005092 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005146:	d11b      	bne.n	8005180 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005150:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	f043 0204 	orr.w	r2, r3, #4
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e000      	b.n	8005182 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
	...

08005190 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e267      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d075      	beq.n	800529a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051ae:	4b88      	ldr	r3, [pc, #544]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 030c 	and.w	r3, r3, #12
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d00c      	beq.n	80051d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051ba:	4b85      	ldr	r3, [pc, #532]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d112      	bne.n	80051ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051c6:	4b82      	ldr	r3, [pc, #520]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051d2:	d10b      	bne.n	80051ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d4:	4b7e      	ldr	r3, [pc, #504]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d05b      	beq.n	8005298 <HAL_RCC_OscConfig+0x108>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d157      	bne.n	8005298 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e242      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f4:	d106      	bne.n	8005204 <HAL_RCC_OscConfig+0x74>
 80051f6:	4b76      	ldr	r3, [pc, #472]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a75      	ldr	r2, [pc, #468]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 80051fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	e01d      	b.n	8005240 <HAL_RCC_OscConfig+0xb0>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800520c:	d10c      	bne.n	8005228 <HAL_RCC_OscConfig+0x98>
 800520e:	4b70      	ldr	r3, [pc, #448]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a6f      	ldr	r2, [pc, #444]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 8005214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	4b6d      	ldr	r3, [pc, #436]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a6c      	ldr	r2, [pc, #432]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 8005220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	e00b      	b.n	8005240 <HAL_RCC_OscConfig+0xb0>
 8005228:	4b69      	ldr	r3, [pc, #420]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a68      	ldr	r2, [pc, #416]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 800522e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	4b66      	ldr	r3, [pc, #408]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a65      	ldr	r2, [pc, #404]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 800523a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800523e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d013      	beq.n	8005270 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005248:	f7fd ff9c 	bl	8003184 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005250:	f7fd ff98 	bl	8003184 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b64      	cmp	r3, #100	; 0x64
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e207      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005262:	4b5b      	ldr	r3, [pc, #364]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0f0      	beq.n	8005250 <HAL_RCC_OscConfig+0xc0>
 800526e:	e014      	b.n	800529a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005270:	f7fd ff88 	bl	8003184 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005278:	f7fd ff84 	bl	8003184 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b64      	cmp	r3, #100	; 0x64
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e1f3      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800528a:	4b51      	ldr	r3, [pc, #324]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f0      	bne.n	8005278 <HAL_RCC_OscConfig+0xe8>
 8005296:	e000      	b.n	800529a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d063      	beq.n	800536e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052a6:	4b4a      	ldr	r3, [pc, #296]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 030c 	and.w	r3, r3, #12
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00b      	beq.n	80052ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052b2:	4b47      	ldr	r3, [pc, #284]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d11c      	bne.n	80052f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052be:	4b44      	ldr	r3, [pc, #272]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d116      	bne.n	80052f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ca:	4b41      	ldr	r3, [pc, #260]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d005      	beq.n	80052e2 <HAL_RCC_OscConfig+0x152>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d001      	beq.n	80052e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e1c7      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e2:	4b3b      	ldr	r3, [pc, #236]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	4937      	ldr	r1, [pc, #220]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052f6:	e03a      	b.n	800536e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d020      	beq.n	8005342 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005300:	4b34      	ldr	r3, [pc, #208]	; (80053d4 <HAL_RCC_OscConfig+0x244>)
 8005302:	2201      	movs	r2, #1
 8005304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005306:	f7fd ff3d 	bl	8003184 <HAL_GetTick>
 800530a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800530c:	e008      	b.n	8005320 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800530e:	f7fd ff39 	bl	8003184 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e1a8      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005320:	4b2b      	ldr	r3, [pc, #172]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0f0      	beq.n	800530e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800532c:	4b28      	ldr	r3, [pc, #160]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	4925      	ldr	r1, [pc, #148]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 800533c:	4313      	orrs	r3, r2
 800533e:	600b      	str	r3, [r1, #0]
 8005340:	e015      	b.n	800536e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005342:	4b24      	ldr	r3, [pc, #144]	; (80053d4 <HAL_RCC_OscConfig+0x244>)
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005348:	f7fd ff1c 	bl	8003184 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005350:	f7fd ff18 	bl	8003184 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e187      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005362:	4b1b      	ldr	r3, [pc, #108]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1f0      	bne.n	8005350 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0308 	and.w	r3, r3, #8
 8005376:	2b00      	cmp	r3, #0
 8005378:	d036      	beq.n	80053e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d016      	beq.n	80053b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005382:	4b15      	ldr	r3, [pc, #84]	; (80053d8 <HAL_RCC_OscConfig+0x248>)
 8005384:	2201      	movs	r2, #1
 8005386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005388:	f7fd fefc 	bl	8003184 <HAL_GetTick>
 800538c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800538e:	e008      	b.n	80053a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005390:	f7fd fef8 	bl	8003184 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e167      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053a2:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <HAL_RCC_OscConfig+0x240>)
 80053a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0f0      	beq.n	8005390 <HAL_RCC_OscConfig+0x200>
 80053ae:	e01b      	b.n	80053e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053b0:	4b09      	ldr	r3, [pc, #36]	; (80053d8 <HAL_RCC_OscConfig+0x248>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053b6:	f7fd fee5 	bl	8003184 <HAL_GetTick>
 80053ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053bc:	e00e      	b.n	80053dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053be:	f7fd fee1 	bl	8003184 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d907      	bls.n	80053dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e150      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
 80053d0:	40023800 	.word	0x40023800
 80053d4:	42470000 	.word	0x42470000
 80053d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053dc:	4b88      	ldr	r3, [pc, #544]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 80053de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1ea      	bne.n	80053be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 8097 	beq.w	8005524 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053f6:	2300      	movs	r3, #0
 80053f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053fa:	4b81      	ldr	r3, [pc, #516]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 80053fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10f      	bne.n	8005426 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005406:	2300      	movs	r3, #0
 8005408:	60bb      	str	r3, [r7, #8]
 800540a:	4b7d      	ldr	r3, [pc, #500]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	4a7c      	ldr	r2, [pc, #496]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 8005410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005414:	6413      	str	r3, [r2, #64]	; 0x40
 8005416:	4b7a      	ldr	r3, [pc, #488]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541e:	60bb      	str	r3, [r7, #8]
 8005420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005422:	2301      	movs	r3, #1
 8005424:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005426:	4b77      	ldr	r3, [pc, #476]	; (8005604 <HAL_RCC_OscConfig+0x474>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542e:	2b00      	cmp	r3, #0
 8005430:	d118      	bne.n	8005464 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005432:	4b74      	ldr	r3, [pc, #464]	; (8005604 <HAL_RCC_OscConfig+0x474>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a73      	ldr	r2, [pc, #460]	; (8005604 <HAL_RCC_OscConfig+0x474>)
 8005438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800543c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800543e:	f7fd fea1 	bl	8003184 <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005446:	f7fd fe9d 	bl	8003184 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e10c      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005458:	4b6a      	ldr	r3, [pc, #424]	; (8005604 <HAL_RCC_OscConfig+0x474>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0f0      	beq.n	8005446 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d106      	bne.n	800547a <HAL_RCC_OscConfig+0x2ea>
 800546c:	4b64      	ldr	r3, [pc, #400]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 800546e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005470:	4a63      	ldr	r2, [pc, #396]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 8005472:	f043 0301 	orr.w	r3, r3, #1
 8005476:	6713      	str	r3, [r2, #112]	; 0x70
 8005478:	e01c      	b.n	80054b4 <HAL_RCC_OscConfig+0x324>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	2b05      	cmp	r3, #5
 8005480:	d10c      	bne.n	800549c <HAL_RCC_OscConfig+0x30c>
 8005482:	4b5f      	ldr	r3, [pc, #380]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 8005484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005486:	4a5e      	ldr	r2, [pc, #376]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 8005488:	f043 0304 	orr.w	r3, r3, #4
 800548c:	6713      	str	r3, [r2, #112]	; 0x70
 800548e:	4b5c      	ldr	r3, [pc, #368]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 8005490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005492:	4a5b      	ldr	r2, [pc, #364]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 8005494:	f043 0301 	orr.w	r3, r3, #1
 8005498:	6713      	str	r3, [r2, #112]	; 0x70
 800549a:	e00b      	b.n	80054b4 <HAL_RCC_OscConfig+0x324>
 800549c:	4b58      	ldr	r3, [pc, #352]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 800549e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a0:	4a57      	ldr	r2, [pc, #348]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 80054a2:	f023 0301 	bic.w	r3, r3, #1
 80054a6:	6713      	str	r3, [r2, #112]	; 0x70
 80054a8:	4b55      	ldr	r3, [pc, #340]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 80054aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ac:	4a54      	ldr	r2, [pc, #336]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 80054ae:	f023 0304 	bic.w	r3, r3, #4
 80054b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d015      	beq.n	80054e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054bc:	f7fd fe62 	bl	8003184 <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054c2:	e00a      	b.n	80054da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054c4:	f7fd fe5e 	bl	8003184 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e0cb      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054da:	4b49      	ldr	r3, [pc, #292]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 80054dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0ee      	beq.n	80054c4 <HAL_RCC_OscConfig+0x334>
 80054e6:	e014      	b.n	8005512 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054e8:	f7fd fe4c 	bl	8003184 <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054ee:	e00a      	b.n	8005506 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054f0:	f7fd fe48 	bl	8003184 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80054fe:	4293      	cmp	r3, r2
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e0b5      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005506:	4b3e      	ldr	r3, [pc, #248]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 8005508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1ee      	bne.n	80054f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005512:	7dfb      	ldrb	r3, [r7, #23]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d105      	bne.n	8005524 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005518:	4b39      	ldr	r3, [pc, #228]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 800551a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551c:	4a38      	ldr	r2, [pc, #224]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 800551e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005522:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 80a1 	beq.w	8005670 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800552e:	4b34      	ldr	r3, [pc, #208]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 030c 	and.w	r3, r3, #12
 8005536:	2b08      	cmp	r3, #8
 8005538:	d05c      	beq.n	80055f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	2b02      	cmp	r3, #2
 8005540:	d141      	bne.n	80055c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005542:	4b31      	ldr	r3, [pc, #196]	; (8005608 <HAL_RCC_OscConfig+0x478>)
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005548:	f7fd fe1c 	bl	8003184 <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005550:	f7fd fe18 	bl	8003184 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e087      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005562:	4b27      	ldr	r3, [pc, #156]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1f0      	bne.n	8005550 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69da      	ldr	r2, [r3, #28]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	019b      	lsls	r3, r3, #6
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005584:	085b      	lsrs	r3, r3, #1
 8005586:	3b01      	subs	r3, #1
 8005588:	041b      	lsls	r3, r3, #16
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005590:	061b      	lsls	r3, r3, #24
 8005592:	491b      	ldr	r1, [pc, #108]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 8005594:	4313      	orrs	r3, r2
 8005596:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005598:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <HAL_RCC_OscConfig+0x478>)
 800559a:	2201      	movs	r2, #1
 800559c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800559e:	f7fd fdf1 	bl	8003184 <HAL_GetTick>
 80055a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055a4:	e008      	b.n	80055b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055a6:	f7fd fded 	bl	8003184 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d901      	bls.n	80055b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e05c      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055b8:	4b11      	ldr	r3, [pc, #68]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0f0      	beq.n	80055a6 <HAL_RCC_OscConfig+0x416>
 80055c4:	e054      	b.n	8005670 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055c6:	4b10      	ldr	r3, [pc, #64]	; (8005608 <HAL_RCC_OscConfig+0x478>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055cc:	f7fd fdda 	bl	8003184 <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055d4:	f7fd fdd6 	bl	8003184 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e045      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055e6:	4b06      	ldr	r3, [pc, #24]	; (8005600 <HAL_RCC_OscConfig+0x470>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1f0      	bne.n	80055d4 <HAL_RCC_OscConfig+0x444>
 80055f2:	e03d      	b.n	8005670 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d107      	bne.n	800560c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e038      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
 8005600:	40023800 	.word	0x40023800
 8005604:	40007000 	.word	0x40007000
 8005608:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800560c:	4b1b      	ldr	r3, [pc, #108]	; (800567c <HAL_RCC_OscConfig+0x4ec>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d028      	beq.n	800566c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005624:	429a      	cmp	r2, r3
 8005626:	d121      	bne.n	800566c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005632:	429a      	cmp	r2, r3
 8005634:	d11a      	bne.n	800566c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800563c:	4013      	ands	r3, r2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005642:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005644:	4293      	cmp	r3, r2
 8005646:	d111      	bne.n	800566c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005652:	085b      	lsrs	r3, r3, #1
 8005654:	3b01      	subs	r3, #1
 8005656:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005658:	429a      	cmp	r2, r3
 800565a:	d107      	bne.n	800566c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005666:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005668:	429a      	cmp	r2, r3
 800566a:	d001      	beq.n	8005670 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e000      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	40023800 	.word	0x40023800

08005680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e0cc      	b.n	800582e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005694:	4b68      	ldr	r3, [pc, #416]	; (8005838 <HAL_RCC_ClockConfig+0x1b8>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d90c      	bls.n	80056bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056a2:	4b65      	ldr	r3, [pc, #404]	; (8005838 <HAL_RCC_ClockConfig+0x1b8>)
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056aa:	4b63      	ldr	r3, [pc, #396]	; (8005838 <HAL_RCC_ClockConfig+0x1b8>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d001      	beq.n	80056bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e0b8      	b.n	800582e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d020      	beq.n	800570a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d005      	beq.n	80056e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056d4:	4b59      	ldr	r3, [pc, #356]	; (800583c <HAL_RCC_ClockConfig+0x1bc>)
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	4a58      	ldr	r2, [pc, #352]	; (800583c <HAL_RCC_ClockConfig+0x1bc>)
 80056da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0308 	and.w	r3, r3, #8
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d005      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056ec:	4b53      	ldr	r3, [pc, #332]	; (800583c <HAL_RCC_ClockConfig+0x1bc>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	4a52      	ldr	r2, [pc, #328]	; (800583c <HAL_RCC_ClockConfig+0x1bc>)
 80056f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056f8:	4b50      	ldr	r3, [pc, #320]	; (800583c <HAL_RCC_ClockConfig+0x1bc>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	494d      	ldr	r1, [pc, #308]	; (800583c <HAL_RCC_ClockConfig+0x1bc>)
 8005706:	4313      	orrs	r3, r2
 8005708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d044      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d107      	bne.n	800572e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800571e:	4b47      	ldr	r3, [pc, #284]	; (800583c <HAL_RCC_ClockConfig+0x1bc>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d119      	bne.n	800575e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e07f      	b.n	800582e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b02      	cmp	r3, #2
 8005734:	d003      	beq.n	800573e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800573a:	2b03      	cmp	r3, #3
 800573c:	d107      	bne.n	800574e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800573e:	4b3f      	ldr	r3, [pc, #252]	; (800583c <HAL_RCC_ClockConfig+0x1bc>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d109      	bne.n	800575e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e06f      	b.n	800582e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800574e:	4b3b      	ldr	r3, [pc, #236]	; (800583c <HAL_RCC_ClockConfig+0x1bc>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e067      	b.n	800582e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800575e:	4b37      	ldr	r3, [pc, #220]	; (800583c <HAL_RCC_ClockConfig+0x1bc>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f023 0203 	bic.w	r2, r3, #3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	4934      	ldr	r1, [pc, #208]	; (800583c <HAL_RCC_ClockConfig+0x1bc>)
 800576c:	4313      	orrs	r3, r2
 800576e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005770:	f7fd fd08 	bl	8003184 <HAL_GetTick>
 8005774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005776:	e00a      	b.n	800578e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005778:	f7fd fd04 	bl	8003184 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	f241 3288 	movw	r2, #5000	; 0x1388
 8005786:	4293      	cmp	r3, r2
 8005788:	d901      	bls.n	800578e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e04f      	b.n	800582e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800578e:	4b2b      	ldr	r3, [pc, #172]	; (800583c <HAL_RCC_ClockConfig+0x1bc>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 020c 	and.w	r2, r3, #12
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	429a      	cmp	r2, r3
 800579e:	d1eb      	bne.n	8005778 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057a0:	4b25      	ldr	r3, [pc, #148]	; (8005838 <HAL_RCC_ClockConfig+0x1b8>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d20c      	bcs.n	80057c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ae:	4b22      	ldr	r3, [pc, #136]	; (8005838 <HAL_RCC_ClockConfig+0x1b8>)
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057b6:	4b20      	ldr	r3, [pc, #128]	; (8005838 <HAL_RCC_ClockConfig+0x1b8>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d001      	beq.n	80057c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e032      	b.n	800582e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d008      	beq.n	80057e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057d4:	4b19      	ldr	r3, [pc, #100]	; (800583c <HAL_RCC_ClockConfig+0x1bc>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	4916      	ldr	r1, [pc, #88]	; (800583c <HAL_RCC_ClockConfig+0x1bc>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d009      	beq.n	8005806 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057f2:	4b12      	ldr	r3, [pc, #72]	; (800583c <HAL_RCC_ClockConfig+0x1bc>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	490e      	ldr	r1, [pc, #56]	; (800583c <HAL_RCC_ClockConfig+0x1bc>)
 8005802:	4313      	orrs	r3, r2
 8005804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005806:	f000 f821 	bl	800584c <HAL_RCC_GetSysClockFreq>
 800580a:	4602      	mov	r2, r0
 800580c:	4b0b      	ldr	r3, [pc, #44]	; (800583c <HAL_RCC_ClockConfig+0x1bc>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	091b      	lsrs	r3, r3, #4
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	490a      	ldr	r1, [pc, #40]	; (8005840 <HAL_RCC_ClockConfig+0x1c0>)
 8005818:	5ccb      	ldrb	r3, [r1, r3]
 800581a:	fa22 f303 	lsr.w	r3, r2, r3
 800581e:	4a09      	ldr	r2, [pc, #36]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 8005820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005822:	4b09      	ldr	r3, [pc, #36]	; (8005848 <HAL_RCC_ClockConfig+0x1c8>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4618      	mov	r0, r3
 8005828:	f7fd fa96 	bl	8002d58 <HAL_InitTick>

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	40023c00 	.word	0x40023c00
 800583c:	40023800 	.word	0x40023800
 8005840:	0802d8a4 	.word	0x0802d8a4
 8005844:	20000004 	.word	0x20000004
 8005848:	20000008 	.word	0x20000008

0800584c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800584c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005850:	b094      	sub	sp, #80	; 0x50
 8005852:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	647b      	str	r3, [r7, #68]	; 0x44
 8005858:	2300      	movs	r3, #0
 800585a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800585c:	2300      	movs	r3, #0
 800585e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005864:	4b79      	ldr	r3, [pc, #484]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f003 030c 	and.w	r3, r3, #12
 800586c:	2b08      	cmp	r3, #8
 800586e:	d00d      	beq.n	800588c <HAL_RCC_GetSysClockFreq+0x40>
 8005870:	2b08      	cmp	r3, #8
 8005872:	f200 80e1 	bhi.w	8005a38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <HAL_RCC_GetSysClockFreq+0x34>
 800587a:	2b04      	cmp	r3, #4
 800587c:	d003      	beq.n	8005886 <HAL_RCC_GetSysClockFreq+0x3a>
 800587e:	e0db      	b.n	8005a38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005880:	4b73      	ldr	r3, [pc, #460]	; (8005a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8005882:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005884:	e0db      	b.n	8005a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005886:	4b73      	ldr	r3, [pc, #460]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x208>)
 8005888:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800588a:	e0d8      	b.n	8005a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800588c:	4b6f      	ldr	r3, [pc, #444]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005894:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005896:	4b6d      	ldr	r3, [pc, #436]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d063      	beq.n	800596a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058a2:	4b6a      	ldr	r3, [pc, #424]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x200>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	099b      	lsrs	r3, r3, #6
 80058a8:	2200      	movs	r2, #0
 80058aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80058ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80058ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058b4:	633b      	str	r3, [r7, #48]	; 0x30
 80058b6:	2300      	movs	r3, #0
 80058b8:	637b      	str	r3, [r7, #52]	; 0x34
 80058ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80058be:	4622      	mov	r2, r4
 80058c0:	462b      	mov	r3, r5
 80058c2:	f04f 0000 	mov.w	r0, #0
 80058c6:	f04f 0100 	mov.w	r1, #0
 80058ca:	0159      	lsls	r1, r3, #5
 80058cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058d0:	0150      	lsls	r0, r2, #5
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4621      	mov	r1, r4
 80058d8:	1a51      	subs	r1, r2, r1
 80058da:	6139      	str	r1, [r7, #16]
 80058dc:	4629      	mov	r1, r5
 80058de:	eb63 0301 	sbc.w	r3, r3, r1
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058f0:	4659      	mov	r1, fp
 80058f2:	018b      	lsls	r3, r1, #6
 80058f4:	4651      	mov	r1, sl
 80058f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058fa:	4651      	mov	r1, sl
 80058fc:	018a      	lsls	r2, r1, #6
 80058fe:	4651      	mov	r1, sl
 8005900:	ebb2 0801 	subs.w	r8, r2, r1
 8005904:	4659      	mov	r1, fp
 8005906:	eb63 0901 	sbc.w	r9, r3, r1
 800590a:	f04f 0200 	mov.w	r2, #0
 800590e:	f04f 0300 	mov.w	r3, #0
 8005912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800591a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800591e:	4690      	mov	r8, r2
 8005920:	4699      	mov	r9, r3
 8005922:	4623      	mov	r3, r4
 8005924:	eb18 0303 	adds.w	r3, r8, r3
 8005928:	60bb      	str	r3, [r7, #8]
 800592a:	462b      	mov	r3, r5
 800592c:	eb49 0303 	adc.w	r3, r9, r3
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	f04f 0200 	mov.w	r2, #0
 8005936:	f04f 0300 	mov.w	r3, #0
 800593a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800593e:	4629      	mov	r1, r5
 8005940:	024b      	lsls	r3, r1, #9
 8005942:	4621      	mov	r1, r4
 8005944:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005948:	4621      	mov	r1, r4
 800594a:	024a      	lsls	r2, r1, #9
 800594c:	4610      	mov	r0, r2
 800594e:	4619      	mov	r1, r3
 8005950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005952:	2200      	movs	r2, #0
 8005954:	62bb      	str	r3, [r7, #40]	; 0x28
 8005956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005958:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800595c:	f7fb f994 	bl	8000c88 <__aeabi_uldivmod>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4613      	mov	r3, r2
 8005966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005968:	e058      	b.n	8005a1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800596a:	4b38      	ldr	r3, [pc, #224]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	099b      	lsrs	r3, r3, #6
 8005970:	2200      	movs	r2, #0
 8005972:	4618      	mov	r0, r3
 8005974:	4611      	mov	r1, r2
 8005976:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800597a:	623b      	str	r3, [r7, #32]
 800597c:	2300      	movs	r3, #0
 800597e:	627b      	str	r3, [r7, #36]	; 0x24
 8005980:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005984:	4642      	mov	r2, r8
 8005986:	464b      	mov	r3, r9
 8005988:	f04f 0000 	mov.w	r0, #0
 800598c:	f04f 0100 	mov.w	r1, #0
 8005990:	0159      	lsls	r1, r3, #5
 8005992:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005996:	0150      	lsls	r0, r2, #5
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	4641      	mov	r1, r8
 800599e:	ebb2 0a01 	subs.w	sl, r2, r1
 80059a2:	4649      	mov	r1, r9
 80059a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	f04f 0300 	mov.w	r3, #0
 80059b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80059b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80059b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80059bc:	ebb2 040a 	subs.w	r4, r2, sl
 80059c0:	eb63 050b 	sbc.w	r5, r3, fp
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	f04f 0300 	mov.w	r3, #0
 80059cc:	00eb      	lsls	r3, r5, #3
 80059ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059d2:	00e2      	lsls	r2, r4, #3
 80059d4:	4614      	mov	r4, r2
 80059d6:	461d      	mov	r5, r3
 80059d8:	4643      	mov	r3, r8
 80059da:	18e3      	adds	r3, r4, r3
 80059dc:	603b      	str	r3, [r7, #0]
 80059de:	464b      	mov	r3, r9
 80059e0:	eb45 0303 	adc.w	r3, r5, r3
 80059e4:	607b      	str	r3, [r7, #4]
 80059e6:	f04f 0200 	mov.w	r2, #0
 80059ea:	f04f 0300 	mov.w	r3, #0
 80059ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059f2:	4629      	mov	r1, r5
 80059f4:	028b      	lsls	r3, r1, #10
 80059f6:	4621      	mov	r1, r4
 80059f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059fc:	4621      	mov	r1, r4
 80059fe:	028a      	lsls	r2, r1, #10
 8005a00:	4610      	mov	r0, r2
 8005a02:	4619      	mov	r1, r3
 8005a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a06:	2200      	movs	r2, #0
 8005a08:	61bb      	str	r3, [r7, #24]
 8005a0a:	61fa      	str	r2, [r7, #28]
 8005a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a10:	f7fb f93a 	bl	8000c88 <__aeabi_uldivmod>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4613      	mov	r3, r2
 8005a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a1c:	4b0b      	ldr	r3, [pc, #44]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	0c1b      	lsrs	r3, r3, #16
 8005a22:	f003 0303 	and.w	r3, r3, #3
 8005a26:	3301      	adds	r3, #1
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005a2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a36:	e002      	b.n	8005a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a38:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3750      	adds	r7, #80	; 0x50
 8005a44:	46bd      	mov	sp, r7
 8005a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a4a:	bf00      	nop
 8005a4c:	40023800 	.word	0x40023800
 8005a50:	00f42400 	.word	0x00f42400
 8005a54:	007a1200 	.word	0x007a1200

08005a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a5c:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	20000004 	.word	0x20000004

08005a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a74:	f7ff fff0 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	0a9b      	lsrs	r3, r3, #10
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	4903      	ldr	r1, [pc, #12]	; (8005a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a86:	5ccb      	ldrb	r3, [r1, r3]
 8005a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40023800 	.word	0x40023800
 8005a94:	0802d8b4 	.word	0x0802d8b4

08005a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a9c:	f7ff ffdc 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	0b5b      	lsrs	r3, r3, #13
 8005aa8:	f003 0307 	and.w	r3, r3, #7
 8005aac:	4903      	ldr	r1, [pc, #12]	; (8005abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aae:	5ccb      	ldrb	r3, [r1, r3]
 8005ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	40023800 	.word	0x40023800
 8005abc:	0802d8b4 	.word	0x0802d8b4

08005ac0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	220f      	movs	r2, #15
 8005ace:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ad0:	4b12      	ldr	r3, [pc, #72]	; (8005b1c <HAL_RCC_GetClockConfig+0x5c>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f003 0203 	and.w	r2, r3, #3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005adc:	4b0f      	ldr	r3, [pc, #60]	; (8005b1c <HAL_RCC_GetClockConfig+0x5c>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ae8:	4b0c      	ldr	r3, [pc, #48]	; (8005b1c <HAL_RCC_GetClockConfig+0x5c>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005af4:	4b09      	ldr	r3, [pc, #36]	; (8005b1c <HAL_RCC_GetClockConfig+0x5c>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	08db      	lsrs	r3, r3, #3
 8005afa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005b02:	4b07      	ldr	r3, [pc, #28]	; (8005b20 <HAL_RCC_GetClockConfig+0x60>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0207 	and.w	r2, r3, #7
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	601a      	str	r2, [r3, #0]
}
 8005b0e:	bf00      	nop
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	40023800 	.word	0x40023800
 8005b20:	40023c00 	.word	0x40023c00

08005b24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e07b      	b.n	8005c2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d108      	bne.n	8005b50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b46:	d009      	beq.n	8005b5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	61da      	str	r2, [r3, #28]
 8005b4e:	e005      	b.n	8005b5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d106      	bne.n	8005b7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7fc ff4a 	bl	8002a10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bcc:	431a      	orrs	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be0:	ea42 0103 	orr.w	r1, r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	0c1b      	lsrs	r3, r3, #16
 8005bfa:	f003 0104 	and.w	r1, r3, #4
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	f003 0210 	and.w	r2, r3, #16
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69da      	ldr	r2, [r3, #28]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b088      	sub	sp, #32
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	603b      	str	r3, [r7, #0]
 8005c42:	4613      	mov	r3, r2
 8005c44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d101      	bne.n	8005c58 <HAL_SPI_Transmit+0x22>
 8005c54:	2302      	movs	r3, #2
 8005c56:	e126      	b.n	8005ea6 <HAL_SPI_Transmit+0x270>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c60:	f7fd fa90 	bl	8003184 <HAL_GetTick>
 8005c64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c66:	88fb      	ldrh	r3, [r7, #6]
 8005c68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d002      	beq.n	8005c7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c76:	2302      	movs	r3, #2
 8005c78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c7a:	e10b      	b.n	8005e94 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <HAL_SPI_Transmit+0x52>
 8005c82:	88fb      	ldrh	r3, [r7, #6]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d102      	bne.n	8005c8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c8c:	e102      	b.n	8005e94 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2203      	movs	r2, #3
 8005c92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	88fa      	ldrh	r2, [r7, #6]
 8005ca6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	88fa      	ldrh	r2, [r7, #6]
 8005cac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cd4:	d10f      	bne.n	8005cf6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ce4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cf4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d00:	2b40      	cmp	r3, #64	; 0x40
 8005d02:	d007      	beq.n	8005d14 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d1c:	d14b      	bne.n	8005db6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d002      	beq.n	8005d2c <HAL_SPI_Transmit+0xf6>
 8005d26:	8afb      	ldrh	r3, [r7, #22]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d13e      	bne.n	8005daa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d30:	881a      	ldrh	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3c:	1c9a      	adds	r2, r3, #2
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d50:	e02b      	b.n	8005daa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d112      	bne.n	8005d86 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d64:	881a      	ldrh	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d70:	1c9a      	adds	r2, r3, #2
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d84:	e011      	b.n	8005daa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d86:	f7fd f9fd 	bl	8003184 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d803      	bhi.n	8005d9e <HAL_SPI_Transmit+0x168>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9c:	d102      	bne.n	8005da4 <HAL_SPI_Transmit+0x16e>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d102      	bne.n	8005daa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005da8:	e074      	b.n	8005e94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1ce      	bne.n	8005d52 <HAL_SPI_Transmit+0x11c>
 8005db4:	e04c      	b.n	8005e50 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <HAL_SPI_Transmit+0x18e>
 8005dbe:	8afb      	ldrh	r3, [r7, #22]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d140      	bne.n	8005e46 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	330c      	adds	r3, #12
 8005dce:	7812      	ldrb	r2, [r2, #0]
 8005dd0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005dea:	e02c      	b.n	8005e46 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d113      	bne.n	8005e22 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	330c      	adds	r3, #12
 8005e04:	7812      	ldrb	r2, [r2, #0]
 8005e06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0c:	1c5a      	adds	r2, r3, #1
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e20:	e011      	b.n	8005e46 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e22:	f7fd f9af 	bl	8003184 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d803      	bhi.n	8005e3a <HAL_SPI_Transmit+0x204>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e38:	d102      	bne.n	8005e40 <HAL_SPI_Transmit+0x20a>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d102      	bne.n	8005e46 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e44:	e026      	b.n	8005e94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1cd      	bne.n	8005dec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	6839      	ldr	r1, [r7, #0]
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 fb13 	bl	8006480 <SPI_EndRxTxTransaction>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2220      	movs	r2, #32
 8005e64:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10a      	bne.n	8005e84 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e6e:	2300      	movs	r3, #0
 8005e70:	613b      	str	r3, [r7, #16]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	613b      	str	r3, [r7, #16]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	613b      	str	r3, [r7, #16]
 8005e82:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	77fb      	strb	r3, [r7, #31]
 8005e90:	e000      	b.n	8005e94 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005e92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ea4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3720      	adds	r7, #32
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
	...

08005eb0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_SPI_Transmit_DMA+0x20>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e09b      	b.n	8006008 <HAL_SPI_Transmit_DMA+0x158>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d002      	beq.n	8005eea <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ee8:	e089      	b.n	8005ffe <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d002      	beq.n	8005ef6 <HAL_SPI_Transmit_DMA+0x46>
 8005ef0:	88fb      	ldrh	r3, [r7, #6]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d102      	bne.n	8005efc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005efa:	e080      	b.n	8005ffe <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2203      	movs	r2, #3
 8005f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	88fa      	ldrh	r2, [r7, #6]
 8005f14:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	88fa      	ldrh	r2, [r7, #6]
 8005f1a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f42:	d10f      	bne.n	8005f64 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f62:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f68:	4a29      	ldr	r2, [pc, #164]	; (8006010 <HAL_SPI_Transmit_DMA+0x160>)
 8005f6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f70:	4a28      	ldr	r2, [pc, #160]	; (8006014 <HAL_SPI_Transmit_DMA+0x164>)
 8005f72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f78:	4a27      	ldr	r2, [pc, #156]	; (8006018 <HAL_SPI_Transmit_DMA+0x168>)
 8005f7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f80:	2200      	movs	r2, #0
 8005f82:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	330c      	adds	r3, #12
 8005f94:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f9a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005f9c:	f7fd face 	bl	800353c <HAL_DMA_Start_IT>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00c      	beq.n	8005fc0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005faa:	f043 0210 	orr.w	r2, r3, #16
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005fbe:	e01e      	b.n	8005ffe <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fca:	2b40      	cmp	r3, #64	; 0x40
 8005fcc:	d007      	beq.n	8005fde <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fdc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f042 0220 	orr.w	r2, r2, #32
 8005fec:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f042 0202 	orr.w	r2, r2, #2
 8005ffc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006006:	7dfb      	ldrb	r3, [r7, #23]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	080062ed 	.word	0x080062ed
 8006014:	08006245 	.word	0x08006245
 8006018:	08006309 	.word	0x08006309

0800601c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b088      	sub	sp, #32
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	099b      	lsrs	r3, r3, #6
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10f      	bne.n	8006060 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	099b      	lsrs	r3, r3, #6
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b00      	cmp	r3, #0
 8006054:	d004      	beq.n	8006060 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	4798      	blx	r3
    return;
 800605e:	e0d7      	b.n	8006210 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	085b      	lsrs	r3, r3, #1
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <HAL_SPI_IRQHandler+0x66>
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	09db      	lsrs	r3, r3, #7
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d004      	beq.n	8006082 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	4798      	blx	r3
    return;
 8006080:	e0c6      	b.n	8006210 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	095b      	lsrs	r3, r3, #5
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10c      	bne.n	80060a8 <HAL_SPI_IRQHandler+0x8c>
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	099b      	lsrs	r3, r3, #6
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b00      	cmp	r3, #0
 8006098:	d106      	bne.n	80060a8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	0a1b      	lsrs	r3, r3, #8
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 80b4 	beq.w	8006210 <HAL_SPI_IRQHandler+0x1f4>
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	095b      	lsrs	r3, r3, #5
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 80ad 	beq.w	8006210 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	099b      	lsrs	r3, r3, #6
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d023      	beq.n	800610a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d011      	beq.n	80060f2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d2:	f043 0204 	orr.w	r2, r3, #4
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060da:	2300      	movs	r3, #0
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	617b      	str	r3, [r7, #20]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	617b      	str	r3, [r7, #20]
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	e00b      	b.n	800610a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060f2:	2300      	movs	r3, #0
 80060f4:	613b      	str	r3, [r7, #16]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	613b      	str	r3, [r7, #16]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	693b      	ldr	r3, [r7, #16]
        return;
 8006108:	e082      	b.n	8006210 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	095b      	lsrs	r3, r3, #5
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	d014      	beq.n	8006140 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611a:	f043 0201 	orr.w	r2, r3, #1
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006122:	2300      	movs	r3, #0
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	0a1b      	lsrs	r3, r3, #8
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00c      	beq.n	8006166 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006150:	f043 0208 	orr.w	r2, r3, #8
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006158:	2300      	movs	r3, #0
 800615a:	60bb      	str	r3, [r7, #8]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	60bb      	str	r3, [r7, #8]
 8006164:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616a:	2b00      	cmp	r3, #0
 800616c:	d04f      	beq.n	800620e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800617c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d104      	bne.n	800619a <HAL_SPI_IRQHandler+0x17e>
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d034      	beq.n	8006204 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 0203 	bic.w	r2, r2, #3
 80061a8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d011      	beq.n	80061d6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b6:	4a18      	ldr	r2, [pc, #96]	; (8006218 <HAL_SPI_IRQHandler+0x1fc>)
 80061b8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fd fa84 	bl	80036cc <HAL_DMA_Abort_IT>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d005      	beq.n	80061d6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d016      	beq.n	800620c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061e2:	4a0d      	ldr	r2, [pc, #52]	; (8006218 <HAL_SPI_IRQHandler+0x1fc>)
 80061e4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fd fa6e 	bl	80036cc <HAL_DMA_Abort_IT>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006202:	e003      	b.n	800620c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f813 	bl	8006230 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800620a:	e000      	b.n	800620e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800620c:	bf00      	nop
    return;
 800620e:	bf00      	nop
  }
}
 8006210:	3720      	adds	r7, #32
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	08006349 	.word	0x08006349

0800621c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006250:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006252:	f7fc ff97 	bl	8003184 <HAL_GetTick>
 8006256:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006266:	d03b      	beq.n	80062e0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0220 	bic.w	r2, r2, #32
 8006276:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0202 	bic.w	r2, r2, #2
 8006286:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	2164      	movs	r1, #100	; 0x64
 800628c:	6978      	ldr	r0, [r7, #20]
 800628e:	f000 f8f7 	bl	8006480 <SPI_EndRxTxTransaction>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d005      	beq.n	80062a4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800629c:	f043 0220 	orr.w	r2, r3, #32
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10a      	bne.n	80062c2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062ac:	2300      	movs	r3, #0
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2200      	movs	r2, #0
 80062c6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80062d8:	6978      	ldr	r0, [r7, #20]
 80062da:	f7ff ffa9 	bl	8006230 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80062de:	e002      	b.n	80062e6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80062e0:	6978      	ldr	r0, [r7, #20]
 80062e2:	f00b f8b1 	bl	8011448 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f7ff ff8e 	bl	800621c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006300:	bf00      	nop
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006314:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 0203 	bic.w	r2, r2, #3
 8006324:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632a:	f043 0210 	orr.w	r2, r3, #16
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f7ff ff78 	bl	8006230 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006340:	bf00      	nop
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006354:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f7ff ff64 	bl	8006230 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006368:	bf00      	nop
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b088      	sub	sp, #32
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	603b      	str	r3, [r7, #0]
 800637c:	4613      	mov	r3, r2
 800637e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006380:	f7fc ff00 	bl	8003184 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006388:	1a9b      	subs	r3, r3, r2
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	4413      	add	r3, r2
 800638e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006390:	f7fc fef8 	bl	8003184 <HAL_GetTick>
 8006394:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006396:	4b39      	ldr	r3, [pc, #228]	; (800647c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	015b      	lsls	r3, r3, #5
 800639c:	0d1b      	lsrs	r3, r3, #20
 800639e:	69fa      	ldr	r2, [r7, #28]
 80063a0:	fb02 f303 	mul.w	r3, r2, r3
 80063a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063a6:	e054      	b.n	8006452 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ae:	d050      	beq.n	8006452 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063b0:	f7fc fee8 	bl	8003184 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d902      	bls.n	80063c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d13d      	bne.n	8006442 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063de:	d111      	bne.n	8006404 <SPI_WaitFlagStateUntilTimeout+0x94>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063e8:	d004      	beq.n	80063f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063f2:	d107      	bne.n	8006404 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006402:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800640c:	d10f      	bne.n	800642e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800642c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e017      	b.n	8006472 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	3b01      	subs	r3, #1
 8006450:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	4013      	ands	r3, r2
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	429a      	cmp	r2, r3
 8006460:	bf0c      	ite	eq
 8006462:	2301      	moveq	r3, #1
 8006464:	2300      	movne	r3, #0
 8006466:	b2db      	uxtb	r3, r3
 8006468:	461a      	mov	r2, r3
 800646a:	79fb      	ldrb	r3, [r7, #7]
 800646c:	429a      	cmp	r2, r3
 800646e:	d19b      	bne.n	80063a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3720      	adds	r7, #32
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	20000004 	.word	0x20000004

08006480 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b088      	sub	sp, #32
 8006484:	af02      	add	r7, sp, #8
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800648c:	4b1b      	ldr	r3, [pc, #108]	; (80064fc <SPI_EndRxTxTransaction+0x7c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a1b      	ldr	r2, [pc, #108]	; (8006500 <SPI_EndRxTxTransaction+0x80>)
 8006492:	fba2 2303 	umull	r2, r3, r2, r3
 8006496:	0d5b      	lsrs	r3, r3, #21
 8006498:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800649c:	fb02 f303 	mul.w	r3, r2, r3
 80064a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064aa:	d112      	bne.n	80064d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2200      	movs	r2, #0
 80064b4:	2180      	movs	r1, #128	; 0x80
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f7ff ff5a 	bl	8006370 <SPI_WaitFlagStateUntilTimeout>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d016      	beq.n	80064f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c6:	f043 0220 	orr.w	r2, r3, #32
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e00f      	b.n	80064f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00a      	beq.n	80064ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	3b01      	subs	r3, #1
 80064dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e8:	2b80      	cmp	r3, #128	; 0x80
 80064ea:	d0f2      	beq.n	80064d2 <SPI_EndRxTxTransaction+0x52>
 80064ec:	e000      	b.n	80064f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80064ee:	bf00      	nop
  }

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20000004 	.word	0x20000004
 8006500:	165e9f81 	.word	0x165e9f81

08006504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e041      	b.n	800659a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d106      	bne.n	8006530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7fc fafa 	bl	8002b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3304      	adds	r3, #4
 8006540:	4619      	mov	r1, r3
 8006542:	4610      	mov	r0, r2
 8006544:	f000 f9ce 	bl	80068e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
	...

080065a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d001      	beq.n	80065bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e04e      	b.n	800665a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2202      	movs	r2, #2
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68da      	ldr	r2, [r3, #12]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f042 0201 	orr.w	r2, r2, #1
 80065d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a23      	ldr	r2, [pc, #140]	; (8006668 <HAL_TIM_Base_Start_IT+0xc4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d022      	beq.n	8006624 <HAL_TIM_Base_Start_IT+0x80>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e6:	d01d      	beq.n	8006624 <HAL_TIM_Base_Start_IT+0x80>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a1f      	ldr	r2, [pc, #124]	; (800666c <HAL_TIM_Base_Start_IT+0xc8>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d018      	beq.n	8006624 <HAL_TIM_Base_Start_IT+0x80>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a1e      	ldr	r2, [pc, #120]	; (8006670 <HAL_TIM_Base_Start_IT+0xcc>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d013      	beq.n	8006624 <HAL_TIM_Base_Start_IT+0x80>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a1c      	ldr	r2, [pc, #112]	; (8006674 <HAL_TIM_Base_Start_IT+0xd0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d00e      	beq.n	8006624 <HAL_TIM_Base_Start_IT+0x80>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a1b      	ldr	r2, [pc, #108]	; (8006678 <HAL_TIM_Base_Start_IT+0xd4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d009      	beq.n	8006624 <HAL_TIM_Base_Start_IT+0x80>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a19      	ldr	r2, [pc, #100]	; (800667c <HAL_TIM_Base_Start_IT+0xd8>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d004      	beq.n	8006624 <HAL_TIM_Base_Start_IT+0x80>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a18      	ldr	r2, [pc, #96]	; (8006680 <HAL_TIM_Base_Start_IT+0xdc>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d111      	bne.n	8006648 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f003 0307 	and.w	r3, r3, #7
 800662e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2b06      	cmp	r3, #6
 8006634:	d010      	beq.n	8006658 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f042 0201 	orr.w	r2, r2, #1
 8006644:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006646:	e007      	b.n	8006658 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f042 0201 	orr.w	r2, r2, #1
 8006656:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40010000 	.word	0x40010000
 800666c:	40000400 	.word	0x40000400
 8006670:	40000800 	.word	0x40000800
 8006674:	40000c00 	.word	0x40000c00
 8006678:	40010400 	.word	0x40010400
 800667c:	40014000 	.word	0x40014000
 8006680:	40001800 	.word	0x40001800

08006684 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b02      	cmp	r3, #2
 8006698:	d122      	bne.n	80066e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d11b      	bne.n	80066e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f06f 0202 	mvn.w	r2, #2
 80066b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f8ee 	bl	80068a8 <HAL_TIM_IC_CaptureCallback>
 80066cc:	e005      	b.n	80066da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f8e0 	bl	8006894 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f8f1 	bl	80068bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	f003 0304 	and.w	r3, r3, #4
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	d122      	bne.n	8006734 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	2b04      	cmp	r3, #4
 80066fa:	d11b      	bne.n	8006734 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f06f 0204 	mvn.w	r2, #4
 8006704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2202      	movs	r2, #2
 800670a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f8c4 	bl	80068a8 <HAL_TIM_IC_CaptureCallback>
 8006720:	e005      	b.n	800672e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f8b6 	bl	8006894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f8c7 	bl	80068bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	f003 0308 	and.w	r3, r3, #8
 800673e:	2b08      	cmp	r3, #8
 8006740:	d122      	bne.n	8006788 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f003 0308 	and.w	r3, r3, #8
 800674c:	2b08      	cmp	r3, #8
 800674e:	d11b      	bne.n	8006788 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f06f 0208 	mvn.w	r2, #8
 8006758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2204      	movs	r2, #4
 800675e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	f003 0303 	and.w	r3, r3, #3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f89a 	bl	80068a8 <HAL_TIM_IC_CaptureCallback>
 8006774:	e005      	b.n	8006782 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f88c 	bl	8006894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f89d 	bl	80068bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f003 0310 	and.w	r3, r3, #16
 8006792:	2b10      	cmp	r3, #16
 8006794:	d122      	bne.n	80067dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f003 0310 	and.w	r3, r3, #16
 80067a0:	2b10      	cmp	r3, #16
 80067a2:	d11b      	bne.n	80067dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f06f 0210 	mvn.w	r2, #16
 80067ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2208      	movs	r2, #8
 80067b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d003      	beq.n	80067ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f870 	bl	80068a8 <HAL_TIM_IC_CaptureCallback>
 80067c8:	e005      	b.n	80067d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f862 	bl	8006894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f873 	bl	80068bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d10e      	bne.n	8006808 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d107      	bne.n	8006808 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f06f 0201 	mvn.w	r2, #1
 8006800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7fc f838 	bl	8002878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006812:	2b80      	cmp	r3, #128	; 0x80
 8006814:	d10e      	bne.n	8006834 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006820:	2b80      	cmp	r3, #128	; 0x80
 8006822:	d107      	bne.n	8006834 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800682c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f97e 	bl	8006b30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683e:	2b40      	cmp	r3, #64	; 0x40
 8006840:	d10e      	bne.n	8006860 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684c:	2b40      	cmp	r3, #64	; 0x40
 800684e:	d107      	bne.n	8006860 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f838 	bl	80068d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	2b20      	cmp	r3, #32
 800686c:	d10e      	bne.n	800688c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f003 0320 	and.w	r3, r3, #32
 8006878:	2b20      	cmp	r3, #32
 800687a:	d107      	bne.n	800688c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f06f 0220 	mvn.w	r2, #32
 8006884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f948 	bl	8006b1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800688c:	bf00      	nop
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a40      	ldr	r2, [pc, #256]	; (80069f8 <TIM_Base_SetConfig+0x114>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d013      	beq.n	8006924 <TIM_Base_SetConfig+0x40>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006902:	d00f      	beq.n	8006924 <TIM_Base_SetConfig+0x40>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a3d      	ldr	r2, [pc, #244]	; (80069fc <TIM_Base_SetConfig+0x118>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d00b      	beq.n	8006924 <TIM_Base_SetConfig+0x40>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a3c      	ldr	r2, [pc, #240]	; (8006a00 <TIM_Base_SetConfig+0x11c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d007      	beq.n	8006924 <TIM_Base_SetConfig+0x40>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a3b      	ldr	r2, [pc, #236]	; (8006a04 <TIM_Base_SetConfig+0x120>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d003      	beq.n	8006924 <TIM_Base_SetConfig+0x40>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a3a      	ldr	r2, [pc, #232]	; (8006a08 <TIM_Base_SetConfig+0x124>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d108      	bne.n	8006936 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a2f      	ldr	r2, [pc, #188]	; (80069f8 <TIM_Base_SetConfig+0x114>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d02b      	beq.n	8006996 <TIM_Base_SetConfig+0xb2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006944:	d027      	beq.n	8006996 <TIM_Base_SetConfig+0xb2>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a2c      	ldr	r2, [pc, #176]	; (80069fc <TIM_Base_SetConfig+0x118>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d023      	beq.n	8006996 <TIM_Base_SetConfig+0xb2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a2b      	ldr	r2, [pc, #172]	; (8006a00 <TIM_Base_SetConfig+0x11c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d01f      	beq.n	8006996 <TIM_Base_SetConfig+0xb2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a2a      	ldr	r2, [pc, #168]	; (8006a04 <TIM_Base_SetConfig+0x120>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d01b      	beq.n	8006996 <TIM_Base_SetConfig+0xb2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a29      	ldr	r2, [pc, #164]	; (8006a08 <TIM_Base_SetConfig+0x124>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d017      	beq.n	8006996 <TIM_Base_SetConfig+0xb2>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a28      	ldr	r2, [pc, #160]	; (8006a0c <TIM_Base_SetConfig+0x128>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d013      	beq.n	8006996 <TIM_Base_SetConfig+0xb2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a27      	ldr	r2, [pc, #156]	; (8006a10 <TIM_Base_SetConfig+0x12c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d00f      	beq.n	8006996 <TIM_Base_SetConfig+0xb2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a26      	ldr	r2, [pc, #152]	; (8006a14 <TIM_Base_SetConfig+0x130>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d00b      	beq.n	8006996 <TIM_Base_SetConfig+0xb2>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a25      	ldr	r2, [pc, #148]	; (8006a18 <TIM_Base_SetConfig+0x134>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d007      	beq.n	8006996 <TIM_Base_SetConfig+0xb2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a24      	ldr	r2, [pc, #144]	; (8006a1c <TIM_Base_SetConfig+0x138>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d003      	beq.n	8006996 <TIM_Base_SetConfig+0xb2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a23      	ldr	r2, [pc, #140]	; (8006a20 <TIM_Base_SetConfig+0x13c>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d108      	bne.n	80069a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800699c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	689a      	ldr	r2, [r3, #8]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a0a      	ldr	r2, [pc, #40]	; (80069f8 <TIM_Base_SetConfig+0x114>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d003      	beq.n	80069dc <TIM_Base_SetConfig+0xf8>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a0c      	ldr	r2, [pc, #48]	; (8006a08 <TIM_Base_SetConfig+0x124>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d103      	bne.n	80069e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	691a      	ldr	r2, [r3, #16]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	615a      	str	r2, [r3, #20]
}
 80069ea:	bf00      	nop
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	40010000 	.word	0x40010000
 80069fc:	40000400 	.word	0x40000400
 8006a00:	40000800 	.word	0x40000800
 8006a04:	40000c00 	.word	0x40000c00
 8006a08:	40010400 	.word	0x40010400
 8006a0c:	40014000 	.word	0x40014000
 8006a10:	40014400 	.word	0x40014400
 8006a14:	40014800 	.word	0x40014800
 8006a18:	40001800 	.word	0x40001800
 8006a1c:	40001c00 	.word	0x40001c00
 8006a20:	40002000 	.word	0x40002000

08006a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d101      	bne.n	8006a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e05a      	b.n	8006af2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a21      	ldr	r2, [pc, #132]	; (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d022      	beq.n	8006ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a88:	d01d      	beq.n	8006ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a1d      	ldr	r2, [pc, #116]	; (8006b04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d018      	beq.n	8006ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a1b      	ldr	r2, [pc, #108]	; (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d013      	beq.n	8006ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a1a      	ldr	r2, [pc, #104]	; (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d00e      	beq.n	8006ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a18      	ldr	r2, [pc, #96]	; (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d009      	beq.n	8006ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a17      	ldr	r2, [pc, #92]	; (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d004      	beq.n	8006ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a15      	ldr	r2, [pc, #84]	; (8006b18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d10c      	bne.n	8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006acc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	40010000 	.word	0x40010000
 8006b04:	40000400 	.word	0x40000400
 8006b08:	40000800 	.word	0x40000800
 8006b0c:	40000c00 	.word	0x40000c00
 8006b10:	40010400 	.word	0x40010400
 8006b14:	40014000 	.word	0x40014000
 8006b18:	40001800 	.word	0x40001800

08006b1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e03f      	b.n	8006bd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7fc f802 	bl	8002b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2224      	movs	r2, #36	; 0x24
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68da      	ldr	r2, [r3, #12]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 ff9b 	bl	8007ac4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	691a      	ldr	r2, [r3, #16]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	695a      	ldr	r2, [r3, #20]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b08a      	sub	sp, #40	; 0x28
 8006be2:	af02      	add	r7, sp, #8
 8006be4:	60f8      	str	r0, [r7, #12]
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	603b      	str	r3, [r7, #0]
 8006bea:	4613      	mov	r3, r2
 8006bec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b20      	cmp	r3, #32
 8006bfc:	d17c      	bne.n	8006cf8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <HAL_UART_Transmit+0x2c>
 8006c04:	88fb      	ldrh	r3, [r7, #6]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e075      	b.n	8006cfa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d101      	bne.n	8006c1c <HAL_UART_Transmit+0x3e>
 8006c18:	2302      	movs	r3, #2
 8006c1a:	e06e      	b.n	8006cfa <HAL_UART_Transmit+0x11c>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2221      	movs	r2, #33	; 0x21
 8006c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c32:	f7fc faa7 	bl	8003184 <HAL_GetTick>
 8006c36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	88fa      	ldrh	r2, [r7, #6]
 8006c3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	88fa      	ldrh	r2, [r7, #6]
 8006c42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c4c:	d108      	bne.n	8006c60 <HAL_UART_Transmit+0x82>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d104      	bne.n	8006c60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006c56:	2300      	movs	r3, #0
 8006c58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	61bb      	str	r3, [r7, #24]
 8006c5e:	e003      	b.n	8006c68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c64:	2300      	movs	r3, #0
 8006c66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006c70:	e02a      	b.n	8006cc8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2180      	movs	r1, #128	; 0x80
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 fc53 	bl	8007528 <UART_WaitOnFlagUntilTimeout>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d001      	beq.n	8006c8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e036      	b.n	8006cfa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10b      	bne.n	8006caa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	881b      	ldrh	r3, [r3, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ca0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	3302      	adds	r3, #2
 8006ca6:	61bb      	str	r3, [r7, #24]
 8006ca8:	e007      	b.n	8006cba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	781a      	ldrb	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1cf      	bne.n	8006c72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	2140      	movs	r1, #64	; 0x40
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f000 fc23 	bl	8007528 <UART_WaitOnFlagUntilTimeout>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e006      	b.n	8006cfa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	e000      	b.n	8006cfa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006cf8:	2302      	movs	r3, #2
  }
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3720      	adds	r7, #32
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b08c      	sub	sp, #48	; 0x30
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	60f8      	str	r0, [r7, #12]
 8006d0a:	60b9      	str	r1, [r7, #8]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b20      	cmp	r3, #32
 8006d1a:	d152      	bne.n	8006dc2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d002      	beq.n	8006d28 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006d22:	88fb      	ldrh	r3, [r7, #6]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e04b      	b.n	8006dc4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d101      	bne.n	8006d3a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8006d36:	2302      	movs	r3, #2
 8006d38:	e044      	b.n	8006dc4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2201      	movs	r2, #1
 8006d46:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006d48:	88fb      	ldrh	r3, [r7, #6]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	68b9      	ldr	r1, [r7, #8]
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 fc58 	bl	8007604 <UART_Start_Receive_DMA>
 8006d54:	4603      	mov	r3, r0
 8006d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d12c      	bne.n	8006dbc <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d125      	bne.n	8006db6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	613b      	str	r3, [r7, #16]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	613b      	str	r3, [r7, #16]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	613b      	str	r3, [r7, #16]
 8006d7e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	330c      	adds	r3, #12
 8006d86:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	e853 3f00 	ldrex	r3, [r3]
 8006d8e:	617b      	str	r3, [r7, #20]
   return(result);
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f043 0310 	orr.w	r3, r3, #16
 8006d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	330c      	adds	r3, #12
 8006d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006da0:	627a      	str	r2, [r7, #36]	; 0x24
 8006da2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da4:	6a39      	ldr	r1, [r7, #32]
 8006da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da8:	e841 2300 	strex	r3, r2, [r1]
 8006dac:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e5      	bne.n	8006d80 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006db4:	e002      	b.n	8006dbc <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006dbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006dc0:	e000      	b.n	8006dc4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8006dc2:	2302      	movs	r3, #2
  }
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3730      	adds	r7, #48	; 0x30
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b0ba      	sub	sp, #232	; 0xe8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e02:	f003 030f 	and.w	r3, r3, #15
 8006e06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006e0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10f      	bne.n	8006e32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e16:	f003 0320 	and.w	r3, r3, #32
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d009      	beq.n	8006e32 <HAL_UART_IRQHandler+0x66>
 8006e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e22:	f003 0320 	and.w	r3, r3, #32
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fd8f 	bl	800794e <UART_Receive_IT>
      return;
 8006e30:	e256      	b.n	80072e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006e32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f000 80de 	beq.w	8006ff8 <HAL_UART_IRQHandler+0x22c>
 8006e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d106      	bne.n	8006e56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 80d1 	beq.w	8006ff8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00b      	beq.n	8006e7a <HAL_UART_IRQHandler+0xae>
 8006e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d005      	beq.n	8006e7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	f043 0201 	orr.w	r2, r3, #1
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e7e:	f003 0304 	and.w	r3, r3, #4
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00b      	beq.n	8006e9e <HAL_UART_IRQHandler+0xd2>
 8006e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d005      	beq.n	8006e9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e96:	f043 0202 	orr.w	r2, r3, #2
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00b      	beq.n	8006ec2 <HAL_UART_IRQHandler+0xf6>
 8006eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d005      	beq.n	8006ec2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eba:	f043 0204 	orr.w	r2, r3, #4
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ec6:	f003 0308 	and.w	r3, r3, #8
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d011      	beq.n	8006ef2 <HAL_UART_IRQHandler+0x126>
 8006ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ed2:	f003 0320 	and.w	r3, r3, #32
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d105      	bne.n	8006ee6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d005      	beq.n	8006ef2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eea:	f043 0208 	orr.w	r2, r3, #8
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 81ed 	beq.w	80072d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f00:	f003 0320 	and.w	r3, r3, #32
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d008      	beq.n	8006f1a <HAL_UART_IRQHandler+0x14e>
 8006f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f0c:	f003 0320 	and.w	r3, r3, #32
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fd1a 	bl	800794e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f24:	2b40      	cmp	r3, #64	; 0x40
 8006f26:	bf0c      	ite	eq
 8006f28:	2301      	moveq	r3, #1
 8006f2a:	2300      	movne	r3, #0
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f36:	f003 0308 	and.w	r3, r3, #8
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d103      	bne.n	8006f46 <HAL_UART_IRQHandler+0x17a>
 8006f3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d04f      	beq.n	8006fe6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fc22 	bl	8007790 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f56:	2b40      	cmp	r3, #64	; 0x40
 8006f58:	d141      	bne.n	8006fde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3314      	adds	r3, #20
 8006f60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f68:	e853 3f00 	ldrex	r3, [r3]
 8006f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3314      	adds	r3, #20
 8006f82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1d9      	bne.n	8006f5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d013      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb2:	4a7d      	ldr	r2, [pc, #500]	; (80071a8 <HAL_UART_IRQHandler+0x3dc>)
 8006fb4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fc fb86 	bl	80036cc <HAL_DMA_Abort_IT>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d016      	beq.n	8006ff4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd4:	e00e      	b.n	8006ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f9a4 	bl	8007324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fdc:	e00a      	b.n	8006ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f9a0 	bl	8007324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fe4:	e006      	b.n	8006ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f99c 	bl	8007324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006ff2:	e170      	b.n	80072d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff4:	bf00      	nop
    return;
 8006ff6:	e16e      	b.n	80072d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	f040 814a 	bne.w	8007296 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007006:	f003 0310 	and.w	r3, r3, #16
 800700a:	2b00      	cmp	r3, #0
 800700c:	f000 8143 	beq.w	8007296 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007014:	f003 0310 	and.w	r3, r3, #16
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 813c 	beq.w	8007296 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800701e:	2300      	movs	r3, #0
 8007020:	60bb      	str	r3, [r7, #8]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	60bb      	str	r3, [r7, #8]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	60bb      	str	r3, [r7, #8]
 8007032:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703e:	2b40      	cmp	r3, #64	; 0x40
 8007040:	f040 80b4 	bne.w	80071ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007050:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 8140 	beq.w	80072da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800705e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007062:	429a      	cmp	r2, r3
 8007064:	f080 8139 	bcs.w	80072da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800706e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007074:	69db      	ldr	r3, [r3, #28]
 8007076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800707a:	f000 8088 	beq.w	800718e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	330c      	adds	r3, #12
 8007084:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007088:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800708c:	e853 3f00 	ldrex	r3, [r3]
 8007090:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007094:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800709c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	330c      	adds	r3, #12
 80070a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80070aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80070ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80070b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80070ba:	e841 2300 	strex	r3, r2, [r1]
 80070be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80070c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1d9      	bne.n	800707e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	3314      	adds	r3, #20
 80070d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070d4:	e853 3f00 	ldrex	r3, [r3]
 80070d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80070da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070dc:	f023 0301 	bic.w	r3, r3, #1
 80070e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3314      	adds	r3, #20
 80070ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80070ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80070f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80070f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070fa:	e841 2300 	strex	r3, r2, [r1]
 80070fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1e1      	bne.n	80070ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3314      	adds	r3, #20
 800710c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007110:	e853 3f00 	ldrex	r3, [r3]
 8007114:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800711c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3314      	adds	r3, #20
 8007126:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800712a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800712c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007130:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007132:	e841 2300 	strex	r3, r2, [r1]
 8007136:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1e3      	bne.n	8007106 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2220      	movs	r2, #32
 8007142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	330c      	adds	r3, #12
 8007152:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007156:	e853 3f00 	ldrex	r3, [r3]
 800715a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800715c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800715e:	f023 0310 	bic.w	r3, r3, #16
 8007162:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	330c      	adds	r3, #12
 800716c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007170:	65ba      	str	r2, [r7, #88]	; 0x58
 8007172:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007174:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007176:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007178:	e841 2300 	strex	r3, r2, [r1]
 800717c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800717e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e3      	bne.n	800714c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007188:	4618      	mov	r0, r3
 800718a:	f7fc fa2f 	bl	80035ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007196:	b29b      	uxth	r3, r3
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	b29b      	uxth	r3, r3
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7fa feb2 	bl	8001f08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80071a4:	e099      	b.n	80072da <HAL_UART_IRQHandler+0x50e>
 80071a6:	bf00      	nop
 80071a8:	08007857 	.word	0x08007857
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 808b 	beq.w	80072de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80071c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 8086 	beq.w	80072de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	330c      	adds	r3, #12
 80071d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071dc:	e853 3f00 	ldrex	r3, [r3]
 80071e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	330c      	adds	r3, #12
 80071f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80071f6:	647a      	str	r2, [r7, #68]	; 0x44
 80071f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071fe:	e841 2300 	strex	r3, r2, [r1]
 8007202:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1e3      	bne.n	80071d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3314      	adds	r3, #20
 8007210:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	e853 3f00 	ldrex	r3, [r3]
 8007218:	623b      	str	r3, [r7, #32]
   return(result);
 800721a:	6a3b      	ldr	r3, [r7, #32]
 800721c:	f023 0301 	bic.w	r3, r3, #1
 8007220:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3314      	adds	r3, #20
 800722a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800722e:	633a      	str	r2, [r7, #48]	; 0x30
 8007230:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007232:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007236:	e841 2300 	strex	r3, r2, [r1]
 800723a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800723c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1e3      	bne.n	800720a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2220      	movs	r2, #32
 8007246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	330c      	adds	r3, #12
 8007256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	e853 3f00 	ldrex	r3, [r3]
 800725e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f023 0310 	bic.w	r3, r3, #16
 8007266:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	330c      	adds	r3, #12
 8007270:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007274:	61fa      	str	r2, [r7, #28]
 8007276:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007278:	69b9      	ldr	r1, [r7, #24]
 800727a:	69fa      	ldr	r2, [r7, #28]
 800727c:	e841 2300 	strex	r3, r2, [r1]
 8007280:	617b      	str	r3, [r7, #20]
   return(result);
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1e3      	bne.n	8007250 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007288:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7fa fe3a 	bl	8001f08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007294:	e023      	b.n	80072de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800729a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d009      	beq.n	80072b6 <HAL_UART_IRQHandler+0x4ea>
 80072a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fae5 	bl	800787e <UART_Transmit_IT>
    return;
 80072b4:	e014      	b.n	80072e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80072b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00e      	beq.n	80072e0 <HAL_UART_IRQHandler+0x514>
 80072c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d008      	beq.n	80072e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fb25 	bl	800791e <UART_EndTransmit_IT>
    return;
 80072d4:	e004      	b.n	80072e0 <HAL_UART_IRQHandler+0x514>
    return;
 80072d6:	bf00      	nop
 80072d8:	e002      	b.n	80072e0 <HAL_UART_IRQHandler+0x514>
      return;
 80072da:	bf00      	nop
 80072dc:	e000      	b.n	80072e0 <HAL_UART_IRQHandler+0x514>
      return;
 80072de:	bf00      	nop
  }
}
 80072e0:	37e8      	adds	r7, #232	; 0xe8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop

080072e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b09c      	sub	sp, #112	; 0x70
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007344:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007350:	2b00      	cmp	r3, #0
 8007352:	d172      	bne.n	800743a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007356:	2200      	movs	r2, #0
 8007358:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800735a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	330c      	adds	r3, #12
 8007360:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007364:	e853 3f00 	ldrex	r3, [r3]
 8007368:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800736a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800736c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007370:	66bb      	str	r3, [r7, #104]	; 0x68
 8007372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	330c      	adds	r3, #12
 8007378:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800737a:	65ba      	str	r2, [r7, #88]	; 0x58
 800737c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007380:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007382:	e841 2300 	strex	r3, r2, [r1]
 8007386:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1e5      	bne.n	800735a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800738e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3314      	adds	r3, #20
 8007394:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007398:	e853 3f00 	ldrex	r3, [r3]
 800739c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800739e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a0:	f023 0301 	bic.w	r3, r3, #1
 80073a4:	667b      	str	r3, [r7, #100]	; 0x64
 80073a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	3314      	adds	r3, #20
 80073ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80073ae:	647a      	str	r2, [r7, #68]	; 0x44
 80073b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073b6:	e841 2300 	strex	r3, r2, [r1]
 80073ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1e5      	bne.n	800738e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3314      	adds	r3, #20
 80073c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	e853 3f00 	ldrex	r3, [r3]
 80073d0:	623b      	str	r3, [r7, #32]
   return(result);
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073d8:	663b      	str	r3, [r7, #96]	; 0x60
 80073da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3314      	adds	r3, #20
 80073e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073e2:	633a      	str	r2, [r7, #48]	; 0x30
 80073e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ea:	e841 2300 	strex	r3, r2, [r1]
 80073ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1e5      	bne.n	80073c2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80073f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073f8:	2220      	movs	r2, #32
 80073fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007402:	2b01      	cmp	r3, #1
 8007404:	d119      	bne.n	800743a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	330c      	adds	r3, #12
 800740c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	60fb      	str	r3, [r7, #12]
   return(result);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f023 0310 	bic.w	r3, r3, #16
 800741c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800741e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	330c      	adds	r3, #12
 8007424:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007426:	61fa      	str	r2, [r7, #28]
 8007428:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742a:	69b9      	ldr	r1, [r7, #24]
 800742c:	69fa      	ldr	r2, [r7, #28]
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	617b      	str	r3, [r7, #20]
   return(result);
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1e5      	bne.n	8007406 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800743a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800743c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743e:	2b01      	cmp	r3, #1
 8007440:	d106      	bne.n	8007450 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007444:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007446:	4619      	mov	r1, r3
 8007448:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800744a:	f7fa fd5d 	bl	8001f08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800744e:	e002      	b.n	8007456 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007450:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007452:	f7ff ff53 	bl	80072fc <HAL_UART_RxCpltCallback>
}
 8007456:	bf00      	nop
 8007458:	3770      	adds	r7, #112	; 0x70
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b084      	sub	sp, #16
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007470:	2b01      	cmp	r3, #1
 8007472:	d108      	bne.n	8007486 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007478:	085b      	lsrs	r3, r3, #1
 800747a:	b29b      	uxth	r3, r3
 800747c:	4619      	mov	r1, r3
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f7fa fd42 	bl	8001f08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007484:	e002      	b.n	800748c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f7ff ff42 	bl	8007310 <HAL_UART_RxHalfCpltCallback>
}
 800748c:	bf00      	nop
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800749c:	2300      	movs	r3, #0
 800749e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	695b      	ldr	r3, [r3, #20]
 80074ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b0:	2b80      	cmp	r3, #128	; 0x80
 80074b2:	bf0c      	ite	eq
 80074b4:	2301      	moveq	r3, #1
 80074b6:	2300      	movne	r3, #0
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b21      	cmp	r3, #33	; 0x21
 80074c6:	d108      	bne.n	80074da <UART_DMAError+0x46>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d005      	beq.n	80074da <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2200      	movs	r2, #0
 80074d2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80074d4:	68b8      	ldr	r0, [r7, #8]
 80074d6:	f000 f933 	bl	8007740 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e4:	2b40      	cmp	r3, #64	; 0x40
 80074e6:	bf0c      	ite	eq
 80074e8:	2301      	moveq	r3, #1
 80074ea:	2300      	movne	r3, #0
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b22      	cmp	r3, #34	; 0x22
 80074fa:	d108      	bne.n	800750e <UART_DMAError+0x7a>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d005      	beq.n	800750e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	2200      	movs	r2, #0
 8007506:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007508:	68b8      	ldr	r0, [r7, #8]
 800750a:	f000 f941 	bl	8007790 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	f043 0210 	orr.w	r2, r3, #16
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800751a:	68b8      	ldr	r0, [r7, #8]
 800751c:	f7ff ff02 	bl	8007324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007520:	bf00      	nop
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b090      	sub	sp, #64	; 0x40
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	603b      	str	r3, [r7, #0]
 8007534:	4613      	mov	r3, r2
 8007536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007538:	e050      	b.n	80075dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800753a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800753c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007540:	d04c      	beq.n	80075dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007544:	2b00      	cmp	r3, #0
 8007546:	d007      	beq.n	8007558 <UART_WaitOnFlagUntilTimeout+0x30>
 8007548:	f7fb fe1c 	bl	8003184 <HAL_GetTick>
 800754c:	4602      	mov	r2, r0
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007554:	429a      	cmp	r2, r3
 8007556:	d241      	bcs.n	80075dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	330c      	adds	r3, #12
 800755e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007562:	e853 3f00 	ldrex	r3, [r3]
 8007566:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800756e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	330c      	adds	r3, #12
 8007576:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007578:	637a      	str	r2, [r7, #52]	; 0x34
 800757a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800757e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e5      	bne.n	8007558 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	3314      	adds	r3, #20
 8007592:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	e853 3f00 	ldrex	r3, [r3]
 800759a:	613b      	str	r3, [r7, #16]
   return(result);
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	f023 0301 	bic.w	r3, r3, #1
 80075a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3314      	adds	r3, #20
 80075aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ac:	623a      	str	r2, [r7, #32]
 80075ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b0:	69f9      	ldr	r1, [r7, #28]
 80075b2:	6a3a      	ldr	r2, [r7, #32]
 80075b4:	e841 2300 	strex	r3, r2, [r1]
 80075b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1e5      	bne.n	800758c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2220      	movs	r2, #32
 80075cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e00f      	b.n	80075fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	4013      	ands	r3, r2
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	bf0c      	ite	eq
 80075ec:	2301      	moveq	r3, #1
 80075ee:	2300      	movne	r3, #0
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	461a      	mov	r2, r3
 80075f4:	79fb      	ldrb	r3, [r7, #7]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d09f      	beq.n	800753a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3740      	adds	r7, #64	; 0x40
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b098      	sub	sp, #96	; 0x60
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	4613      	mov	r3, r2
 8007610:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	88fa      	ldrh	r2, [r7, #6]
 800761c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2222      	movs	r2, #34	; 0x22
 8007628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007630:	4a40      	ldr	r2, [pc, #256]	; (8007734 <UART_Start_Receive_DMA+0x130>)
 8007632:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007638:	4a3f      	ldr	r2, [pc, #252]	; (8007738 <UART_Start_Receive_DMA+0x134>)
 800763a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007640:	4a3e      	ldr	r2, [pc, #248]	; (800773c <UART_Start_Receive_DMA+0x138>)
 8007642:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007648:	2200      	movs	r2, #0
 800764a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800764c:	f107 0308 	add.w	r3, r7, #8
 8007650:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3304      	adds	r3, #4
 800765c:	4619      	mov	r1, r3
 800765e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	88fb      	ldrh	r3, [r7, #6]
 8007664:	f7fb ff6a 	bl	800353c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007668:	2300      	movs	r3, #0
 800766a:	613b      	str	r3, [r7, #16]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	613b      	str	r3, [r7, #16]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	613b      	str	r3, [r7, #16]
 800767c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d019      	beq.n	80076c2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	330c      	adds	r3, #12
 8007694:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800769e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	330c      	adds	r3, #12
 80076ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076ae:	64fa      	str	r2, [r7, #76]	; 0x4c
 80076b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80076b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80076bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e5      	bne.n	800768e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	3314      	adds	r3, #20
 80076c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076cc:	e853 3f00 	ldrex	r3, [r3]
 80076d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d4:	f043 0301 	orr.w	r3, r3, #1
 80076d8:	657b      	str	r3, [r7, #84]	; 0x54
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3314      	adds	r3, #20
 80076e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80076e2:	63ba      	str	r2, [r7, #56]	; 0x38
 80076e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80076e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076ea:	e841 2300 	strex	r3, r2, [r1]
 80076ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1e5      	bne.n	80076c2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	3314      	adds	r3, #20
 80076fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	e853 3f00 	ldrex	r3, [r3]
 8007704:	617b      	str	r3, [r7, #20]
   return(result);
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800770c:	653b      	str	r3, [r7, #80]	; 0x50
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	3314      	adds	r3, #20
 8007714:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007716:	627a      	str	r2, [r7, #36]	; 0x24
 8007718:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771a:	6a39      	ldr	r1, [r7, #32]
 800771c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800771e:	e841 2300 	strex	r3, r2, [r1]
 8007722:	61fb      	str	r3, [r7, #28]
   return(result);
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1e5      	bne.n	80076f6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3760      	adds	r7, #96	; 0x60
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	08007339 	.word	0x08007339
 8007738:	0800745f 	.word	0x0800745f
 800773c:	08007495 	.word	0x08007495

08007740 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007740:	b480      	push	{r7}
 8007742:	b089      	sub	sp, #36	; 0x24
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	330c      	adds	r3, #12
 800774e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	e853 3f00 	ldrex	r3, [r3]
 8007756:	60bb      	str	r3, [r7, #8]
   return(result);
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800775e:	61fb      	str	r3, [r7, #28]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	330c      	adds	r3, #12
 8007766:	69fa      	ldr	r2, [r7, #28]
 8007768:	61ba      	str	r2, [r7, #24]
 800776a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776c:	6979      	ldr	r1, [r7, #20]
 800776e:	69ba      	ldr	r2, [r7, #24]
 8007770:	e841 2300 	strex	r3, r2, [r1]
 8007774:	613b      	str	r3, [r7, #16]
   return(result);
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1e5      	bne.n	8007748 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2220      	movs	r2, #32
 8007780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007784:	bf00      	nop
 8007786:	3724      	adds	r7, #36	; 0x24
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007790:	b480      	push	{r7}
 8007792:	b095      	sub	sp, #84	; 0x54
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	330c      	adds	r3, #12
 800779e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a2:	e853 3f00 	ldrex	r3, [r3]
 80077a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	330c      	adds	r3, #12
 80077b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077b8:	643a      	str	r2, [r7, #64]	; 0x40
 80077ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077c0:	e841 2300 	strex	r3, r2, [r1]
 80077c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1e5      	bne.n	8007798 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	3314      	adds	r3, #20
 80077d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	e853 3f00 	ldrex	r3, [r3]
 80077da:	61fb      	str	r3, [r7, #28]
   return(result);
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	f023 0301 	bic.w	r3, r3, #1
 80077e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	3314      	adds	r3, #20
 80077ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077f4:	e841 2300 	strex	r3, r2, [r1]
 80077f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1e5      	bne.n	80077cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007804:	2b01      	cmp	r3, #1
 8007806:	d119      	bne.n	800783c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	330c      	adds	r3, #12
 800780e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	e853 3f00 	ldrex	r3, [r3]
 8007816:	60bb      	str	r3, [r7, #8]
   return(result);
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f023 0310 	bic.w	r3, r3, #16
 800781e:	647b      	str	r3, [r7, #68]	; 0x44
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	330c      	adds	r3, #12
 8007826:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007828:	61ba      	str	r2, [r7, #24]
 800782a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	6979      	ldr	r1, [r7, #20]
 800782e:	69ba      	ldr	r2, [r7, #24]
 8007830:	e841 2300 	strex	r3, r2, [r1]
 8007834:	613b      	str	r3, [r7, #16]
   return(result);
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1e5      	bne.n	8007808 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2220      	movs	r2, #32
 8007840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	631a      	str	r2, [r3, #48]	; 0x30
}
 800784a:	bf00      	nop
 800784c:	3754      	adds	r7, #84	; 0x54
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b084      	sub	sp, #16
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007862:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f7ff fd57 	bl	8007324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007876:	bf00      	nop
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800787e:	b480      	push	{r7}
 8007880:	b085      	sub	sp, #20
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b21      	cmp	r3, #33	; 0x21
 8007890:	d13e      	bne.n	8007910 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800789a:	d114      	bne.n	80078c6 <UART_Transmit_IT+0x48>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d110      	bne.n	80078c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a1b      	ldr	r3, [r3, #32]
 80078a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	461a      	mov	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	1c9a      	adds	r2, r3, #2
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	621a      	str	r2, [r3, #32]
 80078c4:	e008      	b.n	80078d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	1c59      	adds	r1, r3, #1
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	6211      	str	r1, [r2, #32]
 80078d0:	781a      	ldrb	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078dc:	b29b      	uxth	r3, r3
 80078de:	3b01      	subs	r3, #1
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	4619      	mov	r1, r3
 80078e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10f      	bne.n	800790c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68da      	ldr	r2, [r3, #12]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68da      	ldr	r2, [r3, #12]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800790a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	e000      	b.n	8007912 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007910:	2302      	movs	r3, #2
  }
}
 8007912:	4618      	mov	r0, r3
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b082      	sub	sp, #8
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68da      	ldr	r2, [r3, #12]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007934:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2220      	movs	r2, #32
 800793a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7ff fcd2 	bl	80072e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b08c      	sub	sp, #48	; 0x30
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b22      	cmp	r3, #34	; 0x22
 8007960:	f040 80ab 	bne.w	8007aba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800796c:	d117      	bne.n	800799e <UART_Receive_IT+0x50>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d113      	bne.n	800799e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007976:	2300      	movs	r3, #0
 8007978:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	b29b      	uxth	r3, r3
 8007988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800798c:	b29a      	uxth	r2, r3
 800798e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007990:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007996:	1c9a      	adds	r2, r3, #2
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	629a      	str	r2, [r3, #40]	; 0x28
 800799c:	e026      	b.n	80079ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80079a4:	2300      	movs	r3, #0
 80079a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079b0:	d007      	beq.n	80079c2 <UART_Receive_IT+0x74>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10a      	bne.n	80079d0 <UART_Receive_IT+0x82>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d106      	bne.n	80079d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079cc:	701a      	strb	r2, [r3, #0]
 80079ce:	e008      	b.n	80079e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e6:	1c5a      	adds	r2, r3, #1
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	3b01      	subs	r3, #1
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	4619      	mov	r1, r3
 80079fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d15a      	bne.n	8007ab6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68da      	ldr	r2, [r3, #12]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f022 0220 	bic.w	r2, r2, #32
 8007a0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68da      	ldr	r2, [r3, #12]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	695a      	ldr	r2, [r3, #20]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f022 0201 	bic.w	r2, r2, #1
 8007a2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2220      	movs	r2, #32
 8007a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d135      	bne.n	8007aac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	330c      	adds	r3, #12
 8007a4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	e853 3f00 	ldrex	r3, [r3]
 8007a54:	613b      	str	r3, [r7, #16]
   return(result);
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	f023 0310 	bic.w	r3, r3, #16
 8007a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	330c      	adds	r3, #12
 8007a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a66:	623a      	str	r2, [r7, #32]
 8007a68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6a:	69f9      	ldr	r1, [r7, #28]
 8007a6c:	6a3a      	ldr	r2, [r7, #32]
 8007a6e:	e841 2300 	strex	r3, r2, [r1]
 8007a72:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1e5      	bne.n	8007a46 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0310 	and.w	r3, r3, #16
 8007a84:	2b10      	cmp	r3, #16
 8007a86:	d10a      	bne.n	8007a9e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a88:	2300      	movs	r3, #0
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	60fb      	str	r3, [r7, #12]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	60fb      	str	r3, [r7, #12]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7fa fa2f 	bl	8001f08 <HAL_UARTEx_RxEventCallback>
 8007aaa:	e002      	b.n	8007ab2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f7ff fc25 	bl	80072fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	e002      	b.n	8007abc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	e000      	b.n	8007abc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007aba:	2302      	movs	r3, #2
  }
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3730      	adds	r7, #48	; 0x30
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ac8:	b0c0      	sub	sp, #256	; 0x100
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae0:	68d9      	ldr	r1, [r3, #12]
 8007ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	ea40 0301 	orr.w	r3, r0, r1
 8007aec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	431a      	orrs	r2, r3
 8007afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	431a      	orrs	r2, r3
 8007b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b08:	69db      	ldr	r3, [r3, #28]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b1c:	f021 010c 	bic.w	r1, r1, #12
 8007b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b2a:	430b      	orrs	r3, r1
 8007b2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b3e:	6999      	ldr	r1, [r3, #24]
 8007b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	ea40 0301 	orr.w	r3, r0, r1
 8007b4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	4b8f      	ldr	r3, [pc, #572]	; (8007d90 <UART_SetConfig+0x2cc>)
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d005      	beq.n	8007b64 <UART_SetConfig+0xa0>
 8007b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	4b8d      	ldr	r3, [pc, #564]	; (8007d94 <UART_SetConfig+0x2d0>)
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d104      	bne.n	8007b6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b64:	f7fd ff98 	bl	8005a98 <HAL_RCC_GetPCLK2Freq>
 8007b68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007b6c:	e003      	b.n	8007b76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b6e:	f7fd ff7f 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 8007b72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b7a:	69db      	ldr	r3, [r3, #28]
 8007b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b80:	f040 810c 	bne.w	8007d9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007b92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007b96:	4622      	mov	r2, r4
 8007b98:	462b      	mov	r3, r5
 8007b9a:	1891      	adds	r1, r2, r2
 8007b9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8007b9e:	415b      	adcs	r3, r3
 8007ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ba2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	eb12 0801 	adds.w	r8, r2, r1
 8007bac:	4629      	mov	r1, r5
 8007bae:	eb43 0901 	adc.w	r9, r3, r1
 8007bb2:	f04f 0200 	mov.w	r2, #0
 8007bb6:	f04f 0300 	mov.w	r3, #0
 8007bba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007bbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007bc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007bc6:	4690      	mov	r8, r2
 8007bc8:	4699      	mov	r9, r3
 8007bca:	4623      	mov	r3, r4
 8007bcc:	eb18 0303 	adds.w	r3, r8, r3
 8007bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007bd4:	462b      	mov	r3, r5
 8007bd6:	eb49 0303 	adc.w	r3, r9, r3
 8007bda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007bea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007bee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	18db      	adds	r3, r3, r3
 8007bf6:	653b      	str	r3, [r7, #80]	; 0x50
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	eb42 0303 	adc.w	r3, r2, r3
 8007bfe:	657b      	str	r3, [r7, #84]	; 0x54
 8007c00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007c04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007c08:	f7f9 f83e 	bl	8000c88 <__aeabi_uldivmod>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	4b61      	ldr	r3, [pc, #388]	; (8007d98 <UART_SetConfig+0x2d4>)
 8007c12:	fba3 2302 	umull	r2, r3, r3, r2
 8007c16:	095b      	lsrs	r3, r3, #5
 8007c18:	011c      	lsls	r4, r3, #4
 8007c1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007c28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007c2c:	4642      	mov	r2, r8
 8007c2e:	464b      	mov	r3, r9
 8007c30:	1891      	adds	r1, r2, r2
 8007c32:	64b9      	str	r1, [r7, #72]	; 0x48
 8007c34:	415b      	adcs	r3, r3
 8007c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007c3c:	4641      	mov	r1, r8
 8007c3e:	eb12 0a01 	adds.w	sl, r2, r1
 8007c42:	4649      	mov	r1, r9
 8007c44:	eb43 0b01 	adc.w	fp, r3, r1
 8007c48:	f04f 0200 	mov.w	r2, #0
 8007c4c:	f04f 0300 	mov.w	r3, #0
 8007c50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c5c:	4692      	mov	sl, r2
 8007c5e:	469b      	mov	fp, r3
 8007c60:	4643      	mov	r3, r8
 8007c62:	eb1a 0303 	adds.w	r3, sl, r3
 8007c66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c6a:	464b      	mov	r3, r9
 8007c6c:	eb4b 0303 	adc.w	r3, fp, r3
 8007c70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007c84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c88:	460b      	mov	r3, r1
 8007c8a:	18db      	adds	r3, r3, r3
 8007c8c:	643b      	str	r3, [r7, #64]	; 0x40
 8007c8e:	4613      	mov	r3, r2
 8007c90:	eb42 0303 	adc.w	r3, r2, r3
 8007c94:	647b      	str	r3, [r7, #68]	; 0x44
 8007c96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007c9e:	f7f8 fff3 	bl	8000c88 <__aeabi_uldivmod>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	4b3b      	ldr	r3, [pc, #236]	; (8007d98 <UART_SetConfig+0x2d4>)
 8007caa:	fba3 2301 	umull	r2, r3, r3, r1
 8007cae:	095b      	lsrs	r3, r3, #5
 8007cb0:	2264      	movs	r2, #100	; 0x64
 8007cb2:	fb02 f303 	mul.w	r3, r2, r3
 8007cb6:	1acb      	subs	r3, r1, r3
 8007cb8:	00db      	lsls	r3, r3, #3
 8007cba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007cbe:	4b36      	ldr	r3, [pc, #216]	; (8007d98 <UART_SetConfig+0x2d4>)
 8007cc0:	fba3 2302 	umull	r2, r3, r3, r2
 8007cc4:	095b      	lsrs	r3, r3, #5
 8007cc6:	005b      	lsls	r3, r3, #1
 8007cc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ccc:	441c      	add	r4, r3
 8007cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007cdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007ce0:	4642      	mov	r2, r8
 8007ce2:	464b      	mov	r3, r9
 8007ce4:	1891      	adds	r1, r2, r2
 8007ce6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ce8:	415b      	adcs	r3, r3
 8007cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007cf0:	4641      	mov	r1, r8
 8007cf2:	1851      	adds	r1, r2, r1
 8007cf4:	6339      	str	r1, [r7, #48]	; 0x30
 8007cf6:	4649      	mov	r1, r9
 8007cf8:	414b      	adcs	r3, r1
 8007cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8007cfc:	f04f 0200 	mov.w	r2, #0
 8007d00:	f04f 0300 	mov.w	r3, #0
 8007d04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007d08:	4659      	mov	r1, fp
 8007d0a:	00cb      	lsls	r3, r1, #3
 8007d0c:	4651      	mov	r1, sl
 8007d0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d12:	4651      	mov	r1, sl
 8007d14:	00ca      	lsls	r2, r1, #3
 8007d16:	4610      	mov	r0, r2
 8007d18:	4619      	mov	r1, r3
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	4642      	mov	r2, r8
 8007d1e:	189b      	adds	r3, r3, r2
 8007d20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d24:	464b      	mov	r3, r9
 8007d26:	460a      	mov	r2, r1
 8007d28:	eb42 0303 	adc.w	r3, r2, r3
 8007d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007d40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007d44:	460b      	mov	r3, r1
 8007d46:	18db      	adds	r3, r3, r3
 8007d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	eb42 0303 	adc.w	r3, r2, r3
 8007d50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007d5a:	f7f8 ff95 	bl	8000c88 <__aeabi_uldivmod>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	4b0d      	ldr	r3, [pc, #52]	; (8007d98 <UART_SetConfig+0x2d4>)
 8007d64:	fba3 1302 	umull	r1, r3, r3, r2
 8007d68:	095b      	lsrs	r3, r3, #5
 8007d6a:	2164      	movs	r1, #100	; 0x64
 8007d6c:	fb01 f303 	mul.w	r3, r1, r3
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	00db      	lsls	r3, r3, #3
 8007d74:	3332      	adds	r3, #50	; 0x32
 8007d76:	4a08      	ldr	r2, [pc, #32]	; (8007d98 <UART_SetConfig+0x2d4>)
 8007d78:	fba2 2303 	umull	r2, r3, r2, r3
 8007d7c:	095b      	lsrs	r3, r3, #5
 8007d7e:	f003 0207 	and.w	r2, r3, #7
 8007d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4422      	add	r2, r4
 8007d8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d8c:	e105      	b.n	8007f9a <UART_SetConfig+0x4d6>
 8007d8e:	bf00      	nop
 8007d90:	40011000 	.word	0x40011000
 8007d94:	40011400 	.word	0x40011400
 8007d98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007da0:	2200      	movs	r2, #0
 8007da2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007da6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007daa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007dae:	4642      	mov	r2, r8
 8007db0:	464b      	mov	r3, r9
 8007db2:	1891      	adds	r1, r2, r2
 8007db4:	6239      	str	r1, [r7, #32]
 8007db6:	415b      	adcs	r3, r3
 8007db8:	627b      	str	r3, [r7, #36]	; 0x24
 8007dba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007dbe:	4641      	mov	r1, r8
 8007dc0:	1854      	adds	r4, r2, r1
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	eb43 0501 	adc.w	r5, r3, r1
 8007dc8:	f04f 0200 	mov.w	r2, #0
 8007dcc:	f04f 0300 	mov.w	r3, #0
 8007dd0:	00eb      	lsls	r3, r5, #3
 8007dd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007dd6:	00e2      	lsls	r2, r4, #3
 8007dd8:	4614      	mov	r4, r2
 8007dda:	461d      	mov	r5, r3
 8007ddc:	4643      	mov	r3, r8
 8007dde:	18e3      	adds	r3, r4, r3
 8007de0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007de4:	464b      	mov	r3, r9
 8007de6:	eb45 0303 	adc.w	r3, r5, r3
 8007dea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007dfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007dfe:	f04f 0200 	mov.w	r2, #0
 8007e02:	f04f 0300 	mov.w	r3, #0
 8007e06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	008b      	lsls	r3, r1, #2
 8007e0e:	4621      	mov	r1, r4
 8007e10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e14:	4621      	mov	r1, r4
 8007e16:	008a      	lsls	r2, r1, #2
 8007e18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007e1c:	f7f8 ff34 	bl	8000c88 <__aeabi_uldivmod>
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	4b60      	ldr	r3, [pc, #384]	; (8007fa8 <UART_SetConfig+0x4e4>)
 8007e26:	fba3 2302 	umull	r2, r3, r3, r2
 8007e2a:	095b      	lsrs	r3, r3, #5
 8007e2c:	011c      	lsls	r4, r3, #4
 8007e2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e32:	2200      	movs	r2, #0
 8007e34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007e3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007e40:	4642      	mov	r2, r8
 8007e42:	464b      	mov	r3, r9
 8007e44:	1891      	adds	r1, r2, r2
 8007e46:	61b9      	str	r1, [r7, #24]
 8007e48:	415b      	adcs	r3, r3
 8007e4a:	61fb      	str	r3, [r7, #28]
 8007e4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e50:	4641      	mov	r1, r8
 8007e52:	1851      	adds	r1, r2, r1
 8007e54:	6139      	str	r1, [r7, #16]
 8007e56:	4649      	mov	r1, r9
 8007e58:	414b      	adcs	r3, r1
 8007e5a:	617b      	str	r3, [r7, #20]
 8007e5c:	f04f 0200 	mov.w	r2, #0
 8007e60:	f04f 0300 	mov.w	r3, #0
 8007e64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e68:	4659      	mov	r1, fp
 8007e6a:	00cb      	lsls	r3, r1, #3
 8007e6c:	4651      	mov	r1, sl
 8007e6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e72:	4651      	mov	r1, sl
 8007e74:	00ca      	lsls	r2, r1, #3
 8007e76:	4610      	mov	r0, r2
 8007e78:	4619      	mov	r1, r3
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	4642      	mov	r2, r8
 8007e7e:	189b      	adds	r3, r3, r2
 8007e80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e84:	464b      	mov	r3, r9
 8007e86:	460a      	mov	r2, r1
 8007e88:	eb42 0303 	adc.w	r3, r2, r3
 8007e8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007e9c:	f04f 0200 	mov.w	r2, #0
 8007ea0:	f04f 0300 	mov.w	r3, #0
 8007ea4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007ea8:	4649      	mov	r1, r9
 8007eaa:	008b      	lsls	r3, r1, #2
 8007eac:	4641      	mov	r1, r8
 8007eae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007eb2:	4641      	mov	r1, r8
 8007eb4:	008a      	lsls	r2, r1, #2
 8007eb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007eba:	f7f8 fee5 	bl	8000c88 <__aeabi_uldivmod>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	4b39      	ldr	r3, [pc, #228]	; (8007fa8 <UART_SetConfig+0x4e4>)
 8007ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ec8:	095b      	lsrs	r3, r3, #5
 8007eca:	2164      	movs	r1, #100	; 0x64
 8007ecc:	fb01 f303 	mul.w	r3, r1, r3
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	011b      	lsls	r3, r3, #4
 8007ed4:	3332      	adds	r3, #50	; 0x32
 8007ed6:	4a34      	ldr	r2, [pc, #208]	; (8007fa8 <UART_SetConfig+0x4e4>)
 8007ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8007edc:	095b      	lsrs	r3, r3, #5
 8007ede:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ee2:	441c      	add	r4, r3
 8007ee4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ee8:	2200      	movs	r2, #0
 8007eea:	673b      	str	r3, [r7, #112]	; 0x70
 8007eec:	677a      	str	r2, [r7, #116]	; 0x74
 8007eee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007ef2:	4642      	mov	r2, r8
 8007ef4:	464b      	mov	r3, r9
 8007ef6:	1891      	adds	r1, r2, r2
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	415b      	adcs	r3, r3
 8007efc:	60fb      	str	r3, [r7, #12]
 8007efe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f02:	4641      	mov	r1, r8
 8007f04:	1851      	adds	r1, r2, r1
 8007f06:	6039      	str	r1, [r7, #0]
 8007f08:	4649      	mov	r1, r9
 8007f0a:	414b      	adcs	r3, r1
 8007f0c:	607b      	str	r3, [r7, #4]
 8007f0e:	f04f 0200 	mov.w	r2, #0
 8007f12:	f04f 0300 	mov.w	r3, #0
 8007f16:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f1a:	4659      	mov	r1, fp
 8007f1c:	00cb      	lsls	r3, r1, #3
 8007f1e:	4651      	mov	r1, sl
 8007f20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f24:	4651      	mov	r1, sl
 8007f26:	00ca      	lsls	r2, r1, #3
 8007f28:	4610      	mov	r0, r2
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	4642      	mov	r2, r8
 8007f30:	189b      	adds	r3, r3, r2
 8007f32:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f34:	464b      	mov	r3, r9
 8007f36:	460a      	mov	r2, r1
 8007f38:	eb42 0303 	adc.w	r3, r2, r3
 8007f3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	663b      	str	r3, [r7, #96]	; 0x60
 8007f48:	667a      	str	r2, [r7, #100]	; 0x64
 8007f4a:	f04f 0200 	mov.w	r2, #0
 8007f4e:	f04f 0300 	mov.w	r3, #0
 8007f52:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007f56:	4649      	mov	r1, r9
 8007f58:	008b      	lsls	r3, r1, #2
 8007f5a:	4641      	mov	r1, r8
 8007f5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f60:	4641      	mov	r1, r8
 8007f62:	008a      	lsls	r2, r1, #2
 8007f64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007f68:	f7f8 fe8e 	bl	8000c88 <__aeabi_uldivmod>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4b0d      	ldr	r3, [pc, #52]	; (8007fa8 <UART_SetConfig+0x4e4>)
 8007f72:	fba3 1302 	umull	r1, r3, r3, r2
 8007f76:	095b      	lsrs	r3, r3, #5
 8007f78:	2164      	movs	r1, #100	; 0x64
 8007f7a:	fb01 f303 	mul.w	r3, r1, r3
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	011b      	lsls	r3, r3, #4
 8007f82:	3332      	adds	r3, #50	; 0x32
 8007f84:	4a08      	ldr	r2, [pc, #32]	; (8007fa8 <UART_SetConfig+0x4e4>)
 8007f86:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8a:	095b      	lsrs	r3, r3, #5
 8007f8c:	f003 020f 	and.w	r2, r3, #15
 8007f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4422      	add	r2, r4
 8007f98:	609a      	str	r2, [r3, #8]
}
 8007f9a:	bf00      	nop
 8007f9c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fa6:	bf00      	nop
 8007fa8:	51eb851f 	.word	0x51eb851f

08007fac <__NVIC_SetPriority>:
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	6039      	str	r1, [r7, #0]
 8007fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	db0a      	blt.n	8007fd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	490c      	ldr	r1, [pc, #48]	; (8007ff8 <__NVIC_SetPriority+0x4c>)
 8007fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fca:	0112      	lsls	r2, r2, #4
 8007fcc:	b2d2      	uxtb	r2, r2
 8007fce:	440b      	add	r3, r1
 8007fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007fd4:	e00a      	b.n	8007fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	4908      	ldr	r1, [pc, #32]	; (8007ffc <__NVIC_SetPriority+0x50>)
 8007fdc:	79fb      	ldrb	r3, [r7, #7]
 8007fde:	f003 030f 	and.w	r3, r3, #15
 8007fe2:	3b04      	subs	r3, #4
 8007fe4:	0112      	lsls	r2, r2, #4
 8007fe6:	b2d2      	uxtb	r2, r2
 8007fe8:	440b      	add	r3, r1
 8007fea:	761a      	strb	r2, [r3, #24]
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	e000e100 	.word	0xe000e100
 8007ffc:	e000ed00 	.word	0xe000ed00

08008000 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008000:	b580      	push	{r7, lr}
 8008002:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008004:	4b05      	ldr	r3, [pc, #20]	; (800801c <SysTick_Handler+0x1c>)
 8008006:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008008:	f002 fb92 	bl	800a730 <xTaskGetSchedulerState>
 800800c:	4603      	mov	r3, r0
 800800e:	2b01      	cmp	r3, #1
 8008010:	d001      	beq.n	8008016 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008012:	f003 fc79 	bl	800b908 <xPortSysTickHandler>
  }
}
 8008016:	bf00      	nop
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	e000e010 	.word	0xe000e010

08008020 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008020:	b580      	push	{r7, lr}
 8008022:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008024:	2100      	movs	r1, #0
 8008026:	f06f 0004 	mvn.w	r0, #4
 800802a:	f7ff ffbf 	bl	8007fac <__NVIC_SetPriority>
#endif
}
 800802e:	bf00      	nop
 8008030:	bd80      	pop	{r7, pc}
	...

08008034 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800803a:	f3ef 8305 	mrs	r3, IPSR
 800803e:	603b      	str	r3, [r7, #0]
  return(result);
 8008040:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008046:	f06f 0305 	mvn.w	r3, #5
 800804a:	607b      	str	r3, [r7, #4]
 800804c:	e00c      	b.n	8008068 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800804e:	4b0a      	ldr	r3, [pc, #40]	; (8008078 <osKernelInitialize+0x44>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d105      	bne.n	8008062 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008056:	4b08      	ldr	r3, [pc, #32]	; (8008078 <osKernelInitialize+0x44>)
 8008058:	2201      	movs	r2, #1
 800805a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800805c:	2300      	movs	r3, #0
 800805e:	607b      	str	r3, [r7, #4]
 8008060:	e002      	b.n	8008068 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008062:	f04f 33ff 	mov.w	r3, #4294967295
 8008066:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008068:	687b      	ldr	r3, [r7, #4]
}
 800806a:	4618      	mov	r0, r3
 800806c:	370c      	adds	r7, #12
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	20000658 	.word	0x20000658

0800807c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008082:	f3ef 8305 	mrs	r3, IPSR
 8008086:	603b      	str	r3, [r7, #0]
  return(result);
 8008088:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800808a:	2b00      	cmp	r3, #0
 800808c:	d003      	beq.n	8008096 <osKernelStart+0x1a>
    stat = osErrorISR;
 800808e:	f06f 0305 	mvn.w	r3, #5
 8008092:	607b      	str	r3, [r7, #4]
 8008094:	e010      	b.n	80080b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008096:	4b0b      	ldr	r3, [pc, #44]	; (80080c4 <osKernelStart+0x48>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d109      	bne.n	80080b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800809e:	f7ff ffbf 	bl	8008020 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80080a2:	4b08      	ldr	r3, [pc, #32]	; (80080c4 <osKernelStart+0x48>)
 80080a4:	2202      	movs	r2, #2
 80080a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80080a8:	f001 fed4 	bl	8009e54 <vTaskStartScheduler>
      stat = osOK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	607b      	str	r3, [r7, #4]
 80080b0:	e002      	b.n	80080b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80080b2:	f04f 33ff 	mov.w	r3, #4294967295
 80080b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80080b8:	687b      	ldr	r3, [r7, #4]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	20000658 	.word	0x20000658

080080c8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080ce:	f3ef 8305 	mrs	r3, IPSR
 80080d2:	603b      	str	r3, [r7, #0]
  return(result);
 80080d4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d003      	beq.n	80080e2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80080da:	f001 ffe7 	bl	800a0ac <xTaskGetTickCountFromISR>
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	e002      	b.n	80080e8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80080e2:	f001 ffd3 	bl	800a08c <xTaskGetTickCount>
 80080e6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80080e8:	687b      	ldr	r3, [r7, #4]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b08e      	sub	sp, #56	; 0x38
 80080f6:	af04      	add	r7, sp, #16
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80080fe:	2300      	movs	r3, #0
 8008100:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008102:	f3ef 8305 	mrs	r3, IPSR
 8008106:	617b      	str	r3, [r7, #20]
  return(result);
 8008108:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800810a:	2b00      	cmp	r3, #0
 800810c:	d17e      	bne.n	800820c <osThreadNew+0x11a>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d07b      	beq.n	800820c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008114:	2380      	movs	r3, #128	; 0x80
 8008116:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008118:	2318      	movs	r3, #24
 800811a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800811c:	2300      	movs	r3, #0
 800811e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008120:	f04f 33ff 	mov.w	r3, #4294967295
 8008124:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d045      	beq.n	80081b8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d002      	beq.n	800813a <osThreadNew+0x48>
        name = attr->name;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d002      	beq.n	8008148 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d008      	beq.n	8008160 <osThreadNew+0x6e>
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	2b38      	cmp	r3, #56	; 0x38
 8008152:	d805      	bhi.n	8008160 <osThreadNew+0x6e>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	d001      	beq.n	8008164 <osThreadNew+0x72>
        return (NULL);
 8008160:	2300      	movs	r3, #0
 8008162:	e054      	b.n	800820e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	695b      	ldr	r3, [r3, #20]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d003      	beq.n	8008174 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	089b      	lsrs	r3, r3, #2
 8008172:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00e      	beq.n	800819a <osThreadNew+0xa8>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	2bbb      	cmp	r3, #187	; 0xbb
 8008182:	d90a      	bls.n	800819a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008188:	2b00      	cmp	r3, #0
 800818a:	d006      	beq.n	800819a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d002      	beq.n	800819a <osThreadNew+0xa8>
        mem = 1;
 8008194:	2301      	movs	r3, #1
 8008196:	61bb      	str	r3, [r7, #24]
 8008198:	e010      	b.n	80081bc <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10c      	bne.n	80081bc <osThreadNew+0xca>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d108      	bne.n	80081bc <osThreadNew+0xca>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d104      	bne.n	80081bc <osThreadNew+0xca>
          mem = 0;
 80081b2:	2300      	movs	r3, #0
 80081b4:	61bb      	str	r3, [r7, #24]
 80081b6:	e001      	b.n	80081bc <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d110      	bne.n	80081e4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80081ca:	9202      	str	r2, [sp, #8]
 80081cc:	9301      	str	r3, [sp, #4]
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	6a3a      	ldr	r2, [r7, #32]
 80081d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f001 fc4f 	bl	8009a7c <xTaskCreateStatic>
 80081de:	4603      	mov	r3, r0
 80081e0:	613b      	str	r3, [r7, #16]
 80081e2:	e013      	b.n	800820c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d110      	bne.n	800820c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	f107 0310 	add.w	r3, r7, #16
 80081f2:	9301      	str	r3, [sp, #4]
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f001 fc9a 	bl	8009b36 <xTaskCreate>
 8008202:	4603      	mov	r3, r0
 8008204:	2b01      	cmp	r3, #1
 8008206:	d001      	beq.n	800820c <osThreadNew+0x11a>
            hTask = NULL;
 8008208:	2300      	movs	r3, #0
 800820a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800820c:	693b      	ldr	r3, [r7, #16]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3728      	adds	r7, #40	; 0x28
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
	...

08008218 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8008218:	b580      	push	{r7, lr}
 800821a:	b088      	sub	sp, #32
 800821c:	af02      	add	r7, sp, #8
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <osThreadFlagsSet+0x1a>
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	da03      	bge.n	800823a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8008232:	f06f 0303 	mvn.w	r3, #3
 8008236:	60fb      	str	r3, [r7, #12]
 8008238:	e035      	b.n	80082a6 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800823a:	f04f 33ff 	mov.w	r3, #4294967295
 800823e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008240:	f3ef 8305 	mrs	r3, IPSR
 8008244:	613b      	str	r3, [r7, #16]
  return(result);
 8008246:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8008248:	2b00      	cmp	r3, #0
 800824a:	d01f      	beq.n	800828c <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800824c:	2300      	movs	r3, #0
 800824e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8008250:	f107 0308 	add.w	r3, r7, #8
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	2300      	movs	r3, #0
 8008258:	2201      	movs	r2, #1
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6978      	ldr	r0, [r7, #20]
 800825e:	f002 fd0f 	bl	800ac80 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8008262:	f107 030c 	add.w	r3, r7, #12
 8008266:	2200      	movs	r2, #0
 8008268:	9200      	str	r2, [sp, #0]
 800826a:	2200      	movs	r2, #0
 800826c:	2100      	movs	r1, #0
 800826e:	6978      	ldr	r0, [r7, #20]
 8008270:	f002 fd06 	bl	800ac80 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d015      	beq.n	80082a6 <osThreadFlagsSet+0x8e>
 800827a:	4b0d      	ldr	r3, [pc, #52]	; (80082b0 <osThreadFlagsSet+0x98>)
 800827c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008280:	601a      	str	r2, [r3, #0]
 8008282:	f3bf 8f4f 	dsb	sy
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	e00c      	b.n	80082a6 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800828c:	2300      	movs	r3, #0
 800828e:	2201      	movs	r2, #1
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	6978      	ldr	r0, [r7, #20]
 8008294:	f002 fc36 	bl	800ab04 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8008298:	f107 030c 	add.w	r3, r7, #12
 800829c:	2200      	movs	r2, #0
 800829e:	2100      	movs	r1, #0
 80082a0:	6978      	ldr	r0, [r7, #20]
 80082a2:	f002 fc2f 	bl	800ab04 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80082a6:	68fb      	ldr	r3, [r7, #12]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3718      	adds	r7, #24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	e000ed04 	.word	0xe000ed04

080082b4 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b08c      	sub	sp, #48	; 0x30
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082c0:	f3ef 8305 	mrs	r3, IPSR
 80082c4:	617b      	str	r3, [r7, #20]
  return(result);
 80082c6:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d003      	beq.n	80082d4 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80082cc:	f06f 0305 	mvn.w	r3, #5
 80082d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082d2:	e06b      	b.n	80083ac <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	da03      	bge.n	80082e2 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80082da:	f06f 0303 	mvn.w	r3, #3
 80082de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082e0:	e064      	b.n	80083ac <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	f003 0302 	and.w	r3, r3, #2
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d002      	beq.n	80082f2 <osThreadFlagsWait+0x3e>
      clear = 0U;
 80082ec:	2300      	movs	r3, #0
 80082ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80082f0:	e001      	b.n	80082f6 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 80082fe:	f001 fec5 	bl	800a08c <xTaskGetTickCount>
 8008302:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8008304:	f107 0210 	add.w	r2, r7, #16
 8008308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800830c:	2000      	movs	r0, #0
 800830e:	f002 fb99 	bl	800aa44 <xTaskNotifyWait>
 8008312:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	2b01      	cmp	r3, #1
 8008318:	d137      	bne.n	800838a <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800831a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	4013      	ands	r3, r2
 8008320:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008326:	4313      	orrs	r3, r2
 8008328:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f003 0301 	and.w	r3, r3, #1
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00c      	beq.n	800834e <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008338:	4013      	ands	r3, r2
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	429a      	cmp	r2, r3
 800833e:	d032      	beq.n	80083a6 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d10f      	bne.n	8008366 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8008346:	f06f 0302 	mvn.w	r3, #2
 800834a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800834c:	e02e      	b.n	80083ac <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008352:	4013      	ands	r3, r2
 8008354:	2b00      	cmp	r3, #0
 8008356:	d128      	bne.n	80083aa <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d103      	bne.n	8008366 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800835e:	f06f 0302 	mvn.w	r3, #2
 8008362:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8008364:	e022      	b.n	80083ac <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8008366:	f001 fe91 	bl	800a08c <xTaskGetTickCount>
 800836a:	4602      	mov	r2, r0
 800836c:	6a3b      	ldr	r3, [r7, #32]
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8008372:	69ba      	ldr	r2, [r7, #24]
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	429a      	cmp	r2, r3
 8008378:	d902      	bls.n	8008380 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800837a:	2300      	movs	r3, #0
 800837c:	627b      	str	r3, [r7, #36]	; 0x24
 800837e:	e00e      	b.n	800839e <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8008380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	627b      	str	r3, [r7, #36]	; 0x24
 8008388:	e009      	b.n	800839e <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d103      	bne.n	8008398 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8008390:	f06f 0302 	mvn.w	r3, #2
 8008394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008396:	e002      	b.n	800839e <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8008398:	f06f 0301 	mvn.w	r3, #1
 800839c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1af      	bne.n	8008304 <osThreadFlagsWait+0x50>
 80083a4:	e002      	b.n	80083ac <osThreadFlagsWait+0xf8>
            break;
 80083a6:	bf00      	nop
 80083a8:	e000      	b.n	80083ac <osThreadFlagsWait+0xf8>
            break;
 80083aa:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80083ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3730      	adds	r7, #48	; 0x30
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083be:	f3ef 8305 	mrs	r3, IPSR
 80083c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80083c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d003      	beq.n	80083d2 <osDelay+0x1c>
    stat = osErrorISR;
 80083ca:	f06f 0305 	mvn.w	r3, #5
 80083ce:	60fb      	str	r3, [r7, #12]
 80083d0:	e007      	b.n	80083e2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80083d2:	2300      	movs	r3, #0
 80083d4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d002      	beq.n	80083e2 <osDelay+0x2c>
      vTaskDelay(ticks);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f001 fd05 	bl	8009dec <vTaskDelay>
    }
  }

  return (stat);
 80083e2:	68fb      	ldr	r3, [r7, #12]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08a      	sub	sp, #40	; 0x28
 80083f0:	af02      	add	r7, sp, #8
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80083f8:	2300      	movs	r3, #0
 80083fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083fc:	f3ef 8305 	mrs	r3, IPSR
 8008400:	613b      	str	r3, [r7, #16]
  return(result);
 8008402:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008404:	2b00      	cmp	r3, #0
 8008406:	d175      	bne.n	80084f4 <osSemaphoreNew+0x108>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d072      	beq.n	80084f4 <osSemaphoreNew+0x108>
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	429a      	cmp	r2, r3
 8008414:	d86e      	bhi.n	80084f4 <osSemaphoreNew+0x108>
    mem = -1;
 8008416:	f04f 33ff 	mov.w	r3, #4294967295
 800841a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d015      	beq.n	800844e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d006      	beq.n	8008438 <osSemaphoreNew+0x4c>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	2b4f      	cmp	r3, #79	; 0x4f
 8008430:	d902      	bls.n	8008438 <osSemaphoreNew+0x4c>
        mem = 1;
 8008432:	2301      	movs	r3, #1
 8008434:	61bb      	str	r3, [r7, #24]
 8008436:	e00c      	b.n	8008452 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d108      	bne.n	8008452 <osSemaphoreNew+0x66>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d104      	bne.n	8008452 <osSemaphoreNew+0x66>
          mem = 0;
 8008448:	2300      	movs	r3, #0
 800844a:	61bb      	str	r3, [r7, #24]
 800844c:	e001      	b.n	8008452 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800844e:	2300      	movs	r3, #0
 8008450:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008458:	d04c      	beq.n	80084f4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d128      	bne.n	80084b2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d10a      	bne.n	800847c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	2203      	movs	r2, #3
 800846c:	9200      	str	r2, [sp, #0]
 800846e:	2200      	movs	r2, #0
 8008470:	2100      	movs	r1, #0
 8008472:	2001      	movs	r0, #1
 8008474:	f000 fb5c 	bl	8008b30 <xQueueGenericCreateStatic>
 8008478:	61f8      	str	r0, [r7, #28]
 800847a:	e005      	b.n	8008488 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800847c:	2203      	movs	r2, #3
 800847e:	2100      	movs	r1, #0
 8008480:	2001      	movs	r0, #1
 8008482:	f000 fbcd 	bl	8008c20 <xQueueGenericCreate>
 8008486:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d022      	beq.n	80084d4 <osSemaphoreNew+0xe8>
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d01f      	beq.n	80084d4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008494:	2300      	movs	r3, #0
 8008496:	2200      	movs	r2, #0
 8008498:	2100      	movs	r1, #0
 800849a:	69f8      	ldr	r0, [r7, #28]
 800849c:	f000 fc88 	bl	8008db0 <xQueueGenericSend>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d016      	beq.n	80084d4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80084a6:	69f8      	ldr	r0, [r7, #28]
 80084a8:	f001 f914 	bl	80096d4 <vQueueDelete>
            hSemaphore = NULL;
 80084ac:	2300      	movs	r3, #0
 80084ae:	61fb      	str	r3, [r7, #28]
 80084b0:	e010      	b.n	80084d4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d108      	bne.n	80084ca <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	461a      	mov	r2, r3
 80084be:	68b9      	ldr	r1, [r7, #8]
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f000 fc0a 	bl	8008cda <xQueueCreateCountingSemaphoreStatic>
 80084c6:	61f8      	str	r0, [r7, #28]
 80084c8:	e004      	b.n	80084d4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80084ca:	68b9      	ldr	r1, [r7, #8]
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 fc3b 	bl	8008d48 <xQueueCreateCountingSemaphore>
 80084d2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00c      	beq.n	80084f4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d003      	beq.n	80084e8 <osSemaphoreNew+0xfc>
          name = attr->name;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	617b      	str	r3, [r7, #20]
 80084e6:	e001      	b.n	80084ec <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80084e8:	2300      	movs	r3, #0
 80084ea:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80084ec:	6979      	ldr	r1, [r7, #20]
 80084ee:	69f8      	ldr	r0, [r7, #28]
 80084f0:	f001 fa3c 	bl	800996c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80084f4:	69fb      	ldr	r3, [r7, #28]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3720      	adds	r7, #32
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
	...

08008500 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008500:	b580      	push	{r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800850e:	2300      	movs	r3, #0
 8008510:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d103      	bne.n	8008520 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008518:	f06f 0303 	mvn.w	r3, #3
 800851c:	617b      	str	r3, [r7, #20]
 800851e:	e039      	b.n	8008594 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008520:	f3ef 8305 	mrs	r3, IPSR
 8008524:	60fb      	str	r3, [r7, #12]
  return(result);
 8008526:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008528:	2b00      	cmp	r3, #0
 800852a:	d022      	beq.n	8008572 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d003      	beq.n	800853a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008532:	f06f 0303 	mvn.w	r3, #3
 8008536:	617b      	str	r3, [r7, #20]
 8008538:	e02c      	b.n	8008594 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800853a:	2300      	movs	r3, #0
 800853c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800853e:	f107 0308 	add.w	r3, r7, #8
 8008542:	461a      	mov	r2, r3
 8008544:	2100      	movs	r1, #0
 8008546:	6938      	ldr	r0, [r7, #16]
 8008548:	f001 f844 	bl	80095d4 <xQueueReceiveFromISR>
 800854c:	4603      	mov	r3, r0
 800854e:	2b01      	cmp	r3, #1
 8008550:	d003      	beq.n	800855a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008552:	f06f 0302 	mvn.w	r3, #2
 8008556:	617b      	str	r3, [r7, #20]
 8008558:	e01c      	b.n	8008594 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d019      	beq.n	8008594 <osSemaphoreAcquire+0x94>
 8008560:	4b0f      	ldr	r3, [pc, #60]	; (80085a0 <osSemaphoreAcquire+0xa0>)
 8008562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	e010      	b.n	8008594 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6938      	ldr	r0, [r7, #16]
 8008576:	f000 ff21 	bl	80093bc <xQueueSemaphoreTake>
 800857a:	4603      	mov	r3, r0
 800857c:	2b01      	cmp	r3, #1
 800857e:	d009      	beq.n	8008594 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008586:	f06f 0301 	mvn.w	r3, #1
 800858a:	617b      	str	r3, [r7, #20]
 800858c:	e002      	b.n	8008594 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800858e:	f06f 0302 	mvn.w	r3, #2
 8008592:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008594:	697b      	ldr	r3, [r7, #20]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3718      	adds	r7, #24
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	e000ed04 	.word	0xe000ed04

080085a4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d103      	bne.n	80085c2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80085ba:	f06f 0303 	mvn.w	r3, #3
 80085be:	617b      	str	r3, [r7, #20]
 80085c0:	e02c      	b.n	800861c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085c2:	f3ef 8305 	mrs	r3, IPSR
 80085c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80085c8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d01a      	beq.n	8008604 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80085ce:	2300      	movs	r3, #0
 80085d0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80085d2:	f107 0308 	add.w	r3, r7, #8
 80085d6:	4619      	mov	r1, r3
 80085d8:	6938      	ldr	r0, [r7, #16]
 80085da:	f000 fd82 	bl	80090e2 <xQueueGiveFromISR>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d003      	beq.n	80085ec <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80085e4:	f06f 0302 	mvn.w	r3, #2
 80085e8:	617b      	str	r3, [r7, #20]
 80085ea:	e017      	b.n	800861c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d014      	beq.n	800861c <osSemaphoreRelease+0x78>
 80085f2:	4b0d      	ldr	r3, [pc, #52]	; (8008628 <osSemaphoreRelease+0x84>)
 80085f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085f8:	601a      	str	r2, [r3, #0]
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	f3bf 8f6f 	isb	sy
 8008602:	e00b      	b.n	800861c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008604:	2300      	movs	r3, #0
 8008606:	2200      	movs	r2, #0
 8008608:	2100      	movs	r1, #0
 800860a:	6938      	ldr	r0, [r7, #16]
 800860c:	f000 fbd0 	bl	8008db0 <xQueueGenericSend>
 8008610:	4603      	mov	r3, r0
 8008612:	2b01      	cmp	r3, #1
 8008614:	d002      	beq.n	800861c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008616:	f06f 0302 	mvn.w	r3, #2
 800861a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800861c:	697b      	ldr	r3, [r7, #20]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	e000ed04 	.word	0xe000ed04

0800862c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800862c:	b580      	push	{r7, lr}
 800862e:	b08a      	sub	sp, #40	; 0x28
 8008630:	af02      	add	r7, sp, #8
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008638:	2300      	movs	r3, #0
 800863a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800863c:	f3ef 8305 	mrs	r3, IPSR
 8008640:	613b      	str	r3, [r7, #16]
  return(result);
 8008642:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008644:	2b00      	cmp	r3, #0
 8008646:	d15f      	bne.n	8008708 <osMessageQueueNew+0xdc>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d05c      	beq.n	8008708 <osMessageQueueNew+0xdc>
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d059      	beq.n	8008708 <osMessageQueueNew+0xdc>
    mem = -1;
 8008654:	f04f 33ff 	mov.w	r3, #4294967295
 8008658:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d029      	beq.n	80086b4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d012      	beq.n	800868e <osMessageQueueNew+0x62>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	2b4f      	cmp	r3, #79	; 0x4f
 800866e:	d90e      	bls.n	800868e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00a      	beq.n	800868e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	695a      	ldr	r2, [r3, #20]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	68b9      	ldr	r1, [r7, #8]
 8008680:	fb01 f303 	mul.w	r3, r1, r3
 8008684:	429a      	cmp	r2, r3
 8008686:	d302      	bcc.n	800868e <osMessageQueueNew+0x62>
        mem = 1;
 8008688:	2301      	movs	r3, #1
 800868a:	61bb      	str	r3, [r7, #24]
 800868c:	e014      	b.n	80086b8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d110      	bne.n	80086b8 <osMessageQueueNew+0x8c>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10c      	bne.n	80086b8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d108      	bne.n	80086b8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d104      	bne.n	80086b8 <osMessageQueueNew+0x8c>
          mem = 0;
 80086ae:	2300      	movs	r3, #0
 80086b0:	61bb      	str	r3, [r7, #24]
 80086b2:	e001      	b.n	80086b8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80086b4:	2300      	movs	r3, #0
 80086b6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d10b      	bne.n	80086d6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	691a      	ldr	r2, [r3, #16]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	2100      	movs	r1, #0
 80086c8:	9100      	str	r1, [sp, #0]
 80086ca:	68b9      	ldr	r1, [r7, #8]
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f000 fa2f 	bl	8008b30 <xQueueGenericCreateStatic>
 80086d2:	61f8      	str	r0, [r7, #28]
 80086d4:	e008      	b.n	80086e8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d105      	bne.n	80086e8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80086dc:	2200      	movs	r2, #0
 80086de:	68b9      	ldr	r1, [r7, #8]
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 fa9d 	bl	8008c20 <xQueueGenericCreate>
 80086e6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00c      	beq.n	8008708 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d003      	beq.n	80086fc <osMessageQueueNew+0xd0>
        name = attr->name;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	617b      	str	r3, [r7, #20]
 80086fa:	e001      	b.n	8008700 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80086fc:	2300      	movs	r3, #0
 80086fe:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008700:	6979      	ldr	r1, [r7, #20]
 8008702:	69f8      	ldr	r0, [r7, #28]
 8008704:	f001 f932 	bl	800996c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008708:	69fb      	ldr	r3, [r7, #28]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3720      	adds	r7, #32
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
	...

08008714 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008714:	b580      	push	{r7, lr}
 8008716:	b088      	sub	sp, #32
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	603b      	str	r3, [r7, #0]
 8008720:	4613      	mov	r3, r2
 8008722:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008728:	2300      	movs	r3, #0
 800872a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800872c:	f3ef 8305 	mrs	r3, IPSR
 8008730:	617b      	str	r3, [r7, #20]
  return(result);
 8008732:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008734:	2b00      	cmp	r3, #0
 8008736:	d028      	beq.n	800878a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d005      	beq.n	800874a <osMessageQueuePut+0x36>
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d002      	beq.n	800874a <osMessageQueuePut+0x36>
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d003      	beq.n	8008752 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800874a:	f06f 0303 	mvn.w	r3, #3
 800874e:	61fb      	str	r3, [r7, #28]
 8008750:	e038      	b.n	80087c4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008752:	2300      	movs	r3, #0
 8008754:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008756:	f107 0210 	add.w	r2, r7, #16
 800875a:	2300      	movs	r3, #0
 800875c:	68b9      	ldr	r1, [r7, #8]
 800875e:	69b8      	ldr	r0, [r7, #24]
 8008760:	f000 fc24 	bl	8008fac <xQueueGenericSendFromISR>
 8008764:	4603      	mov	r3, r0
 8008766:	2b01      	cmp	r3, #1
 8008768:	d003      	beq.n	8008772 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800876a:	f06f 0302 	mvn.w	r3, #2
 800876e:	61fb      	str	r3, [r7, #28]
 8008770:	e028      	b.n	80087c4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d025      	beq.n	80087c4 <osMessageQueuePut+0xb0>
 8008778:	4b15      	ldr	r3, [pc, #84]	; (80087d0 <osMessageQueuePut+0xbc>)
 800877a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800877e:	601a      	str	r2, [r3, #0]
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	e01c      	b.n	80087c4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d002      	beq.n	8008796 <osMessageQueuePut+0x82>
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d103      	bne.n	800879e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008796:	f06f 0303 	mvn.w	r3, #3
 800879a:	61fb      	str	r3, [r7, #28]
 800879c:	e012      	b.n	80087c4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800879e:	2300      	movs	r3, #0
 80087a0:	683a      	ldr	r2, [r7, #0]
 80087a2:	68b9      	ldr	r1, [r7, #8]
 80087a4:	69b8      	ldr	r0, [r7, #24]
 80087a6:	f000 fb03 	bl	8008db0 <xQueueGenericSend>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d009      	beq.n	80087c4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80087b6:	f06f 0301 	mvn.w	r3, #1
 80087ba:	61fb      	str	r3, [r7, #28]
 80087bc:	e002      	b.n	80087c4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80087be:	f06f 0302 	mvn.w	r3, #2
 80087c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80087c4:	69fb      	ldr	r3, [r7, #28]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3720      	adds	r7, #32
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	e000ed04 	.word	0xe000ed04

080087d4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b088      	sub	sp, #32
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
 80087e0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80087e6:	2300      	movs	r3, #0
 80087e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087ea:	f3ef 8305 	mrs	r3, IPSR
 80087ee:	617b      	str	r3, [r7, #20]
  return(result);
 80087f0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d028      	beq.n	8008848 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d005      	beq.n	8008808 <osMessageQueueGet+0x34>
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d002      	beq.n	8008808 <osMessageQueueGet+0x34>
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d003      	beq.n	8008810 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008808:	f06f 0303 	mvn.w	r3, #3
 800880c:	61fb      	str	r3, [r7, #28]
 800880e:	e037      	b.n	8008880 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008810:	2300      	movs	r3, #0
 8008812:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008814:	f107 0310 	add.w	r3, r7, #16
 8008818:	461a      	mov	r2, r3
 800881a:	68b9      	ldr	r1, [r7, #8]
 800881c:	69b8      	ldr	r0, [r7, #24]
 800881e:	f000 fed9 	bl	80095d4 <xQueueReceiveFromISR>
 8008822:	4603      	mov	r3, r0
 8008824:	2b01      	cmp	r3, #1
 8008826:	d003      	beq.n	8008830 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008828:	f06f 0302 	mvn.w	r3, #2
 800882c:	61fb      	str	r3, [r7, #28]
 800882e:	e027      	b.n	8008880 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d024      	beq.n	8008880 <osMessageQueueGet+0xac>
 8008836:	4b15      	ldr	r3, [pc, #84]	; (800888c <osMessageQueueGet+0xb8>)
 8008838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	f3bf 8f4f 	dsb	sy
 8008842:	f3bf 8f6f 	isb	sy
 8008846:	e01b      	b.n	8008880 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d002      	beq.n	8008854 <osMessageQueueGet+0x80>
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d103      	bne.n	800885c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008854:	f06f 0303 	mvn.w	r3, #3
 8008858:	61fb      	str	r3, [r7, #28]
 800885a:	e011      	b.n	8008880 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800885c:	683a      	ldr	r2, [r7, #0]
 800885e:	68b9      	ldr	r1, [r7, #8]
 8008860:	69b8      	ldr	r0, [r7, #24]
 8008862:	f000 fccb 	bl	80091fc <xQueueReceive>
 8008866:	4603      	mov	r3, r0
 8008868:	2b01      	cmp	r3, #1
 800886a:	d009      	beq.n	8008880 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d003      	beq.n	800887a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008872:	f06f 0301 	mvn.w	r3, #1
 8008876:	61fb      	str	r3, [r7, #28]
 8008878:	e002      	b.n	8008880 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800887a:	f06f 0302 	mvn.w	r3, #2
 800887e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008880:	69fb      	ldr	r3, [r7, #28]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3720      	adds	r7, #32
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	e000ed04 	.word	0xe000ed04

08008890 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4a07      	ldr	r2, [pc, #28]	; (80088bc <vApplicationGetIdleTaskMemory+0x2c>)
 80088a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	4a06      	ldr	r2, [pc, #24]	; (80088c0 <vApplicationGetIdleTaskMemory+0x30>)
 80088a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2280      	movs	r2, #128	; 0x80
 80088ac:	601a      	str	r2, [r3, #0]
}
 80088ae:	bf00      	nop
 80088b0:	3714      	adds	r7, #20
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	2000065c 	.word	0x2000065c
 80088c0:	20000718 	.word	0x20000718

080088c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	4a07      	ldr	r2, [pc, #28]	; (80088f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80088d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	4a06      	ldr	r2, [pc, #24]	; (80088f4 <vApplicationGetTimerTaskMemory+0x30>)
 80088da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088e2:	601a      	str	r2, [r3, #0]
}
 80088e4:	bf00      	nop
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	20000918 	.word	0x20000918
 80088f4:	200009d4 	.word	0x200009d4

080088f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f103 0208 	add.w	r2, r3, #8
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f04f 32ff 	mov.w	r2, #4294967295
 8008910:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f103 0208 	add.w	r2, r3, #8
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f103 0208 	add.w	r2, r3, #8
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008946:	bf00      	nop
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr

08008952 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008952:	b480      	push	{r7}
 8008954:	b085      	sub	sp, #20
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	689a      	ldr	r2, [r3, #8]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	683a      	ldr	r2, [r7, #0]
 800897c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	1c5a      	adds	r2, r3, #1
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	601a      	str	r2, [r3, #0]
}
 800898e:	bf00      	nop
 8008990:	3714      	adds	r7, #20
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800899a:	b480      	push	{r7}
 800899c:	b085      	sub	sp, #20
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b0:	d103      	bne.n	80089ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	e00c      	b.n	80089d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	3308      	adds	r3, #8
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	e002      	b.n	80089c8 <vListInsert+0x2e>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	60fb      	str	r3, [r7, #12]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d2f6      	bcs.n	80089c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	685a      	ldr	r2, [r3, #4]
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	683a      	ldr	r2, [r7, #0]
 80089ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	1c5a      	adds	r2, r3, #1
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	601a      	str	r2, [r3, #0]
}
 8008a00:	bf00      	nop
 8008a02:	3714      	adds	r7, #20
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	6892      	ldr	r2, [r2, #8]
 8008a22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	6852      	ldr	r2, [r2, #4]
 8008a2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d103      	bne.n	8008a40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	689a      	ldr	r2, [r3, #8]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	1e5a      	subs	r2, r3, #1
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d10a      	bne.n	8008a8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008a86:	bf00      	nop
 8008a88:	e7fe      	b.n	8008a88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008a8a:	f002 feab 	bl	800b7e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a96:	68f9      	ldr	r1, [r7, #12]
 8008a98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008a9a:	fb01 f303 	mul.w	r3, r1, r3
 8008a9e:	441a      	add	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aba:	3b01      	subs	r3, #1
 8008abc:	68f9      	ldr	r1, [r7, #12]
 8008abe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ac0:	fb01 f303 	mul.w	r3, r1, r3
 8008ac4:	441a      	add	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	22ff      	movs	r2, #255	; 0xff
 8008ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	22ff      	movs	r2, #255	; 0xff
 8008ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d114      	bne.n	8008b0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d01a      	beq.n	8008b1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	3310      	adds	r3, #16
 8008aec:	4618      	mov	r0, r3
 8008aee:	f001 fc5d 	bl	800a3ac <xTaskRemoveFromEventList>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d012      	beq.n	8008b1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008af8:	4b0c      	ldr	r3, [pc, #48]	; (8008b2c <xQueueGenericReset+0xcc>)
 8008afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008afe:	601a      	str	r2, [r3, #0]
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	e009      	b.n	8008b1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3310      	adds	r3, #16
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7ff fef2 	bl	80088f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	3324      	adds	r3, #36	; 0x24
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7ff feed 	bl	80088f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008b1e:	f002 fe91 	bl	800b844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008b22:	2301      	movs	r3, #1
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	e000ed04 	.word	0xe000ed04

08008b30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b08e      	sub	sp, #56	; 0x38
 8008b34:	af02      	add	r7, sp, #8
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
 8008b3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10a      	bne.n	8008b5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b56:	bf00      	nop
 8008b58:	e7fe      	b.n	8008b58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10a      	bne.n	8008b76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b72:	bf00      	nop
 8008b74:	e7fe      	b.n	8008b74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d002      	beq.n	8008b82 <xQueueGenericCreateStatic+0x52>
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d001      	beq.n	8008b86 <xQueueGenericCreateStatic+0x56>
 8008b82:	2301      	movs	r3, #1
 8008b84:	e000      	b.n	8008b88 <xQueueGenericCreateStatic+0x58>
 8008b86:	2300      	movs	r3, #0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10a      	bne.n	8008ba2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b90:	f383 8811 	msr	BASEPRI, r3
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	623b      	str	r3, [r7, #32]
}
 8008b9e:	bf00      	nop
 8008ba0:	e7fe      	b.n	8008ba0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d102      	bne.n	8008bae <xQueueGenericCreateStatic+0x7e>
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d101      	bne.n	8008bb2 <xQueueGenericCreateStatic+0x82>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e000      	b.n	8008bb4 <xQueueGenericCreateStatic+0x84>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10a      	bne.n	8008bce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbc:	f383 8811 	msr	BASEPRI, r3
 8008bc0:	f3bf 8f6f 	isb	sy
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	61fb      	str	r3, [r7, #28]
}
 8008bca:	bf00      	nop
 8008bcc:	e7fe      	b.n	8008bcc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008bce:	2350      	movs	r3, #80	; 0x50
 8008bd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	2b50      	cmp	r3, #80	; 0x50
 8008bd6:	d00a      	beq.n	8008bee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bdc:	f383 8811 	msr	BASEPRI, r3
 8008be0:	f3bf 8f6f 	isb	sy
 8008be4:	f3bf 8f4f 	dsb	sy
 8008be8:	61bb      	str	r3, [r7, #24]
}
 8008bea:	bf00      	nop
 8008bec:	e7fe      	b.n	8008bec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008bee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00d      	beq.n	8008c16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	68b9      	ldr	r1, [r7, #8]
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f000 f83f 	bl	8008c94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3730      	adds	r7, #48	; 0x30
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b08a      	sub	sp, #40	; 0x28
 8008c24:	af02      	add	r7, sp, #8
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10a      	bne.n	8008c4a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	613b      	str	r3, [r7, #16]
}
 8008c46:	bf00      	nop
 8008c48:	e7fe      	b.n	8008c48 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	68ba      	ldr	r2, [r7, #8]
 8008c4e:	fb02 f303 	mul.w	r3, r2, r3
 8008c52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	3350      	adds	r3, #80	; 0x50
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f002 fee5 	bl	800ba28 <pvPortMalloc>
 8008c5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d011      	beq.n	8008c8a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	3350      	adds	r3, #80	; 0x50
 8008c6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c78:	79fa      	ldrb	r2, [r7, #7]
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	68b9      	ldr	r1, [r7, #8]
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f000 f805 	bl	8008c94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c8a:	69bb      	ldr	r3, [r7, #24]
	}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3720      	adds	r7, #32
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
 8008ca0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d103      	bne.n	8008cb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	69ba      	ldr	r2, [r7, #24]
 8008cac:	601a      	str	r2, [r3, #0]
 8008cae:	e002      	b.n	8008cb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	69b8      	ldr	r0, [r7, #24]
 8008cc6:	f7ff fecb 	bl	8008a60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	78fa      	ldrb	r2, [r7, #3]
 8008cce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008cd2:	bf00      	nop
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b08a      	sub	sp, #40	; 0x28
 8008cde:	af02      	add	r7, sp, #8
 8008ce0:	60f8      	str	r0, [r7, #12]
 8008ce2:	60b9      	str	r1, [r7, #8]
 8008ce4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d10a      	bne.n	8008d02 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf0:	f383 8811 	msr	BASEPRI, r3
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	61bb      	str	r3, [r7, #24]
}
 8008cfe:	bf00      	nop
 8008d00:	e7fe      	b.n	8008d00 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d90a      	bls.n	8008d20 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0e:	f383 8811 	msr	BASEPRI, r3
 8008d12:	f3bf 8f6f 	isb	sy
 8008d16:	f3bf 8f4f 	dsb	sy
 8008d1a:	617b      	str	r3, [r7, #20]
}
 8008d1c:	bf00      	nop
 8008d1e:	e7fe      	b.n	8008d1e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008d20:	2302      	movs	r3, #2
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	2100      	movs	r1, #0
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f7ff ff00 	bl	8008b30 <xQueueGenericCreateStatic>
 8008d30:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d002      	beq.n	8008d3e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008d3e:	69fb      	ldr	r3, [r7, #28]
	}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3720      	adds	r7, #32
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b086      	sub	sp, #24
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10a      	bne.n	8008d6e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5c:	f383 8811 	msr	BASEPRI, r3
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	613b      	str	r3, [r7, #16]
}
 8008d6a:	bf00      	nop
 8008d6c:	e7fe      	b.n	8008d6c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d90a      	bls.n	8008d8c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7a:	f383 8811 	msr	BASEPRI, r3
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	60fb      	str	r3, [r7, #12]
}
 8008d88:	bf00      	nop
 8008d8a:	e7fe      	b.n	8008d8a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008d8c:	2202      	movs	r2, #2
 8008d8e:	2100      	movs	r1, #0
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f7ff ff45 	bl	8008c20 <xQueueGenericCreate>
 8008d96:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d002      	beq.n	8008da4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	683a      	ldr	r2, [r7, #0]
 8008da2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008da4:	697b      	ldr	r3, [r7, #20]
	}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3718      	adds	r7, #24
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
	...

08008db0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b08e      	sub	sp, #56	; 0x38
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
 8008dbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10a      	bne.n	8008de2 <xQueueGenericSend+0x32>
	__asm volatile
 8008dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008dde:	bf00      	nop
 8008de0:	e7fe      	b.n	8008de0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d103      	bne.n	8008df0 <xQueueGenericSend+0x40>
 8008de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d101      	bne.n	8008df4 <xQueueGenericSend+0x44>
 8008df0:	2301      	movs	r3, #1
 8008df2:	e000      	b.n	8008df6 <xQueueGenericSend+0x46>
 8008df4:	2300      	movs	r3, #0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10a      	bne.n	8008e10 <xQueueGenericSend+0x60>
	__asm volatile
 8008dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e0c:	bf00      	nop
 8008e0e:	e7fe      	b.n	8008e0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d103      	bne.n	8008e1e <xQueueGenericSend+0x6e>
 8008e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d101      	bne.n	8008e22 <xQueueGenericSend+0x72>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e000      	b.n	8008e24 <xQueueGenericSend+0x74>
 8008e22:	2300      	movs	r3, #0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10a      	bne.n	8008e3e <xQueueGenericSend+0x8e>
	__asm volatile
 8008e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2c:	f383 8811 	msr	BASEPRI, r3
 8008e30:	f3bf 8f6f 	isb	sy
 8008e34:	f3bf 8f4f 	dsb	sy
 8008e38:	623b      	str	r3, [r7, #32]
}
 8008e3a:	bf00      	nop
 8008e3c:	e7fe      	b.n	8008e3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e3e:	f001 fc77 	bl	800a730 <xTaskGetSchedulerState>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d102      	bne.n	8008e4e <xQueueGenericSend+0x9e>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <xQueueGenericSend+0xa2>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e000      	b.n	8008e54 <xQueueGenericSend+0xa4>
 8008e52:	2300      	movs	r3, #0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10a      	bne.n	8008e6e <xQueueGenericSend+0xbe>
	__asm volatile
 8008e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5c:	f383 8811 	msr	BASEPRI, r3
 8008e60:	f3bf 8f6f 	isb	sy
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	61fb      	str	r3, [r7, #28]
}
 8008e6a:	bf00      	nop
 8008e6c:	e7fe      	b.n	8008e6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e6e:	f002 fcb9 	bl	800b7e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d302      	bcc.n	8008e84 <xQueueGenericSend+0xd4>
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	d129      	bne.n	8008ed8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e84:	683a      	ldr	r2, [r7, #0]
 8008e86:	68b9      	ldr	r1, [r7, #8]
 8008e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e8a:	f000 fc5e 	bl	800974a <prvCopyDataToQueue>
 8008e8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d010      	beq.n	8008eba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9a:	3324      	adds	r3, #36	; 0x24
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f001 fa85 	bl	800a3ac <xTaskRemoveFromEventList>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d013      	beq.n	8008ed0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ea8:	4b3f      	ldr	r3, [pc, #252]	; (8008fa8 <xQueueGenericSend+0x1f8>)
 8008eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eae:	601a      	str	r2, [r3, #0]
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	e00a      	b.n	8008ed0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d007      	beq.n	8008ed0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ec0:	4b39      	ldr	r3, [pc, #228]	; (8008fa8 <xQueueGenericSend+0x1f8>)
 8008ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ec6:	601a      	str	r2, [r3, #0]
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ed0:	f002 fcb8 	bl	800b844 <vPortExitCritical>
				return pdPASS;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e063      	b.n	8008fa0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d103      	bne.n	8008ee6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ede:	f002 fcb1 	bl	800b844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	e05c      	b.n	8008fa0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d106      	bne.n	8008efa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008eec:	f107 0314 	add.w	r3, r7, #20
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f001 fabf 	bl	800a474 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008efa:	f002 fca3 	bl	800b844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008efe:	f001 f819 	bl	8009f34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f02:	f002 fc6f 	bl	800b7e4 <vPortEnterCritical>
 8008f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f0c:	b25b      	sxtb	r3, r3
 8008f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f12:	d103      	bne.n	8008f1c <xQueueGenericSend+0x16c>
 8008f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f22:	b25b      	sxtb	r3, r3
 8008f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f28:	d103      	bne.n	8008f32 <xQueueGenericSend+0x182>
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f32:	f002 fc87 	bl	800b844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f36:	1d3a      	adds	r2, r7, #4
 8008f38:	f107 0314 	add.w	r3, r7, #20
 8008f3c:	4611      	mov	r1, r2
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f001 faae 	bl	800a4a0 <xTaskCheckForTimeOut>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d124      	bne.n	8008f94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f4c:	f000 fcf5 	bl	800993a <prvIsQueueFull>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d018      	beq.n	8008f88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f58:	3310      	adds	r3, #16
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	4611      	mov	r1, r2
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f001 f9d4 	bl	800a30c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f66:	f000 fc80 	bl	800986a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f6a:	f000 fff1 	bl	8009f50 <xTaskResumeAll>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f47f af7c 	bne.w	8008e6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008f76:	4b0c      	ldr	r3, [pc, #48]	; (8008fa8 <xQueueGenericSend+0x1f8>)
 8008f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f7c:	601a      	str	r2, [r3, #0]
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	e772      	b.n	8008e6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008f88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f8a:	f000 fc6e 	bl	800986a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f8e:	f000 ffdf 	bl	8009f50 <xTaskResumeAll>
 8008f92:	e76c      	b.n	8008e6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f96:	f000 fc68 	bl	800986a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f9a:	f000 ffd9 	bl	8009f50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008f9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3738      	adds	r7, #56	; 0x38
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	e000ed04 	.word	0xe000ed04

08008fac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b090      	sub	sp, #64	; 0x40
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	607a      	str	r2, [r7, #4]
 8008fb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10a      	bne.n	8008fda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc8:	f383 8811 	msr	BASEPRI, r3
 8008fcc:	f3bf 8f6f 	isb	sy
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008fd6:	bf00      	nop
 8008fd8:	e7fe      	b.n	8008fd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d103      	bne.n	8008fe8 <xQueueGenericSendFromISR+0x3c>
 8008fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d101      	bne.n	8008fec <xQueueGenericSendFromISR+0x40>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e000      	b.n	8008fee <xQueueGenericSendFromISR+0x42>
 8008fec:	2300      	movs	r3, #0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d10a      	bne.n	8009008 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff6:	f383 8811 	msr	BASEPRI, r3
 8008ffa:	f3bf 8f6f 	isb	sy
 8008ffe:	f3bf 8f4f 	dsb	sy
 8009002:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009004:	bf00      	nop
 8009006:	e7fe      	b.n	8009006 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	2b02      	cmp	r3, #2
 800900c:	d103      	bne.n	8009016 <xQueueGenericSendFromISR+0x6a>
 800900e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009012:	2b01      	cmp	r3, #1
 8009014:	d101      	bne.n	800901a <xQueueGenericSendFromISR+0x6e>
 8009016:	2301      	movs	r3, #1
 8009018:	e000      	b.n	800901c <xQueueGenericSendFromISR+0x70>
 800901a:	2300      	movs	r3, #0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10a      	bne.n	8009036 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	623b      	str	r3, [r7, #32]
}
 8009032:	bf00      	nop
 8009034:	e7fe      	b.n	8009034 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009036:	f002 fcb7 	bl	800b9a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800903a:	f3ef 8211 	mrs	r2, BASEPRI
 800903e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009042:	f383 8811 	msr	BASEPRI, r3
 8009046:	f3bf 8f6f 	isb	sy
 800904a:	f3bf 8f4f 	dsb	sy
 800904e:	61fa      	str	r2, [r7, #28]
 8009050:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009052:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009054:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800905a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800905e:	429a      	cmp	r2, r3
 8009060:	d302      	bcc.n	8009068 <xQueueGenericSendFromISR+0xbc>
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	2b02      	cmp	r3, #2
 8009066:	d12f      	bne.n	80090c8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800906e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009076:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009078:	683a      	ldr	r2, [r7, #0]
 800907a:	68b9      	ldr	r1, [r7, #8]
 800907c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800907e:	f000 fb64 	bl	800974a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009082:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800908a:	d112      	bne.n	80090b2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800908c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009090:	2b00      	cmp	r3, #0
 8009092:	d016      	beq.n	80090c2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009096:	3324      	adds	r3, #36	; 0x24
 8009098:	4618      	mov	r0, r3
 800909a:	f001 f987 	bl	800a3ac <xTaskRemoveFromEventList>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00e      	beq.n	80090c2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00b      	beq.n	80090c2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2201      	movs	r2, #1
 80090ae:	601a      	str	r2, [r3, #0]
 80090b0:	e007      	b.n	80090c2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80090b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80090b6:	3301      	adds	r3, #1
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	b25a      	sxtb	r2, r3
 80090bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80090c2:	2301      	movs	r3, #1
 80090c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80090c6:	e001      	b.n	80090cc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80090c8:	2300      	movs	r3, #0
 80090ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80090d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80090d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3740      	adds	r7, #64	; 0x40
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b08e      	sub	sp, #56	; 0x38
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80090f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d10a      	bne.n	800910c <xQueueGiveFromISR+0x2a>
	__asm volatile
 80090f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fa:	f383 8811 	msr	BASEPRI, r3
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	623b      	str	r3, [r7, #32]
}
 8009108:	bf00      	nop
 800910a:	e7fe      	b.n	800910a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800910c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00a      	beq.n	800912a <xQueueGiveFromISR+0x48>
	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	61fb      	str	r3, [r7, #28]
}
 8009126:	bf00      	nop
 8009128:	e7fe      	b.n	8009128 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d103      	bne.n	800913a <xQueueGiveFromISR+0x58>
 8009132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d101      	bne.n	800913e <xQueueGiveFromISR+0x5c>
 800913a:	2301      	movs	r3, #1
 800913c:	e000      	b.n	8009140 <xQueueGiveFromISR+0x5e>
 800913e:	2300      	movs	r3, #0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d10a      	bne.n	800915a <xQueueGiveFromISR+0x78>
	__asm volatile
 8009144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009148:	f383 8811 	msr	BASEPRI, r3
 800914c:	f3bf 8f6f 	isb	sy
 8009150:	f3bf 8f4f 	dsb	sy
 8009154:	61bb      	str	r3, [r7, #24]
}
 8009156:	bf00      	nop
 8009158:	e7fe      	b.n	8009158 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800915a:	f002 fc25 	bl	800b9a8 <vPortValidateInterruptPriority>
	__asm volatile
 800915e:	f3ef 8211 	mrs	r2, BASEPRI
 8009162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009166:	f383 8811 	msr	BASEPRI, r3
 800916a:	f3bf 8f6f 	isb	sy
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	617a      	str	r2, [r7, #20]
 8009174:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009176:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009178:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800917a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009186:	429a      	cmp	r2, r3
 8009188:	d22b      	bcs.n	80091e2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800918a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009196:	1c5a      	adds	r2, r3, #1
 8009198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800919c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80091a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a4:	d112      	bne.n	80091cc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d016      	beq.n	80091dc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b0:	3324      	adds	r3, #36	; 0x24
 80091b2:	4618      	mov	r0, r3
 80091b4:	f001 f8fa 	bl	800a3ac <xTaskRemoveFromEventList>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00e      	beq.n	80091dc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00b      	beq.n	80091dc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	2201      	movs	r2, #1
 80091c8:	601a      	str	r2, [r3, #0]
 80091ca:	e007      	b.n	80091dc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80091cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091d0:	3301      	adds	r3, #1
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	b25a      	sxtb	r2, r3
 80091d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80091dc:	2301      	movs	r3, #1
 80091de:	637b      	str	r3, [r7, #52]	; 0x34
 80091e0:	e001      	b.n	80091e6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80091e2:	2300      	movs	r3, #0
 80091e4:	637b      	str	r3, [r7, #52]	; 0x34
 80091e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f383 8811 	msr	BASEPRI, r3
}
 80091f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3738      	adds	r7, #56	; 0x38
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b08c      	sub	sp, #48	; 0x30
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009208:	2300      	movs	r3, #0
 800920a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009212:	2b00      	cmp	r3, #0
 8009214:	d10a      	bne.n	800922c <xQueueReceive+0x30>
	__asm volatile
 8009216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921a:	f383 8811 	msr	BASEPRI, r3
 800921e:	f3bf 8f6f 	isb	sy
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	623b      	str	r3, [r7, #32]
}
 8009228:	bf00      	nop
 800922a:	e7fe      	b.n	800922a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d103      	bne.n	800923a <xQueueReceive+0x3e>
 8009232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009236:	2b00      	cmp	r3, #0
 8009238:	d101      	bne.n	800923e <xQueueReceive+0x42>
 800923a:	2301      	movs	r3, #1
 800923c:	e000      	b.n	8009240 <xQueueReceive+0x44>
 800923e:	2300      	movs	r3, #0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d10a      	bne.n	800925a <xQueueReceive+0x5e>
	__asm volatile
 8009244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009248:	f383 8811 	msr	BASEPRI, r3
 800924c:	f3bf 8f6f 	isb	sy
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	61fb      	str	r3, [r7, #28]
}
 8009256:	bf00      	nop
 8009258:	e7fe      	b.n	8009258 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800925a:	f001 fa69 	bl	800a730 <xTaskGetSchedulerState>
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d102      	bne.n	800926a <xQueueReceive+0x6e>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d101      	bne.n	800926e <xQueueReceive+0x72>
 800926a:	2301      	movs	r3, #1
 800926c:	e000      	b.n	8009270 <xQueueReceive+0x74>
 800926e:	2300      	movs	r3, #0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10a      	bne.n	800928a <xQueueReceive+0x8e>
	__asm volatile
 8009274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009278:	f383 8811 	msr	BASEPRI, r3
 800927c:	f3bf 8f6f 	isb	sy
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	61bb      	str	r3, [r7, #24]
}
 8009286:	bf00      	nop
 8009288:	e7fe      	b.n	8009288 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800928a:	f002 faab 	bl	800b7e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800928e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009292:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009296:	2b00      	cmp	r3, #0
 8009298:	d01f      	beq.n	80092da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800929a:	68b9      	ldr	r1, [r7, #8]
 800929c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800929e:	f000 fabe 	bl	800981e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80092a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a4:	1e5a      	subs	r2, r3, #1
 80092a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00f      	beq.n	80092d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b4:	3310      	adds	r3, #16
 80092b6:	4618      	mov	r0, r3
 80092b8:	f001 f878 	bl	800a3ac <xTaskRemoveFromEventList>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d007      	beq.n	80092d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80092c2:	4b3d      	ldr	r3, [pc, #244]	; (80093b8 <xQueueReceive+0x1bc>)
 80092c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092c8:	601a      	str	r2, [r3, #0]
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80092d2:	f002 fab7 	bl	800b844 <vPortExitCritical>
				return pdPASS;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e069      	b.n	80093ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d103      	bne.n	80092e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80092e0:	f002 fab0 	bl	800b844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80092e4:	2300      	movs	r3, #0
 80092e6:	e062      	b.n	80093ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80092e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d106      	bne.n	80092fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092ee:	f107 0310 	add.w	r3, r7, #16
 80092f2:	4618      	mov	r0, r3
 80092f4:	f001 f8be 	bl	800a474 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092f8:	2301      	movs	r3, #1
 80092fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092fc:	f002 faa2 	bl	800b844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009300:	f000 fe18 	bl	8009f34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009304:	f002 fa6e 	bl	800b7e4 <vPortEnterCritical>
 8009308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800930e:	b25b      	sxtb	r3, r3
 8009310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009314:	d103      	bne.n	800931e <xQueueReceive+0x122>
 8009316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009318:	2200      	movs	r2, #0
 800931a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800931e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009324:	b25b      	sxtb	r3, r3
 8009326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800932a:	d103      	bne.n	8009334 <xQueueReceive+0x138>
 800932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932e:	2200      	movs	r2, #0
 8009330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009334:	f002 fa86 	bl	800b844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009338:	1d3a      	adds	r2, r7, #4
 800933a:	f107 0310 	add.w	r3, r7, #16
 800933e:	4611      	mov	r1, r2
 8009340:	4618      	mov	r0, r3
 8009342:	f001 f8ad 	bl	800a4a0 <xTaskCheckForTimeOut>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d123      	bne.n	8009394 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800934c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800934e:	f000 fade 	bl	800990e <prvIsQueueEmpty>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d017      	beq.n	8009388 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935a:	3324      	adds	r3, #36	; 0x24
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	4611      	mov	r1, r2
 8009360:	4618      	mov	r0, r3
 8009362:	f000 ffd3 	bl	800a30c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009368:	f000 fa7f 	bl	800986a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800936c:	f000 fdf0 	bl	8009f50 <xTaskResumeAll>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d189      	bne.n	800928a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009376:	4b10      	ldr	r3, [pc, #64]	; (80093b8 <xQueueReceive+0x1bc>)
 8009378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800937c:	601a      	str	r2, [r3, #0]
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	f3bf 8f6f 	isb	sy
 8009386:	e780      	b.n	800928a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800938a:	f000 fa6e 	bl	800986a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800938e:	f000 fddf 	bl	8009f50 <xTaskResumeAll>
 8009392:	e77a      	b.n	800928a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009396:	f000 fa68 	bl	800986a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800939a:	f000 fdd9 	bl	8009f50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800939e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093a0:	f000 fab5 	bl	800990e <prvIsQueueEmpty>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f43f af6f 	beq.w	800928a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80093ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3730      	adds	r7, #48	; 0x30
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	e000ed04 	.word	0xe000ed04

080093bc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b08e      	sub	sp, #56	; 0x38
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80093c6:	2300      	movs	r3, #0
 80093c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80093ce:	2300      	movs	r3, #0
 80093d0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80093d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10a      	bne.n	80093ee <xQueueSemaphoreTake+0x32>
	__asm volatile
 80093d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093dc:	f383 8811 	msr	BASEPRI, r3
 80093e0:	f3bf 8f6f 	isb	sy
 80093e4:	f3bf 8f4f 	dsb	sy
 80093e8:	623b      	str	r3, [r7, #32]
}
 80093ea:	bf00      	nop
 80093ec:	e7fe      	b.n	80093ec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80093ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00a      	beq.n	800940c <xQueueSemaphoreTake+0x50>
	__asm volatile
 80093f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fa:	f383 8811 	msr	BASEPRI, r3
 80093fe:	f3bf 8f6f 	isb	sy
 8009402:	f3bf 8f4f 	dsb	sy
 8009406:	61fb      	str	r3, [r7, #28]
}
 8009408:	bf00      	nop
 800940a:	e7fe      	b.n	800940a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800940c:	f001 f990 	bl	800a730 <xTaskGetSchedulerState>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d102      	bne.n	800941c <xQueueSemaphoreTake+0x60>
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d101      	bne.n	8009420 <xQueueSemaphoreTake+0x64>
 800941c:	2301      	movs	r3, #1
 800941e:	e000      	b.n	8009422 <xQueueSemaphoreTake+0x66>
 8009420:	2300      	movs	r3, #0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10a      	bne.n	800943c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	61bb      	str	r3, [r7, #24]
}
 8009438:	bf00      	nop
 800943a:	e7fe      	b.n	800943a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800943c:	f002 f9d2 	bl	800b7e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009444:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009448:	2b00      	cmp	r3, #0
 800944a:	d024      	beq.n	8009496 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800944c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944e:	1e5a      	subs	r2, r3, #1
 8009450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009452:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d104      	bne.n	8009466 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800945c:	f001 fade 	bl	800aa1c <pvTaskIncrementMutexHeldCount>
 8009460:	4602      	mov	r2, r0
 8009462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009464:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00f      	beq.n	800948e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800946e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009470:	3310      	adds	r3, #16
 8009472:	4618      	mov	r0, r3
 8009474:	f000 ff9a 	bl	800a3ac <xTaskRemoveFromEventList>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d007      	beq.n	800948e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800947e:	4b54      	ldr	r3, [pc, #336]	; (80095d0 <xQueueSemaphoreTake+0x214>)
 8009480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009484:	601a      	str	r2, [r3, #0]
 8009486:	f3bf 8f4f 	dsb	sy
 800948a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800948e:	f002 f9d9 	bl	800b844 <vPortExitCritical>
				return pdPASS;
 8009492:	2301      	movs	r3, #1
 8009494:	e097      	b.n	80095c6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d111      	bne.n	80094c0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800949c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00a      	beq.n	80094b8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80094a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a6:	f383 8811 	msr	BASEPRI, r3
 80094aa:	f3bf 8f6f 	isb	sy
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	617b      	str	r3, [r7, #20]
}
 80094b4:	bf00      	nop
 80094b6:	e7fe      	b.n	80094b6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80094b8:	f002 f9c4 	bl	800b844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80094bc:	2300      	movs	r3, #0
 80094be:	e082      	b.n	80095c6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80094c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d106      	bne.n	80094d4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094c6:	f107 030c 	add.w	r3, r7, #12
 80094ca:	4618      	mov	r0, r3
 80094cc:	f000 ffd2 	bl	800a474 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094d0:	2301      	movs	r3, #1
 80094d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094d4:	f002 f9b6 	bl	800b844 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094d8:	f000 fd2c 	bl	8009f34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094dc:	f002 f982 	bl	800b7e4 <vPortEnterCritical>
 80094e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094e6:	b25b      	sxtb	r3, r3
 80094e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ec:	d103      	bne.n	80094f6 <xQueueSemaphoreTake+0x13a>
 80094ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094fc:	b25b      	sxtb	r3, r3
 80094fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009502:	d103      	bne.n	800950c <xQueueSemaphoreTake+0x150>
 8009504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009506:	2200      	movs	r2, #0
 8009508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800950c:	f002 f99a 	bl	800b844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009510:	463a      	mov	r2, r7
 8009512:	f107 030c 	add.w	r3, r7, #12
 8009516:	4611      	mov	r1, r2
 8009518:	4618      	mov	r0, r3
 800951a:	f000 ffc1 	bl	800a4a0 <xTaskCheckForTimeOut>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d132      	bne.n	800958a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009526:	f000 f9f2 	bl	800990e <prvIsQueueEmpty>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d026      	beq.n	800957e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d109      	bne.n	800954c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009538:	f002 f954 	bl	800b7e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800953c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	4618      	mov	r0, r3
 8009542:	f001 f913 	bl	800a76c <xTaskPriorityInherit>
 8009546:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009548:	f002 f97c 	bl	800b844 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800954c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954e:	3324      	adds	r3, #36	; 0x24
 8009550:	683a      	ldr	r2, [r7, #0]
 8009552:	4611      	mov	r1, r2
 8009554:	4618      	mov	r0, r3
 8009556:	f000 fed9 	bl	800a30c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800955a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800955c:	f000 f985 	bl	800986a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009560:	f000 fcf6 	bl	8009f50 <xTaskResumeAll>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	f47f af68 	bne.w	800943c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800956c:	4b18      	ldr	r3, [pc, #96]	; (80095d0 <xQueueSemaphoreTake+0x214>)
 800956e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009572:	601a      	str	r2, [r3, #0]
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	f3bf 8f6f 	isb	sy
 800957c:	e75e      	b.n	800943c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800957e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009580:	f000 f973 	bl	800986a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009584:	f000 fce4 	bl	8009f50 <xTaskResumeAll>
 8009588:	e758      	b.n	800943c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800958a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800958c:	f000 f96d 	bl	800986a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009590:	f000 fcde 	bl	8009f50 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009594:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009596:	f000 f9ba 	bl	800990e <prvIsQueueEmpty>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	f43f af4d 	beq.w	800943c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80095a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00d      	beq.n	80095c4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80095a8:	f002 f91c 	bl	800b7e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80095ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095ae:	f000 f8b4 	bl	800971a <prvGetDisinheritPriorityAfterTimeout>
 80095b2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80095b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80095ba:	4618      	mov	r0, r3
 80095bc:	f001 f9ac 	bl	800a918 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80095c0:	f002 f940 	bl	800b844 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80095c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3738      	adds	r7, #56	; 0x38
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	e000ed04 	.word	0xe000ed04

080095d4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b08e      	sub	sp, #56	; 0x38
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80095e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d10a      	bne.n	8009600 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80095ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ee:	f383 8811 	msr	BASEPRI, r3
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	623b      	str	r3, [r7, #32]
}
 80095fc:	bf00      	nop
 80095fe:	e7fe      	b.n	80095fe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d103      	bne.n	800960e <xQueueReceiveFromISR+0x3a>
 8009606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960a:	2b00      	cmp	r3, #0
 800960c:	d101      	bne.n	8009612 <xQueueReceiveFromISR+0x3e>
 800960e:	2301      	movs	r3, #1
 8009610:	e000      	b.n	8009614 <xQueueReceiveFromISR+0x40>
 8009612:	2300      	movs	r3, #0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10a      	bne.n	800962e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961c:	f383 8811 	msr	BASEPRI, r3
 8009620:	f3bf 8f6f 	isb	sy
 8009624:	f3bf 8f4f 	dsb	sy
 8009628:	61fb      	str	r3, [r7, #28]
}
 800962a:	bf00      	nop
 800962c:	e7fe      	b.n	800962c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800962e:	f002 f9bb 	bl	800b9a8 <vPortValidateInterruptPriority>
	__asm volatile
 8009632:	f3ef 8211 	mrs	r2, BASEPRI
 8009636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	61ba      	str	r2, [r7, #24]
 8009648:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800964a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800964c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800964e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009652:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009656:	2b00      	cmp	r3, #0
 8009658:	d02f      	beq.n	80096ba <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800965a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009664:	68b9      	ldr	r1, [r7, #8]
 8009666:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009668:	f000 f8d9 	bl	800981e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800966c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966e:	1e5a      	subs	r2, r3, #1
 8009670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009672:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009674:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800967c:	d112      	bne.n	80096a4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800967e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d016      	beq.n	80096b4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009688:	3310      	adds	r3, #16
 800968a:	4618      	mov	r0, r3
 800968c:	f000 fe8e 	bl	800a3ac <xTaskRemoveFromEventList>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00e      	beq.n	80096b4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00b      	beq.n	80096b4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	601a      	str	r2, [r3, #0]
 80096a2:	e007      	b.n	80096b4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80096a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096a8:	3301      	adds	r3, #1
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	b25a      	sxtb	r2, r3
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80096b4:	2301      	movs	r3, #1
 80096b6:	637b      	str	r3, [r7, #52]	; 0x34
 80096b8:	e001      	b.n	80096be <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80096ba:	2300      	movs	r3, #0
 80096bc:	637b      	str	r3, [r7, #52]	; 0x34
 80096be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	f383 8811 	msr	BASEPRI, r3
}
 80096c8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80096ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3738      	adds	r7, #56	; 0x38
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d10a      	bne.n	80096fc <vQueueDelete+0x28>
	__asm volatile
 80096e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	60bb      	str	r3, [r7, #8]
}
 80096f8:	bf00      	nop
 80096fa:	e7fe      	b.n	80096fa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f000 f95f 	bl	80099c0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009708:	2b00      	cmp	r3, #0
 800970a:	d102      	bne.n	8009712 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f002 fa57 	bl	800bbc0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009712:	bf00      	nop
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800971a:	b480      	push	{r7}
 800971c:	b085      	sub	sp, #20
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009726:	2b00      	cmp	r3, #0
 8009728:	d006      	beq.n	8009738 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009734:	60fb      	str	r3, [r7, #12]
 8009736:	e001      	b.n	800973c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009738:	2300      	movs	r3, #0
 800973a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800973c:	68fb      	ldr	r3, [r7, #12]
	}
 800973e:	4618      	mov	r0, r3
 8009740:	3714      	adds	r7, #20
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr

0800974a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b086      	sub	sp, #24
 800974e:	af00      	add	r7, sp, #0
 8009750:	60f8      	str	r0, [r7, #12]
 8009752:	60b9      	str	r1, [r7, #8]
 8009754:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009756:	2300      	movs	r3, #0
 8009758:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009764:	2b00      	cmp	r3, #0
 8009766:	d10d      	bne.n	8009784 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d14d      	bne.n	800980c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	4618      	mov	r0, r3
 8009776:	f001 f861 	bl	800a83c <xTaskPriorityDisinherit>
 800977a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2200      	movs	r2, #0
 8009780:	609a      	str	r2, [r3, #8]
 8009782:	e043      	b.n	800980c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d119      	bne.n	80097be <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6858      	ldr	r0, [r3, #4]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009792:	461a      	mov	r2, r3
 8009794:	68b9      	ldr	r1, [r7, #8]
 8009796:	f01e faa7 	bl	8027ce8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	685a      	ldr	r2, [r3, #4]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a2:	441a      	add	r2, r3
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	685a      	ldr	r2, [r3, #4]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d32b      	bcc.n	800980c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	605a      	str	r2, [r3, #4]
 80097bc:	e026      	b.n	800980c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	68d8      	ldr	r0, [r3, #12]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c6:	461a      	mov	r2, r3
 80097c8:	68b9      	ldr	r1, [r7, #8]
 80097ca:	f01e fa8d 	bl	8027ce8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	68da      	ldr	r2, [r3, #12]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d6:	425b      	negs	r3, r3
 80097d8:	441a      	add	r2, r3
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	68da      	ldr	r2, [r3, #12]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d207      	bcs.n	80097fa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	689a      	ldr	r2, [r3, #8]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f2:	425b      	negs	r3, r3
 80097f4:	441a      	add	r2, r3
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	d105      	bne.n	800980c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d002      	beq.n	800980c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	3b01      	subs	r3, #1
 800980a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	1c5a      	adds	r2, r3, #1
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009814:	697b      	ldr	r3, [r7, #20]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3718      	adds	r7, #24
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b082      	sub	sp, #8
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800982c:	2b00      	cmp	r3, #0
 800982e:	d018      	beq.n	8009862 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	68da      	ldr	r2, [r3, #12]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009838:	441a      	add	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	68da      	ldr	r2, [r3, #12]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	429a      	cmp	r2, r3
 8009848:	d303      	bcc.n	8009852 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	68d9      	ldr	r1, [r3, #12]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800985a:	461a      	mov	r2, r3
 800985c:	6838      	ldr	r0, [r7, #0]
 800985e:	f01e fa43 	bl	8027ce8 <memcpy>
	}
}
 8009862:	bf00      	nop
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b084      	sub	sp, #16
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009872:	f001 ffb7 	bl	800b7e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800987c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800987e:	e011      	b.n	80098a4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009884:	2b00      	cmp	r3, #0
 8009886:	d012      	beq.n	80098ae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	3324      	adds	r3, #36	; 0x24
 800988c:	4618      	mov	r0, r3
 800988e:	f000 fd8d 	bl	800a3ac <xTaskRemoveFromEventList>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d001      	beq.n	800989c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009898:	f000 fe64 	bl	800a564 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800989c:	7bfb      	ldrb	r3, [r7, #15]
 800989e:	3b01      	subs	r3, #1
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80098a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	dce9      	bgt.n	8009880 <prvUnlockQueue+0x16>
 80098ac:	e000      	b.n	80098b0 <prvUnlockQueue+0x46>
					break;
 80098ae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	22ff      	movs	r2, #255	; 0xff
 80098b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80098b8:	f001 ffc4 	bl	800b844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80098bc:	f001 ff92 	bl	800b7e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098c6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098c8:	e011      	b.n	80098ee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	691b      	ldr	r3, [r3, #16]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d012      	beq.n	80098f8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	3310      	adds	r3, #16
 80098d6:	4618      	mov	r0, r3
 80098d8:	f000 fd68 	bl	800a3ac <xTaskRemoveFromEventList>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d001      	beq.n	80098e6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80098e2:	f000 fe3f 	bl	800a564 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80098e6:	7bbb      	ldrb	r3, [r7, #14]
 80098e8:	3b01      	subs	r3, #1
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	dce9      	bgt.n	80098ca <prvUnlockQueue+0x60>
 80098f6:	e000      	b.n	80098fa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80098f8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	22ff      	movs	r2, #255	; 0xff
 80098fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009902:	f001 ff9f 	bl	800b844 <vPortExitCritical>
}
 8009906:	bf00      	nop
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b084      	sub	sp, #16
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009916:	f001 ff65 	bl	800b7e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991e:	2b00      	cmp	r3, #0
 8009920:	d102      	bne.n	8009928 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009922:	2301      	movs	r3, #1
 8009924:	60fb      	str	r3, [r7, #12]
 8009926:	e001      	b.n	800992c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009928:	2300      	movs	r3, #0
 800992a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800992c:	f001 ff8a 	bl	800b844 <vPortExitCritical>

	return xReturn;
 8009930:	68fb      	ldr	r3, [r7, #12]
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b084      	sub	sp, #16
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009942:	f001 ff4f 	bl	800b7e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800994e:	429a      	cmp	r2, r3
 8009950:	d102      	bne.n	8009958 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009952:	2301      	movs	r3, #1
 8009954:	60fb      	str	r3, [r7, #12]
 8009956:	e001      	b.n	800995c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009958:	2300      	movs	r3, #0
 800995a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800995c:	f001 ff72 	bl	800b844 <vPortExitCritical>

	return xReturn;
 8009960:	68fb      	ldr	r3, [r7, #12]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
	...

0800996c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009976:	2300      	movs	r3, #0
 8009978:	60fb      	str	r3, [r7, #12]
 800997a:	e014      	b.n	80099a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800997c:	4a0f      	ldr	r2, [pc, #60]	; (80099bc <vQueueAddToRegistry+0x50>)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d10b      	bne.n	80099a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009988:	490c      	ldr	r1, [pc, #48]	; (80099bc <vQueueAddToRegistry+0x50>)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009992:	4a0a      	ldr	r2, [pc, #40]	; (80099bc <vQueueAddToRegistry+0x50>)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	00db      	lsls	r3, r3, #3
 8009998:	4413      	add	r3, r2
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800999e:	e006      	b.n	80099ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	3301      	adds	r3, #1
 80099a4:	60fb      	str	r3, [r7, #12]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2b07      	cmp	r3, #7
 80099aa:	d9e7      	bls.n	800997c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80099ac:	bf00      	nop
 80099ae:	bf00      	nop
 80099b0:	3714      	adds	r7, #20
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr
 80099ba:	bf00      	nop
 80099bc:	20000dd4 	.word	0x20000dd4

080099c0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80099c0:	b480      	push	{r7}
 80099c2:	b085      	sub	sp, #20
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099c8:	2300      	movs	r3, #0
 80099ca:	60fb      	str	r3, [r7, #12]
 80099cc:	e016      	b.n	80099fc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80099ce:	4a10      	ldr	r2, [pc, #64]	; (8009a10 <vQueueUnregisterQueue+0x50>)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	00db      	lsls	r3, r3, #3
 80099d4:	4413      	add	r3, r2
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d10b      	bne.n	80099f6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80099de:	4a0c      	ldr	r2, [pc, #48]	; (8009a10 <vQueueUnregisterQueue+0x50>)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2100      	movs	r1, #0
 80099e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80099e8:	4a09      	ldr	r2, [pc, #36]	; (8009a10 <vQueueUnregisterQueue+0x50>)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	00db      	lsls	r3, r3, #3
 80099ee:	4413      	add	r3, r2
 80099f0:	2200      	movs	r2, #0
 80099f2:	605a      	str	r2, [r3, #4]
				break;
 80099f4:	e006      	b.n	8009a04 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	3301      	adds	r3, #1
 80099fa:	60fb      	str	r3, [r7, #12]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2b07      	cmp	r3, #7
 8009a00:	d9e5      	bls.n	80099ce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009a02:	bf00      	nop
 8009a04:	bf00      	nop
 8009a06:	3714      	adds	r7, #20
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr
 8009a10:	20000dd4 	.word	0x20000dd4

08009a14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b086      	sub	sp, #24
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009a24:	f001 fede 	bl	800b7e4 <vPortEnterCritical>
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a2e:	b25b      	sxtb	r3, r3
 8009a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a34:	d103      	bne.n	8009a3e <vQueueWaitForMessageRestricted+0x2a>
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a44:	b25b      	sxtb	r3, r3
 8009a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a4a:	d103      	bne.n	8009a54 <vQueueWaitForMessageRestricted+0x40>
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a54:	f001 fef6 	bl	800b844 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d106      	bne.n	8009a6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	3324      	adds	r3, #36	; 0x24
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	68b9      	ldr	r1, [r7, #8]
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f000 fc73 	bl	800a354 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009a6e:	6978      	ldr	r0, [r7, #20]
 8009a70:	f7ff fefb 	bl	800986a <prvUnlockQueue>
	}
 8009a74:	bf00      	nop
 8009a76:	3718      	adds	r7, #24
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b08e      	sub	sp, #56	; 0x38
 8009a80:	af04      	add	r7, sp, #16
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
 8009a88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10a      	bne.n	8009aa6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a94:	f383 8811 	msr	BASEPRI, r3
 8009a98:	f3bf 8f6f 	isb	sy
 8009a9c:	f3bf 8f4f 	dsb	sy
 8009aa0:	623b      	str	r3, [r7, #32]
}
 8009aa2:	bf00      	nop
 8009aa4:	e7fe      	b.n	8009aa4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10a      	bne.n	8009ac2 <xTaskCreateStatic+0x46>
	__asm volatile
 8009aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	61fb      	str	r3, [r7, #28]
}
 8009abe:	bf00      	nop
 8009ac0:	e7fe      	b.n	8009ac0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009ac2:	23bc      	movs	r3, #188	; 0xbc
 8009ac4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	2bbc      	cmp	r3, #188	; 0xbc
 8009aca:	d00a      	beq.n	8009ae2 <xTaskCreateStatic+0x66>
	__asm volatile
 8009acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad0:	f383 8811 	msr	BASEPRI, r3
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	61bb      	str	r3, [r7, #24]
}
 8009ade:	bf00      	nop
 8009ae0:	e7fe      	b.n	8009ae0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009ae2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d01e      	beq.n	8009b28 <xTaskCreateStatic+0xac>
 8009aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d01b      	beq.n	8009b28 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009af8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afc:	2202      	movs	r2, #2
 8009afe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009b02:	2300      	movs	r3, #0
 8009b04:	9303      	str	r3, [sp, #12]
 8009b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b08:	9302      	str	r3, [sp, #8]
 8009b0a:	f107 0314 	add.w	r3, r7, #20
 8009b0e:	9301      	str	r3, [sp, #4]
 8009b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b12:	9300      	str	r3, [sp, #0]
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	68b9      	ldr	r1, [r7, #8]
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f000 f850 	bl	8009bc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b22:	f000 f8f3 	bl	8009d0c <prvAddNewTaskToReadyList>
 8009b26:	e001      	b.n	8009b2c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009b2c:	697b      	ldr	r3, [r7, #20]
	}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3728      	adds	r7, #40	; 0x28
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b08c      	sub	sp, #48	; 0x30
 8009b3a:	af04      	add	r7, sp, #16
 8009b3c:	60f8      	str	r0, [r7, #12]
 8009b3e:	60b9      	str	r1, [r7, #8]
 8009b40:	603b      	str	r3, [r7, #0]
 8009b42:	4613      	mov	r3, r2
 8009b44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009b46:	88fb      	ldrh	r3, [r7, #6]
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f001 ff6c 	bl	800ba28 <pvPortMalloc>
 8009b50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00e      	beq.n	8009b76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009b58:	20bc      	movs	r0, #188	; 0xbc
 8009b5a:	f001 ff65 	bl	800ba28 <pvPortMalloc>
 8009b5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d003      	beq.n	8009b6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	697a      	ldr	r2, [r7, #20]
 8009b6a:	631a      	str	r2, [r3, #48]	; 0x30
 8009b6c:	e005      	b.n	8009b7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009b6e:	6978      	ldr	r0, [r7, #20]
 8009b70:	f002 f826 	bl	800bbc0 <vPortFree>
 8009b74:	e001      	b.n	8009b7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009b76:	2300      	movs	r3, #0
 8009b78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d017      	beq.n	8009bb0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009b88:	88fa      	ldrh	r2, [r7, #6]
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	9303      	str	r3, [sp, #12]
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	9302      	str	r3, [sp, #8]
 8009b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b94:	9301      	str	r3, [sp, #4]
 8009b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b98:	9300      	str	r3, [sp, #0]
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	68b9      	ldr	r1, [r7, #8]
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f000 f80e 	bl	8009bc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ba4:	69f8      	ldr	r0, [r7, #28]
 8009ba6:	f000 f8b1 	bl	8009d0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009baa:	2301      	movs	r3, #1
 8009bac:	61bb      	str	r3, [r7, #24]
 8009bae:	e002      	b.n	8009bb6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8009bb4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009bb6:	69bb      	ldr	r3, [r7, #24]
	}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3720      	adds	r7, #32
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b088      	sub	sp, #32
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
 8009bcc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	21a5      	movs	r1, #165	; 0xa5
 8009bda:	f01e f893 	bl	8027d04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009be8:	3b01      	subs	r3, #1
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	f023 0307 	bic.w	r3, r3, #7
 8009bf6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	f003 0307 	and.w	r3, r3, #7
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00a      	beq.n	8009c18 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c06:	f383 8811 	msr	BASEPRI, r3
 8009c0a:	f3bf 8f6f 	isb	sy
 8009c0e:	f3bf 8f4f 	dsb	sy
 8009c12:	617b      	str	r3, [r7, #20]
}
 8009c14:	bf00      	nop
 8009c16:	e7fe      	b.n	8009c16 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d01f      	beq.n	8009c5e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c1e:	2300      	movs	r3, #0
 8009c20:	61fb      	str	r3, [r7, #28]
 8009c22:	e012      	b.n	8009c4a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009c24:	68ba      	ldr	r2, [r7, #8]
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	4413      	add	r3, r2
 8009c2a:	7819      	ldrb	r1, [r3, #0]
 8009c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	4413      	add	r3, r2
 8009c32:	3334      	adds	r3, #52	; 0x34
 8009c34:	460a      	mov	r2, r1
 8009c36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009c38:	68ba      	ldr	r2, [r7, #8]
 8009c3a:	69fb      	ldr	r3, [r7, #28]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d006      	beq.n	8009c52 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	3301      	adds	r3, #1
 8009c48:	61fb      	str	r3, [r7, #28]
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	2b0f      	cmp	r3, #15
 8009c4e:	d9e9      	bls.n	8009c24 <prvInitialiseNewTask+0x64>
 8009c50:	e000      	b.n	8009c54 <prvInitialiseNewTask+0x94>
			{
				break;
 8009c52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c5c:	e003      	b.n	8009c66 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c60:	2200      	movs	r2, #0
 8009c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c68:	2b37      	cmp	r3, #55	; 0x37
 8009c6a:	d901      	bls.n	8009c70 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009c6c:	2337      	movs	r3, #55	; 0x37
 8009c6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c7a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7e:	2200      	movs	r2, #0
 8009c80:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c84:	3304      	adds	r3, #4
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fe fe56 	bl	8008938 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8e:	3318      	adds	r3, #24
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fe fe51 	bl	8008938 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009caa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbe:	3354      	adds	r3, #84	; 0x54
 8009cc0:	2260      	movs	r2, #96	; 0x60
 8009cc2:	2100      	movs	r1, #0
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f01e f81d 	bl	8027d04 <memset>
 8009cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ccc:	4a0c      	ldr	r2, [pc, #48]	; (8009d00 <prvInitialiseNewTask+0x140>)
 8009cce:	659a      	str	r2, [r3, #88]	; 0x58
 8009cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd2:	4a0c      	ldr	r2, [pc, #48]	; (8009d04 <prvInitialiseNewTask+0x144>)
 8009cd4:	65da      	str	r2, [r3, #92]	; 0x5c
 8009cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd8:	4a0b      	ldr	r2, [pc, #44]	; (8009d08 <prvInitialiseNewTask+0x148>)
 8009cda:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009cdc:	683a      	ldr	r2, [r7, #0]
 8009cde:	68f9      	ldr	r1, [r7, #12]
 8009ce0:	69b8      	ldr	r0, [r7, #24]
 8009ce2:	f001 fc53 	bl	800b58c <pxPortInitialiseStack>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d002      	beq.n	8009cf8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cf6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cf8:	bf00      	nop
 8009cfa:	3720      	adds	r7, #32
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	0802f0b4 	.word	0x0802f0b4
 8009d04:	0802f0d4 	.word	0x0802f0d4
 8009d08:	0802f094 	.word	0x0802f094

08009d0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009d14:	f001 fd66 	bl	800b7e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009d18:	4b2d      	ldr	r3, [pc, #180]	; (8009dd0 <prvAddNewTaskToReadyList+0xc4>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	4a2c      	ldr	r2, [pc, #176]	; (8009dd0 <prvAddNewTaskToReadyList+0xc4>)
 8009d20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009d22:	4b2c      	ldr	r3, [pc, #176]	; (8009dd4 <prvAddNewTaskToReadyList+0xc8>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d109      	bne.n	8009d3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009d2a:	4a2a      	ldr	r2, [pc, #168]	; (8009dd4 <prvAddNewTaskToReadyList+0xc8>)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009d30:	4b27      	ldr	r3, [pc, #156]	; (8009dd0 <prvAddNewTaskToReadyList+0xc4>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d110      	bne.n	8009d5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009d38:	f000 fc38 	bl	800a5ac <prvInitialiseTaskLists>
 8009d3c:	e00d      	b.n	8009d5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009d3e:	4b26      	ldr	r3, [pc, #152]	; (8009dd8 <prvAddNewTaskToReadyList+0xcc>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d109      	bne.n	8009d5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009d46:	4b23      	ldr	r3, [pc, #140]	; (8009dd4 <prvAddNewTaskToReadyList+0xc8>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d802      	bhi.n	8009d5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009d54:	4a1f      	ldr	r2, [pc, #124]	; (8009dd4 <prvAddNewTaskToReadyList+0xc8>)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009d5a:	4b20      	ldr	r3, [pc, #128]	; (8009ddc <prvAddNewTaskToReadyList+0xd0>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	3301      	adds	r3, #1
 8009d60:	4a1e      	ldr	r2, [pc, #120]	; (8009ddc <prvAddNewTaskToReadyList+0xd0>)
 8009d62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009d64:	4b1d      	ldr	r3, [pc, #116]	; (8009ddc <prvAddNewTaskToReadyList+0xd0>)
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d70:	4b1b      	ldr	r3, [pc, #108]	; (8009de0 <prvAddNewTaskToReadyList+0xd4>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d903      	bls.n	8009d80 <prvAddNewTaskToReadyList+0x74>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7c:	4a18      	ldr	r2, [pc, #96]	; (8009de0 <prvAddNewTaskToReadyList+0xd4>)
 8009d7e:	6013      	str	r3, [r2, #0]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d84:	4613      	mov	r3, r2
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	4413      	add	r3, r2
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4a15      	ldr	r2, [pc, #84]	; (8009de4 <prvAddNewTaskToReadyList+0xd8>)
 8009d8e:	441a      	add	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	3304      	adds	r3, #4
 8009d94:	4619      	mov	r1, r3
 8009d96:	4610      	mov	r0, r2
 8009d98:	f7fe fddb 	bl	8008952 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009d9c:	f001 fd52 	bl	800b844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009da0:	4b0d      	ldr	r3, [pc, #52]	; (8009dd8 <prvAddNewTaskToReadyList+0xcc>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00e      	beq.n	8009dc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009da8:	4b0a      	ldr	r3, [pc, #40]	; (8009dd4 <prvAddNewTaskToReadyList+0xc8>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d207      	bcs.n	8009dc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009db6:	4b0c      	ldr	r3, [pc, #48]	; (8009de8 <prvAddNewTaskToReadyList+0xdc>)
 8009db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dbc:	601a      	str	r2, [r3, #0]
 8009dbe:	f3bf 8f4f 	dsb	sy
 8009dc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dc6:	bf00      	nop
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	200012e8 	.word	0x200012e8
 8009dd4:	20000e14 	.word	0x20000e14
 8009dd8:	200012f4 	.word	0x200012f4
 8009ddc:	20001304 	.word	0x20001304
 8009de0:	200012f0 	.word	0x200012f0
 8009de4:	20000e18 	.word	0x20000e18
 8009de8:	e000ed04 	.word	0xe000ed04

08009dec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009df4:	2300      	movs	r3, #0
 8009df6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d017      	beq.n	8009e2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009dfe:	4b13      	ldr	r3, [pc, #76]	; (8009e4c <vTaskDelay+0x60>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00a      	beq.n	8009e1c <vTaskDelay+0x30>
	__asm volatile
 8009e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0a:	f383 8811 	msr	BASEPRI, r3
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	f3bf 8f4f 	dsb	sy
 8009e16:	60bb      	str	r3, [r7, #8]
}
 8009e18:	bf00      	nop
 8009e1a:	e7fe      	b.n	8009e1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009e1c:	f000 f88a 	bl	8009f34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009e20:	2100      	movs	r1, #0
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f001 f810 	bl	800ae48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009e28:	f000 f892 	bl	8009f50 <xTaskResumeAll>
 8009e2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d107      	bne.n	8009e44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009e34:	4b06      	ldr	r3, [pc, #24]	; (8009e50 <vTaskDelay+0x64>)
 8009e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e3a:	601a      	str	r2, [r3, #0]
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009e44:	bf00      	nop
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	20001310 	.word	0x20001310
 8009e50:	e000ed04 	.word	0xe000ed04

08009e54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b08a      	sub	sp, #40	; 0x28
 8009e58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009e62:	463a      	mov	r2, r7
 8009e64:	1d39      	adds	r1, r7, #4
 8009e66:	f107 0308 	add.w	r3, r7, #8
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fe fd10 	bl	8008890 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009e70:	6839      	ldr	r1, [r7, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	9202      	str	r2, [sp, #8]
 8009e78:	9301      	str	r3, [sp, #4]
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	2300      	movs	r3, #0
 8009e80:	460a      	mov	r2, r1
 8009e82:	4924      	ldr	r1, [pc, #144]	; (8009f14 <vTaskStartScheduler+0xc0>)
 8009e84:	4824      	ldr	r0, [pc, #144]	; (8009f18 <vTaskStartScheduler+0xc4>)
 8009e86:	f7ff fdf9 	bl	8009a7c <xTaskCreateStatic>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	4a23      	ldr	r2, [pc, #140]	; (8009f1c <vTaskStartScheduler+0xc8>)
 8009e8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009e90:	4b22      	ldr	r3, [pc, #136]	; (8009f1c <vTaskStartScheduler+0xc8>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d002      	beq.n	8009e9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	617b      	str	r3, [r7, #20]
 8009e9c:	e001      	b.n	8009ea2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d102      	bne.n	8009eae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009ea8:	f001 f822 	bl	800aef0 <xTimerCreateTimerTask>
 8009eac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d11b      	bne.n	8009eec <vTaskStartScheduler+0x98>
	__asm volatile
 8009eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb8:	f383 8811 	msr	BASEPRI, r3
 8009ebc:	f3bf 8f6f 	isb	sy
 8009ec0:	f3bf 8f4f 	dsb	sy
 8009ec4:	613b      	str	r3, [r7, #16]
}
 8009ec6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ec8:	4b15      	ldr	r3, [pc, #84]	; (8009f20 <vTaskStartScheduler+0xcc>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	3354      	adds	r3, #84	; 0x54
 8009ece:	4a15      	ldr	r2, [pc, #84]	; (8009f24 <vTaskStartScheduler+0xd0>)
 8009ed0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009ed2:	4b15      	ldr	r3, [pc, #84]	; (8009f28 <vTaskStartScheduler+0xd4>)
 8009ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009eda:	4b14      	ldr	r3, [pc, #80]	; (8009f2c <vTaskStartScheduler+0xd8>)
 8009edc:	2201      	movs	r2, #1
 8009ede:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009ee0:	4b13      	ldr	r3, [pc, #76]	; (8009f30 <vTaskStartScheduler+0xdc>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009ee6:	f001 fbdb 	bl	800b6a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009eea:	e00e      	b.n	8009f0a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ef2:	d10a      	bne.n	8009f0a <vTaskStartScheduler+0xb6>
	__asm volatile
 8009ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef8:	f383 8811 	msr	BASEPRI, r3
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	f3bf 8f4f 	dsb	sy
 8009f04:	60fb      	str	r3, [r7, #12]
}
 8009f06:	bf00      	nop
 8009f08:	e7fe      	b.n	8009f08 <vTaskStartScheduler+0xb4>
}
 8009f0a:	bf00      	nop
 8009f0c:	3718      	adds	r7, #24
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	0802c2cc 	.word	0x0802c2cc
 8009f18:	0800a57d 	.word	0x0800a57d
 8009f1c:	2000130c 	.word	0x2000130c
 8009f20:	20000e14 	.word	0x20000e14
 8009f24:	20000094 	.word	0x20000094
 8009f28:	20001308 	.word	0x20001308
 8009f2c:	200012f4 	.word	0x200012f4
 8009f30:	200012ec 	.word	0x200012ec

08009f34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009f34:	b480      	push	{r7}
 8009f36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009f38:	4b04      	ldr	r3, [pc, #16]	; (8009f4c <vTaskSuspendAll+0x18>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	4a03      	ldr	r2, [pc, #12]	; (8009f4c <vTaskSuspendAll+0x18>)
 8009f40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009f42:	bf00      	nop
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	20001310 	.word	0x20001310

08009f50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009f56:	2300      	movs	r3, #0
 8009f58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009f5e:	4b42      	ldr	r3, [pc, #264]	; (800a068 <xTaskResumeAll+0x118>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d10a      	bne.n	8009f7c <xTaskResumeAll+0x2c>
	__asm volatile
 8009f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6a:	f383 8811 	msr	BASEPRI, r3
 8009f6e:	f3bf 8f6f 	isb	sy
 8009f72:	f3bf 8f4f 	dsb	sy
 8009f76:	603b      	str	r3, [r7, #0]
}
 8009f78:	bf00      	nop
 8009f7a:	e7fe      	b.n	8009f7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009f7c:	f001 fc32 	bl	800b7e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009f80:	4b39      	ldr	r3, [pc, #228]	; (800a068 <xTaskResumeAll+0x118>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	3b01      	subs	r3, #1
 8009f86:	4a38      	ldr	r2, [pc, #224]	; (800a068 <xTaskResumeAll+0x118>)
 8009f88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f8a:	4b37      	ldr	r3, [pc, #220]	; (800a068 <xTaskResumeAll+0x118>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d162      	bne.n	800a058 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009f92:	4b36      	ldr	r3, [pc, #216]	; (800a06c <xTaskResumeAll+0x11c>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d05e      	beq.n	800a058 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f9a:	e02f      	b.n	8009ffc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f9c:	4b34      	ldr	r3, [pc, #208]	; (800a070 <xTaskResumeAll+0x120>)
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	3318      	adds	r3, #24
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7fe fd2f 	bl	8008a0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fe fd2a 	bl	8008a0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fbc:	4b2d      	ldr	r3, [pc, #180]	; (800a074 <xTaskResumeAll+0x124>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d903      	bls.n	8009fcc <xTaskResumeAll+0x7c>
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc8:	4a2a      	ldr	r2, [pc, #168]	; (800a074 <xTaskResumeAll+0x124>)
 8009fca:	6013      	str	r3, [r2, #0]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	4413      	add	r3, r2
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	4a27      	ldr	r2, [pc, #156]	; (800a078 <xTaskResumeAll+0x128>)
 8009fda:	441a      	add	r2, r3
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	3304      	adds	r3, #4
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	4610      	mov	r0, r2
 8009fe4:	f7fe fcb5 	bl	8008952 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fec:	4b23      	ldr	r3, [pc, #140]	; (800a07c <xTaskResumeAll+0x12c>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d302      	bcc.n	8009ffc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009ff6:	4b22      	ldr	r3, [pc, #136]	; (800a080 <xTaskResumeAll+0x130>)
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ffc:	4b1c      	ldr	r3, [pc, #112]	; (800a070 <xTaskResumeAll+0x120>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d1cb      	bne.n	8009f9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d001      	beq.n	800a00e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a00a:	f000 fb71 	bl	800a6f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a00e:	4b1d      	ldr	r3, [pc, #116]	; (800a084 <xTaskResumeAll+0x134>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d010      	beq.n	800a03c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a01a:	f000 f859 	bl	800a0d0 <xTaskIncrementTick>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d002      	beq.n	800a02a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a024:	4b16      	ldr	r3, [pc, #88]	; (800a080 <xTaskResumeAll+0x130>)
 800a026:	2201      	movs	r2, #1
 800a028:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	3b01      	subs	r3, #1
 800a02e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1f1      	bne.n	800a01a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a036:	4b13      	ldr	r3, [pc, #76]	; (800a084 <xTaskResumeAll+0x134>)
 800a038:	2200      	movs	r2, #0
 800a03a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a03c:	4b10      	ldr	r3, [pc, #64]	; (800a080 <xTaskResumeAll+0x130>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d009      	beq.n	800a058 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a044:	2301      	movs	r3, #1
 800a046:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a048:	4b0f      	ldr	r3, [pc, #60]	; (800a088 <xTaskResumeAll+0x138>)
 800a04a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a04e:	601a      	str	r2, [r3, #0]
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a058:	f001 fbf4 	bl	800b844 <vPortExitCritical>

	return xAlreadyYielded;
 800a05c:	68bb      	ldr	r3, [r7, #8]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	20001310 	.word	0x20001310
 800a06c:	200012e8 	.word	0x200012e8
 800a070:	200012a8 	.word	0x200012a8
 800a074:	200012f0 	.word	0x200012f0
 800a078:	20000e18 	.word	0x20000e18
 800a07c:	20000e14 	.word	0x20000e14
 800a080:	200012fc 	.word	0x200012fc
 800a084:	200012f8 	.word	0x200012f8
 800a088:	e000ed04 	.word	0xe000ed04

0800a08c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a092:	4b05      	ldr	r3, [pc, #20]	; (800a0a8 <xTaskGetTickCount+0x1c>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a098:	687b      	ldr	r3, [r7, #4]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	370c      	adds	r7, #12
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	200012ec 	.word	0x200012ec

0800a0ac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a0b2:	f001 fc79 	bl	800b9a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a0ba:	4b04      	ldr	r3, [pc, #16]	; (800a0cc <xTaskGetTickCountFromISR+0x20>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0c0:	683b      	ldr	r3, [r7, #0]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	200012ec 	.word	0x200012ec

0800a0d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0da:	4b4f      	ldr	r3, [pc, #316]	; (800a218 <xTaskIncrementTick+0x148>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f040 808f 	bne.w	800a202 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a0e4:	4b4d      	ldr	r3, [pc, #308]	; (800a21c <xTaskIncrementTick+0x14c>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a0ec:	4a4b      	ldr	r2, [pc, #300]	; (800a21c <xTaskIncrementTick+0x14c>)
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d120      	bne.n	800a13a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a0f8:	4b49      	ldr	r3, [pc, #292]	; (800a220 <xTaskIncrementTick+0x150>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00a      	beq.n	800a118 <xTaskIncrementTick+0x48>
	__asm volatile
 800a102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	603b      	str	r3, [r7, #0]
}
 800a114:	bf00      	nop
 800a116:	e7fe      	b.n	800a116 <xTaskIncrementTick+0x46>
 800a118:	4b41      	ldr	r3, [pc, #260]	; (800a220 <xTaskIncrementTick+0x150>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	60fb      	str	r3, [r7, #12]
 800a11e:	4b41      	ldr	r3, [pc, #260]	; (800a224 <xTaskIncrementTick+0x154>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a3f      	ldr	r2, [pc, #252]	; (800a220 <xTaskIncrementTick+0x150>)
 800a124:	6013      	str	r3, [r2, #0]
 800a126:	4a3f      	ldr	r2, [pc, #252]	; (800a224 <xTaskIncrementTick+0x154>)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6013      	str	r3, [r2, #0]
 800a12c:	4b3e      	ldr	r3, [pc, #248]	; (800a228 <xTaskIncrementTick+0x158>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	3301      	adds	r3, #1
 800a132:	4a3d      	ldr	r2, [pc, #244]	; (800a228 <xTaskIncrementTick+0x158>)
 800a134:	6013      	str	r3, [r2, #0]
 800a136:	f000 fadb 	bl	800a6f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a13a:	4b3c      	ldr	r3, [pc, #240]	; (800a22c <xTaskIncrementTick+0x15c>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	693a      	ldr	r2, [r7, #16]
 800a140:	429a      	cmp	r2, r3
 800a142:	d349      	bcc.n	800a1d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a144:	4b36      	ldr	r3, [pc, #216]	; (800a220 <xTaskIncrementTick+0x150>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d104      	bne.n	800a158 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a14e:	4b37      	ldr	r3, [pc, #220]	; (800a22c <xTaskIncrementTick+0x15c>)
 800a150:	f04f 32ff 	mov.w	r2, #4294967295
 800a154:	601a      	str	r2, [r3, #0]
					break;
 800a156:	e03f      	b.n	800a1d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a158:	4b31      	ldr	r3, [pc, #196]	; (800a220 <xTaskIncrementTick+0x150>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a168:	693a      	ldr	r2, [r7, #16]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d203      	bcs.n	800a178 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a170:	4a2e      	ldr	r2, [pc, #184]	; (800a22c <xTaskIncrementTick+0x15c>)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a176:	e02f      	b.n	800a1d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	3304      	adds	r3, #4
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7fe fc45 	bl	8008a0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a186:	2b00      	cmp	r3, #0
 800a188:	d004      	beq.n	800a194 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	3318      	adds	r3, #24
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fe fc3c 	bl	8008a0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a198:	4b25      	ldr	r3, [pc, #148]	; (800a230 <xTaskIncrementTick+0x160>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d903      	bls.n	800a1a8 <xTaskIncrementTick+0xd8>
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a4:	4a22      	ldr	r2, [pc, #136]	; (800a230 <xTaskIncrementTick+0x160>)
 800a1a6:	6013      	str	r3, [r2, #0]
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	4413      	add	r3, r2
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	4a1f      	ldr	r2, [pc, #124]	; (800a234 <xTaskIncrementTick+0x164>)
 800a1b6:	441a      	add	r2, r3
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	3304      	adds	r3, #4
 800a1bc:	4619      	mov	r1, r3
 800a1be:	4610      	mov	r0, r2
 800a1c0:	f7fe fbc7 	bl	8008952 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1c8:	4b1b      	ldr	r3, [pc, #108]	; (800a238 <xTaskIncrementTick+0x168>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d3b8      	bcc.n	800a144 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1d6:	e7b5      	b.n	800a144 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a1d8:	4b17      	ldr	r3, [pc, #92]	; (800a238 <xTaskIncrementTick+0x168>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1de:	4915      	ldr	r1, [pc, #84]	; (800a234 <xTaskIncrementTick+0x164>)
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	440b      	add	r3, r1
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d901      	bls.n	800a1f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a1f4:	4b11      	ldr	r3, [pc, #68]	; (800a23c <xTaskIncrementTick+0x16c>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d007      	beq.n	800a20c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	617b      	str	r3, [r7, #20]
 800a200:	e004      	b.n	800a20c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a202:	4b0f      	ldr	r3, [pc, #60]	; (800a240 <xTaskIncrementTick+0x170>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	3301      	adds	r3, #1
 800a208:	4a0d      	ldr	r2, [pc, #52]	; (800a240 <xTaskIncrementTick+0x170>)
 800a20a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a20c:	697b      	ldr	r3, [r7, #20]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3718      	adds	r7, #24
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	20001310 	.word	0x20001310
 800a21c:	200012ec 	.word	0x200012ec
 800a220:	200012a0 	.word	0x200012a0
 800a224:	200012a4 	.word	0x200012a4
 800a228:	20001300 	.word	0x20001300
 800a22c:	20001308 	.word	0x20001308
 800a230:	200012f0 	.word	0x200012f0
 800a234:	20000e18 	.word	0x20000e18
 800a238:	20000e14 	.word	0x20000e14
 800a23c:	200012fc 	.word	0x200012fc
 800a240:	200012f8 	.word	0x200012f8

0800a244 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a24a:	4b2a      	ldr	r3, [pc, #168]	; (800a2f4 <vTaskSwitchContext+0xb0>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d003      	beq.n	800a25a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a252:	4b29      	ldr	r3, [pc, #164]	; (800a2f8 <vTaskSwitchContext+0xb4>)
 800a254:	2201      	movs	r2, #1
 800a256:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a258:	e046      	b.n	800a2e8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a25a:	4b27      	ldr	r3, [pc, #156]	; (800a2f8 <vTaskSwitchContext+0xb4>)
 800a25c:	2200      	movs	r2, #0
 800a25e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a260:	4b26      	ldr	r3, [pc, #152]	; (800a2fc <vTaskSwitchContext+0xb8>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	60fb      	str	r3, [r7, #12]
 800a266:	e010      	b.n	800a28a <vTaskSwitchContext+0x46>
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d10a      	bne.n	800a284 <vTaskSwitchContext+0x40>
	__asm volatile
 800a26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a272:	f383 8811 	msr	BASEPRI, r3
 800a276:	f3bf 8f6f 	isb	sy
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	607b      	str	r3, [r7, #4]
}
 800a280:	bf00      	nop
 800a282:	e7fe      	b.n	800a282 <vTaskSwitchContext+0x3e>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	3b01      	subs	r3, #1
 800a288:	60fb      	str	r3, [r7, #12]
 800a28a:	491d      	ldr	r1, [pc, #116]	; (800a300 <vTaskSwitchContext+0xbc>)
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	4613      	mov	r3, r2
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	4413      	add	r3, r2
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	440b      	add	r3, r1
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d0e4      	beq.n	800a268 <vTaskSwitchContext+0x24>
 800a29e:	68fa      	ldr	r2, [r7, #12]
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	4413      	add	r3, r2
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	4a15      	ldr	r2, [pc, #84]	; (800a300 <vTaskSwitchContext+0xbc>)
 800a2aa:	4413      	add	r3, r2
 800a2ac:	60bb      	str	r3, [r7, #8]
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	685a      	ldr	r2, [r3, #4]
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	605a      	str	r2, [r3, #4]
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	685a      	ldr	r2, [r3, #4]
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	3308      	adds	r3, #8
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d104      	bne.n	800a2ce <vTaskSwitchContext+0x8a>
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	685a      	ldr	r2, [r3, #4]
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	605a      	str	r2, [r3, #4]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	4a0b      	ldr	r2, [pc, #44]	; (800a304 <vTaskSwitchContext+0xc0>)
 800a2d6:	6013      	str	r3, [r2, #0]
 800a2d8:	4a08      	ldr	r2, [pc, #32]	; (800a2fc <vTaskSwitchContext+0xb8>)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a2de:	4b09      	ldr	r3, [pc, #36]	; (800a304 <vTaskSwitchContext+0xc0>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	3354      	adds	r3, #84	; 0x54
 800a2e4:	4a08      	ldr	r2, [pc, #32]	; (800a308 <vTaskSwitchContext+0xc4>)
 800a2e6:	6013      	str	r3, [r2, #0]
}
 800a2e8:	bf00      	nop
 800a2ea:	3714      	adds	r7, #20
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr
 800a2f4:	20001310 	.word	0x20001310
 800a2f8:	200012fc 	.word	0x200012fc
 800a2fc:	200012f0 	.word	0x200012f0
 800a300:	20000e18 	.word	0x20000e18
 800a304:	20000e14 	.word	0x20000e14
 800a308:	20000094 	.word	0x20000094

0800a30c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d10a      	bne.n	800a332 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a320:	f383 8811 	msr	BASEPRI, r3
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	60fb      	str	r3, [r7, #12]
}
 800a32e:	bf00      	nop
 800a330:	e7fe      	b.n	800a330 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a332:	4b07      	ldr	r3, [pc, #28]	; (800a350 <vTaskPlaceOnEventList+0x44>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	3318      	adds	r3, #24
 800a338:	4619      	mov	r1, r3
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f7fe fb2d 	bl	800899a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a340:	2101      	movs	r1, #1
 800a342:	6838      	ldr	r0, [r7, #0]
 800a344:	f000 fd80 	bl	800ae48 <prvAddCurrentTaskToDelayedList>
}
 800a348:	bf00      	nop
 800a34a:	3710      	adds	r7, #16
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	20000e14 	.word	0x20000e14

0800a354 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10a      	bne.n	800a37c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36a:	f383 8811 	msr	BASEPRI, r3
 800a36e:	f3bf 8f6f 	isb	sy
 800a372:	f3bf 8f4f 	dsb	sy
 800a376:	617b      	str	r3, [r7, #20]
}
 800a378:	bf00      	nop
 800a37a:	e7fe      	b.n	800a37a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a37c:	4b0a      	ldr	r3, [pc, #40]	; (800a3a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	3318      	adds	r3, #24
 800a382:	4619      	mov	r1, r3
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f7fe fae4 	bl	8008952 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d002      	beq.n	800a396 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a390:	f04f 33ff 	mov.w	r3, #4294967295
 800a394:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a396:	6879      	ldr	r1, [r7, #4]
 800a398:	68b8      	ldr	r0, [r7, #8]
 800a39a:	f000 fd55 	bl	800ae48 <prvAddCurrentTaskToDelayedList>
	}
 800a39e:	bf00      	nop
 800a3a0:	3718      	adds	r7, #24
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	20000e14 	.word	0x20000e14

0800a3ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10a      	bne.n	800a3d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c6:	f383 8811 	msr	BASEPRI, r3
 800a3ca:	f3bf 8f6f 	isb	sy
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	60fb      	str	r3, [r7, #12]
}
 800a3d4:	bf00      	nop
 800a3d6:	e7fe      	b.n	800a3d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	3318      	adds	r3, #24
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7fe fb15 	bl	8008a0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3e2:	4b1e      	ldr	r3, [pc, #120]	; (800a45c <xTaskRemoveFromEventList+0xb0>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d11d      	bne.n	800a426 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7fe fb0c 	bl	8008a0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f8:	4b19      	ldr	r3, [pc, #100]	; (800a460 <xTaskRemoveFromEventList+0xb4>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d903      	bls.n	800a408 <xTaskRemoveFromEventList+0x5c>
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a404:	4a16      	ldr	r2, [pc, #88]	; (800a460 <xTaskRemoveFromEventList+0xb4>)
 800a406:	6013      	str	r3, [r2, #0]
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a40c:	4613      	mov	r3, r2
 800a40e:	009b      	lsls	r3, r3, #2
 800a410:	4413      	add	r3, r2
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	4a13      	ldr	r2, [pc, #76]	; (800a464 <xTaskRemoveFromEventList+0xb8>)
 800a416:	441a      	add	r2, r3
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	3304      	adds	r3, #4
 800a41c:	4619      	mov	r1, r3
 800a41e:	4610      	mov	r0, r2
 800a420:	f7fe fa97 	bl	8008952 <vListInsertEnd>
 800a424:	e005      	b.n	800a432 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	3318      	adds	r3, #24
 800a42a:	4619      	mov	r1, r3
 800a42c:	480e      	ldr	r0, [pc, #56]	; (800a468 <xTaskRemoveFromEventList+0xbc>)
 800a42e:	f7fe fa90 	bl	8008952 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a436:	4b0d      	ldr	r3, [pc, #52]	; (800a46c <xTaskRemoveFromEventList+0xc0>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d905      	bls.n	800a44c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a440:	2301      	movs	r3, #1
 800a442:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a444:	4b0a      	ldr	r3, [pc, #40]	; (800a470 <xTaskRemoveFromEventList+0xc4>)
 800a446:	2201      	movs	r2, #1
 800a448:	601a      	str	r2, [r3, #0]
 800a44a:	e001      	b.n	800a450 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a44c:	2300      	movs	r3, #0
 800a44e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a450:	697b      	ldr	r3, [r7, #20]
}
 800a452:	4618      	mov	r0, r3
 800a454:	3718      	adds	r7, #24
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	20001310 	.word	0x20001310
 800a460:	200012f0 	.word	0x200012f0
 800a464:	20000e18 	.word	0x20000e18
 800a468:	200012a8 	.word	0x200012a8
 800a46c:	20000e14 	.word	0x20000e14
 800a470:	200012fc 	.word	0x200012fc

0800a474 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a47c:	4b06      	ldr	r3, [pc, #24]	; (800a498 <vTaskInternalSetTimeOutState+0x24>)
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a484:	4b05      	ldr	r3, [pc, #20]	; (800a49c <vTaskInternalSetTimeOutState+0x28>)
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	605a      	str	r2, [r3, #4]
}
 800a48c:	bf00      	nop
 800a48e:	370c      	adds	r7, #12
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr
 800a498:	20001300 	.word	0x20001300
 800a49c:	200012ec 	.word	0x200012ec

0800a4a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b088      	sub	sp, #32
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10a      	bne.n	800a4c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	613b      	str	r3, [r7, #16]
}
 800a4c2:	bf00      	nop
 800a4c4:	e7fe      	b.n	800a4c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10a      	bne.n	800a4e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	60fb      	str	r3, [r7, #12]
}
 800a4de:	bf00      	nop
 800a4e0:	e7fe      	b.n	800a4e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a4e2:	f001 f97f 	bl	800b7e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a4e6:	4b1d      	ldr	r3, [pc, #116]	; (800a55c <xTaskCheckForTimeOut+0xbc>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	69ba      	ldr	r2, [r7, #24]
 800a4f2:	1ad3      	subs	r3, r2, r3
 800a4f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4fe:	d102      	bne.n	800a506 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a500:	2300      	movs	r3, #0
 800a502:	61fb      	str	r3, [r7, #28]
 800a504:	e023      	b.n	800a54e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	4b15      	ldr	r3, [pc, #84]	; (800a560 <xTaskCheckForTimeOut+0xc0>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d007      	beq.n	800a522 <xTaskCheckForTimeOut+0x82>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	69ba      	ldr	r2, [r7, #24]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d302      	bcc.n	800a522 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a51c:	2301      	movs	r3, #1
 800a51e:	61fb      	str	r3, [r7, #28]
 800a520:	e015      	b.n	800a54e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d20b      	bcs.n	800a544 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	1ad2      	subs	r2, r2, r3
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f7ff ff9b 	bl	800a474 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a53e:	2300      	movs	r3, #0
 800a540:	61fb      	str	r3, [r7, #28]
 800a542:	e004      	b.n	800a54e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	2200      	movs	r2, #0
 800a548:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a54a:	2301      	movs	r3, #1
 800a54c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a54e:	f001 f979 	bl	800b844 <vPortExitCritical>

	return xReturn;
 800a552:	69fb      	ldr	r3, [r7, #28]
}
 800a554:	4618      	mov	r0, r3
 800a556:	3720      	adds	r7, #32
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	200012ec 	.word	0x200012ec
 800a560:	20001300 	.word	0x20001300

0800a564 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a564:	b480      	push	{r7}
 800a566:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a568:	4b03      	ldr	r3, [pc, #12]	; (800a578 <vTaskMissedYield+0x14>)
 800a56a:	2201      	movs	r2, #1
 800a56c:	601a      	str	r2, [r3, #0]
}
 800a56e:	bf00      	nop
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	200012fc 	.word	0x200012fc

0800a57c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a584:	f000 f852 	bl	800a62c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a588:	4b06      	ldr	r3, [pc, #24]	; (800a5a4 <prvIdleTask+0x28>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d9f9      	bls.n	800a584 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a590:	4b05      	ldr	r3, [pc, #20]	; (800a5a8 <prvIdleTask+0x2c>)
 800a592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a596:	601a      	str	r2, [r3, #0]
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a5a0:	e7f0      	b.n	800a584 <prvIdleTask+0x8>
 800a5a2:	bf00      	nop
 800a5a4:	20000e18 	.word	0x20000e18
 800a5a8:	e000ed04 	.word	0xe000ed04

0800a5ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	607b      	str	r3, [r7, #4]
 800a5b6:	e00c      	b.n	800a5d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	009b      	lsls	r3, r3, #2
 800a5be:	4413      	add	r3, r2
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	4a12      	ldr	r2, [pc, #72]	; (800a60c <prvInitialiseTaskLists+0x60>)
 800a5c4:	4413      	add	r3, r2
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7fe f996 	bl	80088f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	607b      	str	r3, [r7, #4]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2b37      	cmp	r3, #55	; 0x37
 800a5d6:	d9ef      	bls.n	800a5b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a5d8:	480d      	ldr	r0, [pc, #52]	; (800a610 <prvInitialiseTaskLists+0x64>)
 800a5da:	f7fe f98d 	bl	80088f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a5de:	480d      	ldr	r0, [pc, #52]	; (800a614 <prvInitialiseTaskLists+0x68>)
 800a5e0:	f7fe f98a 	bl	80088f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a5e4:	480c      	ldr	r0, [pc, #48]	; (800a618 <prvInitialiseTaskLists+0x6c>)
 800a5e6:	f7fe f987 	bl	80088f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a5ea:	480c      	ldr	r0, [pc, #48]	; (800a61c <prvInitialiseTaskLists+0x70>)
 800a5ec:	f7fe f984 	bl	80088f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a5f0:	480b      	ldr	r0, [pc, #44]	; (800a620 <prvInitialiseTaskLists+0x74>)
 800a5f2:	f7fe f981 	bl	80088f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a5f6:	4b0b      	ldr	r3, [pc, #44]	; (800a624 <prvInitialiseTaskLists+0x78>)
 800a5f8:	4a05      	ldr	r2, [pc, #20]	; (800a610 <prvInitialiseTaskLists+0x64>)
 800a5fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a5fc:	4b0a      	ldr	r3, [pc, #40]	; (800a628 <prvInitialiseTaskLists+0x7c>)
 800a5fe:	4a05      	ldr	r2, [pc, #20]	; (800a614 <prvInitialiseTaskLists+0x68>)
 800a600:	601a      	str	r2, [r3, #0]
}
 800a602:	bf00      	nop
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	20000e18 	.word	0x20000e18
 800a610:	20001278 	.word	0x20001278
 800a614:	2000128c 	.word	0x2000128c
 800a618:	200012a8 	.word	0x200012a8
 800a61c:	200012bc 	.word	0x200012bc
 800a620:	200012d4 	.word	0x200012d4
 800a624:	200012a0 	.word	0x200012a0
 800a628:	200012a4 	.word	0x200012a4

0800a62c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a632:	e019      	b.n	800a668 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a634:	f001 f8d6 	bl	800b7e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a638:	4b10      	ldr	r3, [pc, #64]	; (800a67c <prvCheckTasksWaitingTermination+0x50>)
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	3304      	adds	r3, #4
 800a644:	4618      	mov	r0, r3
 800a646:	f7fe f9e1 	bl	8008a0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a64a:	4b0d      	ldr	r3, [pc, #52]	; (800a680 <prvCheckTasksWaitingTermination+0x54>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	3b01      	subs	r3, #1
 800a650:	4a0b      	ldr	r2, [pc, #44]	; (800a680 <prvCheckTasksWaitingTermination+0x54>)
 800a652:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a654:	4b0b      	ldr	r3, [pc, #44]	; (800a684 <prvCheckTasksWaitingTermination+0x58>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	3b01      	subs	r3, #1
 800a65a:	4a0a      	ldr	r2, [pc, #40]	; (800a684 <prvCheckTasksWaitingTermination+0x58>)
 800a65c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a65e:	f001 f8f1 	bl	800b844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 f810 	bl	800a688 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a668:	4b06      	ldr	r3, [pc, #24]	; (800a684 <prvCheckTasksWaitingTermination+0x58>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d1e1      	bne.n	800a634 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a670:	bf00      	nop
 800a672:	bf00      	nop
 800a674:	3708      	adds	r7, #8
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	200012bc 	.word	0x200012bc
 800a680:	200012e8 	.word	0x200012e8
 800a684:	200012d0 	.word	0x200012d0

0800a688 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	3354      	adds	r3, #84	; 0x54
 800a694:	4618      	mov	r0, r3
 800a696:	f01e f9ef 	bl	8028a78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d108      	bne.n	800a6b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f001 fa89 	bl	800bbc0 <vPortFree>
				vPortFree( pxTCB );
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f001 fa86 	bl	800bbc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a6b4:	e018      	b.n	800a6e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d103      	bne.n	800a6c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f001 fa7d 	bl	800bbc0 <vPortFree>
	}
 800a6c6:	e00f      	b.n	800a6e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	d00a      	beq.n	800a6e8 <prvDeleteTCB+0x60>
	__asm volatile
 800a6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d6:	f383 8811 	msr	BASEPRI, r3
 800a6da:	f3bf 8f6f 	isb	sy
 800a6de:	f3bf 8f4f 	dsb	sy
 800a6e2:	60fb      	str	r3, [r7, #12]
}
 800a6e4:	bf00      	nop
 800a6e6:	e7fe      	b.n	800a6e6 <prvDeleteTCB+0x5e>
	}
 800a6e8:	bf00      	nop
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6f6:	4b0c      	ldr	r3, [pc, #48]	; (800a728 <prvResetNextTaskUnblockTime+0x38>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d104      	bne.n	800a70a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a700:	4b0a      	ldr	r3, [pc, #40]	; (800a72c <prvResetNextTaskUnblockTime+0x3c>)
 800a702:	f04f 32ff 	mov.w	r2, #4294967295
 800a706:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a708:	e008      	b.n	800a71c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a70a:	4b07      	ldr	r3, [pc, #28]	; (800a728 <prvResetNextTaskUnblockTime+0x38>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	4a04      	ldr	r2, [pc, #16]	; (800a72c <prvResetNextTaskUnblockTime+0x3c>)
 800a71a:	6013      	str	r3, [r2, #0]
}
 800a71c:	bf00      	nop
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr
 800a728:	200012a0 	.word	0x200012a0
 800a72c:	20001308 	.word	0x20001308

0800a730 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a736:	4b0b      	ldr	r3, [pc, #44]	; (800a764 <xTaskGetSchedulerState+0x34>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d102      	bne.n	800a744 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a73e:	2301      	movs	r3, #1
 800a740:	607b      	str	r3, [r7, #4]
 800a742:	e008      	b.n	800a756 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a744:	4b08      	ldr	r3, [pc, #32]	; (800a768 <xTaskGetSchedulerState+0x38>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d102      	bne.n	800a752 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a74c:	2302      	movs	r3, #2
 800a74e:	607b      	str	r3, [r7, #4]
 800a750:	e001      	b.n	800a756 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a752:	2300      	movs	r3, #0
 800a754:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a756:	687b      	ldr	r3, [r7, #4]
	}
 800a758:	4618      	mov	r0, r3
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr
 800a764:	200012f4 	.word	0x200012f4
 800a768:	20001310 	.word	0x20001310

0800a76c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a778:	2300      	movs	r3, #0
 800a77a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d051      	beq.n	800a826 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a786:	4b2a      	ldr	r3, [pc, #168]	; (800a830 <xTaskPriorityInherit+0xc4>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d241      	bcs.n	800a814 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	699b      	ldr	r3, [r3, #24]
 800a794:	2b00      	cmp	r3, #0
 800a796:	db06      	blt.n	800a7a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a798:	4b25      	ldr	r3, [pc, #148]	; (800a830 <xTaskPriorityInherit+0xc4>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a79e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	6959      	ldr	r1, [r3, #20]
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	4a1f      	ldr	r2, [pc, #124]	; (800a834 <xTaskPriorityInherit+0xc8>)
 800a7b8:	4413      	add	r3, r2
 800a7ba:	4299      	cmp	r1, r3
 800a7bc:	d122      	bne.n	800a804 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	3304      	adds	r3, #4
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fe f922 	bl	8008a0c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a7c8:	4b19      	ldr	r3, [pc, #100]	; (800a830 <xTaskPriorityInherit+0xc4>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7d6:	4b18      	ldr	r3, [pc, #96]	; (800a838 <xTaskPriorityInherit+0xcc>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d903      	bls.n	800a7e6 <xTaskPriorityInherit+0x7a>
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e2:	4a15      	ldr	r2, [pc, #84]	; (800a838 <xTaskPriorityInherit+0xcc>)
 800a7e4:	6013      	str	r3, [r2, #0]
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	4413      	add	r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	4a10      	ldr	r2, [pc, #64]	; (800a834 <xTaskPriorityInherit+0xc8>)
 800a7f4:	441a      	add	r2, r3
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	3304      	adds	r3, #4
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	4610      	mov	r0, r2
 800a7fe:	f7fe f8a8 	bl	8008952 <vListInsertEnd>
 800a802:	e004      	b.n	800a80e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a804:	4b0a      	ldr	r3, [pc, #40]	; (800a830 <xTaskPriorityInherit+0xc4>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a80e:	2301      	movs	r3, #1
 800a810:	60fb      	str	r3, [r7, #12]
 800a812:	e008      	b.n	800a826 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a818:	4b05      	ldr	r3, [pc, #20]	; (800a830 <xTaskPriorityInherit+0xc4>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a81e:	429a      	cmp	r2, r3
 800a820:	d201      	bcs.n	800a826 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a822:	2301      	movs	r3, #1
 800a824:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a826:	68fb      	ldr	r3, [r7, #12]
	}
 800a828:	4618      	mov	r0, r3
 800a82a:	3710      	adds	r7, #16
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	20000e14 	.word	0x20000e14
 800a834:	20000e18 	.word	0x20000e18
 800a838:	200012f0 	.word	0x200012f0

0800a83c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b086      	sub	sp, #24
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a848:	2300      	movs	r3, #0
 800a84a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d056      	beq.n	800a900 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a852:	4b2e      	ldr	r3, [pc, #184]	; (800a90c <xTaskPriorityDisinherit+0xd0>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	693a      	ldr	r2, [r7, #16]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d00a      	beq.n	800a872 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a860:	f383 8811 	msr	BASEPRI, r3
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	f3bf 8f4f 	dsb	sy
 800a86c:	60fb      	str	r3, [r7, #12]
}
 800a86e:	bf00      	nop
 800a870:	e7fe      	b.n	800a870 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a876:	2b00      	cmp	r3, #0
 800a878:	d10a      	bne.n	800a890 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87e:	f383 8811 	msr	BASEPRI, r3
 800a882:	f3bf 8f6f 	isb	sy
 800a886:	f3bf 8f4f 	dsb	sy
 800a88a:	60bb      	str	r3, [r7, #8]
}
 800a88c:	bf00      	nop
 800a88e:	e7fe      	b.n	800a88e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a894:	1e5a      	subs	r2, r3, #1
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d02c      	beq.n	800a900 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d128      	bne.n	800a900 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	3304      	adds	r3, #4
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7fe f8aa 	bl	8008a0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d0:	4b0f      	ldr	r3, [pc, #60]	; (800a910 <xTaskPriorityDisinherit+0xd4>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d903      	bls.n	800a8e0 <xTaskPriorityDisinherit+0xa4>
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8dc:	4a0c      	ldr	r2, [pc, #48]	; (800a910 <xTaskPriorityDisinherit+0xd4>)
 800a8de:	6013      	str	r3, [r2, #0]
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	4413      	add	r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4a09      	ldr	r2, [pc, #36]	; (800a914 <xTaskPriorityDisinherit+0xd8>)
 800a8ee:	441a      	add	r2, r3
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	3304      	adds	r3, #4
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	4610      	mov	r0, r2
 800a8f8:	f7fe f82b 	bl	8008952 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a900:	697b      	ldr	r3, [r7, #20]
	}
 800a902:	4618      	mov	r0, r3
 800a904:	3718      	adds	r7, #24
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	20000e14 	.word	0x20000e14
 800a910:	200012f0 	.word	0x200012f0
 800a914:	20000e18 	.word	0x20000e18

0800a918 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b088      	sub	sp, #32
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a926:	2301      	movs	r3, #1
 800a928:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d06a      	beq.n	800aa06 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a934:	2b00      	cmp	r3, #0
 800a936:	d10a      	bne.n	800a94e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93c:	f383 8811 	msr	BASEPRI, r3
 800a940:	f3bf 8f6f 	isb	sy
 800a944:	f3bf 8f4f 	dsb	sy
 800a948:	60fb      	str	r3, [r7, #12]
}
 800a94a:	bf00      	nop
 800a94c:	e7fe      	b.n	800a94c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	429a      	cmp	r2, r3
 800a956:	d902      	bls.n	800a95e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	61fb      	str	r3, [r7, #28]
 800a95c:	e002      	b.n	800a964 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a962:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a968:	69fa      	ldr	r2, [r7, #28]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d04b      	beq.n	800aa06 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a972:	697a      	ldr	r2, [r7, #20]
 800a974:	429a      	cmp	r2, r3
 800a976:	d146      	bne.n	800aa06 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a978:	4b25      	ldr	r3, [pc, #148]	; (800aa10 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	69ba      	ldr	r2, [r7, #24]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d10a      	bne.n	800a998 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a986:	f383 8811 	msr	BASEPRI, r3
 800a98a:	f3bf 8f6f 	isb	sy
 800a98e:	f3bf 8f4f 	dsb	sy
 800a992:	60bb      	str	r3, [r7, #8]
}
 800a994:	bf00      	nop
 800a996:	e7fe      	b.n	800a996 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a99c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	69fa      	ldr	r2, [r7, #28]
 800a9a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	699b      	ldr	r3, [r3, #24]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	db04      	blt.n	800a9b6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	6959      	ldr	r1, [r3, #20]
 800a9ba:	693a      	ldr	r2, [r7, #16]
 800a9bc:	4613      	mov	r3, r2
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	4413      	add	r3, r2
 800a9c2:	009b      	lsls	r3, r3, #2
 800a9c4:	4a13      	ldr	r2, [pc, #76]	; (800aa14 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a9c6:	4413      	add	r3, r2
 800a9c8:	4299      	cmp	r1, r3
 800a9ca:	d11c      	bne.n	800aa06 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	3304      	adds	r3, #4
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7fe f81b 	bl	8008a0c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9da:	4b0f      	ldr	r3, [pc, #60]	; (800aa18 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d903      	bls.n	800a9ea <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e6:	4a0c      	ldr	r2, [pc, #48]	; (800aa18 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a9e8:	6013      	str	r3, [r2, #0]
 800a9ea:	69bb      	ldr	r3, [r7, #24]
 800a9ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	4413      	add	r3, r2
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	4a07      	ldr	r2, [pc, #28]	; (800aa14 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a9f8:	441a      	add	r2, r3
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	3304      	adds	r3, #4
 800a9fe:	4619      	mov	r1, r3
 800aa00:	4610      	mov	r0, r2
 800aa02:	f7fd ffa6 	bl	8008952 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aa06:	bf00      	nop
 800aa08:	3720      	adds	r7, #32
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	20000e14 	.word	0x20000e14
 800aa14:	20000e18 	.word	0x20000e18
 800aa18:	200012f0 	.word	0x200012f0

0800aa1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800aa1c:	b480      	push	{r7}
 800aa1e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800aa20:	4b07      	ldr	r3, [pc, #28]	; (800aa40 <pvTaskIncrementMutexHeldCount+0x24>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d004      	beq.n	800aa32 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800aa28:	4b05      	ldr	r3, [pc, #20]	; (800aa40 <pvTaskIncrementMutexHeldCount+0x24>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa2e:	3201      	adds	r2, #1
 800aa30:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800aa32:	4b03      	ldr	r3, [pc, #12]	; (800aa40 <pvTaskIncrementMutexHeldCount+0x24>)
 800aa34:	681b      	ldr	r3, [r3, #0]
	}
 800aa36:	4618      	mov	r0, r3
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr
 800aa40:	20000e14 	.word	0x20000e14

0800aa44 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b086      	sub	sp, #24
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
 800aa50:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800aa52:	f000 fec7 	bl	800b7e4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800aa56:	4b29      	ldr	r3, [pc, #164]	; (800aafc <xTaskNotifyWait+0xb8>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	d01c      	beq.n	800aa9e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800aa64:	4b25      	ldr	r3, [pc, #148]	; (800aafc <xTaskNotifyWait+0xb8>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	43d2      	mvns	r2, r2
 800aa70:	400a      	ands	r2, r1
 800aa72:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800aa76:	4b21      	ldr	r3, [pc, #132]	; (800aafc <xTaskNotifyWait+0xb8>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00b      	beq.n	800aa9e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa86:	2101      	movs	r1, #1
 800aa88:	6838      	ldr	r0, [r7, #0]
 800aa8a:	f000 f9dd 	bl	800ae48 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800aa8e:	4b1c      	ldr	r3, [pc, #112]	; (800ab00 <xTaskNotifyWait+0xbc>)
 800aa90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa94:	601a      	str	r2, [r3, #0]
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800aa9e:	f000 fed1 	bl	800b844 <vPortExitCritical>

		taskENTER_CRITICAL();
 800aaa2:	f000 fe9f 	bl	800b7e4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d005      	beq.n	800aab8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800aaac:	4b13      	ldr	r3, [pc, #76]	; (800aafc <xTaskNotifyWait+0xb8>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800aab8:	4b10      	ldr	r3, [pc, #64]	; (800aafc <xTaskNotifyWait+0xb8>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d002      	beq.n	800aacc <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800aac6:	2300      	movs	r3, #0
 800aac8:	617b      	str	r3, [r7, #20]
 800aaca:	e00a      	b.n	800aae2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800aacc:	4b0b      	ldr	r3, [pc, #44]	; (800aafc <xTaskNotifyWait+0xb8>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800aad4:	68ba      	ldr	r2, [r7, #8]
 800aad6:	43d2      	mvns	r2, r2
 800aad8:	400a      	ands	r2, r1
 800aada:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800aade:	2301      	movs	r3, #1
 800aae0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aae2:	4b06      	ldr	r3, [pc, #24]	; (800aafc <xTaskNotifyWait+0xb8>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800aaec:	f000 feaa 	bl	800b844 <vPortExitCritical>

		return xReturn;
 800aaf0:	697b      	ldr	r3, [r7, #20]
	}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3718      	adds	r7, #24
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	20000e14 	.word	0x20000e14
 800ab00:	e000ed04 	.word	0xe000ed04

0800ab04 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b08a      	sub	sp, #40	; 0x28
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	603b      	str	r3, [r7, #0]
 800ab10:	4613      	mov	r3, r2
 800ab12:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800ab14:	2301      	movs	r3, #1
 800ab16:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d10a      	bne.n	800ab34 <xTaskGenericNotify+0x30>
	__asm volatile
 800ab1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	61bb      	str	r3, [r7, #24]
}
 800ab30:	bf00      	nop
 800ab32:	e7fe      	b.n	800ab32 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ab38:	f000 fe54 	bl	800b7e4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d004      	beq.n	800ab4c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ab42:	6a3b      	ldr	r3, [r7, #32]
 800ab44:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ab4c:	6a3b      	ldr	r3, [r7, #32]
 800ab4e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ab52:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ab54:	6a3b      	ldr	r3, [r7, #32]
 800ab56:	2202      	movs	r2, #2
 800ab58:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800ab5c:	79fb      	ldrb	r3, [r7, #7]
 800ab5e:	2b04      	cmp	r3, #4
 800ab60:	d82d      	bhi.n	800abbe <xTaskGenericNotify+0xba>
 800ab62:	a201      	add	r2, pc, #4	; (adr r2, 800ab68 <xTaskGenericNotify+0x64>)
 800ab64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab68:	0800abe1 	.word	0x0800abe1
 800ab6c:	0800ab7d 	.word	0x0800ab7d
 800ab70:	0800ab8f 	.word	0x0800ab8f
 800ab74:	0800ab9f 	.word	0x0800ab9f
 800ab78:	0800aba9 	.word	0x0800aba9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ab7c:	6a3b      	ldr	r3, [r7, #32]
 800ab7e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	431a      	orrs	r2, r3
 800ab86:	6a3b      	ldr	r3, [r7, #32]
 800ab88:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800ab8c:	e02b      	b.n	800abe6 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ab8e:	6a3b      	ldr	r3, [r7, #32]
 800ab90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ab94:	1c5a      	adds	r2, r3, #1
 800ab96:	6a3b      	ldr	r3, [r7, #32]
 800ab98:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800ab9c:	e023      	b.n	800abe6 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ab9e:	6a3b      	ldr	r3, [r7, #32]
 800aba0:	68ba      	ldr	r2, [r7, #8]
 800aba2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800aba6:	e01e      	b.n	800abe6 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800aba8:	7ffb      	ldrb	r3, [r7, #31]
 800abaa:	2b02      	cmp	r3, #2
 800abac:	d004      	beq.n	800abb8 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800abae:	6a3b      	ldr	r3, [r7, #32]
 800abb0:	68ba      	ldr	r2, [r7, #8]
 800abb2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800abb6:	e016      	b.n	800abe6 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800abb8:	2300      	movs	r3, #0
 800abba:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800abbc:	e013      	b.n	800abe6 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800abbe:	6a3b      	ldr	r3, [r7, #32]
 800abc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800abc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc8:	d00c      	beq.n	800abe4 <xTaskGenericNotify+0xe0>
	__asm volatile
 800abca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abce:	f383 8811 	msr	BASEPRI, r3
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	f3bf 8f4f 	dsb	sy
 800abda:	617b      	str	r3, [r7, #20]
}
 800abdc:	bf00      	nop
 800abde:	e7fe      	b.n	800abde <xTaskGenericNotify+0xda>
					break;
 800abe0:	bf00      	nop
 800abe2:	e000      	b.n	800abe6 <xTaskGenericNotify+0xe2>

					break;
 800abe4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800abe6:	7ffb      	ldrb	r3, [r7, #31]
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d13a      	bne.n	800ac62 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abec:	6a3b      	ldr	r3, [r7, #32]
 800abee:	3304      	adds	r3, #4
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7fd ff0b 	bl	8008a0c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800abf6:	6a3b      	ldr	r3, [r7, #32]
 800abf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abfa:	4b1d      	ldr	r3, [pc, #116]	; (800ac70 <xTaskGenericNotify+0x16c>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d903      	bls.n	800ac0a <xTaskGenericNotify+0x106>
 800ac02:	6a3b      	ldr	r3, [r7, #32]
 800ac04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac06:	4a1a      	ldr	r2, [pc, #104]	; (800ac70 <xTaskGenericNotify+0x16c>)
 800ac08:	6013      	str	r3, [r2, #0]
 800ac0a:	6a3b      	ldr	r3, [r7, #32]
 800ac0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac0e:	4613      	mov	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	4413      	add	r3, r2
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	4a17      	ldr	r2, [pc, #92]	; (800ac74 <xTaskGenericNotify+0x170>)
 800ac18:	441a      	add	r2, r3
 800ac1a:	6a3b      	ldr	r3, [r7, #32]
 800ac1c:	3304      	adds	r3, #4
 800ac1e:	4619      	mov	r1, r3
 800ac20:	4610      	mov	r0, r2
 800ac22:	f7fd fe96 	bl	8008952 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ac26:	6a3b      	ldr	r3, [r7, #32]
 800ac28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00a      	beq.n	800ac44 <xTaskGenericNotify+0x140>
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	613b      	str	r3, [r7, #16]
}
 800ac40:	bf00      	nop
 800ac42:	e7fe      	b.n	800ac42 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac44:	6a3b      	ldr	r3, [r7, #32]
 800ac46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac48:	4b0b      	ldr	r3, [pc, #44]	; (800ac78 <xTaskGenericNotify+0x174>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d907      	bls.n	800ac62 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800ac52:	4b0a      	ldr	r3, [pc, #40]	; (800ac7c <xTaskGenericNotify+0x178>)
 800ac54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac58:	601a      	str	r2, [r3, #0]
 800ac5a:	f3bf 8f4f 	dsb	sy
 800ac5e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ac62:	f000 fdef 	bl	800b844 <vPortExitCritical>

		return xReturn;
 800ac66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3728      	adds	r7, #40	; 0x28
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	200012f0 	.word	0x200012f0
 800ac74:	20000e18 	.word	0x20000e18
 800ac78:	20000e14 	.word	0x20000e14
 800ac7c:	e000ed04 	.word	0xe000ed04

0800ac80 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b08e      	sub	sp, #56	; 0x38
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	603b      	str	r3, [r7, #0]
 800ac8c:	4613      	mov	r3, r2
 800ac8e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800ac90:	2301      	movs	r3, #1
 800ac92:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d10a      	bne.n	800acb0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800ac9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9e:	f383 8811 	msr	BASEPRI, r3
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800acac:	bf00      	nop
 800acae:	e7fe      	b.n	800acae <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800acb0:	f000 fe7a 	bl	800b9a8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800acb8:	f3ef 8211 	mrs	r2, BASEPRI
 800acbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc0:	f383 8811 	msr	BASEPRI, r3
 800acc4:	f3bf 8f6f 	isb	sy
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	623a      	str	r2, [r7, #32]
 800acce:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800acd0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800acd2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d004      	beq.n	800ace4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800acda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acdc:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ace4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800acea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800acee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf0:	2202      	movs	r2, #2
 800acf2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800acf6:	79fb      	ldrb	r3, [r7, #7]
 800acf8:	2b04      	cmp	r3, #4
 800acfa:	d82f      	bhi.n	800ad5c <xTaskGenericNotifyFromISR+0xdc>
 800acfc:	a201      	add	r2, pc, #4	; (adr r2, 800ad04 <xTaskGenericNotifyFromISR+0x84>)
 800acfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad02:	bf00      	nop
 800ad04:	0800ad7f 	.word	0x0800ad7f
 800ad08:	0800ad19 	.word	0x0800ad19
 800ad0c:	0800ad2b 	.word	0x0800ad2b
 800ad10:	0800ad3b 	.word	0x0800ad3b
 800ad14:	0800ad45 	.word	0x0800ad45
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ad18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	431a      	orrs	r2, r3
 800ad22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad24:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800ad28:	e02c      	b.n	800ad84 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ad2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ad30:	1c5a      	adds	r2, r3, #1
 800ad32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad34:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800ad38:	e024      	b.n	800ad84 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3c:	68ba      	ldr	r2, [r7, #8]
 800ad3e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800ad42:	e01f      	b.n	800ad84 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ad44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d004      	beq.n	800ad56 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ad4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4e:	68ba      	ldr	r2, [r7, #8]
 800ad50:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ad54:	e016      	b.n	800ad84 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800ad56:	2300      	movs	r3, #0
 800ad58:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800ad5a:	e013      	b.n	800ad84 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ad5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ad62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad66:	d00c      	beq.n	800ad82 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800ad68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	61bb      	str	r3, [r7, #24]
}
 800ad7a:	bf00      	nop
 800ad7c:	e7fe      	b.n	800ad7c <xTaskGenericNotifyFromISR+0xfc>
					break;
 800ad7e:	bf00      	nop
 800ad80:	e000      	b.n	800ad84 <xTaskGenericNotifyFromISR+0x104>
					break;
 800ad82:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ad84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d146      	bne.n	800ae1a <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ad8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00a      	beq.n	800adaa <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800ad94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad98:	f383 8811 	msr	BASEPRI, r3
 800ad9c:	f3bf 8f6f 	isb	sy
 800ada0:	f3bf 8f4f 	dsb	sy
 800ada4:	617b      	str	r3, [r7, #20]
}
 800ada6:	bf00      	nop
 800ada8:	e7fe      	b.n	800ada8 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adaa:	4b21      	ldr	r3, [pc, #132]	; (800ae30 <xTaskGenericNotifyFromISR+0x1b0>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d11d      	bne.n	800adee <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb4:	3304      	adds	r3, #4
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7fd fe28 	bl	8008a0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800adbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adc0:	4b1c      	ldr	r3, [pc, #112]	; (800ae34 <xTaskGenericNotifyFromISR+0x1b4>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d903      	bls.n	800add0 <xTaskGenericNotifyFromISR+0x150>
 800adc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adcc:	4a19      	ldr	r2, [pc, #100]	; (800ae34 <xTaskGenericNotifyFromISR+0x1b4>)
 800adce:	6013      	str	r3, [r2, #0]
 800add0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800add4:	4613      	mov	r3, r2
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	4413      	add	r3, r2
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	4a16      	ldr	r2, [pc, #88]	; (800ae38 <xTaskGenericNotifyFromISR+0x1b8>)
 800adde:	441a      	add	r2, r3
 800ade0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade2:	3304      	adds	r3, #4
 800ade4:	4619      	mov	r1, r3
 800ade6:	4610      	mov	r0, r2
 800ade8:	f7fd fdb3 	bl	8008952 <vListInsertEnd>
 800adec:	e005      	b.n	800adfa <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800adee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf0:	3318      	adds	r3, #24
 800adf2:	4619      	mov	r1, r3
 800adf4:	4811      	ldr	r0, [pc, #68]	; (800ae3c <xTaskGenericNotifyFromISR+0x1bc>)
 800adf6:	f7fd fdac 	bl	8008952 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800adfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adfe:	4b10      	ldr	r3, [pc, #64]	; (800ae40 <xTaskGenericNotifyFromISR+0x1c0>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d908      	bls.n	800ae1a <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800ae08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d002      	beq.n	800ae14 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800ae0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae10:	2201      	movs	r2, #1
 800ae12:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800ae14:	4b0b      	ldr	r3, [pc, #44]	; (800ae44 <xTaskGenericNotifyFromISR+0x1c4>)
 800ae16:	2201      	movs	r2, #1
 800ae18:	601a      	str	r2, [r3, #0]
 800ae1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae1c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	f383 8811 	msr	BASEPRI, r3
}
 800ae24:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800ae26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3738      	adds	r7, #56	; 0x38
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}
 800ae30:	20001310 	.word	0x20001310
 800ae34:	200012f0 	.word	0x200012f0
 800ae38:	20000e18 	.word	0x20000e18
 800ae3c:	200012a8 	.word	0x200012a8
 800ae40:	20000e14 	.word	0x20000e14
 800ae44:	200012fc 	.word	0x200012fc

0800ae48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ae52:	4b21      	ldr	r3, [pc, #132]	; (800aed8 <prvAddCurrentTaskToDelayedList+0x90>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae58:	4b20      	ldr	r3, [pc, #128]	; (800aedc <prvAddCurrentTaskToDelayedList+0x94>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	3304      	adds	r3, #4
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7fd fdd4 	bl	8008a0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae6a:	d10a      	bne.n	800ae82 <prvAddCurrentTaskToDelayedList+0x3a>
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d007      	beq.n	800ae82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae72:	4b1a      	ldr	r3, [pc, #104]	; (800aedc <prvAddCurrentTaskToDelayedList+0x94>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	3304      	adds	r3, #4
 800ae78:	4619      	mov	r1, r3
 800ae7a:	4819      	ldr	r0, [pc, #100]	; (800aee0 <prvAddCurrentTaskToDelayedList+0x98>)
 800ae7c:	f7fd fd69 	bl	8008952 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ae80:	e026      	b.n	800aed0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	4413      	add	r3, r2
 800ae88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ae8a:	4b14      	ldr	r3, [pc, #80]	; (800aedc <prvAddCurrentTaskToDelayedList+0x94>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	68ba      	ldr	r2, [r7, #8]
 800ae90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ae92:	68ba      	ldr	r2, [r7, #8]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d209      	bcs.n	800aeae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae9a:	4b12      	ldr	r3, [pc, #72]	; (800aee4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	4b0f      	ldr	r3, [pc, #60]	; (800aedc <prvAddCurrentTaskToDelayedList+0x94>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	3304      	adds	r3, #4
 800aea4:	4619      	mov	r1, r3
 800aea6:	4610      	mov	r0, r2
 800aea8:	f7fd fd77 	bl	800899a <vListInsert>
}
 800aeac:	e010      	b.n	800aed0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aeae:	4b0e      	ldr	r3, [pc, #56]	; (800aee8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	4b0a      	ldr	r3, [pc, #40]	; (800aedc <prvAddCurrentTaskToDelayedList+0x94>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	3304      	adds	r3, #4
 800aeb8:	4619      	mov	r1, r3
 800aeba:	4610      	mov	r0, r2
 800aebc:	f7fd fd6d 	bl	800899a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aec0:	4b0a      	ldr	r3, [pc, #40]	; (800aeec <prvAddCurrentTaskToDelayedList+0xa4>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	68ba      	ldr	r2, [r7, #8]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d202      	bcs.n	800aed0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aeca:	4a08      	ldr	r2, [pc, #32]	; (800aeec <prvAddCurrentTaskToDelayedList+0xa4>)
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	6013      	str	r3, [r2, #0]
}
 800aed0:	bf00      	nop
 800aed2:	3710      	adds	r7, #16
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	200012ec 	.word	0x200012ec
 800aedc:	20000e14 	.word	0x20000e14
 800aee0:	200012d4 	.word	0x200012d4
 800aee4:	200012a4 	.word	0x200012a4
 800aee8:	200012a0 	.word	0x200012a0
 800aeec:	20001308 	.word	0x20001308

0800aef0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b08a      	sub	sp, #40	; 0x28
 800aef4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aef6:	2300      	movs	r3, #0
 800aef8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aefa:	f000 fb07 	bl	800b50c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aefe:	4b1c      	ldr	r3, [pc, #112]	; (800af70 <xTimerCreateTimerTask+0x80>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d021      	beq.n	800af4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800af06:	2300      	movs	r3, #0
 800af08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800af0a:	2300      	movs	r3, #0
 800af0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800af0e:	1d3a      	adds	r2, r7, #4
 800af10:	f107 0108 	add.w	r1, r7, #8
 800af14:	f107 030c 	add.w	r3, r7, #12
 800af18:	4618      	mov	r0, r3
 800af1a:	f7fd fcd3 	bl	80088c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800af1e:	6879      	ldr	r1, [r7, #4]
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	68fa      	ldr	r2, [r7, #12]
 800af24:	9202      	str	r2, [sp, #8]
 800af26:	9301      	str	r3, [sp, #4]
 800af28:	2302      	movs	r3, #2
 800af2a:	9300      	str	r3, [sp, #0]
 800af2c:	2300      	movs	r3, #0
 800af2e:	460a      	mov	r2, r1
 800af30:	4910      	ldr	r1, [pc, #64]	; (800af74 <xTimerCreateTimerTask+0x84>)
 800af32:	4811      	ldr	r0, [pc, #68]	; (800af78 <xTimerCreateTimerTask+0x88>)
 800af34:	f7fe fda2 	bl	8009a7c <xTaskCreateStatic>
 800af38:	4603      	mov	r3, r0
 800af3a:	4a10      	ldr	r2, [pc, #64]	; (800af7c <xTimerCreateTimerTask+0x8c>)
 800af3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800af3e:	4b0f      	ldr	r3, [pc, #60]	; (800af7c <xTimerCreateTimerTask+0x8c>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d001      	beq.n	800af4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800af46:	2301      	movs	r3, #1
 800af48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d10a      	bne.n	800af66 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800af50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af54:	f383 8811 	msr	BASEPRI, r3
 800af58:	f3bf 8f6f 	isb	sy
 800af5c:	f3bf 8f4f 	dsb	sy
 800af60:	613b      	str	r3, [r7, #16]
}
 800af62:	bf00      	nop
 800af64:	e7fe      	b.n	800af64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800af66:	697b      	ldr	r3, [r7, #20]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3718      	adds	r7, #24
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	20001344 	.word	0x20001344
 800af74:	0802c2d4 	.word	0x0802c2d4
 800af78:	0800b0b5 	.word	0x0800b0b5
 800af7c:	20001348 	.word	0x20001348

0800af80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b08a      	sub	sp, #40	; 0x28
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	607a      	str	r2, [r7, #4]
 800af8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800af8e:	2300      	movs	r3, #0
 800af90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10a      	bne.n	800afae <xTimerGenericCommand+0x2e>
	__asm volatile
 800af98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9c:	f383 8811 	msr	BASEPRI, r3
 800afa0:	f3bf 8f6f 	isb	sy
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	623b      	str	r3, [r7, #32]
}
 800afaa:	bf00      	nop
 800afac:	e7fe      	b.n	800afac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800afae:	4b1a      	ldr	r3, [pc, #104]	; (800b018 <xTimerGenericCommand+0x98>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d02a      	beq.n	800b00c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	2b05      	cmp	r3, #5
 800afc6:	dc18      	bgt.n	800affa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800afc8:	f7ff fbb2 	bl	800a730 <xTaskGetSchedulerState>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b02      	cmp	r3, #2
 800afd0:	d109      	bne.n	800afe6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800afd2:	4b11      	ldr	r3, [pc, #68]	; (800b018 <xTimerGenericCommand+0x98>)
 800afd4:	6818      	ldr	r0, [r3, #0]
 800afd6:	f107 0110 	add.w	r1, r7, #16
 800afda:	2300      	movs	r3, #0
 800afdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afde:	f7fd fee7 	bl	8008db0 <xQueueGenericSend>
 800afe2:	6278      	str	r0, [r7, #36]	; 0x24
 800afe4:	e012      	b.n	800b00c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800afe6:	4b0c      	ldr	r3, [pc, #48]	; (800b018 <xTimerGenericCommand+0x98>)
 800afe8:	6818      	ldr	r0, [r3, #0]
 800afea:	f107 0110 	add.w	r1, r7, #16
 800afee:	2300      	movs	r3, #0
 800aff0:	2200      	movs	r2, #0
 800aff2:	f7fd fedd 	bl	8008db0 <xQueueGenericSend>
 800aff6:	6278      	str	r0, [r7, #36]	; 0x24
 800aff8:	e008      	b.n	800b00c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800affa:	4b07      	ldr	r3, [pc, #28]	; (800b018 <xTimerGenericCommand+0x98>)
 800affc:	6818      	ldr	r0, [r3, #0]
 800affe:	f107 0110 	add.w	r1, r7, #16
 800b002:	2300      	movs	r3, #0
 800b004:	683a      	ldr	r2, [r7, #0]
 800b006:	f7fd ffd1 	bl	8008fac <xQueueGenericSendFromISR>
 800b00a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3728      	adds	r7, #40	; 0x28
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	20001344 	.word	0x20001344

0800b01c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b088      	sub	sp, #32
 800b020:	af02      	add	r7, sp, #8
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b026:	4b22      	ldr	r3, [pc, #136]	; (800b0b0 <prvProcessExpiredTimer+0x94>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	68db      	ldr	r3, [r3, #12]
 800b02e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	3304      	adds	r3, #4
 800b034:	4618      	mov	r0, r3
 800b036:	f7fd fce9 	bl	8008a0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b040:	f003 0304 	and.w	r3, r3, #4
 800b044:	2b00      	cmp	r3, #0
 800b046:	d022      	beq.n	800b08e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	699a      	ldr	r2, [r3, #24]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	18d1      	adds	r1, r2, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	683a      	ldr	r2, [r7, #0]
 800b054:	6978      	ldr	r0, [r7, #20]
 800b056:	f000 f8d1 	bl	800b1fc <prvInsertTimerInActiveList>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d01f      	beq.n	800b0a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b060:	2300      	movs	r3, #0
 800b062:	9300      	str	r3, [sp, #0]
 800b064:	2300      	movs	r3, #0
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	2100      	movs	r1, #0
 800b06a:	6978      	ldr	r0, [r7, #20]
 800b06c:	f7ff ff88 	bl	800af80 <xTimerGenericCommand>
 800b070:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d113      	bne.n	800b0a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07c:	f383 8811 	msr	BASEPRI, r3
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	f3bf 8f4f 	dsb	sy
 800b088:	60fb      	str	r3, [r7, #12]
}
 800b08a:	bf00      	nop
 800b08c:	e7fe      	b.n	800b08c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b094:	f023 0301 	bic.w	r3, r3, #1
 800b098:	b2da      	uxtb	r2, r3
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	6a1b      	ldr	r3, [r3, #32]
 800b0a4:	6978      	ldr	r0, [r7, #20]
 800b0a6:	4798      	blx	r3
}
 800b0a8:	bf00      	nop
 800b0aa:	3718      	adds	r7, #24
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	2000133c 	.word	0x2000133c

0800b0b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b0bc:	f107 0308 	add.w	r3, r7, #8
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f000 f857 	bl	800b174 <prvGetNextExpireTime>
 800b0c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	68f8      	ldr	r0, [r7, #12]
 800b0ce:	f000 f803 	bl	800b0d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b0d2:	f000 f8d5 	bl	800b280 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b0d6:	e7f1      	b.n	800b0bc <prvTimerTask+0x8>

0800b0d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b0e2:	f7fe ff27 	bl	8009f34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b0e6:	f107 0308 	add.w	r3, r7, #8
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f000 f866 	bl	800b1bc <prvSampleTimeNow>
 800b0f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d130      	bne.n	800b15a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d10a      	bne.n	800b114 <prvProcessTimerOrBlockTask+0x3c>
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	429a      	cmp	r2, r3
 800b104:	d806      	bhi.n	800b114 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b106:	f7fe ff23 	bl	8009f50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b10a:	68f9      	ldr	r1, [r7, #12]
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f7ff ff85 	bl	800b01c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b112:	e024      	b.n	800b15e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d008      	beq.n	800b12c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b11a:	4b13      	ldr	r3, [pc, #76]	; (800b168 <prvProcessTimerOrBlockTask+0x90>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d101      	bne.n	800b128 <prvProcessTimerOrBlockTask+0x50>
 800b124:	2301      	movs	r3, #1
 800b126:	e000      	b.n	800b12a <prvProcessTimerOrBlockTask+0x52>
 800b128:	2300      	movs	r3, #0
 800b12a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b12c:	4b0f      	ldr	r3, [pc, #60]	; (800b16c <prvProcessTimerOrBlockTask+0x94>)
 800b12e:	6818      	ldr	r0, [r3, #0]
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	1ad3      	subs	r3, r2, r3
 800b136:	683a      	ldr	r2, [r7, #0]
 800b138:	4619      	mov	r1, r3
 800b13a:	f7fe fc6b 	bl	8009a14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b13e:	f7fe ff07 	bl	8009f50 <xTaskResumeAll>
 800b142:	4603      	mov	r3, r0
 800b144:	2b00      	cmp	r3, #0
 800b146:	d10a      	bne.n	800b15e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b148:	4b09      	ldr	r3, [pc, #36]	; (800b170 <prvProcessTimerOrBlockTask+0x98>)
 800b14a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b14e:	601a      	str	r2, [r3, #0]
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	f3bf 8f6f 	isb	sy
}
 800b158:	e001      	b.n	800b15e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b15a:	f7fe fef9 	bl	8009f50 <xTaskResumeAll>
}
 800b15e:	bf00      	nop
 800b160:	3710      	adds	r7, #16
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop
 800b168:	20001340 	.word	0x20001340
 800b16c:	20001344 	.word	0x20001344
 800b170:	e000ed04 	.word	0xe000ed04

0800b174 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b17c:	4b0e      	ldr	r3, [pc, #56]	; (800b1b8 <prvGetNextExpireTime+0x44>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d101      	bne.n	800b18a <prvGetNextExpireTime+0x16>
 800b186:	2201      	movs	r2, #1
 800b188:	e000      	b.n	800b18c <prvGetNextExpireTime+0x18>
 800b18a:	2200      	movs	r2, #0
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d105      	bne.n	800b1a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b198:	4b07      	ldr	r3, [pc, #28]	; (800b1b8 <prvGetNextExpireTime+0x44>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	60fb      	str	r3, [r7, #12]
 800b1a2:	e001      	b.n	800b1a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3714      	adds	r7, #20
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	2000133c 	.word	0x2000133c

0800b1bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b1c4:	f7fe ff62 	bl	800a08c <xTaskGetTickCount>
 800b1c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b1ca:	4b0b      	ldr	r3, [pc, #44]	; (800b1f8 <prvSampleTimeNow+0x3c>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d205      	bcs.n	800b1e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b1d4:	f000 f936 	bl	800b444 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	601a      	str	r2, [r3, #0]
 800b1de:	e002      	b.n	800b1e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b1e6:	4a04      	ldr	r2, [pc, #16]	; (800b1f8 <prvSampleTimeNow+0x3c>)
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3710      	adds	r7, #16
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	2000134c 	.word	0x2000134c

0800b1fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	607a      	str	r2, [r7, #4]
 800b208:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b20a:	2300      	movs	r3, #0
 800b20c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b21a:	68ba      	ldr	r2, [r7, #8]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d812      	bhi.n	800b248 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	1ad2      	subs	r2, r2, r3
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	699b      	ldr	r3, [r3, #24]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d302      	bcc.n	800b236 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b230:	2301      	movs	r3, #1
 800b232:	617b      	str	r3, [r7, #20]
 800b234:	e01b      	b.n	800b26e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b236:	4b10      	ldr	r3, [pc, #64]	; (800b278 <prvInsertTimerInActiveList+0x7c>)
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	3304      	adds	r3, #4
 800b23e:	4619      	mov	r1, r3
 800b240:	4610      	mov	r0, r2
 800b242:	f7fd fbaa 	bl	800899a <vListInsert>
 800b246:	e012      	b.n	800b26e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d206      	bcs.n	800b25e <prvInsertTimerInActiveList+0x62>
 800b250:	68ba      	ldr	r2, [r7, #8]
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	429a      	cmp	r2, r3
 800b256:	d302      	bcc.n	800b25e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b258:	2301      	movs	r3, #1
 800b25a:	617b      	str	r3, [r7, #20]
 800b25c:	e007      	b.n	800b26e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b25e:	4b07      	ldr	r3, [pc, #28]	; (800b27c <prvInsertTimerInActiveList+0x80>)
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	3304      	adds	r3, #4
 800b266:	4619      	mov	r1, r3
 800b268:	4610      	mov	r0, r2
 800b26a:	f7fd fb96 	bl	800899a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b26e:	697b      	ldr	r3, [r7, #20]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3718      	adds	r7, #24
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}
 800b278:	20001340 	.word	0x20001340
 800b27c:	2000133c 	.word	0x2000133c

0800b280 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b08e      	sub	sp, #56	; 0x38
 800b284:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b286:	e0ca      	b.n	800b41e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	da18      	bge.n	800b2c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b28e:	1d3b      	adds	r3, r7, #4
 800b290:	3304      	adds	r3, #4
 800b292:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b296:	2b00      	cmp	r3, #0
 800b298:	d10a      	bne.n	800b2b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29e:	f383 8811 	msr	BASEPRI, r3
 800b2a2:	f3bf 8f6f 	isb	sy
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	61fb      	str	r3, [r7, #28]
}
 800b2ac:	bf00      	nop
 800b2ae:	e7fe      	b.n	800b2ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2b6:	6850      	ldr	r0, [r2, #4]
 800b2b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2ba:	6892      	ldr	r2, [r2, #8]
 800b2bc:	4611      	mov	r1, r2
 800b2be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	f2c0 80aa 	blt.w	800b41c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ce:	695b      	ldr	r3, [r3, #20]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d004      	beq.n	800b2de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d6:	3304      	adds	r3, #4
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7fd fb97 	bl	8008a0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b2de:	463b      	mov	r3, r7
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7ff ff6b 	bl	800b1bc <prvSampleTimeNow>
 800b2e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b09      	cmp	r3, #9
 800b2ec:	f200 8097 	bhi.w	800b41e <prvProcessReceivedCommands+0x19e>
 800b2f0:	a201      	add	r2, pc, #4	; (adr r2, 800b2f8 <prvProcessReceivedCommands+0x78>)
 800b2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f6:	bf00      	nop
 800b2f8:	0800b321 	.word	0x0800b321
 800b2fc:	0800b321 	.word	0x0800b321
 800b300:	0800b321 	.word	0x0800b321
 800b304:	0800b395 	.word	0x0800b395
 800b308:	0800b3a9 	.word	0x0800b3a9
 800b30c:	0800b3f3 	.word	0x0800b3f3
 800b310:	0800b321 	.word	0x0800b321
 800b314:	0800b321 	.word	0x0800b321
 800b318:	0800b395 	.word	0x0800b395
 800b31c:	0800b3a9 	.word	0x0800b3a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b322:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b326:	f043 0301 	orr.w	r3, r3, #1
 800b32a:	b2da      	uxtb	r2, r3
 800b32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b32e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b332:	68ba      	ldr	r2, [r7, #8]
 800b334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b336:	699b      	ldr	r3, [r3, #24]
 800b338:	18d1      	adds	r1, r2, r3
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b33e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b340:	f7ff ff5c 	bl	800b1fc <prvInsertTimerInActiveList>
 800b344:	4603      	mov	r3, r0
 800b346:	2b00      	cmp	r3, #0
 800b348:	d069      	beq.n	800b41e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34c:	6a1b      	ldr	r3, [r3, #32]
 800b34e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b350:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b358:	f003 0304 	and.w	r3, r3, #4
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d05e      	beq.n	800b41e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b360:	68ba      	ldr	r2, [r7, #8]
 800b362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b364:	699b      	ldr	r3, [r3, #24]
 800b366:	441a      	add	r2, r3
 800b368:	2300      	movs	r3, #0
 800b36a:	9300      	str	r3, [sp, #0]
 800b36c:	2300      	movs	r3, #0
 800b36e:	2100      	movs	r1, #0
 800b370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b372:	f7ff fe05 	bl	800af80 <xTimerGenericCommand>
 800b376:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b378:	6a3b      	ldr	r3, [r7, #32]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d14f      	bne.n	800b41e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b382:	f383 8811 	msr	BASEPRI, r3
 800b386:	f3bf 8f6f 	isb	sy
 800b38a:	f3bf 8f4f 	dsb	sy
 800b38e:	61bb      	str	r3, [r7, #24]
}
 800b390:	bf00      	nop
 800b392:	e7fe      	b.n	800b392 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b396:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b39a:	f023 0301 	bic.w	r3, r3, #1
 800b39e:	b2da      	uxtb	r2, r3
 800b3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b3a6:	e03a      	b.n	800b41e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3ae:	f043 0301 	orr.w	r3, r3, #1
 800b3b2:	b2da      	uxtb	r2, r3
 800b3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b3ba:	68ba      	ldr	r2, [r7, #8]
 800b3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c2:	699b      	ldr	r3, [r3, #24]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d10a      	bne.n	800b3de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3cc:	f383 8811 	msr	BASEPRI, r3
 800b3d0:	f3bf 8f6f 	isb	sy
 800b3d4:	f3bf 8f4f 	dsb	sy
 800b3d8:	617b      	str	r3, [r7, #20]
}
 800b3da:	bf00      	nop
 800b3dc:	e7fe      	b.n	800b3dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e0:	699a      	ldr	r2, [r3, #24]
 800b3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e4:	18d1      	adds	r1, r2, r3
 800b3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3ec:	f7ff ff06 	bl	800b1fc <prvInsertTimerInActiveList>
					break;
 800b3f0:	e015      	b.n	800b41e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3f8:	f003 0302 	and.w	r3, r3, #2
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d103      	bne.n	800b408 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b402:	f000 fbdd 	bl	800bbc0 <vPortFree>
 800b406:	e00a      	b.n	800b41e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b40a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b40e:	f023 0301 	bic.w	r3, r3, #1
 800b412:	b2da      	uxtb	r2, r3
 800b414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b416:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b41a:	e000      	b.n	800b41e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b41c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b41e:	4b08      	ldr	r3, [pc, #32]	; (800b440 <prvProcessReceivedCommands+0x1c0>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	1d39      	adds	r1, r7, #4
 800b424:	2200      	movs	r2, #0
 800b426:	4618      	mov	r0, r3
 800b428:	f7fd fee8 	bl	80091fc <xQueueReceive>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f47f af2a 	bne.w	800b288 <prvProcessReceivedCommands+0x8>
	}
}
 800b434:	bf00      	nop
 800b436:	bf00      	nop
 800b438:	3730      	adds	r7, #48	; 0x30
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	20001344 	.word	0x20001344

0800b444 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b088      	sub	sp, #32
 800b448:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b44a:	e048      	b.n	800b4de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b44c:	4b2d      	ldr	r3, [pc, #180]	; (800b504 <prvSwitchTimerLists+0xc0>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	68db      	ldr	r3, [r3, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b456:	4b2b      	ldr	r3, [pc, #172]	; (800b504 <prvSwitchTimerLists+0xc0>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	68db      	ldr	r3, [r3, #12]
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	3304      	adds	r3, #4
 800b464:	4618      	mov	r0, r3
 800b466:	f7fd fad1 	bl	8008a0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	6a1b      	ldr	r3, [r3, #32]
 800b46e:	68f8      	ldr	r0, [r7, #12]
 800b470:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b478:	f003 0304 	and.w	r3, r3, #4
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d02e      	beq.n	800b4de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	699b      	ldr	r3, [r3, #24]
 800b484:	693a      	ldr	r2, [r7, #16]
 800b486:	4413      	add	r3, r2
 800b488:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b48a:	68ba      	ldr	r2, [r7, #8]
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d90e      	bls.n	800b4b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	68ba      	ldr	r2, [r7, #8]
 800b496:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	68fa      	ldr	r2, [r7, #12]
 800b49c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b49e:	4b19      	ldr	r3, [pc, #100]	; (800b504 <prvSwitchTimerLists+0xc0>)
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	3304      	adds	r3, #4
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	4610      	mov	r0, r2
 800b4aa:	f7fd fa76 	bl	800899a <vListInsert>
 800b4ae:	e016      	b.n	800b4de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	9300      	str	r3, [sp, #0]
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	693a      	ldr	r2, [r7, #16]
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	68f8      	ldr	r0, [r7, #12]
 800b4bc:	f7ff fd60 	bl	800af80 <xTimerGenericCommand>
 800b4c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d10a      	bne.n	800b4de <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4cc:	f383 8811 	msr	BASEPRI, r3
 800b4d0:	f3bf 8f6f 	isb	sy
 800b4d4:	f3bf 8f4f 	dsb	sy
 800b4d8:	603b      	str	r3, [r7, #0]
}
 800b4da:	bf00      	nop
 800b4dc:	e7fe      	b.n	800b4dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b4de:	4b09      	ldr	r3, [pc, #36]	; (800b504 <prvSwitchTimerLists+0xc0>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d1b1      	bne.n	800b44c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b4e8:	4b06      	ldr	r3, [pc, #24]	; (800b504 <prvSwitchTimerLists+0xc0>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b4ee:	4b06      	ldr	r3, [pc, #24]	; (800b508 <prvSwitchTimerLists+0xc4>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a04      	ldr	r2, [pc, #16]	; (800b504 <prvSwitchTimerLists+0xc0>)
 800b4f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b4f6:	4a04      	ldr	r2, [pc, #16]	; (800b508 <prvSwitchTimerLists+0xc4>)
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	6013      	str	r3, [r2, #0]
}
 800b4fc:	bf00      	nop
 800b4fe:	3718      	adds	r7, #24
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	2000133c 	.word	0x2000133c
 800b508:	20001340 	.word	0x20001340

0800b50c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b512:	f000 f967 	bl	800b7e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b516:	4b15      	ldr	r3, [pc, #84]	; (800b56c <prvCheckForValidListAndQueue+0x60>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d120      	bne.n	800b560 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b51e:	4814      	ldr	r0, [pc, #80]	; (800b570 <prvCheckForValidListAndQueue+0x64>)
 800b520:	f7fd f9ea 	bl	80088f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b524:	4813      	ldr	r0, [pc, #76]	; (800b574 <prvCheckForValidListAndQueue+0x68>)
 800b526:	f7fd f9e7 	bl	80088f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b52a:	4b13      	ldr	r3, [pc, #76]	; (800b578 <prvCheckForValidListAndQueue+0x6c>)
 800b52c:	4a10      	ldr	r2, [pc, #64]	; (800b570 <prvCheckForValidListAndQueue+0x64>)
 800b52e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b530:	4b12      	ldr	r3, [pc, #72]	; (800b57c <prvCheckForValidListAndQueue+0x70>)
 800b532:	4a10      	ldr	r2, [pc, #64]	; (800b574 <prvCheckForValidListAndQueue+0x68>)
 800b534:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b536:	2300      	movs	r3, #0
 800b538:	9300      	str	r3, [sp, #0]
 800b53a:	4b11      	ldr	r3, [pc, #68]	; (800b580 <prvCheckForValidListAndQueue+0x74>)
 800b53c:	4a11      	ldr	r2, [pc, #68]	; (800b584 <prvCheckForValidListAndQueue+0x78>)
 800b53e:	2110      	movs	r1, #16
 800b540:	200a      	movs	r0, #10
 800b542:	f7fd faf5 	bl	8008b30 <xQueueGenericCreateStatic>
 800b546:	4603      	mov	r3, r0
 800b548:	4a08      	ldr	r2, [pc, #32]	; (800b56c <prvCheckForValidListAndQueue+0x60>)
 800b54a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b54c:	4b07      	ldr	r3, [pc, #28]	; (800b56c <prvCheckForValidListAndQueue+0x60>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d005      	beq.n	800b560 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b554:	4b05      	ldr	r3, [pc, #20]	; (800b56c <prvCheckForValidListAndQueue+0x60>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	490b      	ldr	r1, [pc, #44]	; (800b588 <prvCheckForValidListAndQueue+0x7c>)
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7fe fa06 	bl	800996c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b560:	f000 f970 	bl	800b844 <vPortExitCritical>
}
 800b564:	bf00      	nop
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	20001344 	.word	0x20001344
 800b570:	20001314 	.word	0x20001314
 800b574:	20001328 	.word	0x20001328
 800b578:	2000133c 	.word	0x2000133c
 800b57c:	20001340 	.word	0x20001340
 800b580:	200013f0 	.word	0x200013f0
 800b584:	20001350 	.word	0x20001350
 800b588:	0802c2dc 	.word	0x0802c2dc

0800b58c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b58c:	b480      	push	{r7}
 800b58e:	b085      	sub	sp, #20
 800b590:	af00      	add	r7, sp, #0
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	3b04      	subs	r3, #4
 800b59c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b5a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	3b04      	subs	r3, #4
 800b5aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	f023 0201 	bic.w	r2, r3, #1
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	3b04      	subs	r3, #4
 800b5ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b5bc:	4a0c      	ldr	r2, [pc, #48]	; (800b5f0 <pxPortInitialiseStack+0x64>)
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	3b14      	subs	r3, #20
 800b5c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b5c8:	687a      	ldr	r2, [r7, #4]
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	3b04      	subs	r3, #4
 800b5d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f06f 0202 	mvn.w	r2, #2
 800b5da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	3b20      	subs	r3, #32
 800b5e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3714      	adds	r7, #20
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr
 800b5f0:	0800b5f5 	.word	0x0800b5f5

0800b5f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b085      	sub	sp, #20
 800b5f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b5fe:	4b12      	ldr	r3, [pc, #72]	; (800b648 <prvTaskExitError+0x54>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b606:	d00a      	beq.n	800b61e <prvTaskExitError+0x2a>
	__asm volatile
 800b608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60c:	f383 8811 	msr	BASEPRI, r3
 800b610:	f3bf 8f6f 	isb	sy
 800b614:	f3bf 8f4f 	dsb	sy
 800b618:	60fb      	str	r3, [r7, #12]
}
 800b61a:	bf00      	nop
 800b61c:	e7fe      	b.n	800b61c <prvTaskExitError+0x28>
	__asm volatile
 800b61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b622:	f383 8811 	msr	BASEPRI, r3
 800b626:	f3bf 8f6f 	isb	sy
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	60bb      	str	r3, [r7, #8]
}
 800b630:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b632:	bf00      	nop
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d0fc      	beq.n	800b634 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b63a:	bf00      	nop
 800b63c:	bf00      	nop
 800b63e:	3714      	adds	r7, #20
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr
 800b648:	20000010 	.word	0x20000010
 800b64c:	00000000 	.word	0x00000000

0800b650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b650:	4b07      	ldr	r3, [pc, #28]	; (800b670 <pxCurrentTCBConst2>)
 800b652:	6819      	ldr	r1, [r3, #0]
 800b654:	6808      	ldr	r0, [r1, #0]
 800b656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b65a:	f380 8809 	msr	PSP, r0
 800b65e:	f3bf 8f6f 	isb	sy
 800b662:	f04f 0000 	mov.w	r0, #0
 800b666:	f380 8811 	msr	BASEPRI, r0
 800b66a:	4770      	bx	lr
 800b66c:	f3af 8000 	nop.w

0800b670 <pxCurrentTCBConst2>:
 800b670:	20000e14 	.word	0x20000e14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b674:	bf00      	nop
 800b676:	bf00      	nop

0800b678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b678:	4808      	ldr	r0, [pc, #32]	; (800b69c <prvPortStartFirstTask+0x24>)
 800b67a:	6800      	ldr	r0, [r0, #0]
 800b67c:	6800      	ldr	r0, [r0, #0]
 800b67e:	f380 8808 	msr	MSP, r0
 800b682:	f04f 0000 	mov.w	r0, #0
 800b686:	f380 8814 	msr	CONTROL, r0
 800b68a:	b662      	cpsie	i
 800b68c:	b661      	cpsie	f
 800b68e:	f3bf 8f4f 	dsb	sy
 800b692:	f3bf 8f6f 	isb	sy
 800b696:	df00      	svc	0
 800b698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b69a:	bf00      	nop
 800b69c:	e000ed08 	.word	0xe000ed08

0800b6a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b086      	sub	sp, #24
 800b6a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b6a6:	4b46      	ldr	r3, [pc, #280]	; (800b7c0 <xPortStartScheduler+0x120>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a46      	ldr	r2, [pc, #280]	; (800b7c4 <xPortStartScheduler+0x124>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d10a      	bne.n	800b6c6 <xPortStartScheduler+0x26>
	__asm volatile
 800b6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b4:	f383 8811 	msr	BASEPRI, r3
 800b6b8:	f3bf 8f6f 	isb	sy
 800b6bc:	f3bf 8f4f 	dsb	sy
 800b6c0:	613b      	str	r3, [r7, #16]
}
 800b6c2:	bf00      	nop
 800b6c4:	e7fe      	b.n	800b6c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b6c6:	4b3e      	ldr	r3, [pc, #248]	; (800b7c0 <xPortStartScheduler+0x120>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a3f      	ldr	r2, [pc, #252]	; (800b7c8 <xPortStartScheduler+0x128>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d10a      	bne.n	800b6e6 <xPortStartScheduler+0x46>
	__asm volatile
 800b6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d4:	f383 8811 	msr	BASEPRI, r3
 800b6d8:	f3bf 8f6f 	isb	sy
 800b6dc:	f3bf 8f4f 	dsb	sy
 800b6e0:	60fb      	str	r3, [r7, #12]
}
 800b6e2:	bf00      	nop
 800b6e4:	e7fe      	b.n	800b6e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b6e6:	4b39      	ldr	r3, [pc, #228]	; (800b7cc <xPortStartScheduler+0x12c>)
 800b6e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	b2db      	uxtb	r3, r3
 800b6f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	22ff      	movs	r2, #255	; 0xff
 800b6f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b700:	78fb      	ldrb	r3, [r7, #3]
 800b702:	b2db      	uxtb	r3, r3
 800b704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b708:	b2da      	uxtb	r2, r3
 800b70a:	4b31      	ldr	r3, [pc, #196]	; (800b7d0 <xPortStartScheduler+0x130>)
 800b70c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b70e:	4b31      	ldr	r3, [pc, #196]	; (800b7d4 <xPortStartScheduler+0x134>)
 800b710:	2207      	movs	r2, #7
 800b712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b714:	e009      	b.n	800b72a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b716:	4b2f      	ldr	r3, [pc, #188]	; (800b7d4 <xPortStartScheduler+0x134>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	3b01      	subs	r3, #1
 800b71c:	4a2d      	ldr	r2, [pc, #180]	; (800b7d4 <xPortStartScheduler+0x134>)
 800b71e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b720:	78fb      	ldrb	r3, [r7, #3]
 800b722:	b2db      	uxtb	r3, r3
 800b724:	005b      	lsls	r3, r3, #1
 800b726:	b2db      	uxtb	r3, r3
 800b728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b72a:	78fb      	ldrb	r3, [r7, #3]
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b732:	2b80      	cmp	r3, #128	; 0x80
 800b734:	d0ef      	beq.n	800b716 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b736:	4b27      	ldr	r3, [pc, #156]	; (800b7d4 <xPortStartScheduler+0x134>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f1c3 0307 	rsb	r3, r3, #7
 800b73e:	2b04      	cmp	r3, #4
 800b740:	d00a      	beq.n	800b758 <xPortStartScheduler+0xb8>
	__asm volatile
 800b742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b746:	f383 8811 	msr	BASEPRI, r3
 800b74a:	f3bf 8f6f 	isb	sy
 800b74e:	f3bf 8f4f 	dsb	sy
 800b752:	60bb      	str	r3, [r7, #8]
}
 800b754:	bf00      	nop
 800b756:	e7fe      	b.n	800b756 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b758:	4b1e      	ldr	r3, [pc, #120]	; (800b7d4 <xPortStartScheduler+0x134>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	021b      	lsls	r3, r3, #8
 800b75e:	4a1d      	ldr	r2, [pc, #116]	; (800b7d4 <xPortStartScheduler+0x134>)
 800b760:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b762:	4b1c      	ldr	r3, [pc, #112]	; (800b7d4 <xPortStartScheduler+0x134>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b76a:	4a1a      	ldr	r2, [pc, #104]	; (800b7d4 <xPortStartScheduler+0x134>)
 800b76c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	b2da      	uxtb	r2, r3
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b776:	4b18      	ldr	r3, [pc, #96]	; (800b7d8 <xPortStartScheduler+0x138>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4a17      	ldr	r2, [pc, #92]	; (800b7d8 <xPortStartScheduler+0x138>)
 800b77c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b782:	4b15      	ldr	r3, [pc, #84]	; (800b7d8 <xPortStartScheduler+0x138>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4a14      	ldr	r2, [pc, #80]	; (800b7d8 <xPortStartScheduler+0x138>)
 800b788:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b78c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b78e:	f000 f8dd 	bl	800b94c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b792:	4b12      	ldr	r3, [pc, #72]	; (800b7dc <xPortStartScheduler+0x13c>)
 800b794:	2200      	movs	r2, #0
 800b796:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b798:	f000 f8fc 	bl	800b994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b79c:	4b10      	ldr	r3, [pc, #64]	; (800b7e0 <xPortStartScheduler+0x140>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a0f      	ldr	r2, [pc, #60]	; (800b7e0 <xPortStartScheduler+0x140>)
 800b7a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b7a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b7a8:	f7ff ff66 	bl	800b678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b7ac:	f7fe fd4a 	bl	800a244 <vTaskSwitchContext>
	prvTaskExitError();
 800b7b0:	f7ff ff20 	bl	800b5f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b7b4:	2300      	movs	r3, #0
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3718      	adds	r7, #24
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	e000ed00 	.word	0xe000ed00
 800b7c4:	410fc271 	.word	0x410fc271
 800b7c8:	410fc270 	.word	0x410fc270
 800b7cc:	e000e400 	.word	0xe000e400
 800b7d0:	20001440 	.word	0x20001440
 800b7d4:	20001444 	.word	0x20001444
 800b7d8:	e000ed20 	.word	0xe000ed20
 800b7dc:	20000010 	.word	0x20000010
 800b7e0:	e000ef34 	.word	0xe000ef34

0800b7e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
	__asm volatile
 800b7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ee:	f383 8811 	msr	BASEPRI, r3
 800b7f2:	f3bf 8f6f 	isb	sy
 800b7f6:	f3bf 8f4f 	dsb	sy
 800b7fa:	607b      	str	r3, [r7, #4]
}
 800b7fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b7fe:	4b0f      	ldr	r3, [pc, #60]	; (800b83c <vPortEnterCritical+0x58>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	3301      	adds	r3, #1
 800b804:	4a0d      	ldr	r2, [pc, #52]	; (800b83c <vPortEnterCritical+0x58>)
 800b806:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b808:	4b0c      	ldr	r3, [pc, #48]	; (800b83c <vPortEnterCritical+0x58>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d10f      	bne.n	800b830 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b810:	4b0b      	ldr	r3, [pc, #44]	; (800b840 <vPortEnterCritical+0x5c>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	b2db      	uxtb	r3, r3
 800b816:	2b00      	cmp	r3, #0
 800b818:	d00a      	beq.n	800b830 <vPortEnterCritical+0x4c>
	__asm volatile
 800b81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81e:	f383 8811 	msr	BASEPRI, r3
 800b822:	f3bf 8f6f 	isb	sy
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	603b      	str	r3, [r7, #0]
}
 800b82c:	bf00      	nop
 800b82e:	e7fe      	b.n	800b82e <vPortEnterCritical+0x4a>
	}
}
 800b830:	bf00      	nop
 800b832:	370c      	adds	r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr
 800b83c:	20000010 	.word	0x20000010
 800b840:	e000ed04 	.word	0xe000ed04

0800b844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b84a:	4b12      	ldr	r3, [pc, #72]	; (800b894 <vPortExitCritical+0x50>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d10a      	bne.n	800b868 <vPortExitCritical+0x24>
	__asm volatile
 800b852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b856:	f383 8811 	msr	BASEPRI, r3
 800b85a:	f3bf 8f6f 	isb	sy
 800b85e:	f3bf 8f4f 	dsb	sy
 800b862:	607b      	str	r3, [r7, #4]
}
 800b864:	bf00      	nop
 800b866:	e7fe      	b.n	800b866 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b868:	4b0a      	ldr	r3, [pc, #40]	; (800b894 <vPortExitCritical+0x50>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	3b01      	subs	r3, #1
 800b86e:	4a09      	ldr	r2, [pc, #36]	; (800b894 <vPortExitCritical+0x50>)
 800b870:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b872:	4b08      	ldr	r3, [pc, #32]	; (800b894 <vPortExitCritical+0x50>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d105      	bne.n	800b886 <vPortExitCritical+0x42>
 800b87a:	2300      	movs	r3, #0
 800b87c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	f383 8811 	msr	BASEPRI, r3
}
 800b884:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b886:	bf00      	nop
 800b888:	370c      	adds	r7, #12
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr
 800b892:	bf00      	nop
 800b894:	20000010 	.word	0x20000010
	...

0800b8a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b8a0:	f3ef 8009 	mrs	r0, PSP
 800b8a4:	f3bf 8f6f 	isb	sy
 800b8a8:	4b15      	ldr	r3, [pc, #84]	; (800b900 <pxCurrentTCBConst>)
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	f01e 0f10 	tst.w	lr, #16
 800b8b0:	bf08      	it	eq
 800b8b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b8b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ba:	6010      	str	r0, [r2, #0]
 800b8bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b8c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b8c4:	f380 8811 	msr	BASEPRI, r0
 800b8c8:	f3bf 8f4f 	dsb	sy
 800b8cc:	f3bf 8f6f 	isb	sy
 800b8d0:	f7fe fcb8 	bl	800a244 <vTaskSwitchContext>
 800b8d4:	f04f 0000 	mov.w	r0, #0
 800b8d8:	f380 8811 	msr	BASEPRI, r0
 800b8dc:	bc09      	pop	{r0, r3}
 800b8de:	6819      	ldr	r1, [r3, #0]
 800b8e0:	6808      	ldr	r0, [r1, #0]
 800b8e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e6:	f01e 0f10 	tst.w	lr, #16
 800b8ea:	bf08      	it	eq
 800b8ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b8f0:	f380 8809 	msr	PSP, r0
 800b8f4:	f3bf 8f6f 	isb	sy
 800b8f8:	4770      	bx	lr
 800b8fa:	bf00      	nop
 800b8fc:	f3af 8000 	nop.w

0800b900 <pxCurrentTCBConst>:
 800b900:	20000e14 	.word	0x20000e14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b904:	bf00      	nop
 800b906:	bf00      	nop

0800b908 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
	__asm volatile
 800b90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	607b      	str	r3, [r7, #4]
}
 800b920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b922:	f7fe fbd5 	bl	800a0d0 <xTaskIncrementTick>
 800b926:	4603      	mov	r3, r0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d003      	beq.n	800b934 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b92c:	4b06      	ldr	r3, [pc, #24]	; (800b948 <xPortSysTickHandler+0x40>)
 800b92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b932:	601a      	str	r2, [r3, #0]
 800b934:	2300      	movs	r3, #0
 800b936:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	f383 8811 	msr	BASEPRI, r3
}
 800b93e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b940:	bf00      	nop
 800b942:	3708      	adds	r7, #8
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	e000ed04 	.word	0xe000ed04

0800b94c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b94c:	b480      	push	{r7}
 800b94e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b950:	4b0b      	ldr	r3, [pc, #44]	; (800b980 <vPortSetupTimerInterrupt+0x34>)
 800b952:	2200      	movs	r2, #0
 800b954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b956:	4b0b      	ldr	r3, [pc, #44]	; (800b984 <vPortSetupTimerInterrupt+0x38>)
 800b958:	2200      	movs	r2, #0
 800b95a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b95c:	4b0a      	ldr	r3, [pc, #40]	; (800b988 <vPortSetupTimerInterrupt+0x3c>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a0a      	ldr	r2, [pc, #40]	; (800b98c <vPortSetupTimerInterrupt+0x40>)
 800b962:	fba2 2303 	umull	r2, r3, r2, r3
 800b966:	099b      	lsrs	r3, r3, #6
 800b968:	4a09      	ldr	r2, [pc, #36]	; (800b990 <vPortSetupTimerInterrupt+0x44>)
 800b96a:	3b01      	subs	r3, #1
 800b96c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b96e:	4b04      	ldr	r3, [pc, #16]	; (800b980 <vPortSetupTimerInterrupt+0x34>)
 800b970:	2207      	movs	r2, #7
 800b972:	601a      	str	r2, [r3, #0]
}
 800b974:	bf00      	nop
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	e000e010 	.word	0xe000e010
 800b984:	e000e018 	.word	0xe000e018
 800b988:	20000004 	.word	0x20000004
 800b98c:	10624dd3 	.word	0x10624dd3
 800b990:	e000e014 	.word	0xe000e014

0800b994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b9a4 <vPortEnableVFP+0x10>
 800b998:	6801      	ldr	r1, [r0, #0]
 800b99a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b99e:	6001      	str	r1, [r0, #0]
 800b9a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b9a2:	bf00      	nop
 800b9a4:	e000ed88 	.word	0xe000ed88

0800b9a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b085      	sub	sp, #20
 800b9ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b9ae:	f3ef 8305 	mrs	r3, IPSR
 800b9b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2b0f      	cmp	r3, #15
 800b9b8:	d914      	bls.n	800b9e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b9ba:	4a17      	ldr	r2, [pc, #92]	; (800ba18 <vPortValidateInterruptPriority+0x70>)
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	4413      	add	r3, r2
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b9c4:	4b15      	ldr	r3, [pc, #84]	; (800ba1c <vPortValidateInterruptPriority+0x74>)
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	7afa      	ldrb	r2, [r7, #11]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d20a      	bcs.n	800b9e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d2:	f383 8811 	msr	BASEPRI, r3
 800b9d6:	f3bf 8f6f 	isb	sy
 800b9da:	f3bf 8f4f 	dsb	sy
 800b9de:	607b      	str	r3, [r7, #4]
}
 800b9e0:	bf00      	nop
 800b9e2:	e7fe      	b.n	800b9e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b9e4:	4b0e      	ldr	r3, [pc, #56]	; (800ba20 <vPortValidateInterruptPriority+0x78>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b9ec:	4b0d      	ldr	r3, [pc, #52]	; (800ba24 <vPortValidateInterruptPriority+0x7c>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d90a      	bls.n	800ba0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f8:	f383 8811 	msr	BASEPRI, r3
 800b9fc:	f3bf 8f6f 	isb	sy
 800ba00:	f3bf 8f4f 	dsb	sy
 800ba04:	603b      	str	r3, [r7, #0]
}
 800ba06:	bf00      	nop
 800ba08:	e7fe      	b.n	800ba08 <vPortValidateInterruptPriority+0x60>
	}
 800ba0a:	bf00      	nop
 800ba0c:	3714      	adds	r7, #20
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop
 800ba18:	e000e3f0 	.word	0xe000e3f0
 800ba1c:	20001440 	.word	0x20001440
 800ba20:	e000ed0c 	.word	0xe000ed0c
 800ba24:	20001444 	.word	0x20001444

0800ba28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b08a      	sub	sp, #40	; 0x28
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ba30:	2300      	movs	r3, #0
 800ba32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ba34:	f7fe fa7e 	bl	8009f34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ba38:	4b5b      	ldr	r3, [pc, #364]	; (800bba8 <pvPortMalloc+0x180>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d101      	bne.n	800ba44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ba40:	f000 f920 	bl	800bc84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ba44:	4b59      	ldr	r3, [pc, #356]	; (800bbac <pvPortMalloc+0x184>)
 800ba46:	681a      	ldr	r2, [r3, #0]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	4013      	ands	r3, r2
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f040 8093 	bne.w	800bb78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d01d      	beq.n	800ba94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ba58:	2208      	movs	r2, #8
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f003 0307 	and.w	r3, r3, #7
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d014      	beq.n	800ba94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f023 0307 	bic.w	r3, r3, #7
 800ba70:	3308      	adds	r3, #8
 800ba72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f003 0307 	and.w	r3, r3, #7
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00a      	beq.n	800ba94 <pvPortMalloc+0x6c>
	__asm volatile
 800ba7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba82:	f383 8811 	msr	BASEPRI, r3
 800ba86:	f3bf 8f6f 	isb	sy
 800ba8a:	f3bf 8f4f 	dsb	sy
 800ba8e:	617b      	str	r3, [r7, #20]
}
 800ba90:	bf00      	nop
 800ba92:	e7fe      	b.n	800ba92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d06e      	beq.n	800bb78 <pvPortMalloc+0x150>
 800ba9a:	4b45      	ldr	r3, [pc, #276]	; (800bbb0 <pvPortMalloc+0x188>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d869      	bhi.n	800bb78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800baa4:	4b43      	ldr	r3, [pc, #268]	; (800bbb4 <pvPortMalloc+0x18c>)
 800baa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800baa8:	4b42      	ldr	r3, [pc, #264]	; (800bbb4 <pvPortMalloc+0x18c>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800baae:	e004      	b.n	800baba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800baba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d903      	bls.n	800bacc <pvPortMalloc+0xa4>
 800bac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d1f1      	bne.n	800bab0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bacc:	4b36      	ldr	r3, [pc, #216]	; (800bba8 <pvPortMalloc+0x180>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d050      	beq.n	800bb78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bad6:	6a3b      	ldr	r3, [r7, #32]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2208      	movs	r2, #8
 800badc:	4413      	add	r3, r2
 800bade:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	6a3b      	ldr	r3, [r7, #32]
 800bae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baea:	685a      	ldr	r2, [r3, #4]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	1ad2      	subs	r2, r2, r3
 800baf0:	2308      	movs	r3, #8
 800baf2:	005b      	lsls	r3, r3, #1
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d91f      	bls.n	800bb38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800baf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4413      	add	r3, r2
 800bafe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb00:	69bb      	ldr	r3, [r7, #24]
 800bb02:	f003 0307 	and.w	r3, r3, #7
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d00a      	beq.n	800bb20 <pvPortMalloc+0xf8>
	__asm volatile
 800bb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb0e:	f383 8811 	msr	BASEPRI, r3
 800bb12:	f3bf 8f6f 	isb	sy
 800bb16:	f3bf 8f4f 	dsb	sy
 800bb1a:	613b      	str	r3, [r7, #16]
}
 800bb1c:	bf00      	nop
 800bb1e:	e7fe      	b.n	800bb1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb22:	685a      	ldr	r2, [r3, #4]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	1ad2      	subs	r2, r2, r3
 800bb28:	69bb      	ldr	r3, [r7, #24]
 800bb2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bb32:	69b8      	ldr	r0, [r7, #24]
 800bb34:	f000 f908 	bl	800bd48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bb38:	4b1d      	ldr	r3, [pc, #116]	; (800bbb0 <pvPortMalloc+0x188>)
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	1ad3      	subs	r3, r2, r3
 800bb42:	4a1b      	ldr	r2, [pc, #108]	; (800bbb0 <pvPortMalloc+0x188>)
 800bb44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bb46:	4b1a      	ldr	r3, [pc, #104]	; (800bbb0 <pvPortMalloc+0x188>)
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	4b1b      	ldr	r3, [pc, #108]	; (800bbb8 <pvPortMalloc+0x190>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d203      	bcs.n	800bb5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bb52:	4b17      	ldr	r3, [pc, #92]	; (800bbb0 <pvPortMalloc+0x188>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a18      	ldr	r2, [pc, #96]	; (800bbb8 <pvPortMalloc+0x190>)
 800bb58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5c:	685a      	ldr	r2, [r3, #4]
 800bb5e:	4b13      	ldr	r3, [pc, #76]	; (800bbac <pvPortMalloc+0x184>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	431a      	orrs	r2, r3
 800bb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bb6e:	4b13      	ldr	r3, [pc, #76]	; (800bbbc <pvPortMalloc+0x194>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	3301      	adds	r3, #1
 800bb74:	4a11      	ldr	r2, [pc, #68]	; (800bbbc <pvPortMalloc+0x194>)
 800bb76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bb78:	f7fe f9ea 	bl	8009f50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	f003 0307 	and.w	r3, r3, #7
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d00a      	beq.n	800bb9c <pvPortMalloc+0x174>
	__asm volatile
 800bb86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8a:	f383 8811 	msr	BASEPRI, r3
 800bb8e:	f3bf 8f6f 	isb	sy
 800bb92:	f3bf 8f4f 	dsb	sy
 800bb96:	60fb      	str	r3, [r7, #12]
}
 800bb98:	bf00      	nop
 800bb9a:	e7fe      	b.n	800bb9a <pvPortMalloc+0x172>
	return pvReturn;
 800bb9c:	69fb      	ldr	r3, [r7, #28]
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3728      	adds	r7, #40	; 0x28
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop
 800bba8:	20009150 	.word	0x20009150
 800bbac:	20009164 	.word	0x20009164
 800bbb0:	20009154 	.word	0x20009154
 800bbb4:	20009148 	.word	0x20009148
 800bbb8:	20009158 	.word	0x20009158
 800bbbc:	2000915c 	.word	0x2000915c

0800bbc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b086      	sub	sp, #24
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d04d      	beq.n	800bc6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bbd2:	2308      	movs	r3, #8
 800bbd4:	425b      	negs	r3, r3
 800bbd6:	697a      	ldr	r2, [r7, #20]
 800bbd8:	4413      	add	r3, r2
 800bbda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	685a      	ldr	r2, [r3, #4]
 800bbe4:	4b24      	ldr	r3, [pc, #144]	; (800bc78 <vPortFree+0xb8>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4013      	ands	r3, r2
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d10a      	bne.n	800bc04 <vPortFree+0x44>
	__asm volatile
 800bbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf2:	f383 8811 	msr	BASEPRI, r3
 800bbf6:	f3bf 8f6f 	isb	sy
 800bbfa:	f3bf 8f4f 	dsb	sy
 800bbfe:	60fb      	str	r3, [r7, #12]
}
 800bc00:	bf00      	nop
 800bc02:	e7fe      	b.n	800bc02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00a      	beq.n	800bc22 <vPortFree+0x62>
	__asm volatile
 800bc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc10:	f383 8811 	msr	BASEPRI, r3
 800bc14:	f3bf 8f6f 	isb	sy
 800bc18:	f3bf 8f4f 	dsb	sy
 800bc1c:	60bb      	str	r3, [r7, #8]
}
 800bc1e:	bf00      	nop
 800bc20:	e7fe      	b.n	800bc20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	685a      	ldr	r2, [r3, #4]
 800bc26:	4b14      	ldr	r3, [pc, #80]	; (800bc78 <vPortFree+0xb8>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4013      	ands	r3, r2
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d01e      	beq.n	800bc6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d11a      	bne.n	800bc6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	685a      	ldr	r2, [r3, #4]
 800bc3c:	4b0e      	ldr	r3, [pc, #56]	; (800bc78 <vPortFree+0xb8>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	43db      	mvns	r3, r3
 800bc42:	401a      	ands	r2, r3
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bc48:	f7fe f974 	bl	8009f34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	685a      	ldr	r2, [r3, #4]
 800bc50:	4b0a      	ldr	r3, [pc, #40]	; (800bc7c <vPortFree+0xbc>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	4413      	add	r3, r2
 800bc56:	4a09      	ldr	r2, [pc, #36]	; (800bc7c <vPortFree+0xbc>)
 800bc58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bc5a:	6938      	ldr	r0, [r7, #16]
 800bc5c:	f000 f874 	bl	800bd48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bc60:	4b07      	ldr	r3, [pc, #28]	; (800bc80 <vPortFree+0xc0>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	3301      	adds	r3, #1
 800bc66:	4a06      	ldr	r2, [pc, #24]	; (800bc80 <vPortFree+0xc0>)
 800bc68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bc6a:	f7fe f971 	bl	8009f50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bc6e:	bf00      	nop
 800bc70:	3718      	adds	r7, #24
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	20009164 	.word	0x20009164
 800bc7c:	20009154 	.word	0x20009154
 800bc80:	20009160 	.word	0x20009160

0800bc84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bc8a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800bc8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bc90:	4b27      	ldr	r3, [pc, #156]	; (800bd30 <prvHeapInit+0xac>)
 800bc92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f003 0307 	and.w	r3, r3, #7
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d00c      	beq.n	800bcb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	3307      	adds	r3, #7
 800bca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f023 0307 	bic.w	r3, r3, #7
 800bcaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bcac:	68ba      	ldr	r2, [r7, #8]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	4a1f      	ldr	r2, [pc, #124]	; (800bd30 <prvHeapInit+0xac>)
 800bcb4:	4413      	add	r3, r2
 800bcb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bcbc:	4a1d      	ldr	r2, [pc, #116]	; (800bd34 <prvHeapInit+0xb0>)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bcc2:	4b1c      	ldr	r3, [pc, #112]	; (800bd34 <prvHeapInit+0xb0>)
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	68ba      	ldr	r2, [r7, #8]
 800bccc:	4413      	add	r3, r2
 800bcce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bcd0:	2208      	movs	r2, #8
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	1a9b      	subs	r3, r3, r2
 800bcd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f023 0307 	bic.w	r3, r3, #7
 800bcde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	4a15      	ldr	r2, [pc, #84]	; (800bd38 <prvHeapInit+0xb4>)
 800bce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bce6:	4b14      	ldr	r3, [pc, #80]	; (800bd38 <prvHeapInit+0xb4>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2200      	movs	r2, #0
 800bcec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bcee:	4b12      	ldr	r3, [pc, #72]	; (800bd38 <prvHeapInit+0xb4>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	1ad2      	subs	r2, r2, r3
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bd04:	4b0c      	ldr	r3, [pc, #48]	; (800bd38 <prvHeapInit+0xb4>)
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	4a0a      	ldr	r2, [pc, #40]	; (800bd3c <prvHeapInit+0xb8>)
 800bd12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	4a09      	ldr	r2, [pc, #36]	; (800bd40 <prvHeapInit+0xbc>)
 800bd1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bd1c:	4b09      	ldr	r3, [pc, #36]	; (800bd44 <prvHeapInit+0xc0>)
 800bd1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bd22:	601a      	str	r2, [r3, #0]
}
 800bd24:	bf00      	nop
 800bd26:	3714      	adds	r7, #20
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr
 800bd30:	20001448 	.word	0x20001448
 800bd34:	20009148 	.word	0x20009148
 800bd38:	20009150 	.word	0x20009150
 800bd3c:	20009158 	.word	0x20009158
 800bd40:	20009154 	.word	0x20009154
 800bd44:	20009164 	.word	0x20009164

0800bd48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b085      	sub	sp, #20
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bd50:	4b28      	ldr	r3, [pc, #160]	; (800bdf4 <prvInsertBlockIntoFreeList+0xac>)
 800bd52:	60fb      	str	r3, [r7, #12]
 800bd54:	e002      	b.n	800bd5c <prvInsertBlockIntoFreeList+0x14>
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	60fb      	str	r3, [r7, #12]
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d8f7      	bhi.n	800bd56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	68ba      	ldr	r2, [r7, #8]
 800bd70:	4413      	add	r3, r2
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d108      	bne.n	800bd8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	685a      	ldr	r2, [r3, #4]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	441a      	add	r2, r3
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	68ba      	ldr	r2, [r7, #8]
 800bd94:	441a      	add	r2, r3
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d118      	bne.n	800bdd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681a      	ldr	r2, [r3, #0]
 800bda2:	4b15      	ldr	r3, [pc, #84]	; (800bdf8 <prvInsertBlockIntoFreeList+0xb0>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d00d      	beq.n	800bdc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	685a      	ldr	r2, [r3, #4]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	441a      	add	r2, r3
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	601a      	str	r2, [r3, #0]
 800bdc4:	e008      	b.n	800bdd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bdc6:	4b0c      	ldr	r3, [pc, #48]	; (800bdf8 <prvInsertBlockIntoFreeList+0xb0>)
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	601a      	str	r2, [r3, #0]
 800bdce:	e003      	b.n	800bdd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bdd8:	68fa      	ldr	r2, [r7, #12]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d002      	beq.n	800bde6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bde6:	bf00      	nop
 800bde8:	3714      	adds	r7, #20
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr
 800bdf2:	bf00      	nop
 800bdf4:	20009148 	.word	0x20009148
 800bdf8:	20009150 	.word	0x20009150

0800bdfc <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	af00      	add	r7, sp, #0
}
 800be00:	bf00      	nop
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr

0800be0a <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800be0a:	b580      	push	{r7, lr}
 800be0c:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800be0e:	f005 ffb7 	bl	8011d80 <touchgfx_init>
}
 800be12:	bf00      	nop
 800be14:	bd80      	pop	{r7, pc}

0800be16 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800be16:	b580      	push	{r7, lr}
 800be18:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800be1a:	f005 ffdb 	bl	8011dd4 <touchgfx_taskEntry>
}
 800be1e:	bf00      	nop
 800be20:	bd80      	pop	{r7, pc}
	...

0800be24 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
    {
 800be2c:	4a04      	ldr	r2, [pc, #16]	; (800be40 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	601a      	str	r2, [r3, #0]
    }
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4618      	mov	r0, r3
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr
 800be40:	0802d8e0 	.word	0x0802d8e0

0800be44 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800be44:	b580      	push	{r7, lr}
 800be46:	b082      	sub	sp, #8
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
    }
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f7ff ffe9 	bl	800be24 <_ZN8touchgfx12FontProviderD1Ev>
 800be52:	2104      	movs	r1, #4
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f01b fda1 	bl	802799c <_ZdlPvj>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	4618      	mov	r0, r3
 800be5e:	3708      	adds	r7, #8
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}

0800be64 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	460b      	mov	r3, r1
 800be6e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800be70:	887b      	ldrh	r3, [r7, #2]
 800be72:	2b03      	cmp	r3, #3
 800be74:	d81e      	bhi.n	800beb4 <_ZN23ApplicationFontProvider7getFontEt+0x50>
 800be76:	a201      	add	r2, pc, #4	; (adr r2, 800be7c <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800be78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be7c:	0800be8d 	.word	0x0800be8d
 800be80:	0800be97 	.word	0x0800be97
 800be84:	0800bea1 	.word	0x0800bea1
 800be88:	0800beab 	.word	0x0800beab
    {
    case Typography::TYPOGRAPHY_00:
        // verdana_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800be8c:	f004 fa04 	bl	8010298 <_ZN17TypedTextDatabase8getFontsEv>
 800be90:	4603      	mov	r3, r0
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	e00f      	b.n	800beb6 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800be96:	f004 f9ff 	bl	8010298 <_ZN17TypedTextDatabase8getFontsEv>
 800be9a:	4603      	mov	r3, r0
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	e00a      	b.n	800beb6 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800bea0:	f004 f9fa 	bl	8010298 <_ZN17TypedTextDatabase8getFontsEv>
 800bea4:	4603      	mov	r3, r0
 800bea6:	689b      	ldr	r3, [r3, #8]
 800bea8:	e005      	b.n	800beb6 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800beaa:	f004 f9f5 	bl	8010298 <_ZN17TypedTextDatabase8getFontsEv>
 800beae:	4603      	mov	r3, r0
 800beb0:	68db      	ldr	r3, [r3, #12]
 800beb2:	e000      	b.n	800beb6 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    default:
        return 0;
 800beb4:	2300      	movs	r3, #0
    }
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3708      	adds	r7, #8
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop

0800bec0 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 2;         // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 3;         // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	4a05      	ldr	r2, [pc, #20]	; (800bee0 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	601a      	str	r2, [r3, #0]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7ff ffa7 	bl	800be24 <_ZN8touchgfx12FontProviderD1Ev>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	4618      	mov	r0, r3
 800beda:	3708      	adds	r7, #8
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	0802d8cc 	.word	0x0802d8cc

0800bee4 <_ZN23ApplicationFontProviderD0Ev>:
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f7ff ffe7 	bl	800bec0 <_ZN23ApplicationFontProviderD1Ev>
 800bef2:	2104      	movs	r1, #4
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f01b fd51 	bl	802799c <_ZdlPvj>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4618      	mov	r0, r3
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
    {
 800bf0c:	4a04      	ldr	r2, [pc, #16]	; (800bf20 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	601a      	str	r2, [r3, #0]
    }
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	4618      	mov	r0, r3
 800bf16:	370c      	adds	r7, #12
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr
 800bf20:	0802dc5c 	.word	0x0802dc5c

0800bf24 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
    }
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f7ff ffe9 	bl	800bf04 <_ZN8touchgfx4FontD1Ev>
 800bf32:	2110      	movs	r1, #16
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f01b fd31 	bl	802799c <_ZdlPvj>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3708      	adds	r7, #8
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800bf44:	b590      	push	{r4, r7, lr}
 800bf46:	b087      	sub	sp, #28
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800bf50:	887b      	ldrh	r3, [r7, #2]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d101      	bne.n	800bf5a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800bf56:	2300      	movs	r3, #0
 800bf58:	e010      	b.n	800bf7c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	3308      	adds	r3, #8
 800bf68:	681c      	ldr	r4, [r3, #0]
 800bf6a:	f107 030f 	add.w	r3, r7, #15
 800bf6e:	f107 0210 	add.w	r2, r7, #16
 800bf72:	8879      	ldrh	r1, [r7, #2]
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	47a0      	blx	r4
 800bf78:	6178      	str	r0, [r7, #20]
        return glyph;
 800bf7a:	697b      	ldr	r3, [r7, #20]
    }
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	371c      	adds	r7, #28
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd90      	pop	{r4, r7, pc}

0800bf84 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	895b      	ldrh	r3, [r3, #10]
    }
 800bf90:	4618      	mov	r0, r3
 800bf92:	370c      	adds	r7, #12
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	899b      	ldrh	r3, [r3, #12]
    }
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	370c      	adds	r7, #12
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	889b      	ldrh	r3, [r3, #4]
    }
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	370c      	adds	r7, #12
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800bfcc:	b480      	push	{r7}
 800bfce:	b083      	sub	sp, #12
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	889a      	ldrh	r2, [r3, #4]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	799b      	ldrb	r3, [r3, #6]
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	4413      	add	r3, r2
 800bfe0:	b29b      	uxth	r3, r3
    }
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	370c      	adds	r7, #12
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr

0800bfee <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800bfee:	b480      	push	{r7}
 800bff0:	b083      	sub	sp, #12
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	79db      	ldrb	r3, [r3, #7]
 800bffa:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800bffe:	b2db      	uxtb	r3, r3
    }
 800c000:	4618      	mov	r0, r3
 800c002:	370c      	adds	r7, #12
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr

0800c00c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	79db      	ldrb	r3, [r3, #7]
 800c018:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c01c:	b2db      	uxtb	r3, r3
    }
 800c01e:	4618      	mov	r0, r3
 800c020:	370c      	adds	r7, #12
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr
	...

0800c02c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	4a05      	ldr	r2, [pc, #20]	; (800c04c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	601a      	str	r2, [r3, #0]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7ff ff61 	bl	800bf04 <_ZN8touchgfx4FontD1Ev>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	4618      	mov	r0, r3
 800c046:	3708      	adds	r7, #8
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}
 800c04c:	0802ed10 	.word	0x0802ed10

0800c050 <_ZN8touchgfx9ConstFontD0Ev>:
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f7ff ffe7 	bl	800c02c <_ZN8touchgfx9ConstFontD1Ev>
 800c05e:	2118      	movs	r1, #24
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f01b fc9b 	bl	802799c <_ZdlPvj>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4618      	mov	r0, r3
 800c06a:	3708      	adds	r7, #8
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	4a05      	ldr	r2, [pc, #20]	; (800c090 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	601a      	str	r2, [r3, #0]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	4618      	mov	r0, r3
 800c082:	f7ff ffd3 	bl	800c02c <_ZN8touchgfx9ConstFontD1Ev>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	4618      	mov	r0, r3
 800c08a:	3708      	adds	r7, #8
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}
 800c090:	0802d904 	.word	0x0802d904

0800c094 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f7ff ffe7 	bl	800c070 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c0a2:	2128      	movs	r1, #40	; 0x28
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f01b fc79 	bl	802799c <_ZdlPvj>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3708      	adds	r7, #8
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}

0800c0b4 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
    {
 800c0bc:	4a04      	ldr	r2, [pc, #16]	; (800c0d0 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	601a      	str	r2, [r3, #0]
    }
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	370c      	adds	r7, #12
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr
 800c0d0:	0802d8f4 	.word	0x0802d8f4

0800c0d4 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
    }
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f7ff ffe9 	bl	800c0b4 <_ZN8touchgfx9TypedTextD1Ev>
 800c0e2:	2108      	movs	r1, #8
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f01b fc59 	bl	802799c <_ZdlPvj>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6a1b      	ldr	r3, [r3, #32]
    }
 800c100:	4618      	mov	r0, r3
 800c102:	370c      	adds	r7, #12
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr

0800c10c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800c118:	4618      	mov	r0, r3
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800c124:	b580      	push	{r7, lr}
 800c126:	b08c      	sub	sp, #48	; 0x30
 800c128:	af08      	add	r7, sp, #32
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	4611      	mov	r1, r2
 800c130:	461a      	mov	r2, r3
 800c132:	460b      	mov	r3, r1
 800c134:	80fb      	strh	r3, [r7, #6]
 800c136:	4613      	mov	r3, r2
 800c138:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	88b9      	ldrh	r1, [r7, #4]
 800c13e:	88fa      	ldrh	r2, [r7, #6]
 800c140:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c142:	9306      	str	r3, [sp, #24]
 800c144:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c146:	9305      	str	r3, [sp, #20]
 800c148:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c14c:	9304      	str	r3, [sp, #16]
 800c14e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c152:	9303      	str	r3, [sp, #12]
 800c154:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c158:	9302      	str	r3, [sp, #8]
 800c15a:	7f3b      	ldrb	r3, [r7, #28]
 800c15c:	9301      	str	r3, [sp, #4]
 800c15e:	7e3b      	ldrb	r3, [r7, #24]
 800c160:	9300      	str	r3, [sp, #0]
 800c162:	460b      	mov	r3, r1
 800c164:	68b9      	ldr	r1, [r7, #8]
 800c166:	f00d f8dd 	bl	8019324 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800c16a:	4a0a      	ldr	r2, [pc, #40]	; (800c194 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	601a      	str	r2, [r3, #0]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c174:	619a      	str	r2, [r3, #24]
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c17a:	61da      	str	r2, [r3, #28]
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c180:	621a      	str	r2, [r3, #32]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c186:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	4618      	mov	r0, r3
 800c18c:	3710      	adds	r7, #16
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	0802d904 	.word	0x0802d904

0800c198 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800c198:	b480      	push	{r7}
 800c19a:	b085      	sub	sp, #20
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	699b      	ldr	r3, [r3, #24]
 800c1a6:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	889b      	ldrh	r3, [r3, #4]
 800c1ac:	0adb      	lsrs	r3, r3, #11
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	68fa      	ldr	r2, [r7, #12]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	681a      	ldr	r2, [r3, #0]
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4413      	add	r3, r2
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3714      	adds	r7, #20
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr

0800c1ca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800c1ca:	b480      	push	{r7}
 800c1cc:	b089      	sub	sp, #36	; 0x24
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	60f8      	str	r0, [r7, #12]
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	607a      	str	r2, [r7, #4]
 800c1d6:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d003      	beq.n	800c1e6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	7b1b      	ldrb	r3, [r3, #12]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d101      	bne.n	800c1ea <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	e030      	b.n	800c24c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	69da      	ldr	r2, [r3, #28]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	7b5b      	ldrb	r3, [r3, #13]
 800c1f6:	021b      	lsls	r3, r3, #8
 800c1f8:	b21b      	sxth	r3, r3
 800c1fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c1fe:	b219      	sxth	r1, r3
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	7adb      	ldrb	r3, [r3, #11]
 800c204:	b21b      	sxth	r3, r3
 800c206:	430b      	orrs	r3, r1
 800c208:	b21b      	sxth	r3, r3
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	4413      	add	r3, r2
 800c210:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	7b1b      	ldrb	r3, [r3, #12]
 800c216:	837b      	strh	r3, [r7, #26]
 800c218:	8b7b      	ldrh	r3, [r7, #26]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d015      	beq.n	800c24a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800c21e:	69fb      	ldr	r3, [r7, #28]
 800c220:	881b      	ldrh	r3, [r3, #0]
 800c222:	897a      	ldrh	r2, [r7, #10]
 800c224:	429a      	cmp	r2, r3
 800c226:	d103      	bne.n	800c230 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800c22e:	e00d      	b.n	800c24c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	881b      	ldrh	r3, [r3, #0]
 800c234:	897a      	ldrh	r2, [r7, #10]
 800c236:	429a      	cmp	r2, r3
 800c238:	d306      	bcc.n	800c248 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800c23a:	8b7b      	ldrh	r3, [r7, #26]
 800c23c:	3b01      	subs	r3, #1
 800c23e:	837b      	strh	r3, [r7, #26]
 800c240:	69fb      	ldr	r3, [r7, #28]
 800c242:	3304      	adds	r3, #4
 800c244:	61fb      	str	r3, [r7, #28]
 800c246:	e7e7      	b.n	800c218 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800c248:	bf00      	nop
        }
    }
    return 0;
 800c24a:	2300      	movs	r3, #0
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3724      	adds	r7, #36	; 0x24
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr

0800c258 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800c258:	b580      	push	{r7, lr}
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	4801      	ldr	r0, [pc, #4]	; (800c264 <__tcf_0+0xc>)
 800c25e:	f7ff ff07 	bl	800c070 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c262:	bd80      	pop	{r7, pc}
 800c264:	20009168 	.word	0x20009168

0800c268 <_Z23getFont_verdana_10_4bppv>:
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b08c      	sub	sp, #48	; 0x30
 800c26c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800c26e:	4b1f      	ldr	r3, [pc, #124]	; (800c2ec <_Z23getFont_verdana_10_4bppv+0x84>)
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	f3bf 8f5b 	dmb	ish
 800c276:	b2db      	uxtb	r3, r3
 800c278:	f003 0301 	and.w	r3, r3, #1
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	bf0c      	ite	eq
 800c280:	2301      	moveq	r3, #1
 800c282:	2300      	movne	r3, #0
 800c284:	b2db      	uxtb	r3, r3
 800c286:	2b00      	cmp	r3, #0
 800c288:	d02c      	beq.n	800c2e4 <_Z23getFont_verdana_10_4bppv+0x7c>
 800c28a:	4818      	ldr	r0, [pc, #96]	; (800c2ec <_Z23getFont_verdana_10_4bppv+0x84>)
 800c28c:	f01b fb88 	bl	80279a0 <__cxa_guard_acquire>
 800c290:	4603      	mov	r3, r0
 800c292:	2b00      	cmp	r3, #0
 800c294:	bf14      	ite	ne
 800c296:	2301      	movne	r3, #1
 800c298:	2300      	moveq	r3, #0
 800c29a:	b2db      	uxtb	r3, r3
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d021      	beq.n	800c2e4 <_Z23getFont_verdana_10_4bppv+0x7c>
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	930a      	str	r3, [sp, #40]	; 0x28
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	9308      	str	r3, [sp, #32]
 800c2ac:	233f      	movs	r3, #63	; 0x3f
 800c2ae:	9307      	str	r3, [sp, #28]
 800c2b0:	4b0f      	ldr	r3, [pc, #60]	; (800c2f0 <_Z23getFont_verdana_10_4bppv+0x88>)
 800c2b2:	9306      	str	r3, [sp, #24]
 800c2b4:	4b0f      	ldr	r3, [pc, #60]	; (800c2f4 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800c2b6:	9305      	str	r3, [sp, #20]
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	9304      	str	r3, [sp, #16]
 800c2bc:	2300      	movs	r3, #0
 800c2be:	9303      	str	r3, [sp, #12]
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	9302      	str	r3, [sp, #8]
 800c2c4:	2304      	movs	r3, #4
 800c2c6:	9301      	str	r3, [sp, #4]
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	9300      	str	r3, [sp, #0]
 800c2cc:	230a      	movs	r3, #10
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	4909      	ldr	r1, [pc, #36]	; (800c2f8 <_Z23getFont_verdana_10_4bppv+0x90>)
 800c2d2:	480a      	ldr	r0, [pc, #40]	; (800c2fc <_Z23getFont_verdana_10_4bppv+0x94>)
 800c2d4:	f7ff ff26 	bl	800c124 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800c2d8:	4809      	ldr	r0, [pc, #36]	; (800c300 <_Z23getFont_verdana_10_4bppv+0x98>)
 800c2da:	f01b fbab 	bl	8027a34 <atexit>
 800c2de:	4803      	ldr	r0, [pc, #12]	; (800c2ec <_Z23getFont_verdana_10_4bppv+0x84>)
 800c2e0:	f01b fb6a 	bl	80279b8 <__cxa_guard_release>
    return verdana_10_4bpp;
 800c2e4:	4b05      	ldr	r3, [pc, #20]	; (800c2fc <_Z23getFont_verdana_10_4bppv+0x94>)
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	20009190 	.word	0x20009190
 800c2f0:	08030684 	.word	0x08030684
 800c2f4:	08030714 	.word	0x08030714
 800c2f8:	08030120 	.word	0x08030120
 800c2fc:	20009168 	.word	0x20009168
 800c300:	0800c259 	.word	0x0800c259

0800c304 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_12_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_12_4bpp();

touchgfx::GeneratedFont& getFont_verdana_12_4bpp()
{
    static touchgfx::GeneratedFont verdana_12_4bpp(glyphs_verdana_12_4bpp, 95, 12, 3, 4, 1, 1, 1, unicodes_verdana_12_4bpp, kerning_verdana_12_4bpp, 63, 0, 0, 0);
 800c304:	b580      	push	{r7, lr}
 800c306:	af00      	add	r7, sp, #0
 800c308:	4801      	ldr	r0, [pc, #4]	; (800c310 <__tcf_0+0xc>)
 800c30a:	f7ff feb1 	bl	800c070 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	20009194 	.word	0x20009194

0800c314 <_Z23getFont_verdana_12_4bppv>:
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b08c      	sub	sp, #48	; 0x30
 800c318:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_12_4bpp(glyphs_verdana_12_4bpp, 95, 12, 3, 4, 1, 1, 1, unicodes_verdana_12_4bpp, kerning_verdana_12_4bpp, 63, 0, 0, 0);
 800c31a:	4b1f      	ldr	r3, [pc, #124]	; (800c398 <_Z23getFont_verdana_12_4bppv+0x84>)
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	f3bf 8f5b 	dmb	ish
 800c322:	b2db      	uxtb	r3, r3
 800c324:	f003 0301 	and.w	r3, r3, #1
 800c328:	2b00      	cmp	r3, #0
 800c32a:	bf0c      	ite	eq
 800c32c:	2301      	moveq	r3, #1
 800c32e:	2300      	movne	r3, #0
 800c330:	b2db      	uxtb	r3, r3
 800c332:	2b00      	cmp	r3, #0
 800c334:	d02c      	beq.n	800c390 <_Z23getFont_verdana_12_4bppv+0x7c>
 800c336:	4818      	ldr	r0, [pc, #96]	; (800c398 <_Z23getFont_verdana_12_4bppv+0x84>)
 800c338:	f01b fb32 	bl	80279a0 <__cxa_guard_acquire>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	bf14      	ite	ne
 800c342:	2301      	movne	r3, #1
 800c344:	2300      	moveq	r3, #0
 800c346:	b2db      	uxtb	r3, r3
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d021      	beq.n	800c390 <_Z23getFont_verdana_12_4bppv+0x7c>
 800c34c:	2300      	movs	r3, #0
 800c34e:	930a      	str	r3, [sp, #40]	; 0x28
 800c350:	2300      	movs	r3, #0
 800c352:	9309      	str	r3, [sp, #36]	; 0x24
 800c354:	2300      	movs	r3, #0
 800c356:	9308      	str	r3, [sp, #32]
 800c358:	233f      	movs	r3, #63	; 0x3f
 800c35a:	9307      	str	r3, [sp, #28]
 800c35c:	4b0f      	ldr	r3, [pc, #60]	; (800c39c <_Z23getFont_verdana_12_4bppv+0x88>)
 800c35e:	9306      	str	r3, [sp, #24]
 800c360:	4b0f      	ldr	r3, [pc, #60]	; (800c3a0 <_Z23getFont_verdana_12_4bppv+0x8c>)
 800c362:	9305      	str	r3, [sp, #20]
 800c364:	2301      	movs	r3, #1
 800c366:	9304      	str	r3, [sp, #16]
 800c368:	2301      	movs	r3, #1
 800c36a:	9303      	str	r3, [sp, #12]
 800c36c:	2301      	movs	r3, #1
 800c36e:	9302      	str	r3, [sp, #8]
 800c370:	2304      	movs	r3, #4
 800c372:	9301      	str	r3, [sp, #4]
 800c374:	2303      	movs	r3, #3
 800c376:	9300      	str	r3, [sp, #0]
 800c378:	230c      	movs	r3, #12
 800c37a:	225f      	movs	r2, #95	; 0x5f
 800c37c:	4909      	ldr	r1, [pc, #36]	; (800c3a4 <_Z23getFont_verdana_12_4bppv+0x90>)
 800c37e:	480a      	ldr	r0, [pc, #40]	; (800c3a8 <_Z23getFont_verdana_12_4bppv+0x94>)
 800c380:	f7ff fed0 	bl	800c124 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800c384:	4809      	ldr	r0, [pc, #36]	; (800c3ac <_Z23getFont_verdana_12_4bppv+0x98>)
 800c386:	f01b fb55 	bl	8027a34 <atexit>
 800c38a:	4803      	ldr	r0, [pc, #12]	; (800c398 <_Z23getFont_verdana_12_4bppv+0x84>)
 800c38c:	f01b fb14 	bl	80279b8 <__cxa_guard_release>
    return verdana_12_4bpp;
 800c390:	4b05      	ldr	r3, [pc, #20]	; (800c3a8 <_Z23getFont_verdana_12_4bppv+0x94>)
}
 800c392:	4618      	mov	r0, r3
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	200091bc 	.word	0x200091bc
 800c39c:	08030688 	.word	0x08030688
 800c3a0:	08030718 	.word	0x08030718
 800c3a4:	08030130 	.word	0x08030130
 800c3a8:	20009194 	.word	0x20009194
 800c3ac:	0800c305 	.word	0x0800c305

0800c3b0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	4801      	ldr	r0, [pc, #4]	; (800c3bc <__tcf_0+0xc>)
 800c3b6:	f7ff fe5b 	bl	800c070 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	200091c0 	.word	0x200091c0

0800c3c0 <_Z23getFont_verdana_20_4bppv>:
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b08c      	sub	sp, #48	; 0x30
 800c3c4:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800c3c6:	4b1f      	ldr	r3, [pc, #124]	; (800c444 <_Z23getFont_verdana_20_4bppv+0x84>)
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	f3bf 8f5b 	dmb	ish
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	f003 0301 	and.w	r3, r3, #1
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	bf0c      	ite	eq
 800c3d8:	2301      	moveq	r3, #1
 800c3da:	2300      	movne	r3, #0
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d02c      	beq.n	800c43c <_Z23getFont_verdana_20_4bppv+0x7c>
 800c3e2:	4818      	ldr	r0, [pc, #96]	; (800c444 <_Z23getFont_verdana_20_4bppv+0x84>)
 800c3e4:	f01b fadc 	bl	80279a0 <__cxa_guard_acquire>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	bf14      	ite	ne
 800c3ee:	2301      	movne	r3, #1
 800c3f0:	2300      	moveq	r3, #0
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d021      	beq.n	800c43c <_Z23getFont_verdana_20_4bppv+0x7c>
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	930a      	str	r3, [sp, #40]	; 0x28
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	9309      	str	r3, [sp, #36]	; 0x24
 800c400:	2300      	movs	r3, #0
 800c402:	9308      	str	r3, [sp, #32]
 800c404:	233f      	movs	r3, #63	; 0x3f
 800c406:	9307      	str	r3, [sp, #28]
 800c408:	4b0f      	ldr	r3, [pc, #60]	; (800c448 <_Z23getFont_verdana_20_4bppv+0x88>)
 800c40a:	9306      	str	r3, [sp, #24]
 800c40c:	4b0f      	ldr	r3, [pc, #60]	; (800c44c <_Z23getFont_verdana_20_4bppv+0x8c>)
 800c40e:	9305      	str	r3, [sp, #20]
 800c410:	2300      	movs	r3, #0
 800c412:	9304      	str	r3, [sp, #16]
 800c414:	2300      	movs	r3, #0
 800c416:	9303      	str	r3, [sp, #12]
 800c418:	2301      	movs	r3, #1
 800c41a:	9302      	str	r3, [sp, #8]
 800c41c:	2304      	movs	r3, #4
 800c41e:	9301      	str	r3, [sp, #4]
 800c420:	2300      	movs	r3, #0
 800c422:	9300      	str	r3, [sp, #0]
 800c424:	2314      	movs	r3, #20
 800c426:	2201      	movs	r2, #1
 800c428:	4909      	ldr	r1, [pc, #36]	; (800c450 <_Z23getFont_verdana_20_4bppv+0x90>)
 800c42a:	480a      	ldr	r0, [pc, #40]	; (800c454 <_Z23getFont_verdana_20_4bppv+0x94>)
 800c42c:	f7ff fe7a 	bl	800c124 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800c430:	4809      	ldr	r0, [pc, #36]	; (800c458 <_Z23getFont_verdana_20_4bppv+0x98>)
 800c432:	f01b faff 	bl	8027a34 <atexit>
 800c436:	4803      	ldr	r0, [pc, #12]	; (800c444 <_Z23getFont_verdana_20_4bppv+0x84>)
 800c438:	f01b fabe 	bl	80279b8 <__cxa_guard_release>
    return verdana_20_4bpp;
 800c43c:	4b05      	ldr	r3, [pc, #20]	; (800c454 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 800c43e:	4618      	mov	r0, r3
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	200091e8 	.word	0x200091e8
 800c448:	0803070c 	.word	0x0803070c
 800c44c:	0803071c 	.word	0x0803071c
 800c450:	08030664 	.word	0x08030664
 800c454:	200091c0 	.word	0x200091c0
 800c458:	0800c3b1 	.word	0x0800c3b1

0800c45c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800c45c:	b580      	push	{r7, lr}
 800c45e:	af00      	add	r7, sp, #0
 800c460:	4801      	ldr	r0, [pc, #4]	; (800c468 <__tcf_0+0xc>)
 800c462:	f7ff fe05 	bl	800c070 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c466:	bd80      	pop	{r7, pc}
 800c468:	200091ec 	.word	0x200091ec

0800c46c <_Z23getFont_verdana_40_4bppv>:
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b08c      	sub	sp, #48	; 0x30
 800c470:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800c472:	4b1f      	ldr	r3, [pc, #124]	; (800c4f0 <_Z23getFont_verdana_40_4bppv+0x84>)
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	f3bf 8f5b 	dmb	ish
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	f003 0301 	and.w	r3, r3, #1
 800c480:	2b00      	cmp	r3, #0
 800c482:	bf0c      	ite	eq
 800c484:	2301      	moveq	r3, #1
 800c486:	2300      	movne	r3, #0
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d02c      	beq.n	800c4e8 <_Z23getFont_verdana_40_4bppv+0x7c>
 800c48e:	4818      	ldr	r0, [pc, #96]	; (800c4f0 <_Z23getFont_verdana_40_4bppv+0x84>)
 800c490:	f01b fa86 	bl	80279a0 <__cxa_guard_acquire>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	bf14      	ite	ne
 800c49a:	2301      	movne	r3, #1
 800c49c:	2300      	moveq	r3, #0
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d021      	beq.n	800c4e8 <_Z23getFont_verdana_40_4bppv+0x7c>
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	930a      	str	r3, [sp, #40]	; 0x28
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	9309      	str	r3, [sp, #36]	; 0x24
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	9308      	str	r3, [sp, #32]
 800c4b0:	233f      	movs	r3, #63	; 0x3f
 800c4b2:	9307      	str	r3, [sp, #28]
 800c4b4:	4b0f      	ldr	r3, [pc, #60]	; (800c4f4 <_Z23getFont_verdana_40_4bppv+0x88>)
 800c4b6:	9306      	str	r3, [sp, #24]
 800c4b8:	4b0f      	ldr	r3, [pc, #60]	; (800c4f8 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800c4ba:	9305      	str	r3, [sp, #20]
 800c4bc:	2300      	movs	r3, #0
 800c4be:	9304      	str	r3, [sp, #16]
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	9303      	str	r3, [sp, #12]
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	9302      	str	r3, [sp, #8]
 800c4c8:	2304      	movs	r3, #4
 800c4ca:	9301      	str	r3, [sp, #4]
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	9300      	str	r3, [sp, #0]
 800c4d0:	2328      	movs	r3, #40	; 0x28
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	4909      	ldr	r1, [pc, #36]	; (800c4fc <_Z23getFont_verdana_40_4bppv+0x90>)
 800c4d6:	480a      	ldr	r0, [pc, #40]	; (800c500 <_Z23getFont_verdana_40_4bppv+0x94>)
 800c4d8:	f7ff fe24 	bl	800c124 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800c4dc:	4809      	ldr	r0, [pc, #36]	; (800c504 <_Z23getFont_verdana_40_4bppv+0x98>)
 800c4de:	f01b faa9 	bl	8027a34 <atexit>
 800c4e2:	4803      	ldr	r0, [pc, #12]	; (800c4f0 <_Z23getFont_verdana_40_4bppv+0x84>)
 800c4e4:	f01b fa68 	bl	80279b8 <__cxa_guard_release>
    return verdana_40_4bpp;
 800c4e8:	4b05      	ldr	r3, [pc, #20]	; (800c500 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	20009214 	.word	0x20009214
 800c4f4:	08030710 	.word	0x08030710
 800c4f8:	08030720 	.word	0x08030720
 800c4fc:	08030674 	.word	0x08030674
 800c500:	200091ec 	.word	0x200091ec
 800c504:	0800c45d 	.word	0x0800c45d

0800c508 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800c508:	b480      	push	{r7}
 800c50a:	b083      	sub	sp, #12
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	4618      	mov	r0, r3
 800c516:	370c      	adds	r7, #12
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr

0800c520 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800c52a:	bf00      	nop
 800c52c:	370c      	adds	r7, #12
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr

0800c536 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800c536:	b480      	push	{r7}
 800c538:	b083      	sub	sp, #12
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
 800c53e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800c540:	bf00      	nop
 800c542:	370c      	adds	r7, #12
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr

0800c54c <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800c556:	bf00      	nop
 800c558:	370c      	adds	r7, #12
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr

0800c562 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800c562:	b480      	push	{r7}
 800c564:	b083      	sub	sp, #12
 800c566:	af00      	add	r7, sp, #0
 800c568:	6078      	str	r0, [r7, #4]
 800c56a:	460b      	mov	r3, r1
 800c56c:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800c56e:	bf00      	nop
 800c570:	370c      	adds	r7, #12
 800c572:	46bd      	mov	sp, r7
 800c574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c578:	4770      	bx	lr

0800c57a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800c57a:	b480      	push	{r7}
 800c57c:	b083      	sub	sp, #12
 800c57e:	af00      	add	r7, sp, #0
 800c580:	6078      	str	r0, [r7, #4]
    {
    }
 800c582:	bf00      	nop
 800c584:	370c      	adds	r7, #12
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr

0800c58e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800c58e:	b480      	push	{r7}
 800c590:	b083      	sub	sp, #12
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
    {
    }
 800c596:	bf00      	nop
 800c598:	370c      	adds	r7, #12
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr
	...

0800c5a4 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800c5a4:	b480      	push	{r7}
 800c5a6:	b083      	sub	sp, #12
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
    {
 800c5ac:	4a04      	ldr	r2, [pc, #16]	; (800c5c0 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	601a      	str	r2, [r3, #0]
    }
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	370c      	adds	r7, #12
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr
 800c5c0:	0802da6c 	.word	0x0802da6c

0800c5c4 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
    }
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f7ff ffe9 	bl	800c5a4 <_ZN8touchgfx15UIEventListenerD1Ev>
 800c5d2:	2104      	movs	r1, #4
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f01b f9e1 	bl	802799c <_ZdlPvj>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3708      	adds	r7, #8
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800c5e4:	b480      	push	{r7}
 800c5e6:	b083      	sub	sp, #12
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
    {
    }
 800c5ec:	bf00      	nop
 800c5ee:	370c      	adds	r7, #12
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr

0800c5f8 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800c5f8:	b480      	push	{r7}
 800c5fa:	b083      	sub	sp, #12
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	460b      	mov	r3, r1
 800c602:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800c604:	bf00      	nop
 800c606:	370c      	adds	r7, #12
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	683a      	ldr	r2, [r7, #0]
 800c61e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800c622:	6810      	ldr	r0, [r2, #0]
 800c624:	6851      	ldr	r1, [r2, #4]
 800c626:	c303      	stmia	r3!, {r0, r1}
    }
 800c628:	bf00      	nop
 800c62a:	370c      	adds	r7, #12
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr

0800c634 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
    {
 800c63c:	4a04      	ldr	r2, [pc, #16]	; (800c650 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	601a      	str	r2, [r3, #0]
    }
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	4618      	mov	r0, r3
 800c646:	370c      	adds	r7, #12
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr
 800c650:	0802da54 	.word	0x0802da54

0800c654 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
    }
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f7ff ffe9 	bl	800c634 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800c662:	2104      	movs	r1, #4
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f01b f999 	bl	802799c <_ZdlPvj>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4618      	mov	r0, r3
 800c66e:	3708      	adds	r7, #8
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}

0800c674 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800c674:	b480      	push	{r7}
 800c676:	af00      	add	r7, sp, #0
    {
        return instance;
 800c678:	4b03      	ldr	r3, [pc, #12]	; (800c688 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800c67a:	681b      	ldr	r3, [r3, #0]
    }
 800c67c:	4618      	mov	r0, r3
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr
 800c686:	bf00      	nop
 800c688:	2000c43c 	.word	0x2000c43c

0800c68c <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800c68c:	b480      	push	{r7}
 800c68e:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800c690:	4b0b      	ldr	r3, [pc, #44]	; (800c6c0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d008      	beq.n	800c6ae <_ZN8touchgfx3HAL3lcdEv+0x22>
 800c69c:	4b08      	ldr	r3, [pc, #32]	; (800c6c0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d003      	beq.n	800c6ae <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800c6a6:	4b06      	ldr	r3, [pc, #24]	; (800c6c0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6ac:	e002      	b.n	800c6b4 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800c6ae:	4b04      	ldr	r3, [pc, #16]	; (800c6c0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	689b      	ldr	r3, [r3, #8]
    }
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop
 800c6c0:	2000c43c 	.word	0x2000c43c

0800c6c4 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800c6cc:	4a07      	ldr	r2, [pc, #28]	; (800c6ec <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	601a      	str	r2, [r3, #0]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	605a      	str	r2, [r3, #4]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	721a      	strb	r2, [r3, #8]
    {
    }
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	370c      	adds	r7, #12
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr
 800c6ec:	0802da30 	.word	0x0802da30

0800c6f0 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800c6f0:	b480      	push	{r7}
 800c6f2:	b083      	sub	sp, #12
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
    {
 800c6f8:	4a04      	ldr	r2, [pc, #16]	; (800c70c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	601a      	str	r2, [r3, #0]
    }
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4618      	mov	r0, r3
 800c702:	370c      	adds	r7, #12
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr
 800c70c:	0802da30 	.word	0x0802da30

0800c710 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
    }
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f7ff ffe9 	bl	800c6f0 <_ZN8touchgfx10TransitionD1Ev>
 800c71e:	210c      	movs	r1, #12
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f01b f93b 	bl	802799c <_ZdlPvj>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	4618      	mov	r0, r3
 800c72a:	3708      	adds	r7, #8
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
    {
    }
 800c738:	bf00      	nop
 800c73a:	370c      	adds	r7, #12
 800c73c:	46bd      	mov	sp, r7
 800c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c742:	4770      	bx	lr

0800c744 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800c744:	b480      	push	{r7}
 800c746:	b083      	sub	sp, #12
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
    {
    }
 800c74c:	bf00      	nop
 800c74e:	370c      	adds	r7, #12
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
    {
    }
 800c760:	bf00      	nop
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr

0800c76c <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800c774:	f00b fd56 	bl	8018224 <_ZN8touchgfx11Application11getInstanceEv>
 800c778:	4603      	mov	r3, r0
 800c77a:	4618      	mov	r0, r3
 800c77c:	f00c f932 	bl	80189e4 <_ZN8touchgfx11Application10invalidateEv>
    }
 800c780:	bf00      	nop
 800c782:	3708      	adds	r7, #8
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	683a      	ldr	r2, [r7, #0]
 800c796:	605a      	str	r2, [r3, #4]
    }
 800c798:	bf00      	nop
 800c79a:	370c      	adds	r7, #12
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	4a05      	ldr	r2, [pc, #20]	; (800c7c4 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	601a      	str	r2, [r3, #0]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7ff fef5 	bl	800c5a4 <_ZN8touchgfx15UIEventListenerD1Ev>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3708      	adds	r7, #8
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	0802ec5c 	.word	0x0802ec5c

0800c7c8 <_ZN8touchgfx11ApplicationD0Ev>:
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f7ff ffe7 	bl	800c7a4 <_ZN8touchgfx11ApplicationD1Ev>
 800c7d6:	f44f 719c 	mov.w	r1, #312	; 0x138
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f01b f8de 	bl	802799c <_ZdlPvj>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3708      	adds	r7, #8
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
	...

0800c7ec <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b082      	sub	sp, #8
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f00b fd70 	bl	80182dc <_ZN8touchgfx11ApplicationC1Ev>
 800c7fc:	4a09      	ldr	r2, [pc, #36]	; (800c824 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	601a      	str	r2, [r3, #0]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2200      	movs	r2, #0
 800c806:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2200      	movs	r2, #0
 800c80e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	4a04      	ldr	r2, [pc, #16]	; (800c828 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800c816:	6013      	str	r3, [r2, #0]
    }
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	4618      	mov	r0, r3
 800c81c:	3708      	adds	r7, #8
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
 800c822:	bf00      	nop
 800c824:	0802d9e4 	.word	0x0802d9e4
 800c828:	2000c490 	.word	0x2000c490

0800c82c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 f804 	bl	800c842 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800c83a:	bf00      	nop
 800c83c:	3708      	adds	r7, #8
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800c842:	b580      	push	{r7, lr}
 800c844:	b082      	sub	sp, #8
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c850:	2b00      	cmp	r3, #0
 800c852:	d00f      	beq.n	800c874 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	330c      	adds	r3, #12
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4610      	mov	r0, r2
 800c868:	4798      	blx	r3
 800c86a:	4603      	mov	r3, r0
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d001      	beq.n	800c874 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800c870:	2301      	movs	r3, #1
 800c872:	e000      	b.n	800c876 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800c874:	2300      	movs	r3, #0
 800c876:	2b00      	cmp	r3, #0
 800c878:	d00e      	beq.n	800c898 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	3308      	adds	r3, #8
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4610      	mov	r0, r2
 800c88e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2200      	movs	r2, #0
 800c894:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800c898:	bf00      	nop
 800c89a:	3708      	adds	r7, #8
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	683a      	ldr	r2, [r7, #0]
 800c8ae:	601a      	str	r2, [r3, #0]
    }
 800c8b0:	bf00      	nop
 800c8b2:	370c      	adds	r7, #12
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ba:	4770      	bx	lr

0800c8bc <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	4a05      	ldr	r2, [pc, #20]	; (800c8dc <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	601a      	str	r2, [r3, #0]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7ff ff69 	bl	800c7a4 <_ZN8touchgfx11ApplicationD1Ev>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3708      	adds	r7, #8
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	0802d9e4 	.word	0x0802d9e4

0800c8e0 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f7ff ffe7 	bl	800c8bc <_ZN8touchgfx14MVPApplicationD1Ev>
 800c8ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f01b f852 	bl	802799c <_ZdlPvj>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3708      	adds	r7, #8
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
	...

0800c904 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	4a08      	ldr	r2, [pc, #32]	; (800c930 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	601a      	str	r2, [r3, #0]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c918:	4618      	mov	r0, r3
 800c91a:	f000 facb 	bl	800ceb4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	4618      	mov	r0, r3
 800c922:	f7ff ffcb 	bl	800c8bc <_ZN8touchgfx14MVPApplicationD1Ev>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	4618      	mov	r0, r3
 800c92a:	3708      	adds	r7, #8
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	0802d980 	.word	0x0802d980

0800c934 <_ZN23FrontendApplicationBaseD0Ev>:
 800c934:	b580      	push	{r7, lr}
 800c936:	b082      	sub	sp, #8
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f7ff ffe1 	bl	800c904 <_ZN23FrontendApplicationBaseD1Ev>
 800c942:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f01b f828 	bl	802799c <_ZdlPvj>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	4618      	mov	r0, r3
 800c950:	3708      	adds	r7, #8
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}

0800c956 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800c956:	b580      	push	{r7, lr}
 800c958:	b082      	sub	sp, #8
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
    {
        gotomainScreenScreenNoTransition();
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 f87c 	bl	800ca5c <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 800c964:	bf00      	nop
 800c966:	3708      	adds	r7, #8
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800c96c:	b480      	push	{r7}
 800c96e:	b083      	sub	sp, #12
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2201      	movs	r2, #1
 800c978:	721a      	strb	r2, [r3, #8]
    }
 800c97a:	bf00      	nop
 800c97c:	370c      	adds	r7, #12
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr

0800c986 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800c986:	b480      	push	{r7}
 800c988:	b083      	sub	sp, #12
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
 800c98e:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	683a      	ldr	r2, [r7, #0]
 800c994:	605a      	str	r2, [r3, #4]
    }
 800c996:	bf00      	nop
 800c998:	370c      	adds	r7, #12
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr
	...

0800c9a4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/mainscreen_screen/mainScreenView.hpp>
#include <gui/mainscreen_screen/mainScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b084      	sub	sp, #16
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7ff ff1a 	bl	800c7ec <_ZN8touchgfx14MVPApplicationC1Ev>
 800c9b8:	4a13      	ldr	r2, [pc, #76]	; (800ca08 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	601a      	str	r2, [r3, #0]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f000 f89f 	bl	800cb08 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	68ba      	ldr	r2, [r7, #8]
 800c9d6:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800c9da:	f7ff fe4b 	bl	800c674 <_ZN8touchgfx3HAL11getInstanceEv>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	3208      	adds	r2, #8
 800c9e4:	6812      	ldr	r2, [r2, #0]
 800c9e6:	2101      	movs	r1, #1
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800c9ec:	2000      	movs	r0, #0
 800c9ee:	f003 fbdb 	bl	80101a8 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800c9f2:	f7ff fe4b 	bl	800c68c <_ZN8touchgfx3HAL3lcdEv>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f013 fdc0 	bl	802057e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	4618      	mov	r0, r3
 800ca02:	3710      	adds	r7, #16
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}
 800ca08:	0802d980 	.word	0x0802d980

0800ca0c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800ca0c:	b480      	push	{r7}
 800ca0e:	b083      	sub	sp, #12
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4618      	mov	r0, r3
 800ca1a:	370c      	adds	r7, #12
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr

0800ca24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6039      	str	r1, [r7, #0]
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	683a      	ldr	r2, [r7, #0]
 800ca32:	4611      	mov	r1, r2
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7ff ffe9 	bl	800ca0c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	685a      	ldr	r2, [r3, #4]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	605a      	str	r2, [r3, #4]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	683a      	ldr	r2, [r7, #0]
 800ca46:	3308      	adds	r3, #8
 800ca48:	3208      	adds	r2, #8
 800ca4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ca4e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	4618      	mov	r0, r3
 800ca56:	3708      	adds	r7, #8
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>:
 */

// mainScreen

void FrontendApplicationBase::gotomainScreenScreenNoTransition()
{
 800ca5c:	b590      	push	{r4, r7, lr}
 800ca5e:	b089      	sub	sp, #36	; 0x24
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotomainScreenScreenNoTransitionImpl);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ca6a:	4b10      	ldr	r3, [pc, #64]	; (800caac <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x50>)
 800ca6c:	61bb      	str	r3, [r7, #24]
 800ca6e:	2300      	movs	r3, #0
 800ca70:	61fb      	str	r3, [r7, #28]
 800ca72:	f107 0008 	add.w	r0, r7, #8
 800ca76:	f107 0318 	add.w	r3, r7, #24
 800ca7a:	cb0c      	ldmia	r3, {r2, r3}
 800ca7c:	6879      	ldr	r1, [r7, #4]
 800ca7e:	f000 f85f 	bl	800cb40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ca82:	f107 0308 	add.w	r3, r7, #8
 800ca86:	4619      	mov	r1, r3
 800ca88:	4620      	mov	r0, r4
 800ca8a:	f7ff ffcb 	bl	800ca24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ca8e:	f107 0308 	add.w	r3, r7, #8
 800ca92:	4618      	mov	r0, r3
 800ca94:	f000 fa0e 	bl	800ceb4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800caa4:	bf00      	nop
 800caa6:	3724      	adds	r7, #36	; 0x24
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd90      	pop	{r4, r7, pc}
 800caac:	0800cab1 	.word	0x0800cab1

0800cab0 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotomainScreenScreenNoTransitionImpl()
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af02      	add	r7, sp, #8
 800cab6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cac4:	461a      	mov	r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cacc:	9300      	str	r3, [sp, #0]
 800cace:	4b04      	ldr	r3, [pc, #16]	; (800cae0 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x30>)
 800cad0:	4804      	ldr	r0, [pc, #16]	; (800cae4 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x34>)
 800cad2:	f000 f867 	bl	800cba4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cad6:	bf00      	nop
 800cad8:	3708      	adds	r7, #8
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	2000c484 	.word	0x2000c484
 800cae4:	2000c480 	.word	0x2000c480

0800cae8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800cae8:	b480      	push	{r7}
 800caea:	b083      	sub	sp, #12
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	4a04      	ldr	r2, [pc, #16]	; (800cb04 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	601a      	str	r2, [r3, #0]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	4618      	mov	r0, r3
 800cafa:	370c      	adds	r7, #12
 800cafc:	46bd      	mov	sp, r7
 800cafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb02:	4770      	bx	lr
 800cb04:	0802da54 	.word	0x0802da54

0800cb08 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7ff ffe8 	bl	800cae8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800cb18:	4a08      	ldr	r2, [pc, #32]	; (800cb3c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	601a      	str	r2, [r3, #0]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2200      	movs	r2, #0
 800cb22:	605a      	str	r2, [r3, #4]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2200      	movs	r2, #0
 800cb28:	609a      	str	r2, [r3, #8]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	60da      	str	r2, [r3, #12]
    {
    }
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	4618      	mov	r0, r3
 800cb34:	3708      	adds	r7, #8
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
 800cb3a:	bf00      	nop
 800cb3c:	0802d9cc 	.word	0x0802d9cc

0800cb40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	60b9      	str	r1, [r7, #8]
 800cb4a:	4639      	mov	r1, r7
 800cb4c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7ff ffc8 	bl	800cae8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800cb58:	4a08      	ldr	r2, [pc, #32]	; (800cb7c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	601a      	str	r2, [r3, #0]
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	68ba      	ldr	r2, [r7, #8]
 800cb62:	605a      	str	r2, [r3, #4]
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	3308      	adds	r3, #8
 800cb68:	463a      	mov	r2, r7
 800cb6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cb6e:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	4618      	mov	r0, r3
 800cb76:	3710      	adds	r7, #16
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}
 800cb7c:	0802d9cc 	.word	0x0802d9cc

0800cb80 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7ff fd9a 	bl	800c6c4 <_ZN8touchgfx10TransitionC1Ev>
 800cb90:	4a03      	ldr	r2, [pc, #12]	; (800cba0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	601a      	str	r2, [r3, #0]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3708      	adds	r7, #8
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}
 800cba0:	0802d95c 	.word	0x0802d95c

0800cba4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800cba4:	b590      	push	{r4, r7, lr}
 800cba6:	b08f      	sub	sp, #60	; 0x3c
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	60b9      	str	r1, [r7, #8]
 800cbae:	607a      	str	r2, [r7, #4]
 800cbb0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	689a      	ldr	r2, [r3, #8]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	689b      	ldr	r3, [r3, #8]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	3320      	adds	r3, #32
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4610      	mov	r0, r2
 800cbc2:	4798      	blx	r3
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	f241 72c3 	movw	r2, #6083	; 0x17c3
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d805      	bhi.n	800cbda <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800cbce:	4b7f      	ldr	r3, [pc, #508]	; (800cdcc <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800cbd0:	4a7f      	ldr	r2, [pc, #508]	; (800cdd0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800cbd2:	21a3      	movs	r1, #163	; 0xa3
 800cbd4:	487f      	ldr	r0, [pc, #508]	; (800cdd4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800cbd6:	f01a ff0f 	bl	80279f8 <__assert_func>
 800cbda:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	685a      	ldr	r2, [r3, #4]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	3320      	adds	r3, #32
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4610      	mov	r0, r2
 800cbec:	4798      	blx	r3
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b0f      	cmp	r3, #15
 800cbf2:	d805      	bhi.n	800cc00 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800cbf4:	4b78      	ldr	r3, [pc, #480]	; (800cdd8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800cbf6:	4a76      	ldr	r2, [pc, #472]	; (800cdd0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800cbf8:	21a4      	movs	r1, #164	; 0xa4
 800cbfa:	4876      	ldr	r0, [pc, #472]	; (800cdd4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800cbfc:	f01a fefc 	bl	80279f8 <__assert_func>
 800cc00:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	68da      	ldr	r2, [r3, #12]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	68db      	ldr	r3, [r3, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	3320      	adds	r3, #32
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4610      	mov	r0, r2
 800cc12:	4798      	blx	r3
 800cc14:	4603      	mov	r3, r0
 800cc16:	2b0b      	cmp	r3, #11
 800cc18:	d805      	bhi.n	800cc26 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800cc1a:	4b70      	ldr	r3, [pc, #448]	; (800cddc <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800cc1c:	4a6c      	ldr	r2, [pc, #432]	; (800cdd0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800cc1e:	21a5      	movs	r1, #165	; 0xa5
 800cc20:	486c      	ldr	r0, [pc, #432]	; (800cdd4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800cc22:	f01a fee9 	bl	80279f8 <__assert_func>
 800cc26:	bf00      	nop
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	627b      	str	r3, [r7, #36]	; 0x24
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800cc34:	f00b faf6 	bl	8018224 <_ZN8touchgfx11Application11getInstanceEv>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f00b fb34 	bl	80182a8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800cc40:	6a3b      	ldr	r3, [r7, #32]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d008      	beq.n	800cc5a <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800cc48:	6a3b      	ldr	r3, [r7, #32]
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	6a3b      	ldr	r3, [r7, #32]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	330c      	adds	r3, #12
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	4610      	mov	r0, r2
 800cc58:	4798      	blx	r3
    if (*currentTrans)
 800cc5a:	6a3b      	ldr	r3, [r7, #32]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d007      	beq.n	800cc72 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800cc62:	6a3b      	ldr	r3, [r7, #32]
 800cc64:	681a      	ldr	r2, [r3, #0]
 800cc66:	6a3b      	ldr	r3, [r7, #32]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4610      	mov	r0, r2
 800cc70:	4798      	blx	r3
    if (*currentScreen)
 800cc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d008      	beq.n	800cc8c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800cc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc7c:	681a      	ldr	r2, [r3, #0]
 800cc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	3314      	adds	r3, #20
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4610      	mov	r0, r2
 800cc8a:	4798      	blx	r3
    if (*currentPresenter)
 800cc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d008      	beq.n	800cca6 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800cc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc96:	681a      	ldr	r2, [r3, #0]
 800cc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	3304      	adds	r3, #4
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	4610      	mov	r0, r2
 800cca4:	4798      	blx	r3
    if (*currentScreen)
 800cca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d007      	beq.n	800ccbe <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800ccae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4610      	mov	r0, r2
 800ccbc:	4798      	blx	r3
    if (*currentPresenter)
 800ccbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d008      	beq.n	800ccd8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800ccc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	3308      	adds	r3, #8
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4610      	mov	r0, r2
 800ccd6:	4798      	blx	r3
}
 800ccd8:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	68db      	ldr	r3, [r3, #12]
 800ccde:	2100      	movs	r1, #0
 800cce0:	4618      	mov	r0, r3
 800cce2:	f000 f87d 	bl	800cde0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800cce6:	4603      	mov	r3, r0
 800cce8:	4619      	mov	r1, r3
 800ccea:	200c      	movs	r0, #12
 800ccec:	f7ff fc0c 	bl	800c508 <_ZnwjPv>
 800ccf0:	4604      	mov	r4, r0
 800ccf2:	4620      	mov	r0, r4
 800ccf4:	f7ff ff44 	bl	800cb80 <_ZN8touchgfx12NoTransitionC1Ev>
 800ccf8:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	689b      	ldr	r3, [r3, #8]
 800ccfe:	2100      	movs	r1, #0
 800cd00:	4618      	mov	r0, r3
 800cd02:	f000 f880 	bl	800ce06 <_ZN8touchgfx17AbstractPartition2atI14mainScreenViewEERT_t>
 800cd06:	4603      	mov	r3, r0
 800cd08:	4619      	mov	r1, r3
 800cd0a:	f241 70c4 	movw	r0, #6084	; 0x17c4
 800cd0e:	f7ff fbfb 	bl	800c508 <_ZnwjPv>
 800cd12:	4604      	mov	r4, r0
 800cd14:	4620      	mov	r0, r4
 800cd16:	f003 fd43 	bl	80107a0 <_ZN14mainScreenViewC1Ev>
 800cd1a:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	2100      	movs	r1, #0
 800cd22:	4618      	mov	r0, r3
 800cd24:	f000 f882 	bl	800ce2c <_ZN8touchgfx17AbstractPartition2atI19mainScreenPresenterEERT_t>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	2010      	movs	r0, #16
 800cd2e:	f7ff fbeb 	bl	800c508 <_ZnwjPv>
 800cd32:	4604      	mov	r4, r0
 800cd34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd36:	4620      	mov	r0, r4
 800cd38:	f003 fc34 	bl	80105a4 <_ZN19mainScreenPresenterC1ER14mainScreenView>
 800cd3c:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd42:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd48:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd4e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800cd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d002      	beq.n	800cd5c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800cd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd58:	3304      	adds	r3, #4
 800cd5a:	e000      	b.n	800cd5e <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	4619      	mov	r1, r3
 800cd60:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800cd62:	f7ff fd9d 	bl	800c8a0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800cd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd68:	3304      	adds	r3, #4
 800cd6a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f7ff fe0a 	bl	800c986 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800cd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd76:	4618      	mov	r0, r3
 800cd78:	f000 f86b 	bl	800ce52 <_ZN8touchgfx4ViewI19mainScreenPresenterE4bindERS1_>
 800cd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7e:	61fb      	str	r3, [r7, #28]
 800cd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd82:	61bb      	str	r3, [r7, #24]
 800cd84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd86:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800cd88:	69fb      	ldr	r3, [r7, #28]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	330c      	adds	r3, #12
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	69f8      	ldr	r0, [r7, #28]
 800cd92:	4798      	blx	r3
    newPresenter->activate();
 800cd94:	69bb      	ldr	r3, [r7, #24]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	69b8      	ldr	r0, [r7, #24]
 800cd9c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800cd9e:	6979      	ldr	r1, [r7, #20]
 800cda0:	69f8      	ldr	r0, [r7, #28]
 800cda2:	f00c ff21 	bl	8019be8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	3310      	adds	r3, #16
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	6978      	ldr	r0, [r7, #20]
 800cdb0:	4798      	blx	r3
    newTransition->invalidate();
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	3314      	adds	r3, #20
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	6978      	ldr	r0, [r7, #20]
 800cdbc:	4798      	blx	r3
}
 800cdbe:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800cdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	373c      	adds	r7, #60	; 0x3c
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd90      	pop	{r4, r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	0802c2e4 	.word	0x0802c2e4
 800cdd0:	0802c374 	.word	0x0802c374
 800cdd4:	0802c480 	.word	0x0802c480
 800cdd8:	0802c4c4 	.word	0x0802c4c4
 800cddc:	0802c568 	.word	0x0802c568

0800cde0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b082      	sub	sp, #8
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	460b      	mov	r3, r1
 800cdea:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	3324      	adds	r3, #36	; 0x24
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	887a      	ldrh	r2, [r7, #2]
 800cdf6:	4611      	mov	r1, r2
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	4798      	blx	r3
 800cdfc:	4603      	mov	r3, r0
    }
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3708      	adds	r7, #8
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}

0800ce06 <_ZN8touchgfx17AbstractPartition2atI14mainScreenViewEERT_t>:
    T& at(const uint16_t index)
 800ce06:	b580      	push	{r7, lr}
 800ce08:	b082      	sub	sp, #8
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
 800ce0e:	460b      	mov	r3, r1
 800ce10:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	3324      	adds	r3, #36	; 0x24
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	887a      	ldrh	r2, [r7, #2]
 800ce1c:	4611      	mov	r1, r2
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	4798      	blx	r3
 800ce22:	4603      	mov	r3, r0
    }
 800ce24:	4618      	mov	r0, r3
 800ce26:	3708      	adds	r7, #8
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <_ZN8touchgfx17AbstractPartition2atI19mainScreenPresenterEERT_t>:
    T& at(const uint16_t index)
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b082      	sub	sp, #8
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	460b      	mov	r3, r1
 800ce36:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	3324      	adds	r3, #36	; 0x24
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	887a      	ldrh	r2, [r7, #2]
 800ce42:	4611      	mov	r1, r2
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	4798      	blx	r3
 800ce48:	4603      	mov	r3, r0
    }
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3708      	adds	r7, #8
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}

0800ce52 <_ZN8touchgfx4ViewI19mainScreenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800ce52:	b480      	push	{r7}
 800ce54:	b083      	sub	sp, #12
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
 800ce5a:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	683a      	ldr	r2, [r7, #0]
 800ce60:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800ce62:	bf00      	nop
 800ce64:	370c      	adds	r7, #12
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr
	...

0800ce70 <_ZN8touchgfx12NoTransitionD1Ev>:
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	4a05      	ldr	r2, [pc, #20]	; (800ce90 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	601a      	str	r2, [r3, #0]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	4618      	mov	r0, r3
 800ce82:	f7ff fc35 	bl	800c6f0 <_ZN8touchgfx10TransitionD1Ev>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3708      	adds	r7, #8
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}
 800ce90:	0802d95c 	.word	0x0802d95c

0800ce94 <_ZN8touchgfx12NoTransitionD0Ev>:
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f7ff ffe7 	bl	800ce70 <_ZN8touchgfx12NoTransitionD1Ev>
 800cea2:	210c      	movs	r1, #12
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f01a fd79 	bl	802799c <_ZdlPvj>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	4618      	mov	r0, r3
 800ceae:	3708      	adds	r7, #8
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
 800cebc:	4a05      	ldr	r2, [pc, #20]	; (800ced4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	601a      	str	r2, [r3, #0]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7ff fbb5 	bl	800c634 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	4618      	mov	r0, r3
 800cece:	3708      	adds	r7, #8
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	0802d9cc 	.word	0x0802d9cc

0800ced8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b082      	sub	sp, #8
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f7ff ffe7 	bl	800ceb4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800cee6:	2110      	movs	r1, #16
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f01a fd57 	bl	802799c <_ZdlPvj>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	4618      	mov	r0, r3
 800cef2:	3708      	adds	r7, #8
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	687a      	ldr	r2, [r7, #4]
 800cf06:	68d2      	ldr	r2, [r2, #12]
 800cf08:	1052      	asrs	r2, r2, #1
 800cf0a:	1899      	adds	r1, r3, r2
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	68db      	ldr	r3, [r3, #12]
 800cf10:	f003 0301 	and.w	r3, r3, #1
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d102      	bne.n	800cf1e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	689b      	ldr	r3, [r3, #8]
 800cf1c:	e00a      	b.n	800cf34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	68d2      	ldr	r2, [r2, #12]
 800cf26:	1052      	asrs	r2, r2, #1
 800cf28:	4413      	add	r3, r2
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	687a      	ldr	r2, [r7, #4]
 800cf2e:	6892      	ldr	r2, [r2, #8]
 800cf30:	4413      	add	r3, r2
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4608      	mov	r0, r1
 800cf36:	4798      	blx	r3
    }
 800cf38:	bf00      	nop
 800cf3a:	3708      	adds	r7, #8
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800cf40:	b480      	push	{r7}
 800cf42:	b083      	sub	sp, #12
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d010      	beq.n	800cf72 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	689b      	ldr	r3, [r3, #8]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d107      	bne.n	800cf68 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	68db      	ldr	r3, [r3, #12]
 800cf5c:	f003 0301 	and.w	r3, r3, #1
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d101      	bne.n	800cf68 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800cf64:	2301      	movs	r3, #1
 800cf66:	e000      	b.n	800cf6a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800cf68:	2300      	movs	r3, #0
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d001      	beq.n	800cf72 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e000      	b.n	800cf74 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800cf72:	2300      	movs	r3, #0
    }
 800cf74:	4618      	mov	r0, r3
 800cf76:	370c      	adds	r7, #12
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr

0800cf80 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
        : color(0)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	601a      	str	r2, [r3, #0]
    {
    }
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	4618      	mov	r0, r3
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
        : color(col)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	683a      	ldr	r2, [r7, #0]
 800cfaa:	601a      	str	r2, [r3, #0]
    {
    }
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	4618      	mov	r0, r3
 800cfb0:	370c      	adds	r7, #12
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb8:	4770      	bx	lr

0800cfba <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 800cfba:	b480      	push	{r7}
 800cfbc:	b083      	sub	sp, #12
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
    {
        return color;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
    }
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	370c      	adds	r7, #12
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr

0800cfd2 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800cfd2:	b480      	push	{r7}
 800cfd4:	b083      	sub	sp, #12
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	801a      	strh	r2, [r3, #0]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	805a      	strh	r2, [r3, #2]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	809a      	strh	r2, [r3, #4]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2200      	movs	r2, #0
 800cff0:	80da      	strh	r2, [r3, #6]
    {
    }
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	4618      	mov	r0, r3
 800cff6:	370c      	adds	r7, #12
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr

0800d000 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800d000:	b480      	push	{r7}
 800d002:	b085      	sub	sp, #20
 800d004:	af00      	add	r7, sp, #0
 800d006:	60f8      	str	r0, [r7, #12]
 800d008:	4608      	mov	r0, r1
 800d00a:	4611      	mov	r1, r2
 800d00c:	461a      	mov	r2, r3
 800d00e:	4603      	mov	r3, r0
 800d010:	817b      	strh	r3, [r7, #10]
 800d012:	460b      	mov	r3, r1
 800d014:	813b      	strh	r3, [r7, #8]
 800d016:	4613      	mov	r3, r2
 800d018:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	897a      	ldrh	r2, [r7, #10]
 800d01e:	801a      	strh	r2, [r3, #0]
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	893a      	ldrh	r2, [r7, #8]
 800d024:	805a      	strh	r2, [r3, #2]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	88fa      	ldrh	r2, [r7, #6]
 800d02a:	809a      	strh	r2, [r3, #4]
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	8b3a      	ldrh	r2, [r7, #24]
 800d030:	80da      	strh	r2, [r3, #6]
    {
    }
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	4618      	mov	r0, r3
 800d036:	3714      	adds	r7, #20
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr

0800d040 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800d040:	b580      	push	{r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800d048:	4a14      	ldr	r2, [pc, #80]	; (800d09c <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	601a      	str	r2, [r3, #0]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	3304      	adds	r3, #4
 800d052:	4618      	mov	r0, r3
 800d054:	f7ff ffbd 	bl	800cfd2 <_ZN8touchgfx4RectC1Ev>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	330c      	adds	r3, #12
 800d05c:	4618      	mov	r0, r3
 800d05e:	f7ff ffb8 	bl	800cfd2 <_ZN8touchgfx4RectC1Ev>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2200      	movs	r2, #0
 800d066:	615a      	str	r2, [r3, #20]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2200      	movs	r2, #0
 800d06c:	619a      	str	r2, [r3, #24]
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2200      	movs	r2, #0
 800d072:	61da      	str	r2, [r3, #28]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	841a      	strh	r2, [r3, #32]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2200      	movs	r2, #0
 800d07e:	845a      	strh	r2, [r3, #34]	; 0x22
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2200      	movs	r2, #0
 800d084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2201      	movs	r2, #1
 800d08c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	4618      	mov	r0, r3
 800d094:	3708      	adds	r7, #8
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	bf00      	nop
 800d09c:	0802eca8 	.word	0x0802eca8

0800d0a0 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800d0a0:	b480      	push	{r7}
 800d0a2:	b083      	sub	sp, #12
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
    {
 800d0a8:	4a04      	ldr	r2, [pc, #16]	; (800d0bc <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	601a      	str	r2, [r3, #0]
    }
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	370c      	adds	r7, #12
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr
 800d0bc:	0802eca8 	.word	0x0802eca8

0800d0c0 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
    }
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f7ff ffe9 	bl	800d0a0 <_ZN8touchgfx8DrawableD1Ev>
 800d0ce:	2128      	movs	r1, #40	; 0x28
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f01a fc63 	bl	802799c <_ZdlPvj>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3708      	adds	r7, #8
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b082      	sub	sp, #8
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d005      	beq.n	800d0fe <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	3314      	adds	r3, #20
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	4798      	blx	r3
        }
    }
 800d0fe:	bf00      	nop
 800d100:	3708      	adds	r7, #8
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}

0800d106 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800d106:	b480      	push	{r7}
 800d108:	b083      	sub	sp, #12
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800d10e:	2300      	movs	r3, #0
    }
 800d110:	4618      	mov	r0, r3
 800d112:	370c      	adds	r7, #12
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr

0800d11c <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	4608      	mov	r0, r1
 800d126:	4611      	mov	r1, r2
 800d128:	461a      	mov	r2, r3
 800d12a:	4603      	mov	r3, r0
 800d12c:	817b      	strh	r3, [r7, #10]
 800d12e:	460b      	mov	r3, r1
 800d130:	813b      	strh	r3, [r7, #8]
 800d132:	4613      	mov	r3, r2
 800d134:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800d136:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800d13a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d13e:	4619      	mov	r1, r3
 800d140:	68f8      	ldr	r0, [r7, #12]
 800d142:	f000 f82a 	bl	800d19a <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800d146:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800d14a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d14e:	4619      	mov	r1, r3
 800d150:	68f8      	ldr	r0, [r7, #12]
 800d152:	f000 f87e 	bl	800d252 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800d156:	bf00      	nop
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}

0800d15e <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800d15e:	b480      	push	{r7}
 800d160:	b083      	sub	sp, #12
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
 800d166:	460b      	mov	r3, r1
 800d168:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	887a      	ldrh	r2, [r7, #2]
 800d16e:	809a      	strh	r2, [r3, #4]
    }
 800d170:	bf00      	nop
 800d172:	370c      	adds	r7, #12
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr

0800d17c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800d17c:	b480      	push	{r7}
 800d17e:	b083      	sub	sp, #12
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	460b      	mov	r3, r1
 800d186:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	887a      	ldrh	r2, [r7, #2]
 800d18c:	80da      	strh	r2, [r3, #6]
    }
 800d18e:	bf00      	nop
 800d190:	370c      	adds	r7, #12
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr

0800d19a <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800d19a:	b580      	push	{r7, lr}
 800d19c:	b082      	sub	sp, #8
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	807b      	strh	r3, [r7, #2]
 800d1a6:	4613      	mov	r3, r2
 800d1a8:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	3330      	adds	r3, #48	; 0x30
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d1b6:	4611      	mov	r1, r2
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	4798      	blx	r3
        setY(y);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	3334      	adds	r3, #52	; 0x34
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d1c8:	4611      	mov	r1, r2
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	4798      	blx	r3
    }
 800d1ce:	bf00      	nop
 800d1d0:	3708      	adds	r7, #8
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}

0800d1d6 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800d1d6:	b480      	push	{r7}
 800d1d8:	b083      	sub	sp, #12
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
 800d1de:	460b      	mov	r3, r1
 800d1e0:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	887a      	ldrh	r2, [r7, #2]
 800d1e6:	811a      	strh	r2, [r3, #8]
    }
 800d1e8:	bf00      	nop
 800d1ea:	370c      	adds	r7, #12
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr

0800d1f4 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800d1f4:	b480      	push	{r7}
 800d1f6:	b083      	sub	sp, #12
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	460b      	mov	r3, r1
 800d1fe:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	887a      	ldrh	r2, [r7, #2]
 800d204:	815a      	strh	r2, [r3, #10]
    }
 800d206:	bf00      	nop
 800d208:	370c      	adds	r7, #12
 800d20a:	46bd      	mov	sp, r7
 800d20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d210:	4770      	bx	lr

0800d212 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800d212:	b480      	push	{r7}
 800d214:	b083      	sub	sp, #12
 800d216:	af00      	add	r7, sp, #0
 800d218:	6078      	str	r0, [r7, #4]
    {
    }
 800d21a:	bf00      	nop
 800d21c:	370c      	adds	r7, #12
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr

0800d226 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800d226:	b480      	push	{r7}
 800d228:	b083      	sub	sp, #12
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
 800d22e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d230:	bf00      	nop
 800d232:	370c      	adds	r7, #12
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr

0800d23c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800d23c:	b480      	push	{r7}
 800d23e:	b083      	sub	sp, #12
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d246:	bf00      	nop
 800d248:	370c      	adds	r7, #12
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr

0800d252 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800d252:	b580      	push	{r7, lr}
 800d254:	b082      	sub	sp, #8
 800d256:	af00      	add	r7, sp, #0
 800d258:	6078      	str	r0, [r7, #4]
 800d25a:	460b      	mov	r3, r1
 800d25c:	807b      	strh	r3, [r7, #2]
 800d25e:	4613      	mov	r3, r2
 800d260:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	3338      	adds	r3, #56	; 0x38
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d26e:	4611      	mov	r1, r2
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	4798      	blx	r3
        setHeight(height);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	333c      	adds	r3, #60	; 0x3c
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d280:	4611      	mov	r1, r2
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	4798      	blx	r3
    }
 800d286:	bf00      	nop
 800d288:	3708      	adds	r7, #8
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}

0800d28e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800d28e:	b480      	push	{r7}
 800d290:	b083      	sub	sp, #12
 800d292:	af00      	add	r7, sp, #0
 800d294:	6078      	str	r0, [r7, #4]
 800d296:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d298:	bf00      	nop
 800d29a:	370c      	adds	r7, #12
 800d29c:	46bd      	mov	sp, r7
 800d29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a2:	4770      	bx	lr

0800d2a4 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800d2a4:	b480      	push	{r7}
 800d2a6:	b083      	sub	sp, #12
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
    {
    }
 800d2ac:	bf00      	nop
 800d2ae:	370c      	adds	r7, #12
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr

0800d2b8 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	370c      	adds	r7, #12
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d0:	4770      	bx	lr

0800d2d2 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800d2d2:	b480      	push	{r7}
 800d2d4:	b083      	sub	sp, #12
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	370c      	adds	r7, #12
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	807b      	strh	r3, [r7, #2]
 800d2f8:	4613      	mov	r3, r2
 800d2fa:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	3354      	adds	r3, #84	; 0x54
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	8879      	ldrh	r1, [r7, #2]
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800d30c:	b292      	uxth	r2, r2
 800d30e:	1a8a      	subs	r2, r1, r2
 800d310:	b292      	uxth	r2, r2
 800d312:	b210      	sxth	r0, r2
 800d314:	8839      	ldrh	r1, [r7, #0]
 800d316:	687a      	ldr	r2, [r7, #4]
 800d318:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800d31c:	b292      	uxth	r2, r2
 800d31e:	1a8a      	subs	r2, r1, r2
 800d320:	b292      	uxth	r2, r2
 800d322:	b212      	sxth	r2, r2
 800d324:	4601      	mov	r1, r0
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	4798      	blx	r3
    }
 800d32a:	bf00      	nop
 800d32c:	3708      	adds	r7, #8
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}

0800d332 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800d332:	b480      	push	{r7}
 800d334:	b083      	sub	sp, #12
 800d336:	af00      	add	r7, sp, #0
 800d338:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d340:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d348:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d350:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800d352:	bf00      	nop
 800d354:	370c      	adds	r7, #12
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr

0800d35e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800d35e:	b580      	push	{r7, lr}
 800d360:	b084      	sub	sp, #16
 800d362:	af00      	add	r7, sp, #0
 800d364:	60f8      	str	r0, [r7, #12]
 800d366:	60b9      	str	r1, [r7, #8]
 800d368:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800d36a:	68f8      	ldr	r0, [r7, #12]
 800d36c:	f7ff ffe1 	bl	800d332 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681a      	ldr	r2, [r3, #0]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	68fa      	ldr	r2, [r7, #12]
 800d37c:	601a      	str	r2, [r3, #0]
    }
 800d37e:	bf00      	nop
 800d380:	3710      	adds	r7, #16
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
	...

0800d388 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 800d388:	b580      	push	{r7, lr}
 800d38a:	b082      	sub	sp, #8
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	4618      	mov	r0, r3
 800d394:	f7ff fe54 	bl	800d040 <_ZN8touchgfx8DrawableC1Ev>
 800d398:	4a05      	ldr	r2, [pc, #20]	; (800d3b0 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	601a      	str	r2, [r3, #0]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3708      	adds	r7, #8
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	0802e5cc 	.word	0x0802e5cc

0800d3b4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 800d3b4:	b480      	push	{r7}
 800d3b6:	b083      	sub	sp, #12
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	370c      	adds	r7, #12
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ca:	4770      	bx	lr

0800d3cc <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
    {
 800d3d4:	4a06      	ldr	r2, [pc, #24]	; (800d3f0 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	601a      	str	r2, [r3, #0]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	3304      	adds	r3, #4
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f002 fbf6 	bl	800fbd0 <_ZN8touchgfx9ContainerD1Ev>
    }
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3708      	adds	r7, #8
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	0802eda4 	.word	0x0802eda4

0800d3f4 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b082      	sub	sp, #8
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
    }
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f7ff ffe5 	bl	800d3cc <_ZN8touchgfx6ScreenD1Ev>
 800d402:	213c      	movs	r1, #60	; 0x3c
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f01a fac9 	bl	802799c <_ZdlPvj>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	4618      	mov	r0, r3
 800d40e:	3708      	adds	r7, #8
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800d414:	b480      	push	{r7}
 800d416:	b083      	sub	sp, #12
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
    {
    }
 800d41c:	bf00      	nop
 800d41e:	370c      	adds	r7, #12
 800d420:	46bd      	mov	sp, r7
 800d422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d426:	4770      	bx	lr

0800d428 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800d428:	b480      	push	{r7}
 800d42a:	b083      	sub	sp, #12
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
    {
    }
 800d430:	bf00      	nop
 800d432:	370c      	adds	r7, #12
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800d43c:	b480      	push	{r7}
 800d43e:	b083      	sub	sp, #12
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
    {
    }
 800d444:	bf00      	nop
 800d446:	370c      	adds	r7, #12
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr

0800d450 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800d450:	b480      	push	{r7}
 800d452:	b083      	sub	sp, #12
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
    {
    }
 800d458:	bf00      	nop
 800d45a:	370c      	adds	r7, #12
 800d45c:	46bd      	mov	sp, r7
 800d45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d462:	4770      	bx	lr

0800d464 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800d464:	b480      	push	{r7}
 800d466:	b083      	sub	sp, #12
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	460b      	mov	r3, r1
 800d46e:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800d470:	bf00      	nop
 800d472:	370c      	adds	r7, #12
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr

0800d47c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	3304      	adds	r3, #4
 800d48a:	6839      	ldr	r1, [r7, #0]
 800d48c:	4618      	mov	r0, r3
 800d48e:	f006 f81f 	bl	80134d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800d492:	bf00      	nop
 800d494:	3708      	adds	r7, #8
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}

0800d49a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800d49a:	b580      	push	{r7, lr}
 800d49c:	b084      	sub	sp, #16
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	60f8      	str	r0, [r7, #12]
 800d4a2:	607b      	str	r3, [r7, #4]
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	817b      	strh	r3, [r7, #10]
 800d4a8:	4613      	mov	r3, r2
 800d4aa:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f7ff ff02 	bl	800d2b8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d008      	beq.n	800d4cc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7ff ff08 	bl	800d2d2 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d001      	beq.n	800d4cc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	e000      	b.n	800d4ce <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d002      	beq.n	800d4d8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800d4d2:	68fa      	ldr	r2, [r7, #12]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	601a      	str	r2, [r3, #0]
        }
    }
 800d4d8:	bf00      	nop
 800d4da:	3710      	adds	r7, #16
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}

0800d4e0 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b082      	sub	sp, #8
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7ff fda8 	bl	800d040 <_ZN8touchgfx8DrawableC1Ev>
 800d4f0:	4a03      	ldr	r2, [pc, #12]	; (800d500 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	601a      	str	r2, [r3, #0]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3708      	adds	r7, #8
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	0802dbe0 	.word	0x0802dbe0

0800d504 <_ZN8touchgfx6WidgetD1Ev>:
 800d504:	b580      	push	{r7, lr}
 800d506:	b082      	sub	sp, #8
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	4a05      	ldr	r2, [pc, #20]	; (800d524 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	601a      	str	r2, [r3, #0]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	4618      	mov	r0, r3
 800d516:	f7ff fdc3 	bl	800d0a0 <_ZN8touchgfx8DrawableD1Ev>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	4618      	mov	r0, r3
 800d51e:	3708      	adds	r7, #8
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}
 800d524:	0802dbe0 	.word	0x0802dbe0

0800d528 <_ZN8touchgfx6WidgetD0Ev>:
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f7ff ffe7 	bl	800d504 <_ZN8touchgfx6WidgetD1Ev>
 800d536:	2128      	movs	r1, #40	; 0x28
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f01a fa2f 	bl	802799c <_ZdlPvj>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	4618      	mov	r0, r3
 800d542:	3708      	adds	r7, #8
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800d548:	b580      	push	{r7, lr}
 800d54a:	b082      	sub	sp, #8
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	4618      	mov	r0, r3
 800d554:	2326      	movs	r3, #38	; 0x26
 800d556:	461a      	mov	r2, r3
 800d558:	2100      	movs	r1, #0
 800d55a:	f01a fbd3 	bl	8027d04 <memset>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	4618      	mov	r0, r3
 800d562:	f7ff ffbd 	bl	800d4e0 <_ZN8touchgfx6WidgetC1Ev>
 800d566:	4a09      	ldr	r2, [pc, #36]	; (800d58c <_ZN8touchgfx3BoxC1Ev+0x44>)
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	601a      	str	r2, [r3, #0]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	22ff      	movs	r2, #255	; 0xff
 800d570:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	3328      	adds	r3, #40	; 0x28
 800d578:	2100      	movs	r1, #0
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7ff fd0e 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	4618      	mov	r0, r3
 800d584:	3708      	adds	r7, #8
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
 800d58a:	bf00      	nop
 800d58c:	0802ea90 	.word	0x0802ea90

0800d590 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800d590:	b480      	push	{r7}
 800d592:	b083      	sub	sp, #12
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	683a      	ldr	r2, [r7, #0]
 800d59e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800d5a0:	bf00      	nop
 800d5a2:	370c      	adds	r7, #12
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr

0800d5ac <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800d5ac:	b480      	push	{r7}
 800d5ae:	b083      	sub	sp, #12
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	460b      	mov	r3, r1
 800d5b6:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800d5b8:	4a06      	ldr	r2, [pc, #24]	; (800d5d4 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	601a      	str	r2, [r3, #0]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	887a      	ldrh	r2, [r7, #2]
 800d5c2:	809a      	strh	r2, [r3, #4]
    }
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	370c      	adds	r7, #12
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr
 800d5d2:	bf00      	nop
 800d5d4:	0802d8f4 	.word	0x0802d8f4

0800d5d8 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	2326      	movs	r3, #38	; 0x26
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	2100      	movs	r1, #0
 800d5ea:	f01a fb8b 	bl	8027d04 <memset>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f7ff ff75 	bl	800d4e0 <_ZN8touchgfx6WidgetC1Ev>
 800d5f6:	4a16      	ldr	r2, [pc, #88]	; (800d650 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	601a      	str	r2, [r3, #0]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	3328      	adds	r3, #40	; 0x28
 800d600:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d604:	4618      	mov	r0, r3
 800d606:	f7ff ffd1 	bl	800d5ac <_ZN8touchgfx9TypedTextC1Et>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	3330      	adds	r3, #48	; 0x30
 800d60e:	2100      	movs	r1, #0
 800d610:	4618      	mov	r0, r3
 800d612:	f7ff fcc3 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2200      	movs	r2, #0
 800d61a:	869a      	strh	r2, [r3, #52]	; 0x34
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	22ff      	movs	r2, #255	; 0xff
 800d620:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2200      	movs	r2, #0
 800d628:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2200      	movs	r2, #0
 800d630:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2200      	movs	r2, #0
 800d638:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	333c      	adds	r3, #60	; 0x3c
 800d640:	4618      	mov	r0, r3
 800d642:	f000 f8f2 	bl	800d82a <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	4618      	mov	r0, r3
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}
 800d650:	0802ea00 	.word	0x0802ea00

0800d654 <_ZN8touchgfx8TextArea8setWidthEs>:

    virtual void setWidth(int16_t width)
 800d654:	b590      	push	{r4, r7, lr}
 800d656:	b087      	sub	sp, #28
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6178      	str	r0, [r7, #20]
 800d65c:	460b      	mov	r3, r1
 800d65e:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800d666:	4611      	mov	r1, r2
 800d668:	4618      	mov	r0, r3
 800d66a:	f7ff fdb4 	bl	800d1d6 <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	3384      	adds	r3, #132	; 0x84
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	697c      	ldr	r4, [r7, #20]
 800d678:	463a      	mov	r2, r7
 800d67a:	6979      	ldr	r1, [r7, #20]
 800d67c:	4610      	mov	r0, r2
 800d67e:	4798      	blx	r3
 800d680:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800d684:	463a      	mov	r2, r7
 800d686:	ca07      	ldmia	r2, {r0, r1, r2}
 800d688:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800d68c:	bf00      	nop
 800d68e:	371c      	adds	r7, #28
 800d690:	46bd      	mov	sp, r7
 800d692:	bd90      	pop	{r4, r7, pc}

0800d694 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800d694:	b590      	push	{r4, r7, lr}
 800d696:	b087      	sub	sp, #28
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6178      	str	r0, [r7, #20]
 800d69c:	460b      	mov	r3, r1
 800d69e:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800d6a6:	4611      	mov	r1, r2
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7ff fda3 	bl	800d1f4 <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	3384      	adds	r3, #132	; 0x84
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	697c      	ldr	r4, [r7, #20]
 800d6b8:	463a      	mov	r2, r7
 800d6ba:	6979      	ldr	r1, [r7, #20]
 800d6bc:	4610      	mov	r0, r2
 800d6be:	4798      	blx	r3
 800d6c0:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800d6c4:	463a      	mov	r2, r7
 800d6c6:	ca07      	ldmia	r2, {r0, r1, r2}
 800d6c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800d6cc:	bf00      	nop
 800d6ce:	371c      	adds	r7, #28
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd90      	pop	{r4, r7, pc}

0800d6d4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f7ff fc77 	bl	800cfd2 <_ZN8touchgfx4RectC1Ev>
    }
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	3708      	adds	r7, #8
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 800d6ec:	b480      	push	{r7}
 800d6ee:	b083      	sub	sp, #12
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	78fa      	ldrb	r2, [r7, #3]
 800d6fc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
 800d700:	bf00      	nop
 800d702:	370c      	adds	r7, #12
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr

0800d70c <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800d70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d70e:	b085      	sub	sp, #20
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	460b      	mov	r3, r1
 800d716:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800d718:	687e      	ldr	r6, [r7, #4]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	3334      	adds	r3, #52	; 0x34
 800d720:	681c      	ldr	r4, [r3, #0]
 800d722:	887d      	ldrh	r5, [r7, #2]
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f000 f869 	bl	800d7fc <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800d72a:	4603      	mov	r3, r0
 800d72c:	60fb      	str	r3, [r7, #12]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800d72e:	4b1d      	ldr	r3, [pc, #116]	; (800d7a4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d105      	bne.n	800d742 <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 800d736:	4b1c      	ldr	r3, [pc, #112]	; (800d7a8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800d738:	4a1c      	ldr	r2, [pc, #112]	; (800d7ac <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800d73a:	216c      	movs	r1, #108	; 0x6c
 800d73c:	481c      	ldr	r0, [pc, #112]	; (800d7b0 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800d73e:	f01a f95b 	bl	80279f8 <__assert_func>
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	889a      	ldrh	r2, [r3, #4]
 800d74a:	4b1a      	ldr	r3, [pc, #104]	; (800d7b4 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 800d74c:	881b      	ldrh	r3, [r3, #0]
 800d74e:	429a      	cmp	r2, r3
 800d750:	bf34      	ite	cc
 800d752:	2301      	movcc	r3, #1
 800d754:	2300      	movcs	r3, #0
 800d756:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d105      	bne.n	800d768 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 800d75c:	4b16      	ldr	r3, [pc, #88]	; (800d7b8 <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 800d75e:	4a13      	ldr	r2, [pc, #76]	; (800d7ac <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800d760:	216d      	movs	r1, #109	; 0x6d
 800d762:	4813      	ldr	r0, [pc, #76]	; (800d7b0 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800d764:	f01a f948 	bl	80279f8 <__assert_func>
 800d768:	bf00      	nop
        return fonts[typedTexts[typedTextId].fontIdx];
 800d76a:	4b14      	ldr	r3, [pc, #80]	; (800d7bc <_ZN8touchgfx8TextArea12setBaselineYEs+0xb0>)
 800d76c:	681a      	ldr	r2, [r3, #0]
 800d76e:	4b0d      	ldr	r3, [pc, #52]	; (800d7a4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800d770:	6819      	ldr	r1, [r3, #0]
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	889b      	ldrh	r3, [r3, #4]
 800d776:	005b      	lsls	r3, r3, #1
 800d778:	440b      	add	r3, r1
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	009b      	lsls	r3, r3, #2
 800d77e:	4413      	add	r3, r2
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	322c      	adds	r2, #44	; 0x2c
 800d786:	6812      	ldr	r2, [r2, #0]
 800d788:	4618      	mov	r0, r3
 800d78a:	4790      	blx	r2
 800d78c:	4603      	mov	r3, r0
 800d78e:	1aeb      	subs	r3, r5, r3
 800d790:	b29b      	uxth	r3, r3
 800d792:	b21b      	sxth	r3, r3
 800d794:	4619      	mov	r1, r3
 800d796:	4630      	mov	r0, r6
 800d798:	47a0      	blx	r4
    }
 800d79a:	bf00      	nop
 800d79c:	3714      	adds	r7, #20
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	2000c494 	.word	0x2000c494
 800d7a8:	0802c60c 	.word	0x0802c60c
 800d7ac:	0802c650 	.word	0x0802c650
 800d7b0:	0802c68c 	.word	0x0802c68c
 800d7b4:	2000c498 	.word	0x2000c498
 800d7b8:	0802c6d0 	.word	0x0802c6d0
 800d7bc:	2000c49c 	.word	0x2000c49c

0800d7c0 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b082      	sub	sp, #8
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	460b      	mov	r3, r1
 800d7ca:	807b      	strh	r3, [r7, #2]
 800d7cc:	4613      	mov	r3, r2
 800d7ce:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	3330      	adds	r3, #48	; 0x30
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800d7de:	4610      	mov	r0, r2
 800d7e0:	4798      	blx	r3
        setBaselineY(baselineY);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	3364      	adds	r3, #100	; 0x64
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d7ee:	4611      	mov	r1, r2
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	4798      	blx	r3
    }
 800d7f4:	bf00      	nop
 800d7f6:	3708      	adds	r7, #8
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	3328      	adds	r3, #40	; 0x28
    }
 800d808:	4618      	mov	r0, r3
 800d80a:	370c      	adds	r7, #12
 800d80c:	46bd      	mov	sp, r7
 800d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d812:	4770      	bx	lr

0800d814 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 800d814:	b480      	push	{r7}
 800d816:	b083      	sub	sp, #12
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800d81c:	2300      	movs	r3, #0
    }
 800d81e:	4618      	mov	r0, r3
 800d820:	370c      	adds	r7, #12
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr

0800d82a <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b084      	sub	sp, #16
 800d82e:	af02      	add	r7, sp, #8
 800d830:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f04f 33ff 	mov.w	r3, #4294967295
 800d838:	9300      	str	r3, [sp, #0]
 800d83a:	f04f 33ff 	mov.w	r3, #4294967295
 800d83e:	2200      	movs	r2, #0
 800d840:	2100      	movs	r1, #0
 800d842:	f7ff fbdd 	bl	800d000 <_ZN8touchgfx4RectC1Essss>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2200      	movs	r2, #0
 800d84a:	609a      	str	r2, [r3, #8]
        {
        }
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	4618      	mov	r0, r3
 800d850:	3708      	adds	r7, #8
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
	...

0800d858 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	4a08      	ldr	r2, [pc, #32]	; (800d884 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	601a      	str	r2, [r3, #0]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	3328      	adds	r3, #40	; 0x28
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7fe fc22 	bl	800c0b4 <_ZN8touchgfx9TypedTextD1Ev>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	4618      	mov	r0, r3
 800d874:	f7ff fe46 	bl	800d504 <_ZN8touchgfx6WidgetD1Ev>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	4618      	mov	r0, r3
 800d87c:	3708      	adds	r7, #8
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	0802ea00 	.word	0x0802ea00

0800d888 <_ZN8touchgfx8TextAreaD0Ev>:
 800d888:	b580      	push	{r7, lr}
 800d88a:	b082      	sub	sp, #8
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f7ff ffe1 	bl	800d858 <_ZN8touchgfx8TextAreaD1Ev>
 800d896:	2148      	movs	r1, #72	; 0x48
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f01a f87f 	bl	802799c <_ZdlPvj>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3708      	adds	r7, #8
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
 *
 */
class TextAreaWithWildcardBase : public TextArea
{
public:
    TextAreaWithWildcardBase()
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
        : TextArea()
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7ff fe90 	bl	800d5d8 <_ZN8touchgfx8TextAreaC1Ev>
 800d8b8:	4a03      	ldr	r2, [pc, #12]	; (800d8c8 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	601a      	str	r2, [r3, #0]
    {
    }
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3708      	adds	r7, #8
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	0802eaf8 	.word	0x0802eaf8

0800d8cc <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const;

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b082      	sub	sp, #8
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f7ff ffa7 	bl	800d82a <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	3708      	adds	r7, #8
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	4a05      	ldr	r2, [pc, #20]	; (800d904 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	601a      	str	r2, [r3, #0]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f7ff ffaf 	bl	800d858 <_ZN8touchgfx8TextAreaD1Ev>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3708      	adds	r7, #8
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}
 800d904:	0802eaf8 	.word	0x0802eaf8

0800d908 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f7ff ffe7 	bl	800d8e4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800d916:	2148      	movs	r1, #72	; 0x48
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f01a f83f 	bl	802799c <_ZdlPvj>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	4618      	mov	r0, r3
 800d922:	3708      	adds	r7, #8
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}

0800d928 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
{
public:
    TextAreaWithOneWildcard()
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wc1(0)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	4618      	mov	r0, r3
 800d934:	f7ff ffb8 	bl	800d8a8 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800d938:	4a05      	ldr	r2, [pc, #20]	; (800d950 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	601a      	str	r2, [r3, #0]
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2200      	movs	r2, #0
 800d942:	649a      	str	r2, [r3, #72]	; 0x48
    {
    }
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	4618      	mov	r0, r3
 800d948:	3708      	adds	r7, #8
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	0802db50 	.word	0x0802db50

0800d954 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard1(const Unicode::UnicodeChar* value)
 800d954:	b480      	push	{r7}
 800d956:	b083      	sub	sp, #12
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	6039      	str	r1, [r7, #0]
    {
        wc1 = value;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	683a      	ldr	r2, [r7, #0]
 800d962:	649a      	str	r2, [r3, #72]	; 0x48
    }
 800d964:	bf00      	nop
 800d966:	370c      	adds	r7, #12
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr

0800d970 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:

    virtual const Unicode::UnicodeChar* getWildcard1() const
 800d970:	b480      	push	{r7}
 800d972:	b083      	sub	sp, #12
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
 800d97c:	4618      	mov	r0, r3
 800d97e:	370c      	adds	r7, #12
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr

0800d988 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
    {
        setWildcard1(value);
 800d992:	6839      	ldr	r1, [r7, #0]
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f7ff ffdd 	bl	800d954 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>
    }
 800d99a:	bf00      	nop
 800d99c:	3708      	adds	r7, #8
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}

0800d9a2 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>:
     *
     * @param  dm The new display mode.
     *
     * @see DisplayMode, getDisplayMode
     */
    virtual void setDisplayMode(DisplayMode dm)
 800d9a2:	b480      	push	{r7}
 800d9a4:	b083      	sub	sp, #12
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
 800d9aa:	460b      	mov	r3, r1
 800d9ac:	70fb      	strb	r3, [r7, #3]
    {
        displayMode = dm;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	78fa      	ldrb	r2, [r7, #3]
 800d9b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    }
 800d9b6:	bf00      	nop
 800d9b8:	370c      	adds	r7, #12
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr
	...

0800d9c4 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 800d9c4:	b480      	push	{r7}
 800d9c6:	b083      	sub	sp, #12
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 800d9cc:	4a06      	ldr	r2, [pc, #24]	; (800d9e8 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	601a      	str	r2, [r3, #0]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	809a      	strh	r2, [r3, #4]
    {
    }
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	4618      	mov	r0, r3
 800d9dc:	370c      	adds	r7, #12
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e4:	4770      	bx	lr
 800d9e6:	bf00      	nop
 800d9e8:	0802db30 	.word	0x0802db30

0800d9ec <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 800d9ec:	b480      	push	{r7}
 800d9ee:	b083      	sub	sp, #12
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
    {
 800d9f4:	4a04      	ldr	r2, [pc, #16]	; (800da08 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	601a      	str	r2, [r3, #0]
    }
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	370c      	adds	r7, #12
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr
 800da08:	0802db30 	.word	0x0802db30

0800da0c <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
    }
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f7ff ffe9 	bl	800d9ec <_ZN8touchgfx15AbstractPainterD1Ev>
 800da1a:	2108      	movs	r1, #8
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f019 ffbd 	bl	802799c <_ZdlPvj>
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	4618      	mov	r0, r3
 800da26:	3708      	adds	r7, #8
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 800da2c:	b480      	push	{r7}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 800da34:	2300      	movs	r3, #0
    }
 800da36:	4618      	mov	r0, r3
 800da38:	370c      	adds	r7, #12
 800da3a:	46bd      	mov	sp, r7
 800da3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da40:	4770      	bx	lr

0800da42 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 800da42:	b480      	push	{r7}
 800da44:	b083      	sub	sp, #12
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
 800da4a:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	809a      	strh	r2, [r3, #4]
        return true;
 800da56:	2301      	movs	r3, #1
    }
 800da58:	4618      	mov	r0, r3
 800da5a:	370c      	adds	r7, #12
 800da5c:	46bd      	mov	sp, r7
 800da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da62:	4770      	bx	lr

0800da64 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 800da64:	b480      	push	{r7}
 800da66:	b083      	sub	sp, #12
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
    {
        return;
 800da6c:	bf00      	nop
    }
 800da6e:	370c      	adds	r7, #12
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr

0800da78 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
            : v(i)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	683a      	ldr	r2, [r7, #0]
 800da86:	601a      	str	r2, [r3, #0]
        {
        }
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	4618      	mov	r0, r3
 800da8c:	370c      	adds	r7, #12
 800da8e:	46bd      	mov	sp, r7
 800da90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da94:	4770      	bx	lr

0800da96 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 800da96:	b480      	push	{r7}
 800da98:	b083      	sub	sp, #12
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
        {
            return v;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
        }
 800daa2:	4618      	mov	r0, r3
 800daa4:	370c      	adds	r7, #12
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr

0800daae <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>:
     * @see getPainter
     *
     * @note If setPainter() is used to change the painter to a different painter, the area
     *       containing the CanvasWidget is not automatically invalidated.
     */
    void setPainter(const AbstractPainter& painter)
 800daae:	b480      	push	{r7}
 800dab0:	b083      	sub	sp, #12
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
 800dab6:	6039      	str	r1, [r7, #0]
    {
        canvasPainter = &painter;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	683a      	ldr	r2, [r7, #0]
 800dabc:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800dabe:	bf00      	nop
 800dac0:	370c      	adds	r7, #12
 800dac2:	46bd      	mov	sp, r7
 800dac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac8:	4770      	bx	lr

0800daca <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @see updateLineWidth
     *
     * @note The area containing the Line is not invalidated.
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 800daca:	b590      	push	{r4, r7, lr}
 800dacc:	b083      	sub	sp, #12
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
 800dad2:	6039      	str	r1, [r7, #0]
    {
        if (lineWidthQ5 == widthQ5)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	333c      	adds	r3, #60	; 0x3c
 800dad8:	4618      	mov	r0, r3
 800dada:	f7ff ffdc 	bl	800da96 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800dade:	4604      	mov	r4, r0
 800dae0:	463b      	mov	r3, r7
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7ff ffd7 	bl	800da96 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800dae8:	4603      	mov	r3, r0
 800daea:	429c      	cmp	r4, r3
 800daec:	bf0c      	ite	eq
 800daee:	2301      	moveq	r3, #1
 800daf0:	2300      	movne	r3, #0
 800daf2:	b2db      	uxtb	r3, r3
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d106      	bne.n	800db06 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidthQ5 = widthQ5;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	683a      	ldr	r2, [r7, #0]
 800dafc:	63da      	str	r2, [r3, #60]	; 0x3c

        updateCachedShape();
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f007 f934 	bl	8014d6c <_ZN8touchgfx4Line17updateCachedShapeEv>
 800db04:	e000      	b.n	800db08 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 800db06:	bf00      	nop
    }
 800db08:	370c      	adds	r7, #12
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd90      	pop	{r4, r7, pc}
	...

0800db10 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 800db10:	b580      	push	{r7, lr}
 800db12:	b082      	sub	sp, #8
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	6039      	str	r1, [r7, #0]
    {
 800db1a:	4a08      	ldr	r2, [pc, #32]	; (800db3c <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	601a      	str	r2, [r3, #0]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	3304      	adds	r3, #4
 800db24:	4618      	mov	r0, r3
 800db26:	f7ff fa2b 	bl	800cf80 <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 800db2a:	6839      	ldr	r1, [r7, #0]
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f000 f827 	bl	800db80 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	4618      	mov	r0, r3
 800db36:	3708      	adds	r7, #8
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	0802db1c 	.word	0x0802db1c

0800db40 <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 800db40:	b480      	push	{r7}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
    {
 800db48:	4a04      	ldr	r2, [pc, #16]	; (800db5c <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	601a      	str	r2, [r3, #0]
    }
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	4618      	mov	r0, r3
 800db52:	370c      	adds	r7, #12
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr
 800db5c:	0802db1c 	.word	0x0802db1c

0800db60 <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
    }
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f7ff ffe9 	bl	800db40 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 800db6e:	2108      	movs	r1, #8
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f019 ff13 	bl	802799c <_ZdlPvj>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	4618      	mov	r0, r3
 800db7a:	3708      	adds	r7, #8
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}

0800db80 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 800db80:	b480      	push	{r7}
 800db82:	b083      	sub	sp, #12
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	683a      	ldr	r2, [r7, #0]
 800db8e:	605a      	str	r2, [r3, #4]
    }
 800db90:	bf00      	nop
 800db92:	370c      	adds	r7, #12
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr

0800db9c <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7ff ff0c 	bl	800d9c4 <_ZN8touchgfx15AbstractPainterC1Ev>
 800dbac:	4a26      	ldr	r2, [pc, #152]	; (800dc48 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xac>)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	601a      	str	r2, [r3, #0]
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 800dbb6:	f7fe fd69 	bl	800c68c <_ZN8touchgfx3HAL3lcdEv>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	681a      	ldr	r2, [r3, #0]
 800dbbe:	322c      	adds	r2, #44	; 0x2c
 800dbc0:	6812      	ldr	r2, [r2, #0]
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	4790      	blx	r2
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	461a      	mov	r2, r3
 800dbca:	7bfb      	ldrb	r3, [r7, #15]
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	bf0c      	ite	eq
 800dbd0:	2301      	moveq	r3, #1
 800dbd2:	2300      	movne	r3, #0
 800dbd4:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 800dbd6:	f7fe fd4d 	bl	800c674 <_ZN8touchgfx3HAL11getInstanceEv>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f7ff fbe9 	bl	800d3b4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	bf14      	ite	ne
 800dbe8:	2301      	movne	r3, #1
 800dbea:	2300      	moveq	r3, #0
 800dbec:	b2db      	uxtb	r3, r3
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d01b      	beq.n	800dc2a <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800dbf2:	f7fe fd3f 	bl	800c674 <_ZN8touchgfx3HAL11getInstanceEv>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7ff fbdb 	bl	800d3b4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	681a      	ldr	r2, [r3, #0]
 800dc02:	322c      	adds	r2, #44	; 0x2c
 800dc04:	6812      	ldr	r2, [r2, #0]
 800dc06:	4618      	mov	r0, r3
 800dc08:	4790      	blx	r2
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	7bfb      	ldrb	r3, [r7, #15]
 800dc10:	4293      	cmp	r3, r2
 800dc12:	bf0c      	ite	eq
 800dc14:	2301      	moveq	r3, #1
 800dc16:	2300      	movne	r3, #0
 800dc18:	b2da      	uxtb	r2, r3
 800dc1a:	7bbb      	ldrb	r3, [r7, #14]
 800dc1c:	4313      	orrs	r3, r2
 800dc1e:	b2db      	uxtb	r3, r3
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	bf14      	ite	ne
 800dc24:	2301      	movne	r3, #1
 800dc26:	2300      	moveq	r3, #0
 800dc28:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 800dc2a:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d105      	bne.n	800dc3c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xa0>
 800dc30:	4b06      	ldr	r3, [pc, #24]	; (800dc4c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb0>)
 800dc32:	4a07      	ldr	r2, [pc, #28]	; (800dc50 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb4>)
 800dc34:	212c      	movs	r1, #44	; 0x2c
 800dc36:	4807      	ldr	r0, [pc, #28]	; (800dc54 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb8>)
 800dc38:	f019 fede 	bl	80279f8 <__assert_func>
 800dc3c:	bf00      	nop
    }
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	4618      	mov	r0, r3
 800dc42:	3710      	adds	r7, #16
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}
 800dc48:	0802dafc 	.word	0x0802dafc
 800dc4c:	0802c710 	.word	0x0802c710
 800dc50:	0802c770 	.word	0x0802c770
 800dc54:	0802c7ac 	.word	0x0802c7ac

0800dc58 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>:
class AbstractPainterRGB565 : public AbstractPainter
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	4a05      	ldr	r2, [pc, #20]	; (800dc78 <_ZN8touchgfx21AbstractPainterRGB565D1Ev+0x20>)
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	601a      	str	r2, [r3, #0]
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7ff febf 	bl	800d9ec <_ZN8touchgfx15AbstractPainterD1Ev>
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	4618      	mov	r0, r3
 800dc72:	3708      	adds	r7, #8
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}
 800dc78:	0802dafc 	.word	0x0802dafc

0800dc7c <_ZN8touchgfx21AbstractPainterRGB565D0Ev>:
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f7ff ffe7 	bl	800dc58 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 800dc8a:	2108      	movs	r1, #8
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f019 fe85 	bl	802799c <_ZdlPvj>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	4618      	mov	r0, r3
 800dc96:	3708      	adds	r7, #8
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b082      	sub	sp, #8
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
 800dca4:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7ff ff77 	bl	800db9c <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	3308      	adds	r3, #8
 800dcb2:	6839      	ldr	r1, [r7, #0]
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7ff ff2b 	bl	800db10 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 800dcba:	4a05      	ldr	r2, [pc, #20]	; (800dcd0 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x34>)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	601a      	str	r2, [r3, #0]
 800dcc0:	4a04      	ldr	r2, [pc, #16]	; (800dcd4 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x38>)
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	609a      	str	r2, [r3, #8]
    {
    }
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3708      	adds	r7, #8
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	0802e7b4 	.word	0x0802e7b4
 800dcd4:	0802e7d8 	.word	0x0802e7d8

0800dcd8 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:

    virtual void setColor(colortype color)
 800dcd8:	b590      	push	{r4, r7, lr}
 800dcda:	b085      	sub	sp, #20
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
    {
        AbstractPainterColor::setColor(color);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	3308      	adds	r3, #8
 800dce6:	6839      	ldr	r1, [r7, #0]
 800dce8:	4618      	mov	r0, r3
 800dcea:	f7ff ff49 	bl	800db80 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	68db      	ldr	r3, [r3, #12]
 800dcf2:	60fb      	str	r3, [r7, #12]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static uint16_t getNativeColor(colortype color)
    {
        return ((color >> 8) & 0xF800) | ((color >> 5) & 0x07E0) | ((color >> 3) & 0x001F);
 800dcf4:	f107 030c 	add.w	r3, r7, #12
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7ff f95e 	bl	800cfba <_ZNK8touchgfx9colortypecvmEv>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	0a1b      	lsrs	r3, r3, #8
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800dd08:	f023 0307 	bic.w	r3, r3, #7
 800dd0c:	b29c      	uxth	r4, r3
 800dd0e:	f107 030c 	add.w	r3, r7, #12
 800dd12:	4618      	mov	r0, r3
 800dd14:	f7ff f951 	bl	800cfba <_ZNK8touchgfx9colortypecvmEv>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	095b      	lsrs	r3, r3, #5
 800dd1c:	b29b      	uxth	r3, r3
 800dd1e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	4323      	orrs	r3, r4
 800dd26:	b29c      	uxth	r4, r3
 800dd28:	f107 030c 	add.w	r3, r7, #12
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7ff f944 	bl	800cfba <_ZNK8touchgfx9colortypecvmEv>
 800dd32:	4603      	mov	r3, r0
 800dd34:	08db      	lsrs	r3, r3, #3
 800dd36:	b29b      	uxth	r3, r3
 800dd38:	f003 031f 	and.w	r3, r3, #31
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	4323      	orrs	r3, r4
 800dd40:	b29a      	uxth	r2, r3
        color565 = LCD16bpp::getNativeColor(painterColor);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	821a      	strh	r2, [r3, #16]
    }
 800dd46:	bf00      	nop
 800dd48:	3714      	adds	r7, #20
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd90      	pop	{r4, r7, pc}

0800dd4e <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
    virtual void setColor(colortype color)
 800dd4e:	f1a0 0008 	sub.w	r0, r0, #8
 800dd52:	e7c1      	b.n	800dcd8 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>

0800dd54 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev>:
class View : public Screen
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b082      	sub	sp, #8
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	4a05      	ldr	r2, [pc, #20]	; (800dd74 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x20>)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	601a      	str	r2, [r3, #0]
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	4618      	mov	r0, r3
 800dd66:	f7ff fb31 	bl	800d3cc <_ZN8touchgfx6ScreenD1Ev>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3708      	adds	r7, #8
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}
 800dd74:	0802dac8 	.word	0x0802dac8

0800dd78 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev>:
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f7ff ffe7 	bl	800dd54 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev>
 800dd86:	2140      	movs	r1, #64	; 0x40
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f019 fe07 	bl	802799c <_ZdlPvj>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	4618      	mov	r0, r3
 800dd92:	3708      	adds	r7, #8
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <_ZN18mainScreenViewBaseD1Ev>:

class mainScreenViewBase : public touchgfx::View<mainScreenPresenter>
{
public:
    mainScreenViewBase();
    virtual ~mainScreenViewBase() {}
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	4a55      	ldr	r2, [pc, #340]	; (800def8 <_ZN18mainScreenViewBaseD1Ev+0x160>)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	601a      	str	r2, [r3, #0]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 800ddac:	4618      	mov	r0, r3
 800ddae:	f7ff fd53 	bl	800d858 <_ZN8touchgfx8TextAreaD1Ev>
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f001 fee7 	bl	800fb8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f203 7324 	addw	r3, r3, #1828	; 0x724
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f001 fee1 	bl	800fb8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f001 fefd 	bl	800fbd0 <_ZN8touchgfx9ContainerD1Ev>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f203 63e4 	addw	r3, r3, #1764	; 0x6e4
 800dddc:	4618      	mov	r0, r3
 800ddde:	f002 f861 	bl	800fea4 <_ZN8touchgfx13PainterRGB565D1Ev>
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f203 6374 	addw	r3, r3, #1652	; 0x674
 800dde8:	4618      	mov	r0, r3
 800ddea:	f002 f839 	bl	800fe60 <_ZN8touchgfx4LineD1Ev>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f001 fec9 	bl	800fb8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f503 63bc 	add.w	r3, r3, #1504	; 0x5e0
 800de00:	4618      	mov	r0, r3
 800de02:	f7ff fd29 	bl	800d858 <_ZN8touchgfx8TextAreaD1Ev>
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 800de0c:	4618      	mov	r0, r3
 800de0e:	f001 fedf 	bl	800fbd0 <_ZN8touchgfx9ContainerD1Ev>
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 800de18:	4618      	mov	r0, r3
 800de1a:	f002 f843 	bl	800fea4 <_ZN8touchgfx13PainterRGB565D1Ev>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800de24:	4618      	mov	r0, r3
 800de26:	f002 f81b 	bl	800fe60 <_ZN8touchgfx4LineD1Ev>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 800de30:	4618      	mov	r0, r3
 800de32:	f002 f837 	bl	800fea4 <_ZN8touchgfx13PainterRGB565D1Ev>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f203 43ac 	addw	r3, r3, #1196	; 0x4ac
 800de3c:	4618      	mov	r0, r3
 800de3e:	f002 f80f 	bl	800fe60 <_ZN8touchgfx4LineD1Ev>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 800de48:	4618      	mov	r0, r3
 800de4a:	f001 fe9f 	bl	800fb8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800de54:	4618      	mov	r0, r3
 800de56:	f7ff fcff 	bl	800d858 <_ZN8touchgfx8TextAreaD1Ev>
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 800de60:	4618      	mov	r0, r3
 800de62:	f001 feb5 	bl	800fbd0 <_ZN8touchgfx9ContainerD1Ev>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 800de6c:	4618      	mov	r0, r3
 800de6e:	f002 f819 	bl	800fea4 <_ZN8touchgfx13PainterRGB565D1Ev>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f503 735a 	add.w	r3, r3, #872	; 0x368
 800de78:	4618      	mov	r0, r3
 800de7a:	f001 fff1 	bl	800fe60 <_ZN8touchgfx4LineD1Ev>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 800de84:	4618      	mov	r0, r3
 800de86:	f001 fe81 	bl	800fb8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800de90:	4618      	mov	r0, r3
 800de92:	f001 fe7b 	bl	800fb8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800de9c:	4618      	mov	r0, r3
 800de9e:	f7ff fcdb 	bl	800d858 <_ZN8touchgfx8TextAreaD1Ev>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800dea8:	4618      	mov	r0, r3
 800deaa:	f001 fe91 	bl	800fbd0 <_ZN8touchgfx9ContainerD1Ev>
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800deb4:	4618      	mov	r0, r3
 800deb6:	f001 ff89 	bl	800fdcc <_ZN8touchgfx12DigitalClockD1Ev>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7ff fcc9 	bl	800d858 <_ZN8touchgfx8TextAreaD1Ev>
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	3398      	adds	r3, #152	; 0x98
 800deca:	4618      	mov	r0, r3
 800decc:	f001 ff34 	bl	800fd38 <_ZN8touchgfx11BoxProgressD1Ev>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	336c      	adds	r3, #108	; 0x6c
 800ded4:	4618      	mov	r0, r3
 800ded6:	f001 fe7b 	bl	800fbd0 <_ZN8touchgfx9ContainerD1Ev>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	3340      	adds	r3, #64	; 0x40
 800dede:	4618      	mov	r0, r3
 800dee0:	f001 fe98 	bl	800fc14 <_ZN8touchgfx3BoxD1Ev>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7ff ff34 	bl	800dd54 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	4618      	mov	r0, r3
 800def0:	3708      	adds	r7, #8
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
 800def6:	bf00      	nop
 800def8:	0802da94 	.word	0x0802da94

0800defc <_ZN18mainScreenViewBaseD0Ev>:
 800defc:	b580      	push	{r7, lr}
 800defe:	b082      	sub	sp, #8
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f7ff ff47 	bl	800dd98 <_ZN18mainScreenViewBaseD1Ev>
 800df0a:	f241 71c4 	movw	r1, #6084	; 0x17c4
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f019 fd44 	bl	802799c <_ZdlPvj>
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	4618      	mov	r0, r3
 800df18:	3708      	adds	r7, #8
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
	...

0800df20 <_ZN18mainScreenViewBaseC1Ev>:
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


mainScreenViewBase::mainScreenViewBase()
 800df20:	b590      	push	{r4, r7, lr}
 800df22:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 800df26:	af02      	add	r7, sp, #8
 800df28:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800df2c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800df30:	6018      	str	r0, [r3, #0]
 800df32:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800df36:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4618      	mov	r0, r3
 800df3e:	f001 fdab 	bl	800fa98 <_ZN8touchgfx4ViewI19mainScreenPresenterEC1Ev>
 800df42:	4ae6      	ldr	r2, [pc, #920]	; (800e2dc <_ZN18mainScreenViewBaseC1Ev+0x3bc>)
 800df44:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800df48:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	601a      	str	r2, [r3, #0]
 800df50:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800df54:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	3340      	adds	r3, #64	; 0x40
 800df5c:	4618      	mov	r0, r3
 800df5e:	f7ff faf3 	bl	800d548 <_ZN8touchgfx3BoxC1Ev>
 800df62:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800df66:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	336c      	adds	r3, #108	; 0x6c
 800df6e:	4618      	mov	r0, r3
 800df70:	f7ff fa0a 	bl	800d388 <_ZN8touchgfx9ContainerC1Ev>
 800df74:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800df78:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	3398      	adds	r3, #152	; 0x98
 800df80:	4618      	mov	r0, r3
 800df82:	f004 fee3 	bl	8012d4c <_ZN8touchgfx11BoxProgressC1Ev>
 800df86:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800df8a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800df94:	4618      	mov	r0, r3
 800df96:	f7ff fb1f 	bl	800d5d8 <_ZN8touchgfx8TextAreaC1Ev>
 800df9a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800df9e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f005 f9cf 	bl	801334c <_ZN8touchgfx12DigitalClockC1Ev>
 800dfae:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800dfb2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f7ff f9e3 	bl	800d388 <_ZN8touchgfx9ContainerC1Ev>
 800dfc2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800dfc6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7ff fb01 	bl	800d5d8 <_ZN8touchgfx8TextAreaC1Ev>
 800dfd6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800dfda:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7ff fc9f 	bl	800d928 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800dfea:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800dfee:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7ff fc95 	bl	800d928 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800dffe:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e002:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f503 735a 	add.w	r3, r3, #872	; 0x368
 800e00c:	4618      	mov	r0, r3
 800e00e:	f006 fe8d 	bl	8014d2c <_ZN8touchgfx4LineC1Ev>
 800e012:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e016:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f503 7476 	add.w	r4, r3, #984	; 0x3d8
 800e020:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e024:	2100      	movs	r1, #0
 800e026:	4618      	mov	r0, r3
 800e028:	f7fe ffb8 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
 800e02c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e030:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800e034:	6819      	ldr	r1, [r3, #0]
 800e036:	4620      	mov	r0, r4
 800e038:	f7ff fe30 	bl	800dc9c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 800e03c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e040:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 800e04a:	4618      	mov	r0, r3
 800e04c:	f7ff f99c 	bl	800d388 <_ZN8touchgfx9ContainerC1Ev>
 800e050:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e054:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800e05e:	4618      	mov	r0, r3
 800e060:	f7ff faba 	bl	800d5d8 <_ZN8touchgfx8TextAreaC1Ev>
 800e064:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e068:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 800e072:	4618      	mov	r0, r3
 800e074:	f7ff fc58 	bl	800d928 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800e078:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e07c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f203 43ac 	addw	r3, r3, #1196	; 0x4ac
 800e086:	4618      	mov	r0, r3
 800e088:	f006 fe50 	bl	8014d2c <_ZN8touchgfx4LineC1Ev>
 800e08c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e090:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f203 541c 	addw	r4, r3, #1308	; 0x51c
 800e09a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e09e:	2100      	movs	r1, #0
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7fe ff7b 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
 800e0a6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e0aa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800e0ae:	6819      	ldr	r1, [r3, #0]
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	f7ff fdf3 	bl	800dc9c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 800e0b6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e0ba:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f006 fe31 	bl	8014d2c <_ZN8touchgfx4LineC1Ev>
 800e0ca:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e0ce:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 800e0d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e0dc:	2100      	movs	r1, #0
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f7fe ff5c 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
 800e0e4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e0e8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800e0ec:	6819      	ldr	r1, [r3, #0]
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	f7ff fdd4 	bl	800dc9c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 800e0f4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e0f8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 800e102:	4618      	mov	r0, r3
 800e104:	f7ff f940 	bl	800d388 <_ZN8touchgfx9ContainerC1Ev>
 800e108:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e10c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f503 63bc 	add.w	r3, r3, #1504	; 0x5e0
 800e116:	4618      	mov	r0, r3
 800e118:	f7ff fa5e 	bl	800d5d8 <_ZN8touchgfx8TextAreaC1Ev>
 800e11c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e120:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7ff fbfc 	bl	800d928 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800e130:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e134:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f203 6374 	addw	r3, r3, #1652	; 0x674
 800e13e:	4618      	mov	r0, r3
 800e140:	f006 fdf4 	bl	8014d2c <_ZN8touchgfx4LineC1Ev>
 800e144:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e148:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f203 64e4 	addw	r4, r3, #1764	; 0x6e4
 800e152:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e156:	2100      	movs	r1, #0
 800e158:	4618      	mov	r0, r3
 800e15a:	f7fe ff1f 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
 800e15e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e162:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800e166:	6819      	ldr	r1, [r3, #0]
 800e168:	4620      	mov	r0, r4
 800e16a:	f7ff fd97 	bl	800dc9c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 800e16e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e172:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7ff f903 	bl	800d388 <_ZN8touchgfx9ContainerC1Ev>
 800e182:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e186:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f203 7324 	addw	r3, r3, #1828	; 0x724
 800e190:	4618      	mov	r0, r3
 800e192:	f7ff fbc9 	bl	800d928 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800e196:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e19a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f7ff fbbf 	bl	800d928 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800e1aa:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e1ae:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7ff fa0d 	bl	800d5d8 <_ZN8touchgfx8TextAreaC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800e1be:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e1c2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 800e1cc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f008 fb29 	bl	8016828 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 240, 320);
 800e1d6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e1da:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800e1e4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800e1e8:	9300      	str	r3, [sp, #0]
 800e1ea:	23f0      	movs	r3, #240	; 0xf0
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	2100      	movs	r1, #0
 800e1f0:	f7fe ff94 	bl	800d11c <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800e1f4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e1f8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800e202:	2300      	movs	r3, #0
 800e204:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
 800e208:	2300      	movs	r3, #0
 800e20a:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
 800e20e:	2300      	movs	r3, #0
 800e210:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800e214:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 800e218:	041b      	lsls	r3, r3, #16
 800e21a:	461a      	mov	r2, r3
 800e21c:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 800e220:	021b      	lsls	r3, r3, #8
 800e222:	431a      	orrs	r2, r3
 800e224:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e228:	4313      	orrs	r3, r2
 800e22a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800e22e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e232:	4611      	mov	r1, r2
 800e234:	4618      	mov	r0, r3
 800e236:	f7fe feb1 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
 800e23a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800e23e:	4619      	mov	r1, r3
 800e240:	4620      	mov	r0, r4
 800e242:	f7ff f9a5 	bl	800d590 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    topContainer.setPosition(0, 0, 240, 27);
 800e246:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e24a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800e254:	231b      	movs	r3, #27
 800e256:	9300      	str	r3, [sp, #0]
 800e258:	23f0      	movs	r3, #240	; 0xf0
 800e25a:	2200      	movs	r2, #0
 800e25c:	2100      	movs	r1, #0
 800e25e:	f7fe ff5d 	bl	800d11c <_ZN8touchgfx8Drawable11setPositionEssss>

    batteryProgress.setXY(175, 6);
 800e262:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e266:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	3398      	adds	r3, #152	; 0x98
 800e26e:	2206      	movs	r2, #6
 800e270:	21af      	movs	r1, #175	; 0xaf
 800e272:	4618      	mov	r0, r3
 800e274:	f7fe ff91 	bl	800d19a <_ZN8touchgfx8Drawable5setXYEss>
    batteryProgress.setProgressIndicatorPosition(2, 2, 45, 14);
 800e278:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e27c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800e286:	230e      	movs	r3, #14
 800e288:	9300      	str	r3, [sp, #0]
 800e28a:	232d      	movs	r3, #45	; 0x2d
 800e28c:	2202      	movs	r2, #2
 800e28e:	2102      	movs	r1, #2
 800e290:	f004 fcb7 	bl	8012c02 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    batteryProgress.setRange(0, 100);
 800e294:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e298:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	9300      	str	r3, [sp, #0]
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	2264      	movs	r2, #100	; 0x64
 800e2aa:	2100      	movs	r1, #0
 800e2ac:	f004 fdbe 	bl	8012e2c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    batteryProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 800e2b0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e2b4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	3398      	adds	r3, #152	; 0x98
 800e2bc:	2100      	movs	r1, #0
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f004 fd93 	bl	8012dea <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    batteryProgress.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800e2c4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e2c8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800e2d2:	23ff      	movs	r3, #255	; 0xff
 800e2d4:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124
 800e2d8:	23ff      	movs	r3, #255	; 0xff
 800e2da:	e001      	b.n	800e2e0 <_ZN18mainScreenViewBaseC1Ev+0x3c0>
 800e2dc:	0802da94 	.word	0x0802da94
 800e2e0:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
 800e2e4:	23ff      	movs	r3, #255	; 0xff
 800e2e6:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
 800e2ea:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 800e2ee:	041b      	lsls	r3, r3, #16
 800e2f0:	461a      	mov	r2, r3
 800e2f2:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 800e2f6:	021b      	lsls	r3, r3, #8
 800e2f8:	431a      	orrs	r2, r3
 800e2fa:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 800e2fe:	4313      	orrs	r3, r2
 800e300:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800e304:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800e308:	4611      	mov	r1, r2
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7fe fe46 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
 800e310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e314:	4619      	mov	r1, r3
 800e316:	4620      	mov	r0, r4
 800e318:	f004 fc58 	bl	8012bcc <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    batteryProgress.setValue(50);
 800e31c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e320:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	3398      	adds	r3, #152	; 0x98
 800e328:	2132      	movs	r1, #50	; 0x32
 800e32a:	4618      	mov	r0, r3
 800e32c:	f004 fc81 	bl	8012c32 <_ZN8touchgfx11BoxProgress8setValueEi>
    topContainer.add(batteryProgress);
 800e330:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e334:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800e33e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e342:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	3398      	adds	r3, #152	; 0x98
 800e34a:	4619      	mov	r1, r3
 800e34c:	4610      	mov	r0, r2
 800e34e:	f005 f8bf 	bl	80134d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    dateText.setXY(86, 6);
 800e352:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e356:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800e360:	2206      	movs	r2, #6
 800e362:	2156      	movs	r1, #86	; 0x56
 800e364:	4618      	mov	r0, r3
 800e366:	f7fe ff18 	bl	800d19a <_ZN8touchgfx8Drawable5setXYEss>
    dateText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800e36a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e36e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 800e378:	23ff      	movs	r3, #255	; 0xff
 800e37a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 800e37e:	23ff      	movs	r3, #255	; 0xff
 800e380:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800e384:	23ff      	movs	r3, #255	; 0xff
 800e386:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
 800e38a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e38e:	041b      	lsls	r3, r3, #16
 800e390:	461a      	mov	r2, r3
 800e392:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800e396:	021b      	lsls	r3, r3, #8
 800e398:	431a      	orrs	r2, r3
 800e39a:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 800e39e:	4313      	orrs	r3, r2
 800e3a0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800e3a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e3a8:	4611      	mov	r1, r2
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f7fe fdf6 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
 800e3b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800e3b4:	461a      	mov	r2, r3
 800e3b6:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800e3ba:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e3be:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800e3c2:	601a      	str	r2, [r3, #0]
        color = newColor;
 800e3c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e3c8:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 800e3cc:	f5a2 72dc 	sub.w	r2, r2, #440	; 0x1b8
 800e3d0:	6812      	ldr	r2, [r2, #0]
 800e3d2:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800e3d4:	bf00      	nop
    dateText.setLinespacing(0);
 800e3d6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e3da:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800e3e4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
        linespace = space;
 800e3ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e3f2:	f8b7 212e 	ldrh.w	r2, [r7, #302]	; 0x12e
 800e3f6:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800e3f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	3384      	adds	r3, #132	; 0x84
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	f8d7 4130 	ldr.w	r4, [r7, #304]	; 0x130
 800e406:	463a      	mov	r2, r7
 800e408:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800e40c:	4610      	mov	r0, r2
 800e40e:	4798      	blx	r3
 800e410:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e414:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 800e418:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800e41c:	ca07      	ldmia	r2, {r0, r1, r2}
 800e41e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800e422:	bf00      	nop
    dateText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MAZ1));
 800e424:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e428:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 800e432:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e436:	2100      	movs	r1, #0
 800e438:	4618      	mov	r0, r3
 800e43a:	f7ff f8b7 	bl	800d5ac <_ZN8touchgfx9TypedTextC1Et>
 800e43e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e442:	4619      	mov	r1, r3
 800e444:	4620      	mov	r0, r4
 800e446:	f007 f9bd 	bl	80157c4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800e44a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e44e:	4618      	mov	r0, r3
 800e450:	f7fd fe30 	bl	800c0b4 <_ZN8touchgfx9TypedTextD1Ev>
    topContainer.add(dateText);
 800e454:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e458:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800e462:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e466:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800e470:	4619      	mov	r1, r3
 800e472:	4610      	mov	r0, r2
 800e474:	f005 f82c 	bl	80134d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    digitalClock1.setPosition(6, 6, 65, 15);
 800e478:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e47c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f503 70e2 	add.w	r0, r3, #452	; 0x1c4
 800e486:	230f      	movs	r3, #15
 800e488:	9300      	str	r3, [sp, #0]
 800e48a:	2341      	movs	r3, #65	; 0x41
 800e48c:	2206      	movs	r2, #6
 800e48e:	2106      	movs	r1, #6
 800e490:	f7fe fe44 	bl	800d11c <_ZN8touchgfx8Drawable11setPositionEssss>
    digitalClock1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800e494:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e498:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	f503 74e2 	add.w	r4, r3, #452	; 0x1c4
 800e4a2:	23ff      	movs	r3, #255	; 0xff
 800e4a4:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
 800e4a8:	23ff      	movs	r3, #255	; 0xff
 800e4aa:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800e4ae:	23ff      	movs	r3, #255	; 0xff
 800e4b0:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
 800e4b4:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 800e4b8:	041b      	lsls	r3, r3, #16
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800e4c0:	021b      	lsls	r3, r3, #8
 800e4c2:	431a      	orrs	r2, r3
 800e4c4:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 800e4c8:	4313      	orrs	r3, r2
 800e4ca:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800e4ce:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800e4d2:	4611      	mov	r1, r2
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f7fe fd61 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
 800e4da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e4de:	4619      	mov	r1, r3
 800e4e0:	4620      	mov	r0, r4
 800e4e2:	f004 fe6d 	bl	80131c0 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
    digitalClock1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BJJN));
 800e4e6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e4ea:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	f503 74e2 	add.w	r4, r3, #452	; 0x1c4
 800e4f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e4f8:	2105      	movs	r1, #5
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7ff f856 	bl	800d5ac <_ZN8touchgfx9TypedTextC1Et>
 800e500:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e504:	4619      	mov	r1, r3
 800e506:	4620      	mov	r0, r4
 800e508:	f004 fe61 	bl	80131ce <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
 800e50c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e510:	4618      	mov	r0, r3
 800e512:	f7fd fdcf 	bl	800c0b4 <_ZN8touchgfx9TypedTextD1Ev>
    digitalClock1.displayLeadingZeroForHourIndicator(true);
 800e516:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e51a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800e524:	2101      	movs	r1, #1
 800e526:	4618      	mov	r0, r3
 800e528:	f004 ff5e 	bl	80133e8 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
    digitalClock1.setDisplayMode(touchgfx::DigitalClock::DISPLAY_24_HOUR);
 800e52c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e530:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800e53a:	2103      	movs	r1, #3
 800e53c:	4618      	mov	r0, r3
 800e53e:	f7ff fa30 	bl	800d9a2 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>
    digitalClock1.setTime24Hour(10, 10, 0);
 800e542:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e546:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	f503 70e2 	add.w	r0, r3, #452	; 0x1c4
 800e550:	2300      	movs	r3, #0
 800e552:	220a      	movs	r2, #10
 800e554:	210a      	movs	r1, #10
 800e556:	f004 ff4a 	bl	80133ee <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
    topContainer.add(digitalClock1);
 800e55a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e55e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800e568:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e56c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800e576:	4619      	mov	r1, r3
 800e578:	4610      	mov	r0, r2
 800e57a:	f004 ffa9 	bl	80134d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    mid1Container.setPosition(0, 31, 240, 27);
 800e57e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e582:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	f503 7017 	add.w	r0, r3, #604	; 0x25c
 800e58c:	231b      	movs	r3, #27
 800e58e:	9300      	str	r3, [sp, #0]
 800e590:	23f0      	movs	r3, #240	; 0xf0
 800e592:	221f      	movs	r2, #31
 800e594:	2100      	movs	r1, #0
 800e596:	f7fe fdc1 	bl	800d11c <_ZN8touchgfx8Drawable11setPositionEssss>

    idnodeText.setXY(16, 6);
 800e59a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e59e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e5a8:	2206      	movs	r2, #6
 800e5aa:	2110      	movs	r1, #16
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f7fe fdf4 	bl	800d19a <_ZN8touchgfx8Drawable5setXYEss>
    idnodeText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800e5b2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e5b6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	f503 7422 	add.w	r4, r3, #648	; 0x288
 800e5c0:	23ff      	movs	r3, #255	; 0xff
 800e5c2:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 800e5c6:	23ff      	movs	r3, #255	; 0xff
 800e5c8:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
 800e5cc:	23ff      	movs	r3, #255	; 0xff
 800e5ce:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
 800e5d2:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800e5d6:	041b      	lsls	r3, r3, #16
 800e5d8:	461a      	mov	r2, r3
 800e5da:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800e5de:	021b      	lsls	r3, r3, #8
 800e5e0:	431a      	orrs	r2, r3
 800e5e2:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 800e5e6:	4313      	orrs	r3, r2
 800e5e8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800e5ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5f0:	4611      	mov	r1, r2
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7fe fcd2 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
 800e5f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e5fc:	461a      	mov	r2, r3
 800e5fe:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
 800e602:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e606:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e60a:	601a      	str	r2, [r3, #0]
        color = newColor;
 800e60c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800e610:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 800e614:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 800e618:	6812      	ldr	r2, [r2, #0]
 800e61a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800e61c:	bf00      	nop
    idnodeText.setLinespacing(0);
 800e61e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e622:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e62c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800e630:	2300      	movs	r3, #0
 800e632:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
        linespace = space;
 800e636:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e63a:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800e63e:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800e640:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	3384      	adds	r3, #132	; 0x84
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f8d7 4144 	ldr.w	r4, [r7, #324]	; 0x144
 800e64e:	463a      	mov	r2, r7
 800e650:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800e654:	4610      	mov	r0, r2
 800e656:	4798      	blx	r3
 800e658:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e65c:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 800e660:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800e664:	ca07      	ldmia	r2, {r0, r1, r2}
 800e666:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800e66a:	bf00      	nop
    idnodeText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4CH1));
 800e66c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e670:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f503 7422 	add.w	r4, r3, #648	; 0x288
 800e67a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e67e:	2101      	movs	r1, #1
 800e680:	4618      	mov	r0, r3
 800e682:	f7fe ff93 	bl	800d5ac <_ZN8touchgfx9TypedTextC1Et>
 800e686:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e68a:	4619      	mov	r1, r3
 800e68c:	4620      	mov	r0, r4
 800e68e:	f007 f899 	bl	80157c4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800e692:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e696:	4618      	mov	r0, r3
 800e698:	f7fd fd0c 	bl	800c0b4 <_ZN8touchgfx9TypedTextD1Ev>
    mid1Container.add(idnodeText);
 800e69c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e6a0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f503 7217 	add.w	r2, r3, #604	; 0x25c
 800e6aa:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e6ae:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e6b8:	4619      	mov	r1, r3
 800e6ba:	4610      	mov	r0, r2
 800e6bc:	f004 ff08 	bl	80134d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    voltageText.setXY(120, 6);
 800e6c0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e6c4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800e6ce:	2206      	movs	r2, #6
 800e6d0:	2178      	movs	r1, #120	; 0x78
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7fe fd61 	bl	800d19a <_ZN8touchgfx8Drawable5setXYEss>
    voltageText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800e6d8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e6dc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f503 7434 	add.w	r4, r3, #720	; 0x2d0
 800e6e6:	23ff      	movs	r3, #255	; 0xff
 800e6e8:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 800e6ec:	23ff      	movs	r3, #255	; 0xff
 800e6ee:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
 800e6f2:	23ff      	movs	r3, #255	; 0xff
 800e6f4:	f887 3149 	strb.w	r3, [r7, #329]	; 0x149
 800e6f8:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 800e6fc:	041b      	lsls	r3, r3, #16
 800e6fe:	461a      	mov	r2, r3
 800e700:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 800e704:	021b      	lsls	r3, r3, #8
 800e706:	431a      	orrs	r2, r3
 800e708:	f897 3149 	ldrb.w	r3, [r7, #329]	; 0x149
 800e70c:	4313      	orrs	r3, r2
 800e70e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800e712:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800e716:	4611      	mov	r1, r2
 800e718:	4618      	mov	r0, r3
 800e71a:	f7fe fc3f 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
 800e71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e722:	461a      	mov	r2, r3
 800e724:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 800e728:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e72c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800e730:	601a      	str	r2, [r3, #0]
        color = newColor;
 800e732:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e736:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 800e73a:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 800e73e:	6812      	ldr	r2, [r2, #0]
 800e740:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800e742:	bf00      	nop
    voltageText.setLinespacing(0);
 800e744:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e748:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800e752:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800e756:	2300      	movs	r3, #0
 800e758:	f8a7 3152 	strh.w	r3, [r7, #338]	; 0x152
        linespace = space;
 800e75c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800e760:	f8b7 2152 	ldrh.w	r2, [r7, #338]	; 0x152
 800e764:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800e766:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	3384      	adds	r3, #132	; 0x84
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800e774:	463a      	mov	r2, r7
 800e776:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 800e77a:	4610      	mov	r0, r2
 800e77c:	4798      	blx	r3
 800e77e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e782:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 800e786:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800e78a:	ca07      	ldmia	r2, {r0, r1, r2}
 800e78c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800e790:	bf00      	nop
    Unicode::snprintf(voltageTextBuffer, VOLTAGETEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_08X8).getText());
 800e792:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e796:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f603 0404 	addw	r4, r3, #2052	; 0x804
 800e7a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e7a4:	210d      	movs	r1, #13
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7fe ff00 	bl	800d5ac <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800e7ac:	4b89      	ldr	r3, [pc, #548]	; (800e9d4 <_ZN18mainScreenViewBaseC1Ev+0xab4>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d105      	bne.n	800e7c0 <_ZN18mainScreenViewBaseC1Ev+0x8a0>
 800e7b4:	4b88      	ldr	r3, [pc, #544]	; (800e9d8 <_ZN18mainScreenViewBaseC1Ev+0xab8>)
 800e7b6:	4a89      	ldr	r2, [pc, #548]	; (800e9dc <_ZN18mainScreenViewBaseC1Ev+0xabc>)
 800e7b8:	2160      	movs	r1, #96	; 0x60
 800e7ba:	4889      	ldr	r0, [pc, #548]	; (800e9e0 <_ZN18mainScreenViewBaseC1Ev+0xac0>)
 800e7bc:	f019 f91c 	bl	80279f8 <__assert_func>
 800e7c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e7c4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        return typedTextId < numberOfTypedTexts;
 800e7c8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e7cc:	889a      	ldrh	r2, [r3, #4]
 800e7ce:	4b85      	ldr	r3, [pc, #532]	; (800e9e4 <_ZN18mainScreenViewBaseC1Ev+0xac4>)
 800e7d0:	881b      	ldrh	r3, [r3, #0]
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	bf34      	ite	cc
 800e7d6:	2301      	movcc	r3, #1
 800e7d8:	2300      	movcs	r3, #0
 800e7da:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d105      	bne.n	800e7ec <_ZN18mainScreenViewBaseC1Ev+0x8cc>
 800e7e0:	4b81      	ldr	r3, [pc, #516]	; (800e9e8 <_ZN18mainScreenViewBaseC1Ev+0xac8>)
 800e7e2:	4a7e      	ldr	r2, [pc, #504]	; (800e9dc <_ZN18mainScreenViewBaseC1Ev+0xabc>)
 800e7e4:	2161      	movs	r1, #97	; 0x61
 800e7e6:	487e      	ldr	r0, [pc, #504]	; (800e9e0 <_ZN18mainScreenViewBaseC1Ev+0xac0>)
 800e7e8:	f019 f906 	bl	80279f8 <__assert_func>
 800e7ec:	bf00      	nop
        return texts->getText(typedTextId);
 800e7ee:	4b7f      	ldr	r3, [pc, #508]	; (800e9ec <_ZN18mainScreenViewBaseC1Ev+0xacc>)
 800e7f0:	681a      	ldr	r2, [r3, #0]
 800e7f2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e7f6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800e7fa:	889b      	ldrh	r3, [r3, #4]
 800e7fc:	4619      	mov	r1, r3
 800e7fe:	4610      	mov	r0, r2
 800e800:	f001 fd28 	bl	8010254 <_ZNK8touchgfx5Texts7getTextEt>
 800e804:	4603      	mov	r3, r0
 800e806:	bf00      	nop
 800e808:	4a79      	ldr	r2, [pc, #484]	; (800e9f0 <_ZN18mainScreenViewBaseC1Ev+0xad0>)
 800e80a:	210a      	movs	r1, #10
 800e80c:	4620      	mov	r0, r4
 800e80e:	f00c fcf5 	bl	801b1fc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800e812:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e816:	4618      	mov	r0, r3
 800e818:	f7fd fc4c 	bl	800c0b4 <_ZN8touchgfx9TypedTextD1Ev>
    voltageText.setWildcard(voltageTextBuffer);
 800e81c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e820:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
 800e82a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e82e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	f603 0304 	addw	r3, r3, #2052	; 0x804
 800e838:	4619      	mov	r1, r3
 800e83a:	4610      	mov	r0, r2
 800e83c:	f7ff f8a4 	bl	800d988 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    voltageText.resizeToCurrentText();
 800e840:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e844:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800e84e:	4618      	mov	r0, r3
 800e850:	f006 ff98 	bl	8015784 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    voltageText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KVTF));
 800e854:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e858:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f503 7434 	add.w	r4, r3, #720	; 0x2d0
 800e862:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800e866:	2102      	movs	r1, #2
 800e868:	4618      	mov	r0, r3
 800e86a:	f7fe fe9f 	bl	800d5ac <_ZN8touchgfx9TypedTextC1Et>
 800e86e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800e872:	4619      	mov	r1, r3
 800e874:	4620      	mov	r0, r4
 800e876:	f006 ffa5 	bl	80157c4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800e87a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800e87e:	4618      	mov	r0, r3
 800e880:	f7fd fc18 	bl	800c0b4 <_ZN8touchgfx9TypedTextD1Ev>
    mid1Container.add(voltageText);
 800e884:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e888:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f503 7217 	add.w	r2, r3, #604	; 0x25c
 800e892:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e896:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	4610      	mov	r0, r2
 800e8a4:	f004 fe14 	bl	80134d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    currentText.setXY(190, 6);
 800e8a8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e8ac:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 800e8b6:	2206      	movs	r2, #6
 800e8b8:	21be      	movs	r1, #190	; 0xbe
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7fe fc6d 	bl	800d19a <_ZN8touchgfx8Drawable5setXYEss>
    currentText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800e8c0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e8c4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f503 7447 	add.w	r4, r3, #796	; 0x31c
 800e8ce:	23ff      	movs	r3, #255	; 0xff
 800e8d0:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
 800e8d4:	23ff      	movs	r3, #255	; 0xff
 800e8d6:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 800e8da:	23ff      	movs	r3, #255	; 0xff
 800e8dc:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
 800e8e0:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800e8e4:	041b      	lsls	r3, r3, #16
 800e8e6:	461a      	mov	r2, r3
 800e8e8:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 800e8ec:	021b      	lsls	r3, r3, #8
 800e8ee:	431a      	orrs	r2, r3
 800e8f0:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 800e8f4:	4313      	orrs	r3, r2
 800e8f6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800e8fa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800e8fe:	4611      	mov	r1, r2
 800e900:	4618      	mov	r0, r3
 800e902:	f7fe fb4b 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
 800e906:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e90a:	461a      	mov	r2, r3
 800e90c:	f8c7 4160 	str.w	r4, [r7, #352]	; 0x160
 800e910:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e914:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800e918:	601a      	str	r2, [r3, #0]
        color = newColor;
 800e91a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800e91e:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 800e922:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 800e926:	6812      	ldr	r2, [r2, #0]
 800e928:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800e92a:	bf00      	nop
    currentText.setLinespacing(0);
 800e92c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e930:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 800e93a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800e93e:	2300      	movs	r3, #0
 800e940:	f8a7 3166 	strh.w	r3, [r7, #358]	; 0x166
        linespace = space;
 800e944:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800e948:	f8b7 2166 	ldrh.w	r2, [r7, #358]	; 0x166
 800e94c:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800e94e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	3384      	adds	r3, #132	; 0x84
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 800e95c:	463a      	mov	r2, r7
 800e95e:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 800e962:	4610      	mov	r0, r2
 800e964:	4798      	blx	r3
 800e966:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e96a:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 800e96e:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800e972:	ca07      	ldmia	r2, {r0, r1, r2}
 800e974:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800e978:	bf00      	nop
    Unicode::snprintf(currentTextBuffer, CURRENTTEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_L3YU).getText());
 800e97a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e97e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	f603 0418 	addw	r4, r3, #2072	; 0x818
 800e988:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e98c:	210e      	movs	r1, #14
 800e98e:	4618      	mov	r0, r3
 800e990:	f7fe fe0c 	bl	800d5ac <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800e994:	4b0f      	ldr	r3, [pc, #60]	; (800e9d4 <_ZN18mainScreenViewBaseC1Ev+0xab4>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d105      	bne.n	800e9a8 <_ZN18mainScreenViewBaseC1Ev+0xa88>
 800e99c:	4b0e      	ldr	r3, [pc, #56]	; (800e9d8 <_ZN18mainScreenViewBaseC1Ev+0xab8>)
 800e99e:	4a0f      	ldr	r2, [pc, #60]	; (800e9dc <_ZN18mainScreenViewBaseC1Ev+0xabc>)
 800e9a0:	2160      	movs	r1, #96	; 0x60
 800e9a2:	480f      	ldr	r0, [pc, #60]	; (800e9e0 <_ZN18mainScreenViewBaseC1Ev+0xac0>)
 800e9a4:	f019 f828 	bl	80279f8 <__assert_func>
 800e9a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e9ac:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        return typedTextId < numberOfTypedTexts;
 800e9b0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800e9b4:	889a      	ldrh	r2, [r3, #4]
 800e9b6:	4b0b      	ldr	r3, [pc, #44]	; (800e9e4 <_ZN18mainScreenViewBaseC1Ev+0xac4>)
 800e9b8:	881b      	ldrh	r3, [r3, #0]
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	bf34      	ite	cc
 800e9be:	2301      	movcc	r3, #1
 800e9c0:	2300      	movcs	r3, #0
 800e9c2:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d115      	bne.n	800e9f4 <_ZN18mainScreenViewBaseC1Ev+0xad4>
 800e9c8:	4b07      	ldr	r3, [pc, #28]	; (800e9e8 <_ZN18mainScreenViewBaseC1Ev+0xac8>)
 800e9ca:	4a04      	ldr	r2, [pc, #16]	; (800e9dc <_ZN18mainScreenViewBaseC1Ev+0xabc>)
 800e9cc:	2161      	movs	r1, #97	; 0x61
 800e9ce:	4804      	ldr	r0, [pc, #16]	; (800e9e0 <_ZN18mainScreenViewBaseC1Ev+0xac0>)
 800e9d0:	f019 f812 	bl	80279f8 <__assert_func>
 800e9d4:	2000c494 	.word	0x2000c494
 800e9d8:	0802c60c 	.word	0x0802c60c
 800e9dc:	0802c80c 	.word	0x0802c80c
 800e9e0:	0802c68c 	.word	0x0802c68c
 800e9e4:	2000c498 	.word	0x2000c498
 800e9e8:	0802c6d0 	.word	0x0802c6d0
 800e9ec:	2000c4a0 	.word	0x2000c4a0
 800e9f0:	0802c844 	.word	0x0802c844
 800e9f4:	bf00      	nop
        return texts->getText(typedTextId);
 800e9f6:	4be8      	ldr	r3, [pc, #928]	; (800ed98 <_ZN18mainScreenViewBaseC1Ev+0xe78>)
 800e9f8:	681a      	ldr	r2, [r3, #0]
 800e9fa:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800e9fe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800ea02:	889b      	ldrh	r3, [r3, #4]
 800ea04:	4619      	mov	r1, r3
 800ea06:	4610      	mov	r0, r2
 800ea08:	f001 fc24 	bl	8010254 <_ZNK8touchgfx5Texts7getTextEt>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	bf00      	nop
 800ea10:	4ae2      	ldr	r2, [pc, #904]	; (800ed9c <_ZN18mainScreenViewBaseC1Ev+0xe7c>)
 800ea12:	210a      	movs	r1, #10
 800ea14:	4620      	mov	r0, r4
 800ea16:	f00c fbf1 	bl	801b1fc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800ea1a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7fd fb48 	bl	800c0b4 <_ZN8touchgfx9TypedTextD1Ev>
    currentText.setWildcard(currentTextBuffer);
 800ea24:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ea28:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f503 7247 	add.w	r2, r3, #796	; 0x31c
 800ea32:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ea36:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800ea40:	4619      	mov	r1, r3
 800ea42:	4610      	mov	r0, r2
 800ea44:	f7fe ffa0 	bl	800d988 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    currentText.resizeToCurrentText();
 800ea48:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ea4c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 800ea56:	4618      	mov	r0, r3
 800ea58:	f006 fe94 	bl	8015784 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    currentText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_I8OP));
 800ea5c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ea60:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	f503 7447 	add.w	r4, r3, #796	; 0x31c
 800ea6a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ea6e:	2103      	movs	r1, #3
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7fe fd9b 	bl	800d5ac <_ZN8touchgfx9TypedTextC1Et>
 800ea76:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ea7a:	4619      	mov	r1, r3
 800ea7c:	4620      	mov	r0, r4
 800ea7e:	f006 fea1 	bl	80157c4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800ea82:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ea86:	4618      	mov	r0, r3
 800ea88:	f7fd fb14 	bl	800c0b4 <_ZN8touchgfx9TypedTextD1Ev>
    mid1Container.add(currentText);
 800ea8c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ea90:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	f503 7217 	add.w	r2, r3, #604	; 0x25c
 800ea9a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ea9e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	4610      	mov	r0, r2
 800eaac:	f004 fd10 	bl	80134d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    line1.setPosition(0, 31, 240, 15);
 800eab0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800eab4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	f503 705a 	add.w	r0, r3, #872	; 0x368
 800eabe:	230f      	movs	r3, #15
 800eac0:	9300      	str	r3, [sp, #0]
 800eac2:	23f0      	movs	r3, #240	; 0xf0
 800eac4:	221f      	movs	r2, #31
 800eac6:	2100      	movs	r1, #0
 800eac8:	f7fe fb28 	bl	800d11c <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(20, 245, 0));
 800eacc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ead0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	f503 7476 	add.w	r4, r3, #984	; 0x3d8
 800eada:	2314      	movs	r3, #20
 800eadc:	f887 3174 	strb.w	r3, [r7, #372]	; 0x174
 800eae0:	23f5      	movs	r3, #245	; 0xf5
 800eae2:	f887 3173 	strb.w	r3, [r7, #371]	; 0x173
 800eae6:	2300      	movs	r3, #0
 800eae8:	f887 3172 	strb.w	r3, [r7, #370]	; 0x172
 800eaec:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 800eaf0:	041b      	lsls	r3, r3, #16
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	f897 3173 	ldrb.w	r3, [r7, #371]	; 0x173
 800eaf8:	021b      	lsls	r3, r3, #8
 800eafa:	431a      	orrs	r2, r3
 800eafc:	f897 3172 	ldrb.w	r3, [r7, #370]	; 0x172
 800eb00:	4313      	orrs	r3, r2
 800eb02:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800eb06:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800eb0a:	4611      	mov	r1, r2
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f7fe fa45 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
 800eb12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800eb16:	4619      	mov	r1, r3
 800eb18:	4620      	mov	r0, r4
 800eb1a:	f7ff f8dd 	bl	800dcd8 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 800eb1e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800eb22:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f503 725a 	add.w	r2, r3, #872	; 0x368
 800eb2c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800eb30:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	4610      	mov	r0, r2
 800eb3e:	f7fe ffb6 	bl	800daae <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line1.setStart(0, 0);
 800eb42:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800eb46:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	f503 735a 	add.w	r3, r3, #872	; 0x368
 800eb50:	2200      	movs	r2, #0
 800eb52:	2100      	movs	r1, #0
 800eb54:	4618      	mov	r0, r3
 800eb56:	f000 ffb5 	bl	800fac4 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(420, 0);
 800eb5a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800eb5e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	f503 735a 	add.w	r3, r3, #872	; 0x368
 800eb68:	2200      	movs	r2, #0
 800eb6a:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f000 ffce 	bl	800fb10 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(10);
 800eb74:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800eb78:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	f503 735a 	add.w	r3, r3, #872	; 0x368
 800eb82:	210a      	movs	r1, #10
 800eb84:	4618      	mov	r0, r3
 800eb86:	f000 ffe9 	bl	800fb5c <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 800eb8a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800eb8e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	f503 735a 	add.w	r3, r3, #872	; 0x368
 800eb98:	2100      	movs	r1, #0
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f006 f9f2 	bl	8014f84 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    mid2Container.setPosition(0, 69, 240, 83);
 800eba0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800eba4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f503 707b 	add.w	r0, r3, #1004	; 0x3ec
 800ebae:	2353      	movs	r3, #83	; 0x53
 800ebb0:	9300      	str	r3, [sp, #0]
 800ebb2:	23f0      	movs	r3, #240	; 0xf0
 800ebb4:	2245      	movs	r2, #69	; 0x45
 800ebb6:	2100      	movs	r1, #0
 800ebb8:	f7fe fab0 	bl	800d11c <_ZN8touchgfx8Drawable11setPositionEssss>

    labelkirimText.setXY(8, 3);
 800ebbc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ebc0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800ebca:	2203      	movs	r2, #3
 800ebcc:	2108      	movs	r1, #8
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7fe fae3 	bl	800d19a <_ZN8touchgfx8Drawable5setXYEss>
    labelkirimText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800ebd4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ebd8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	f503 6483 	add.w	r4, r3, #1048	; 0x418
 800ebe2:	23ff      	movs	r3, #255	; 0xff
 800ebe4:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 800ebe8:	23ff      	movs	r3, #255	; 0xff
 800ebea:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 800ebee:	23ff      	movs	r3, #255	; 0xff
 800ebf0:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
 800ebf4:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 800ebf8:	041b      	lsls	r3, r3, #16
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 800ec00:	021b      	lsls	r3, r3, #8
 800ec02:	431a      	orrs	r2, r3
 800ec04:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 800ec08:	4313      	orrs	r3, r2
 800ec0a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ec0e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800ec12:	4611      	mov	r1, r2
 800ec14:	4618      	mov	r0, r3
 800ec16:	f7fe f9c1 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
 800ec1a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ec1e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	461a      	mov	r2, r3
 800ec26:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800ec2a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ec2e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800ec32:	601a      	str	r2, [r3, #0]
        color = newColor;
 800ec34:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800ec38:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 800ec3c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800ec40:	6812      	ldr	r2, [r2, #0]
 800ec42:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800ec44:	bf00      	nop
    labelkirimText.setLinespacing(0);
 800ec46:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ec4a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800ec54:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800ec58:	2300      	movs	r3, #0
 800ec5a:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
        linespace = space;
 800ec5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800ec62:	f8b7 217e 	ldrh.w	r2, [r7, #382]	; 0x17e
 800ec66:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800ec68:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	3384      	adds	r3, #132	; 0x84
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	f8d7 4180 	ldr.w	r4, [r7, #384]	; 0x180
 800ec76:	463a      	mov	r2, r7
 800ec78:	f8d7 1180 	ldr.w	r1, [r7, #384]	; 0x180
 800ec7c:	4610      	mov	r0, r2
 800ec7e:	4798      	blx	r3
 800ec80:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ec84:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 800ec88:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800ec8c:	ca07      	ldmia	r2, {r0, r1, r2}
 800ec8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800ec92:	bf00      	nop
    labelkirimText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KYMK));
 800ec94:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ec98:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	f503 6483 	add.w	r4, r3, #1048	; 0x418
 800eca2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800eca6:	2104      	movs	r1, #4
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7fe fc7f 	bl	800d5ac <_ZN8touchgfx9TypedTextC1Et>
 800ecae:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ecb2:	4619      	mov	r1, r3
 800ecb4:	4620      	mov	r0, r4
 800ecb6:	f006 fd85 	bl	80157c4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800ecba:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7fd f9f8 	bl	800c0b4 <_ZN8touchgfx9TypedTextD1Ev>
    mid2Container.add(labelkirimText);
 800ecc4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ecc8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f503 727b 	add.w	r2, r3, #1004	; 0x3ec
 800ecd2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ecd6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800ece0:	4619      	mov	r1, r3
 800ece2:	4610      	mov	r0, r2
 800ece4:	f004 fbf4 	bl	80134d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    kirimText.setPosition(9, 16, 232, 67);
 800ece8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ecec:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f503 608c 	add.w	r0, r3, #1120	; 0x460
 800ecf6:	2343      	movs	r3, #67	; 0x43
 800ecf8:	9300      	str	r3, [sp, #0]
 800ecfa:	23e8      	movs	r3, #232	; 0xe8
 800ecfc:	2210      	movs	r2, #16
 800ecfe:	2109      	movs	r1, #9
 800ed00:	f7fe fa0c 	bl	800d11c <_ZN8touchgfx8Drawable11setPositionEssss>
    kirimText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800ed04:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ed08:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f503 648c 	add.w	r4, r3, #1120	; 0x460
 800ed12:	23ff      	movs	r3, #255	; 0xff
 800ed14:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 800ed18:	23ff      	movs	r3, #255	; 0xff
 800ed1a:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 800ed1e:	23ff      	movs	r3, #255	; 0xff
 800ed20:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 800ed24:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800ed28:	041b      	lsls	r3, r3, #16
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800ed30:	021b      	lsls	r3, r3, #8
 800ed32:	431a      	orrs	r2, r3
 800ed34:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800ed38:	4313      	orrs	r3, r2
 800ed3a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ed3e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800ed42:	4611      	mov	r1, r2
 800ed44:	4618      	mov	r0, r3
 800ed46:	f7fe f929 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
 800ed4a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ed4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	461a      	mov	r2, r3
 800ed56:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
 800ed5a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ed5e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800ed62:	601a      	str	r2, [r3, #0]
        color = newColor;
 800ed64:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800ed68:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 800ed6c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800ed70:	6812      	ldr	r2, [r2, #0]
 800ed72:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800ed74:	bf00      	nop
    kirimText.setLinespacing(0);
 800ed76:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ed7a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 800ed84:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800ed88:	2300      	movs	r3, #0
 800ed8a:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
        linespace = space;
 800ed8e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800ed92:	f8b7 218e 	ldrh.w	r2, [r7, #398]	; 0x18e
 800ed96:	e003      	b.n	800eda0 <_ZN18mainScreenViewBaseC1Ev+0xe80>
 800ed98:	2000c4a0 	.word	0x2000c4a0
 800ed9c:	0802c844 	.word	0x0802c844
 800eda0:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800eda2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	3384      	adds	r3, #132	; 0x84
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	f8d7 4190 	ldr.w	r4, [r7, #400]	; 0x190
 800edb0:	463a      	mov	r2, r7
 800edb2:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 800edb6:	4610      	mov	r0, r2
 800edb8:	4798      	blx	r3
 800edba:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800edbe:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 800edc2:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800edc6:	ca07      	ldmia	r2, {r0, r1, r2}
 800edc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800edcc:	bf00      	nop
    kirimTextBuffer[0] = 0;
 800edce:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800edd2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	2200      	movs	r2, #0
 800edda:	f8a3 282c 	strh.w	r2, [r3, #2092]	; 0x82c
    kirimText.setWildcard(kirimTextBuffer);
 800edde:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ede2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	f503 628c 	add.w	r2, r3, #1120	; 0x460
 800edec:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800edf0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 800edfa:	4619      	mov	r1, r3
 800edfc:	4610      	mov	r0, r2
 800edfe:	f7fe fdc3 	bl	800d988 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    kirimText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MHEE));
 800ee02:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ee06:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	f503 648c 	add.w	r4, r3, #1120	; 0x460
 800ee10:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ee14:	210a      	movs	r1, #10
 800ee16:	4618      	mov	r0, r3
 800ee18:	f7fe fbc8 	bl	800d5ac <_ZN8touchgfx9TypedTextC1Et>
 800ee1c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ee20:	4619      	mov	r1, r3
 800ee22:	4620      	mov	r0, r4
 800ee24:	f006 fcce 	bl	80157c4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800ee28:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7fd f941 	bl	800c0b4 <_ZN8touchgfx9TypedTextD1Ev>
    mid2Container.add(kirimText);
 800ee32:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ee36:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	f503 727b 	add.w	r2, r3, #1004	; 0x3ec
 800ee40:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ee44:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 800ee4e:	4619      	mov	r1, r3
 800ee50:	4610      	mov	r0, r2
 800ee52:	f004 fb3d 	bl	80134d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    line2.setPosition(0, 62, 240, 15);
 800ee56:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ee5a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f203 40ac 	addw	r0, r3, #1196	; 0x4ac
 800ee64:	230f      	movs	r3, #15
 800ee66:	9300      	str	r3, [sp, #0]
 800ee68:	23f0      	movs	r3, #240	; 0xf0
 800ee6a:	223e      	movs	r2, #62	; 0x3e
 800ee6c:	2100      	movs	r1, #0
 800ee6e:	f7fe f955 	bl	800d11c <_ZN8touchgfx8Drawable11setPositionEssss>
    line2Painter.setColor(touchgfx::Color::getColorFromRGB(20, 245, 0));
 800ee72:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ee76:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f203 541c 	addw	r4, r3, #1308	; 0x51c
 800ee80:	2314      	movs	r3, #20
 800ee82:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
 800ee86:	23f5      	movs	r3, #245	; 0xf5
 800ee88:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 800ee92:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 800ee96:	041b      	lsls	r3, r3, #16
 800ee98:	461a      	mov	r2, r3
 800ee9a:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ee9e:	021b      	lsls	r3, r3, #8
 800eea0:	431a      	orrs	r2, r3
 800eea2:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 800eea6:	4313      	orrs	r3, r2
 800eea8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800eeac:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800eeb0:	4611      	mov	r1, r2
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7fe f872 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
 800eeb8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800eebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	4619      	mov	r1, r3
 800eec4:	4620      	mov	r0, r4
 800eec6:	f7fe ff07 	bl	800dcd8 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    line2.setPainter(line2Painter);
 800eeca:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800eece:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	f203 42ac 	addw	r2, r3, #1196	; 0x4ac
 800eed8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800eedc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 800eee6:	4619      	mov	r1, r3
 800eee8:	4610      	mov	r0, r2
 800eeea:	f7fe fde0 	bl	800daae <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line2.setStart(0, 0);
 800eeee:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800eef2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f203 43ac 	addw	r3, r3, #1196	; 0x4ac
 800eefc:	2200      	movs	r2, #0
 800eefe:	2100      	movs	r1, #0
 800ef00:	4618      	mov	r0, r3
 800ef02:	f000 fddf 	bl	800fac4 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line2.setEnd(420, 0);
 800ef06:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ef0a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f203 43ac 	addw	r3, r3, #1196	; 0x4ac
 800ef14:	2200      	movs	r2, #0
 800ef16:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f000 fdf8 	bl	800fb10 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line2.setLineWidth(10);
 800ef20:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ef24:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	f203 43ac 	addw	r3, r3, #1196	; 0x4ac
 800ef2e:	210a      	movs	r1, #10
 800ef30:	4618      	mov	r0, r3
 800ef32:	f000 fe13 	bl	800fb5c <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line2.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 800ef36:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ef3a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	f203 43ac 	addw	r3, r3, #1196	; 0x4ac
 800ef44:	2100      	movs	r1, #0
 800ef46:	4618      	mov	r0, r3
 800ef48:	f006 f81c 	bl	8014f84 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line3.setPosition(0, 155, 240, 15);
 800ef4c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ef50:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	f503 60a6 	add.w	r0, r3, #1328	; 0x530
 800ef5a:	230f      	movs	r3, #15
 800ef5c:	9300      	str	r3, [sp, #0]
 800ef5e:	23f0      	movs	r3, #240	; 0xf0
 800ef60:	229b      	movs	r2, #155	; 0x9b
 800ef62:	2100      	movs	r1, #0
 800ef64:	f7fe f8da 	bl	800d11c <_ZN8touchgfx8Drawable11setPositionEssss>
    line3Painter.setColor(touchgfx::Color::getColorFromRGB(20, 245, 0));
 800ef68:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ef6c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 800ef76:	2314      	movs	r3, #20
 800ef78:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 800ef7c:	23f5      	movs	r3, #245	; 0xf5
 800ef7e:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 800ef82:	2300      	movs	r3, #0
 800ef84:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 800ef88:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 800ef8c:	041b      	lsls	r3, r3, #16
 800ef8e:	461a      	mov	r2, r3
 800ef90:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 800ef94:	021b      	lsls	r3, r3, #8
 800ef96:	431a      	orrs	r2, r3
 800ef98:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 800ef9c:	4313      	orrs	r3, r2
 800ef9e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800efa2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800efa6:	4611      	mov	r1, r2
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7fd fff7 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
 800efae:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800efb2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	4619      	mov	r1, r3
 800efba:	4620      	mov	r0, r4
 800efbc:	f7fe fe8c 	bl	800dcd8 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    line3.setPainter(line3Painter);
 800efc0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800efc4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f503 62a6 	add.w	r2, r3, #1328	; 0x530
 800efce:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800efd2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 800efdc:	4619      	mov	r1, r3
 800efde:	4610      	mov	r0, r2
 800efe0:	f7fe fd65 	bl	800daae <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line3.setStart(0, 0);
 800efe4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800efe8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800eff2:	2200      	movs	r2, #0
 800eff4:	2100      	movs	r1, #0
 800eff6:	4618      	mov	r0, r3
 800eff8:	f000 fd64 	bl	800fac4 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line3.setEnd(420, 0);
 800effc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f000:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800f00a:	2200      	movs	r2, #0
 800f00c:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800f010:	4618      	mov	r0, r3
 800f012:	f000 fd7d 	bl	800fb10 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line3.setLineWidth(10);
 800f016:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f01a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800f024:	210a      	movs	r1, #10
 800f026:	4618      	mov	r0, r3
 800f028:	f000 fd98 	bl	800fb5c <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line3.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 800f02c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f030:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800f03a:	2100      	movs	r1, #0
 800f03c:	4618      	mov	r0, r3
 800f03e:	f005 ffa1 	bl	8014f84 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    mid3Container.setPosition(1, 162, 240, 83);
 800f042:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f046:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f203 50b4 	addw	r0, r3, #1460	; 0x5b4
 800f050:	2353      	movs	r3, #83	; 0x53
 800f052:	9300      	str	r3, [sp, #0]
 800f054:	23f0      	movs	r3, #240	; 0xf0
 800f056:	22a2      	movs	r2, #162	; 0xa2
 800f058:	2101      	movs	r1, #1
 800f05a:	f7fe f85f 	bl	800d11c <_ZN8touchgfx8Drawable11setPositionEssss>

    labelterimaText.setXY(4, -2);
 800f05e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f062:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	f503 63bc 	add.w	r3, r3, #1504	; 0x5e0
 800f06c:	f06f 0201 	mvn.w	r2, #1
 800f070:	2104      	movs	r1, #4
 800f072:	4618      	mov	r0, r3
 800f074:	f7fe f891 	bl	800d19a <_ZN8touchgfx8Drawable5setXYEss>
    labelterimaText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800f078:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f07c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	f503 64bc 	add.w	r4, r3, #1504	; 0x5e0
 800f086:	23ff      	movs	r3, #255	; 0xff
 800f088:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 800f08c:	23ff      	movs	r3, #255	; 0xff
 800f08e:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 800f092:	23ff      	movs	r3, #255	; 0xff
 800f094:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 800f098:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800f09c:	041b      	lsls	r3, r3, #16
 800f09e:	461a      	mov	r2, r3
 800f0a0:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 800f0a4:	021b      	lsls	r3, r3, #8
 800f0a6:	431a      	orrs	r2, r3
 800f0a8:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 800f0ac:	4313      	orrs	r3, r2
 800f0ae:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f0b2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800f0b6:	4611      	mov	r1, r2
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f7fd ff6f 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
 800f0be:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f0c2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 800f0ce:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f0d2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800f0d6:	601a      	str	r2, [r3, #0]
        color = newColor;
 800f0d8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800f0dc:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 800f0e0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800f0e4:	6812      	ldr	r2, [r2, #0]
 800f0e6:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800f0e8:	bf00      	nop
    labelterimaText.setLinespacing(0);
 800f0ea:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f0ee:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	f503 63bc 	add.w	r3, r3, #1504	; 0x5e0
 800f0f8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
        linespace = space;
 800f102:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800f106:	f8b7 21a6 	ldrh.w	r2, [r7, #422]	; 0x1a6
 800f10a:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800f10c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	3384      	adds	r3, #132	; 0x84
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	f8d7 41a8 	ldr.w	r4, [r7, #424]	; 0x1a8
 800f11a:	463a      	mov	r2, r7
 800f11c:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800f120:	4610      	mov	r0, r2
 800f122:	4798      	blx	r3
 800f124:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f128:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 800f12c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800f130:	ca07      	ldmia	r2, {r0, r1, r2}
 800f132:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800f136:	bf00      	nop
    labelterimaText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RUSE));
 800f138:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f13c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f503 64bc 	add.w	r4, r3, #1504	; 0x5e0
 800f146:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800f14a:	2106      	movs	r1, #6
 800f14c:	4618      	mov	r0, r3
 800f14e:	f7fe fa2d 	bl	800d5ac <_ZN8touchgfx9TypedTextC1Et>
 800f152:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800f156:	4619      	mov	r1, r3
 800f158:	4620      	mov	r0, r4
 800f15a:	f006 fb33 	bl	80157c4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800f15e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800f162:	4618      	mov	r0, r3
 800f164:	f7fc ffa6 	bl	800c0b4 <_ZN8touchgfx9TypedTextD1Ev>
    mid3Container.add(labelterimaText);
 800f168:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f16c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	f203 52b4 	addw	r2, r3, #1460	; 0x5b4
 800f176:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f17a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	f503 63bc 	add.w	r3, r3, #1504	; 0x5e0
 800f184:	4619      	mov	r1, r3
 800f186:	4610      	mov	r0, r2
 800f188:	f004 f9a2 	bl	80134d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    terimaText.setPosition(4, 13, 232, 57);
 800f18c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f190:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f503 60c5 	add.w	r0, r3, #1576	; 0x628
 800f19a:	2339      	movs	r3, #57	; 0x39
 800f19c:	9300      	str	r3, [sp, #0]
 800f19e:	23e8      	movs	r3, #232	; 0xe8
 800f1a0:	220d      	movs	r2, #13
 800f1a2:	2104      	movs	r1, #4
 800f1a4:	f7fd ffba 	bl	800d11c <_ZN8touchgfx8Drawable11setPositionEssss>
    terimaText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800f1a8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f1ac:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f503 64c5 	add.w	r4, r3, #1576	; 0x628
 800f1b6:	23ff      	movs	r3, #255	; 0xff
 800f1b8:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
 800f1bc:	23ff      	movs	r3, #255	; 0xff
 800f1be:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 800f1c2:	23ff      	movs	r3, #255	; 0xff
 800f1c4:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 800f1c8:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 800f1cc:	041b      	lsls	r3, r3, #16
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800f1d4:	021b      	lsls	r3, r3, #8
 800f1d6:	431a      	orrs	r2, r3
 800f1d8:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 800f1dc:	4313      	orrs	r3, r2
 800f1de:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f1e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800f1e6:	4611      	mov	r1, r2
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f7fd fed7 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
 800f1ee:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f1f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	f8c7 41b0 	str.w	r4, [r7, #432]	; 0x1b0
 800f1fe:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f202:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800f206:	601a      	str	r2, [r3, #0]
        color = newColor;
 800f208:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800f20c:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 800f210:	f5a2 72ea 	sub.w	r2, r2, #468	; 0x1d4
 800f214:	6812      	ldr	r2, [r2, #0]
 800f216:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800f218:	bf00      	nop
    terimaText.setLinespacing(0);
 800f21a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f21e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800f228:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800f22c:	2300      	movs	r3, #0
 800f22e:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
        linespace = space;
 800f232:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800f236:	f8b7 21b6 	ldrh.w	r2, [r7, #438]	; 0x1b6
 800f23a:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800f23c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	3384      	adds	r3, #132	; 0x84
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f8d7 41b8 	ldr.w	r4, [r7, #440]	; 0x1b8
 800f24a:	463a      	mov	r2, r7
 800f24c:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 800f250:	4610      	mov	r0, r2
 800f252:	4798      	blx	r3
 800f254:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f258:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 800f25c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800f260:	ca07      	ldmia	r2, {r0, r1, r2}
 800f262:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800f266:	bf00      	nop
    terimaTextBuffer[0] = 0;
 800f268:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f26c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	2200      	movs	r2, #0
 800f274:	f8a3 28ae 	strh.w	r2, [r3, #2222]	; 0x8ae
    terimaText.setWildcard(terimaTextBuffer);
 800f278:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f27c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	f503 62c5 	add.w	r2, r3, #1576	; 0x628
 800f286:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f28a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	f603 03ae 	addw	r3, r3, #2222	; 0x8ae
 800f294:	4619      	mov	r1, r3
 800f296:	4610      	mov	r0, r2
 800f298:	f7fe fb76 	bl	800d988 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    terimaText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DLKZ));
 800f29c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f2a0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	f503 64c5 	add.w	r4, r3, #1576	; 0x628
 800f2aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f2ae:	210f      	movs	r1, #15
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f7fe f97b 	bl	800d5ac <_ZN8touchgfx9TypedTextC1Et>
 800f2b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f2ba:	4619      	mov	r1, r3
 800f2bc:	4620      	mov	r0, r4
 800f2be:	f006 fa81 	bl	80157c4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800f2c2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7fc fef4 	bl	800c0b4 <_ZN8touchgfx9TypedTextD1Ev>
    mid3Container.add(terimaText);
 800f2cc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f2d0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	f203 52b4 	addw	r2, r3, #1460	; 0x5b4
 800f2da:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f2de:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	4610      	mov	r0, r2
 800f2ec:	f004 f8f0 	bl	80134d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    line4.setPosition(1, 242, 240, 15);
 800f2f0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f2f4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f203 6074 	addw	r0, r3, #1652	; 0x674
 800f2fe:	230f      	movs	r3, #15
 800f300:	9300      	str	r3, [sp, #0]
 800f302:	23f0      	movs	r3, #240	; 0xf0
 800f304:	22f2      	movs	r2, #242	; 0xf2
 800f306:	2101      	movs	r1, #1
 800f308:	f7fd ff08 	bl	800d11c <_ZN8touchgfx8Drawable11setPositionEssss>
    line4Painter.setColor(touchgfx::Color::getColorFromRGB(20, 245, 0));
 800f30c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f310:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	f203 64e4 	addw	r4, r3, #1764	; 0x6e4
 800f31a:	2314      	movs	r3, #20
 800f31c:	f887 31c0 	strb.w	r3, [r7, #448]	; 0x1c0
 800f320:	23f5      	movs	r3, #245	; 0xf5
 800f322:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
 800f326:	2300      	movs	r3, #0
 800f328:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 800f32c:	f897 31c0 	ldrb.w	r3, [r7, #448]	; 0x1c0
 800f330:	041b      	lsls	r3, r3, #16
 800f332:	461a      	mov	r2, r3
 800f334:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 800f338:	021b      	lsls	r3, r3, #8
 800f33a:	431a      	orrs	r2, r3
 800f33c:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 800f340:	4313      	orrs	r3, r2
 800f342:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f346:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800f34a:	4611      	mov	r1, r2
 800f34c:	4618      	mov	r0, r3
 800f34e:	f7fd fe25 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
 800f352:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f356:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	4619      	mov	r1, r3
 800f35e:	4620      	mov	r0, r4
 800f360:	f7fe fcba 	bl	800dcd8 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    line4.setPainter(line4Painter);
 800f364:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f368:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	f203 6274 	addw	r2, r3, #1652	; 0x674
 800f372:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f376:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	f203 63e4 	addw	r3, r3, #1764	; 0x6e4
 800f380:	4619      	mov	r1, r3
 800f382:	4610      	mov	r0, r2
 800f384:	f7fe fb93 	bl	800daae <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line4.setStart(0, 0);
 800f388:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f38c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	f203 6374 	addw	r3, r3, #1652	; 0x674
 800f396:	2200      	movs	r2, #0
 800f398:	2100      	movs	r1, #0
 800f39a:	4618      	mov	r0, r3
 800f39c:	f000 fb92 	bl	800fac4 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line4.setEnd(420, 0);
 800f3a0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f3a4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	f203 6374 	addw	r3, r3, #1652	; 0x674
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f000 fbab 	bl	800fb10 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line4.setLineWidth(10);
 800f3ba:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f3be:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	f203 6374 	addw	r3, r3, #1652	; 0x674
 800f3c8:	210a      	movs	r1, #10
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f000 fbc6 	bl	800fb5c <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line4.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 800f3d0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f3d4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	f203 6374 	addw	r3, r3, #1652	; 0x674
 800f3de:	2100      	movs	r1, #0
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f005 fdcf 	bl	8014f84 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    bottomContainer.setPosition(0, 249, 240, 71);
 800f3e6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f3ea:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	f503 60df 	add.w	r0, r3, #1784	; 0x6f8
 800f3f4:	2347      	movs	r3, #71	; 0x47
 800f3f6:	9300      	str	r3, [sp, #0]
 800f3f8:	23f0      	movs	r3, #240	; 0xf0
 800f3fa:	22f9      	movs	r2, #249	; 0xf9
 800f3fc:	2100      	movs	r1, #0
 800f3fe:	f7fd fe8d 	bl	800d11c <_ZN8touchgfx8Drawable11setPositionEssss>

    latitudeText.setXY(6, 20);
 800f402:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f406:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	f203 7324 	addw	r3, r3, #1828	; 0x724
 800f410:	2214      	movs	r2, #20
 800f412:	2106      	movs	r1, #6
 800f414:	4618      	mov	r0, r3
 800f416:	f7fd fec0 	bl	800d19a <_ZN8touchgfx8Drawable5setXYEss>
    latitudeText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800f41a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f41e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	f203 7424 	addw	r4, r3, #1828	; 0x724
 800f428:	23ff      	movs	r3, #255	; 0xff
 800f42a:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
 800f42e:	23ff      	movs	r3, #255	; 0xff
 800f430:	f887 31c2 	strb.w	r3, [r7, #450]	; 0x1c2
 800f434:	23ff      	movs	r3, #255	; 0xff
 800f436:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1
 800f43a:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 800f43e:	041b      	lsls	r3, r3, #16
 800f440:	461a      	mov	r2, r3
 800f442:	f897 31c2 	ldrb.w	r3, [r7, #450]	; 0x1c2
 800f446:	021b      	lsls	r3, r3, #8
 800f448:	431a      	orrs	r2, r3
 800f44a:	f897 31c1 	ldrb.w	r3, [r7, #449]	; 0x1c1
 800f44e:	4313      	orrs	r3, r2
 800f450:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f454:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800f458:	4611      	mov	r1, r2
 800f45a:	4618      	mov	r0, r3
 800f45c:	f7fd fd9e 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
 800f460:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f464:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	461a      	mov	r2, r3
 800f46c:	f8c7 41c4 	str.w	r4, [r7, #452]	; 0x1c4
 800f470:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f474:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800f478:	601a      	str	r2, [r3, #0]
        color = newColor;
 800f47a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800f47e:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 800f482:	f5a2 72ec 	sub.w	r2, r2, #472	; 0x1d8
 800f486:	6812      	ldr	r2, [r2, #0]
 800f488:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800f48a:	bf00      	nop
    latitudeText.setLinespacing(0);
 800f48c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f490:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	f203 7324 	addw	r3, r3, #1828	; 0x724
 800f49a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800f49e:	2300      	movs	r3, #0
 800f4a0:	f8a7 31ca 	strh.w	r3, [r7, #458]	; 0x1ca
        linespace = space;
 800f4a4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800f4a8:	f8b7 21ca 	ldrh.w	r2, [r7, #458]	; 0x1ca
 800f4ac:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800f4ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	3384      	adds	r3, #132	; 0x84
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	f8d7 41cc 	ldr.w	r4, [r7, #460]	; 0x1cc
 800f4bc:	463a      	mov	r2, r7
 800f4be:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800f4c2:	4610      	mov	r0, r2
 800f4c4:	4798      	blx	r3
 800f4c6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f4ca:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 800f4ce:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800f4d2:	ca07      	ldmia	r2, {r0, r1, r2}
 800f4d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800f4d8:	bf00      	nop
    Unicode::snprintf(latitudeTextBuffer, LATITUDETEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_WYLU).getText());
 800f4da:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f4de:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	f503 6413 	add.w	r4, r3, #2352	; 0x930
 800f4e8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800f4ec:	210b      	movs	r1, #11
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7fe f85c 	bl	800d5ac <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f4f4:	4b8b      	ldr	r3, [pc, #556]	; (800f724 <_ZN18mainScreenViewBaseC1Ev+0x1804>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d105      	bne.n	800f508 <_ZN18mainScreenViewBaseC1Ev+0x15e8>
 800f4fc:	4b8a      	ldr	r3, [pc, #552]	; (800f728 <_ZN18mainScreenViewBaseC1Ev+0x1808>)
 800f4fe:	4a8b      	ldr	r2, [pc, #556]	; (800f72c <_ZN18mainScreenViewBaseC1Ev+0x180c>)
 800f500:	2160      	movs	r1, #96	; 0x60
 800f502:	488b      	ldr	r0, [pc, #556]	; (800f730 <_ZN18mainScreenViewBaseC1Ev+0x1810>)
 800f504:	f018 fa78 	bl	80279f8 <__assert_func>
 800f508:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800f50c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
        return typedTextId < numberOfTypedTexts;
 800f510:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800f514:	889a      	ldrh	r2, [r3, #4]
 800f516:	4b87      	ldr	r3, [pc, #540]	; (800f734 <_ZN18mainScreenViewBaseC1Ev+0x1814>)
 800f518:	881b      	ldrh	r3, [r3, #0]
 800f51a:	429a      	cmp	r2, r3
 800f51c:	bf34      	ite	cc
 800f51e:	2301      	movcc	r3, #1
 800f520:	2300      	movcs	r3, #0
 800f522:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800f524:	2b00      	cmp	r3, #0
 800f526:	d105      	bne.n	800f534 <_ZN18mainScreenViewBaseC1Ev+0x1614>
 800f528:	4b83      	ldr	r3, [pc, #524]	; (800f738 <_ZN18mainScreenViewBaseC1Ev+0x1818>)
 800f52a:	4a80      	ldr	r2, [pc, #512]	; (800f72c <_ZN18mainScreenViewBaseC1Ev+0x180c>)
 800f52c:	2161      	movs	r1, #97	; 0x61
 800f52e:	4880      	ldr	r0, [pc, #512]	; (800f730 <_ZN18mainScreenViewBaseC1Ev+0x1810>)
 800f530:	f018 fa62 	bl	80279f8 <__assert_func>
 800f534:	bf00      	nop
        return texts->getText(typedTextId);
 800f536:	4b81      	ldr	r3, [pc, #516]	; (800f73c <_ZN18mainScreenViewBaseC1Ev+0x181c>)
 800f538:	681a      	ldr	r2, [r3, #0]
 800f53a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f53e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800f542:	889b      	ldrh	r3, [r3, #4]
 800f544:	4619      	mov	r1, r3
 800f546:	4610      	mov	r0, r2
 800f548:	f000 fe84 	bl	8010254 <_ZNK8touchgfx5Texts7getTextEt>
 800f54c:	4603      	mov	r3, r0
 800f54e:	bf00      	nop
 800f550:	4a7b      	ldr	r2, [pc, #492]	; (800f740 <_ZN18mainScreenViewBaseC1Ev+0x1820>)
 800f552:	2121      	movs	r1, #33	; 0x21
 800f554:	4620      	mov	r0, r4
 800f556:	f00b fe51 	bl	801b1fc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800f55a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800f55e:	4618      	mov	r0, r3
 800f560:	f7fc fda8 	bl	800c0b4 <_ZN8touchgfx9TypedTextD1Ev>
    latitudeText.setWildcard(latitudeTextBuffer);
 800f564:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f568:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	f203 7224 	addw	r2, r3, #1828	; 0x724
 800f572:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f576:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 800f580:	4619      	mov	r1, r3
 800f582:	4610      	mov	r0, r2
 800f584:	f7fe fa00 	bl	800d988 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    latitudeText.resizeToCurrentText();
 800f588:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f58c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	f203 7324 	addw	r3, r3, #1828	; 0x724
 800f596:	4618      	mov	r0, r3
 800f598:	f006 f8f4 	bl	8015784 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    latitudeText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BDMO));
 800f59c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f5a0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	f203 7424 	addw	r4, r3, #1828	; 0x724
 800f5aa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800f5ae:	2107      	movs	r1, #7
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f7fd fffb 	bl	800d5ac <_ZN8touchgfx9TypedTextC1Et>
 800f5b6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	4620      	mov	r0, r4
 800f5be:	f006 f901 	bl	80157c4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800f5c2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7fc fd74 	bl	800c0b4 <_ZN8touchgfx9TypedTextD1Ev>
    bottomContainer.add(latitudeText);
 800f5cc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f5d0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	f503 62df 	add.w	r2, r3, #1784	; 0x6f8
 800f5da:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f5de:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	f203 7324 	addw	r3, r3, #1828	; 0x724
 800f5e8:	4619      	mov	r1, r3
 800f5ea:	4610      	mov	r0, r2
 800f5ec:	f003 ff70 	bl	80134d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    longitudeText.setXY(6, 35);
 800f5f0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f5f4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 800f5fe:	2223      	movs	r2, #35	; 0x23
 800f600:	2106      	movs	r1, #6
 800f602:	4618      	mov	r0, r3
 800f604:	f7fd fdc9 	bl	800d19a <_ZN8touchgfx8Drawable5setXYEss>
    longitudeText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800f608:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f60c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	f503 64ee 	add.w	r4, r3, #1904	; 0x770
 800f616:	23ff      	movs	r3, #255	; 0xff
 800f618:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
 800f61c:	23ff      	movs	r3, #255	; 0xff
 800f61e:	f887 31d6 	strb.w	r3, [r7, #470]	; 0x1d6
 800f622:	23ff      	movs	r3, #255	; 0xff
 800f624:	f887 31d5 	strb.w	r3, [r7, #469]	; 0x1d5
 800f628:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 800f62c:	041b      	lsls	r3, r3, #16
 800f62e:	461a      	mov	r2, r3
 800f630:	f897 31d6 	ldrb.w	r3, [r7, #470]	; 0x1d6
 800f634:	021b      	lsls	r3, r3, #8
 800f636:	431a      	orrs	r2, r3
 800f638:	f897 31d5 	ldrb.w	r3, [r7, #469]	; 0x1d5
 800f63c:	4313      	orrs	r3, r2
 800f63e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f642:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800f646:	4611      	mov	r1, r2
 800f648:	4618      	mov	r0, r3
 800f64a:	f7fd fca7 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
 800f64e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f652:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	461a      	mov	r2, r3
 800f65a:	f8c7 41d8 	str.w	r4, [r7, #472]	; 0x1d8
 800f65e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f662:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800f666:	601a      	str	r2, [r3, #0]
        color = newColor;
 800f668:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800f66c:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 800f670:	f5a2 72ee 	sub.w	r2, r2, #476	; 0x1dc
 800f674:	6812      	ldr	r2, [r2, #0]
 800f676:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800f678:	bf00      	nop
    longitudeText.setLinespacing(0);
 800f67a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f67e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 800f688:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800f68c:	2300      	movs	r3, #0
 800f68e:	f8a7 31de 	strh.w	r3, [r7, #478]	; 0x1de
        linespace = space;
 800f692:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800f696:	f8b7 21de 	ldrh.w	r2, [r7, #478]	; 0x1de
 800f69a:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800f69c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	3384      	adds	r3, #132	; 0x84
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f8d7 41e0 	ldr.w	r4, [r7, #480]	; 0x1e0
 800f6aa:	463a      	mov	r2, r7
 800f6ac:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 800f6b0:	4610      	mov	r0, r2
 800f6b2:	4798      	blx	r3
 800f6b4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f6b8:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 800f6bc:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800f6c0:	ca07      	ldmia	r2, {r0, r1, r2}
 800f6c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800f6c6:	bf00      	nop
    Unicode::snprintf(longitudeTextBuffer, LONGITUDETEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_HGB8).getText());
 800f6c8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f6cc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	f603 1472 	addw	r4, r3, #2418	; 0x972
 800f6d6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800f6da:	210c      	movs	r1, #12
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f7fd ff65 	bl	800d5ac <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f6e2:	4b10      	ldr	r3, [pc, #64]	; (800f724 <_ZN18mainScreenViewBaseC1Ev+0x1804>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d105      	bne.n	800f6f6 <_ZN18mainScreenViewBaseC1Ev+0x17d6>
 800f6ea:	4b0f      	ldr	r3, [pc, #60]	; (800f728 <_ZN18mainScreenViewBaseC1Ev+0x1808>)
 800f6ec:	4a0f      	ldr	r2, [pc, #60]	; (800f72c <_ZN18mainScreenViewBaseC1Ev+0x180c>)
 800f6ee:	2160      	movs	r1, #96	; 0x60
 800f6f0:	480f      	ldr	r0, [pc, #60]	; (800f730 <_ZN18mainScreenViewBaseC1Ev+0x1810>)
 800f6f2:	f018 f981 	bl	80279f8 <__assert_func>
 800f6f6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800f6fa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
        return typedTextId < numberOfTypedTexts;
 800f6fe:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800f702:	889a      	ldrh	r2, [r3, #4]
 800f704:	4b0b      	ldr	r3, [pc, #44]	; (800f734 <_ZN18mainScreenViewBaseC1Ev+0x1814>)
 800f706:	881b      	ldrh	r3, [r3, #0]
 800f708:	429a      	cmp	r2, r3
 800f70a:	bf34      	ite	cc
 800f70c:	2301      	movcc	r3, #1
 800f70e:	2300      	movcs	r3, #0
 800f710:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800f712:	2b00      	cmp	r3, #0
 800f714:	d116      	bne.n	800f744 <_ZN18mainScreenViewBaseC1Ev+0x1824>
 800f716:	4b08      	ldr	r3, [pc, #32]	; (800f738 <_ZN18mainScreenViewBaseC1Ev+0x1818>)
 800f718:	4a04      	ldr	r2, [pc, #16]	; (800f72c <_ZN18mainScreenViewBaseC1Ev+0x180c>)
 800f71a:	2161      	movs	r1, #97	; 0x61
 800f71c:	4804      	ldr	r0, [pc, #16]	; (800f730 <_ZN18mainScreenViewBaseC1Ev+0x1810>)
 800f71e:	f018 f96b 	bl	80279f8 <__assert_func>
 800f722:	bf00      	nop
 800f724:	2000c494 	.word	0x2000c494
 800f728:	0802c60c 	.word	0x0802c60c
 800f72c:	0802c80c 	.word	0x0802c80c
 800f730:	0802c68c 	.word	0x0802c68c
 800f734:	2000c498 	.word	0x2000c498
 800f738:	0802c6d0 	.word	0x0802c6d0
 800f73c:	2000c4a0 	.word	0x2000c4a0
 800f740:	0802c844 	.word	0x0802c844
 800f744:	bf00      	nop
        return texts->getText(typedTextId);
 800f746:	4bcd      	ldr	r3, [pc, #820]	; (800fa7c <_ZN18mainScreenViewBaseC1Ev+0x1b5c>)
 800f748:	681a      	ldr	r2, [r3, #0]
 800f74a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f74e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800f752:	889b      	ldrh	r3, [r3, #4]
 800f754:	4619      	mov	r1, r3
 800f756:	4610      	mov	r0, r2
 800f758:	f000 fd7c 	bl	8010254 <_ZNK8touchgfx5Texts7getTextEt>
 800f75c:	4603      	mov	r3, r0
 800f75e:	bf00      	nop
 800f760:	4ac7      	ldr	r2, [pc, #796]	; (800fa80 <_ZN18mainScreenViewBaseC1Ev+0x1b60>)
 800f762:	2121      	movs	r1, #33	; 0x21
 800f764:	4620      	mov	r0, r4
 800f766:	f00b fd49 	bl	801b1fc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800f76a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800f76e:	4618      	mov	r0, r3
 800f770:	f7fc fca0 	bl	800c0b4 <_ZN8touchgfx9TypedTextD1Ev>
    longitudeText.setWildcard(longitudeTextBuffer);
 800f774:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f778:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	f503 62ee 	add.w	r2, r3, #1904	; 0x770
 800f782:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f786:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	f603 1372 	addw	r3, r3, #2418	; 0x972
 800f790:	4619      	mov	r1, r3
 800f792:	4610      	mov	r0, r2
 800f794:	f7fe f8f8 	bl	800d988 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    longitudeText.resizeToCurrentText();
 800f798:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f79c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f005 ffec 	bl	8015784 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    longitudeText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RJFK));
 800f7ac:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f7b0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	f503 64ee 	add.w	r4, r3, #1904	; 0x770
 800f7ba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800f7be:	2108      	movs	r1, #8
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	f7fd fef3 	bl	800d5ac <_ZN8touchgfx9TypedTextC1Et>
 800f7c6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800f7ca:	4619      	mov	r1, r3
 800f7cc:	4620      	mov	r0, r4
 800f7ce:	f005 fff9 	bl	80157c4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800f7d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7fc fc6c 	bl	800c0b4 <_ZN8touchgfx9TypedTextD1Ev>
    bottomContainer.add(longitudeText);
 800f7dc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f7e0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	f503 62df 	add.w	r2, r3, #1784	; 0x6f8
 800f7ea:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f7ee:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 800f7f8:	4619      	mov	r1, r3
 800f7fa:	4610      	mov	r0, r2
 800f7fc:	f003 fe68 	bl	80134d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    lokasilabelText.setXY(95, 0);
 800f800:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f804:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 800f80e:	2200      	movs	r2, #0
 800f810:	215f      	movs	r1, #95	; 0x5f
 800f812:	4618      	mov	r0, r3
 800f814:	f7fd fcc1 	bl	800d19a <_ZN8touchgfx8Drawable5setXYEss>
    lokasilabelText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800f818:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f81c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	f203 74bc 	addw	r4, r3, #1980	; 0x7bc
 800f826:	23ff      	movs	r3, #255	; 0xff
 800f828:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
 800f82c:	23ff      	movs	r3, #255	; 0xff
 800f82e:	f887 31ea 	strb.w	r3, [r7, #490]	; 0x1ea
 800f832:	23ff      	movs	r3, #255	; 0xff
 800f834:	f887 31e9 	strb.w	r3, [r7, #489]	; 0x1e9
 800f838:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 800f83c:	041b      	lsls	r3, r3, #16
 800f83e:	461a      	mov	r2, r3
 800f840:	f897 31ea 	ldrb.w	r3, [r7, #490]	; 0x1ea
 800f844:	021b      	lsls	r3, r3, #8
 800f846:	431a      	orrs	r2, r3
 800f848:	f897 31e9 	ldrb.w	r3, [r7, #489]	; 0x1e9
 800f84c:	4313      	orrs	r3, r2
 800f84e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f852:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800f856:	4611      	mov	r1, r2
 800f858:	4618      	mov	r0, r3
 800f85a:	f7fd fb9f 	bl	800cf9c <_ZN8touchgfx9colortypeC1Em>
 800f85e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f862:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	461a      	mov	r2, r3
 800f86a:	f8c7 41ec 	str.w	r4, [r7, #492]	; 0x1ec
 800f86e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f872:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800f876:	601a      	str	r2, [r3, #0]
        color = newColor;
 800f878:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800f87c:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 800f880:	f5a2 72f0 	sub.w	r2, r2, #480	; 0x1e0
 800f884:	6812      	ldr	r2, [r2, #0]
 800f886:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800f888:	bf00      	nop
    lokasilabelText.setLinespacing(0);
 800f88a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f88e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 800f898:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800f89c:	2300      	movs	r3, #0
 800f89e:	f8a7 31f2 	strh.w	r3, [r7, #498]	; 0x1f2
        linespace = space;
 800f8a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800f8a6:	f8b7 21f2 	ldrh.w	r2, [r7, #498]	; 0x1f2
 800f8aa:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800f8ac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	3384      	adds	r3, #132	; 0x84
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	f8d7 41f4 	ldr.w	r4, [r7, #500]	; 0x1f4
 800f8ba:	463a      	mov	r2, r7
 800f8bc:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 800f8c0:	4610      	mov	r0, r2
 800f8c2:	4798      	blx	r3
 800f8c4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f8c8:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 800f8cc:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800f8d0:	ca07      	ldmia	r2, {r0, r1, r2}
 800f8d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800f8d6:	bf00      	nop
    lokasilabelText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_S8SJ));
 800f8d8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f8dc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	f203 74bc 	addw	r4, r3, #1980	; 0x7bc
 800f8e6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800f8ea:	2109      	movs	r1, #9
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f7fd fe5d 	bl	800d5ac <_ZN8touchgfx9TypedTextC1Et>
 800f8f2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	4620      	mov	r0, r4
 800f8fa:	f005 ff63 	bl	80157c4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800f8fe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800f902:	4618      	mov	r0, r3
 800f904:	f7fc fbd6 	bl	800c0b4 <_ZN8touchgfx9TypedTextD1Ev>
    bottomContainer.add(lokasilabelText);
 800f908:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f90c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	f503 62df 	add.w	r2, r3, #1784	; 0x6f8
 800f916:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f91a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 800f924:	4619      	mov	r1, r3
 800f926:	4610      	mov	r0, r2
 800f928:	f003 fdd2 	bl	80134d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(__background);
 800f92c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f930:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f934:	681a      	ldr	r2, [r3, #0]
 800f936:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f93a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	3340      	adds	r3, #64	; 0x40
 800f942:	4619      	mov	r1, r3
 800f944:	4610      	mov	r0, r2
 800f946:	f7fd fd99 	bl	800d47c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(topContainer);
 800f94a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f94e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f952:	681a      	ldr	r2, [r3, #0]
 800f954:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f958:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	336c      	adds	r3, #108	; 0x6c
 800f960:	4619      	mov	r1, r3
 800f962:	4610      	mov	r0, r2
 800f964:	f7fd fd8a 	bl	800d47c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(mid1Container);
 800f968:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f96c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f970:	681a      	ldr	r2, [r3, #0]
 800f972:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f976:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800f980:	4619      	mov	r1, r3
 800f982:	4610      	mov	r0, r2
 800f984:	f7fd fd7a 	bl	800d47c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line1);
 800f988:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f98c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f990:	681a      	ldr	r2, [r3, #0]
 800f992:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f996:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	f503 735a 	add.w	r3, r3, #872	; 0x368
 800f9a0:	4619      	mov	r1, r3
 800f9a2:	4610      	mov	r0, r2
 800f9a4:	f7fd fd6a 	bl	800d47c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(mid2Container);
 800f9a8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f9ac:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f9b0:	681a      	ldr	r2, [r3, #0]
 800f9b2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f9b6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 800f9c0:	4619      	mov	r1, r3
 800f9c2:	4610      	mov	r0, r2
 800f9c4:	f7fd fd5a 	bl	800d47c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line2);
 800f9c8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f9cc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f9d0:	681a      	ldr	r2, [r3, #0]
 800f9d2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f9d6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	f203 43ac 	addw	r3, r3, #1196	; 0x4ac
 800f9e0:	4619      	mov	r1, r3
 800f9e2:	4610      	mov	r0, r2
 800f9e4:	f7fd fd4a 	bl	800d47c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line3);
 800f9e8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f9ec:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f9f0:	681a      	ldr	r2, [r3, #0]
 800f9f2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f9f6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800fa00:	4619      	mov	r1, r3
 800fa02:	4610      	mov	r0, r2
 800fa04:	f7fd fd3a 	bl	800d47c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(mid3Container);
 800fa08:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800fa0c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800fa10:	681a      	ldr	r2, [r3, #0]
 800fa12:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800fa16:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 800fa20:	4619      	mov	r1, r3
 800fa22:	4610      	mov	r0, r2
 800fa24:	f7fd fd2a 	bl	800d47c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line4);
 800fa28:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800fa2c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800fa30:	681a      	ldr	r2, [r3, #0]
 800fa32:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800fa36:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	f203 6374 	addw	r3, r3, #1652	; 0x674
 800fa40:	4619      	mov	r1, r3
 800fa42:	4610      	mov	r0, r2
 800fa44:	f7fd fd1a 	bl	800d47c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(bottomContainer);
 800fa48:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800fa4c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800fa50:	681a      	ldr	r2, [r3, #0]
 800fa52:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800fa56:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 800fa60:	4619      	mov	r1, r3
 800fa62:	4610      	mov	r0, r2
 800fa64:	f7fd fd0a 	bl	800d47c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800fa68:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800fa6c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	4618      	mov	r0, r3
 800fa74:	f507 77fe 	add.w	r7, r7, #508	; 0x1fc
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd90      	pop	{r4, r7, pc}
 800fa7c:	2000c4a0 	.word	0x2000c4a0
 800fa80:	0802c844 	.word	0x0802c844

0800fa84 <_ZN18mainScreenViewBase11setupScreenEv>:

void mainScreenViewBase::setupScreen()
{
 800fa84:	b480      	push	{r7}
 800fa86:	b083      	sub	sp, #12
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]

}
 800fa8c:	bf00      	nop
 800fa8e:	370c      	adds	r7, #12
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr

0800fa98 <_ZN8touchgfx4ViewI19mainScreenPresenterEC1Ev>:
    View()
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	4618      	mov	r0, r3
 800faa4:	f009 fef4 	bl	8019890 <_ZN8touchgfx6ScreenC1Ev>
 800faa8:	4a05      	ldr	r2, [pc, #20]	; (800fac0 <_ZN8touchgfx4ViewI19mainScreenPresenterEC1Ev+0x28>)
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	601a      	str	r2, [r3, #0]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2200      	movs	r2, #0
 800fab2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	4618      	mov	r0, r3
 800fab8:	3708      	adds	r7, #8
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	0802dac8 	.word	0x0802dac8

0800fac4 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 800fac4:	b590      	push	{r4, r7, lr}
 800fac6:	b089      	sub	sp, #36	; 0x24
 800fac8:	af00      	add	r7, sp, #0
 800faca:	60f8      	str	r0, [r7, #12]
 800facc:	60b9      	str	r1, [r7, #8]
 800face:	607a      	str	r2, [r7, #4]
 800fad0:	68bb      	ldr	r3, [r7, #8]
 800fad2:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800fad4:	69bb      	ldr	r3, [r7, #24]
 800fad6:	015a      	lsls	r2, r3, #5
 800fad8:	f107 0314 	add.w	r3, r7, #20
 800fadc:	4611      	mov	r1, r2
 800fade:	4618      	mov	r0, r3
 800fae0:	f7fd ffca 	bl	800da78 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	461c      	mov	r4, r3
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	61fb      	str	r3, [r7, #28]
 800faec:	69fb      	ldr	r3, [r7, #28]
 800faee:	015a      	lsls	r2, r3, #5
 800faf0:	f107 0310 	add.w	r3, r7, #16
 800faf4:	4611      	mov	r1, r2
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7fd ffbe 	bl	800da78 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fafc:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 800fafe:	461a      	mov	r2, r3
 800fb00:	4621      	mov	r1, r4
 800fb02:	68f8      	ldr	r0, [r7, #12]
 800fb04:	f005 fa28 	bl	8014f58 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 800fb08:	bf00      	nop
 800fb0a:	3724      	adds	r7, #36	; 0x24
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd90      	pop	{r4, r7, pc}

0800fb10 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 800fb10:	b590      	push	{r4, r7, lr}
 800fb12:	b089      	sub	sp, #36	; 0x24
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	60f8      	str	r0, [r7, #12]
 800fb18:	60b9      	str	r1, [r7, #8]
 800fb1a:	607a      	str	r2, [r7, #4]
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	61bb      	str	r3, [r7, #24]
 800fb20:	69bb      	ldr	r3, [r7, #24]
 800fb22:	015a      	lsls	r2, r3, #5
 800fb24:	f107 0314 	add.w	r3, r7, #20
 800fb28:	4611      	mov	r1, r2
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f7fd ffa4 	bl	800da78 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	461c      	mov	r4, r3
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	61fb      	str	r3, [r7, #28]
 800fb38:	69fb      	ldr	r3, [r7, #28]
 800fb3a:	015a      	lsls	r2, r3, #5
 800fb3c:	f107 0310 	add.w	r3, r7, #16
 800fb40:	4611      	mov	r1, r2
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7fd ff98 	bl	800da78 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fb48:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	4621      	mov	r1, r4
 800fb4e:	68f8      	ldr	r0, [r7, #12]
 800fb50:	f005 fa0d 	bl	8014f6e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 800fb54:	bf00      	nop
 800fb56:	3724      	adds	r7, #36	; 0x24
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd90      	pop	{r4, r7, pc}

0800fb5c <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b084      	sub	sp, #16
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
 800fb64:	6039      	str	r1, [r7, #0]
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	60fb      	str	r3, [r7, #12]
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	015a      	lsls	r2, r3, #5
 800fb6e:	f107 0308 	add.w	r3, r7, #8
 800fb72:	4611      	mov	r1, r2
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7fd ff7f 	bl	800da78 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fb7a:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 800fb7c:	4619      	mov	r1, r3
 800fb7e:	6878      	ldr	r0, [r7, #4]
 800fb80:	f7fd ffa3 	bl	800daca <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 800fb84:	bf00      	nop
 800fb86:	3710      	adds	r7, #16
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
 800fb94:	4a05      	ldr	r2, [pc, #20]	; (800fbac <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	601a      	str	r2, [r3, #0]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7fd fea1 	bl	800d8e4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	4618      	mov	r0, r3
 800fba6:	3708      	adds	r7, #8
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}
 800fbac:	0802db50 	.word	0x0802db50

0800fbb0 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b082      	sub	sp, #8
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
 800fbb8:	6878      	ldr	r0, [r7, #4]
 800fbba:	f7ff ffe7 	bl	800fb8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fbbe:	214c      	movs	r1, #76	; 0x4c
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	f017 feeb 	bl	802799c <_ZdlPvj>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3708      	adds	r7, #8
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}

0800fbd0 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b082      	sub	sp, #8
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
 800fbd8:	4a05      	ldr	r2, [pc, #20]	; (800fbf0 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	601a      	str	r2, [r3, #0]
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f7fd fa5d 	bl	800d0a0 <_ZN8touchgfx8DrawableD1Ev>
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3708      	adds	r7, #8
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}
 800fbf0:	0802e5cc 	.word	0x0802e5cc

0800fbf4 <_ZN8touchgfx9ContainerD0Ev>:
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b082      	sub	sp, #8
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f7ff ffe7 	bl	800fbd0 <_ZN8touchgfx9ContainerD1Ev>
 800fc02:	212c      	movs	r1, #44	; 0x2c
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f017 fec9 	bl	802799c <_ZdlPvj>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3708      	adds	r7, #8
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}

0800fc14 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b082      	sub	sp, #8
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	4a05      	ldr	r2, [pc, #20]	; (800fc34 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	601a      	str	r2, [r3, #0]
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	4618      	mov	r0, r3
 800fc26:	f7fd fc6d 	bl	800d504 <_ZN8touchgfx6WidgetD1Ev>
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	3708      	adds	r7, #8
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}
 800fc34:	0802ea90 	.word	0x0802ea90

0800fc38 <_ZN8touchgfx3BoxD0Ev>:
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b082      	sub	sp, #8
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f7ff ffe7 	bl	800fc14 <_ZN8touchgfx3BoxD1Ev>
 800fc46:	212c      	movs	r1, #44	; 0x2c
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f017 fea7 	bl	802799c <_ZdlPvj>
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	4618      	mov	r0, r3
 800fc52:	3708      	adds	r7, #8
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}

0800fc58 <_ZN8touchgfx5ImageD1Ev>:
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b082      	sub	sp, #8
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
 800fc60:	4a05      	ldr	r2, [pc, #20]	; (800fc78 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	601a      	str	r2, [r3, #0]
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f7fd fc4b 	bl	800d504 <_ZN8touchgfx6WidgetD1Ev>
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	4618      	mov	r0, r3
 800fc72:	3708      	adds	r7, #8
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}
 800fc78:	0802eb88 	.word	0x0802eb88

0800fc7c <_ZN8touchgfx5ImageD0Ev>:
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b082      	sub	sp, #8
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	f7ff ffe7 	bl	800fc58 <_ZN8touchgfx5ImageD1Ev>
 800fc8a:	212c      	movs	r1, #44	; 0x2c
 800fc8c:	6878      	ldr	r0, [r7, #4]
 800fc8e:	f017 fe85 	bl	802799c <_ZdlPvj>
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	4618      	mov	r0, r3
 800fc96:	3708      	adds	r7, #8
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}

0800fc9c <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b082      	sub	sp, #8
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	4a0a      	ldr	r2, [pc, #40]	; (800fcd0 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	601a      	str	r2, [r3, #0]
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	3358      	adds	r3, #88	; 0x58
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f7ff ff8e 	bl	800fbd0 <_ZN8touchgfx9ContainerD1Ev>
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	332c      	adds	r3, #44	; 0x2c
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f7ff ffcd 	bl	800fc58 <_ZN8touchgfx5ImageD1Ev>
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f7ff ff85 	bl	800fbd0 <_ZN8touchgfx9ContainerD1Ev>
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3708      	adds	r7, #8
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}
 800fcd0:	0802e348 	.word	0x0802e348

0800fcd4 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b082      	sub	sp, #8
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f7ff ffdd 	bl	800fc9c <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 800fce2:	21b4      	movs	r1, #180	; 0xb4
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f017 fe59 	bl	802799c <_ZdlPvj>
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	4618      	mov	r0, r3
 800fcee:	3708      	adds	r7, #8
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
{
/**
 * An abstract class for progress indicators that need a horizontal or vertical direction to be
 * specified.
 */
class AbstractDirectionProgress : public AbstractProgressIndicator
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b082      	sub	sp, #8
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	4a05      	ldr	r2, [pc, #20]	; (800fd14 <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x20>)
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	601a      	str	r2, [r3, #0]
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	4618      	mov	r0, r3
 800fd06:	f7ff ffc9 	bl	800fc9c <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	3708      	adds	r7, #8
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}
 800fd14:	0802e26c 	.word	0x0802e26c

0800fd18 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b082      	sub	sp, #8
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f7ff ffe7 	bl	800fcf4 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 800fd26:	21b8      	movs	r1, #184	; 0xb8
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f017 fe37 	bl	802799c <_ZdlPvj>
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	4618      	mov	r0, r3
 800fd32:	3708      	adds	r7, #8
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}

0800fd38 <_ZN8touchgfx11BoxProgressD1Ev>:
/**
 * A BoxProgress which shows the current progress using a simple Box. It is possible to set the
 * color and the alpha of the box. It is also possible to control in what direction the
 * box will progress (up, down, to the left or to the right).
 */
class BoxProgress : public AbstractDirectionProgress
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b082      	sub	sp, #8
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
 800fd40:	4a08      	ldr	r2, [pc, #32]	; (800fd64 <_ZN8touchgfx11BoxProgressD1Ev+0x2c>)
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	601a      	str	r2, [r3, #0]
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	33b8      	adds	r3, #184	; 0xb8
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f7ff ff62 	bl	800fc14 <_ZN8touchgfx3BoxD1Ev>
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7ff ffce 	bl	800fcf4 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3708      	adds	r7, #8
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}
 800fd62:	bf00      	nop
 800fd64:	0802e188 	.word	0x0802e188

0800fd68 <_ZN8touchgfx11BoxProgressD0Ev>:
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b082      	sub	sp, #8
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f7ff ffe1 	bl	800fd38 <_ZN8touchgfx11BoxProgressD1Ev>
 800fd76:	21e4      	movs	r1, #228	; 0xe4
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f017 fe0f 	bl	802799c <_ZdlPvj>
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	4618      	mov	r0, r3
 800fd82:	3708      	adds	r7, #8
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <_ZN8touchgfx13AbstractClockD1Ev>:
 * Superclass of clock widgets. Allows the hour, minute and second of the clock to be set and
 * read.
 *
 * @see AnalogClock, DigitalClock
 */
class AbstractClock : public Container
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b082      	sub	sp, #8
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	4a05      	ldr	r2, [pc, #20]	; (800fda8 <_ZN8touchgfx13AbstractClockD1Ev+0x20>)
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	601a      	str	r2, [r3, #0]
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7ff ff19 	bl	800fbd0 <_ZN8touchgfx9ContainerD1Ev>
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	4618      	mov	r0, r3
 800fda2:	3708      	adds	r7, #8
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	0802e530 	.word	0x0802e530

0800fdac <_ZN8touchgfx13AbstractClockD0Ev>:
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b082      	sub	sp, #8
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f7ff ffe7 	bl	800fd88 <_ZN8touchgfx13AbstractClockD1Ev>
 800fdba:	2130      	movs	r1, #48	; 0x30
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f017 fded 	bl	802799c <_ZdlPvj>
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	3708      	adds	r7, #8
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}

0800fdcc <_ZN8touchgfx12DigitalClockD1Ev>:
class DigitalClock : public AbstractClock
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b082      	sub	sp, #8
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	4a08      	ldr	r2, [pc, #32]	; (800fdf8 <_ZN8touchgfx12DigitalClockD1Ev+0x2c>)
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	601a      	str	r2, [r3, #0]
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	3334      	adds	r3, #52	; 0x34
 800fdde:	4618      	mov	r0, r3
 800fde0:	f7ff fed4 	bl	800fb8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7ff ffce 	bl	800fd88 <_ZN8touchgfx13AbstractClockD1Ev>
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3708      	adds	r7, #8
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}
 800fdf6:	bf00      	nop
 800fdf8:	0802e470 	.word	0x0802e470

0800fdfc <_ZN8touchgfx12DigitalClockD0Ev>:
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b082      	sub	sp, #8
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f7ff ffe1 	bl	800fdcc <_ZN8touchgfx12DigitalClockD1Ev>
 800fe0a:	2198      	movs	r1, #152	; 0x98
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f017 fdc5 	bl	802799c <_ZdlPvj>
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	4618      	mov	r0, r3
 800fe16:	3708      	adds	r7, #8
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	4a05      	ldr	r2, [pc, #20]	; (800fe3c <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	601a      	str	r2, [r3, #0]
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7fd fb69 	bl	800d504 <_ZN8touchgfx6WidgetD1Ev>
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	4618      	mov	r0, r3
 800fe36:	3708      	adds	r7, #8
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	0802e7ec 	.word	0x0802e7ec

0800fe40 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f7ff ffe7 	bl	800fe1c <_ZN8touchgfx12CanvasWidgetD1Ev>
 800fe4e:	212c      	movs	r1, #44	; 0x2c
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f017 fda3 	bl	802799c <_ZdlPvj>
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3708      	adds	r7, #8
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}

0800fe60 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b082      	sub	sp, #8
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	4a05      	ldr	r2, [pc, #20]	; (800fe80 <_ZN8touchgfx4LineD1Ev+0x20>)
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	601a      	str	r2, [r3, #0]
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	4618      	mov	r0, r3
 800fe72:	f7ff ffd3 	bl	800fe1c <_ZN8touchgfx12CanvasWidgetD1Ev>
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3708      	adds	r7, #8
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}
 800fe80:	0802e988 	.word	0x0802e988

0800fe84 <_ZN8touchgfx4LineD0Ev>:
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b082      	sub	sp, #8
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f7ff ffe7 	bl	800fe60 <_ZN8touchgfx4LineD1Ev>
 800fe92:	2170      	movs	r1, #112	; 0x70
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	f017 fd81 	bl	802799c <_ZdlPvj>
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	3708      	adds	r7, #8
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}

0800fea4 <_ZN8touchgfx13PainterRGB565D1Ev>:
class PainterRGB565 : public AbstractPainterRGB565, public AbstractPainterColor
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b082      	sub	sp, #8
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
 800feac:	4a09      	ldr	r2, [pc, #36]	; (800fed4 <_ZN8touchgfx13PainterRGB565D1Ev+0x30>)
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	601a      	str	r2, [r3, #0]
 800feb2:	4a09      	ldr	r2, [pc, #36]	; (800fed8 <_ZN8touchgfx13PainterRGB565D1Ev+0x34>)
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	609a      	str	r2, [r3, #8]
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	3308      	adds	r3, #8
 800febc:	4618      	mov	r0, r3
 800febe:	f7fd fe3f 	bl	800db40 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7fd fec7 	bl	800dc58 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	4618      	mov	r0, r3
 800fece:	3708      	adds	r7, #8
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}
 800fed4:	0802e7b4 	.word	0x0802e7b4
 800fed8:	0802e7d8 	.word	0x0802e7d8

0800fedc <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 800fedc:	f1a0 0008 	sub.w	r0, r0, #8
 800fee0:	e7e0      	b.n	800fea4 <_ZN8touchgfx13PainterRGB565D1Ev>
 800fee2:	bf00      	nop

0800fee4 <_ZN8touchgfx13PainterRGB565D0Ev>:
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b082      	sub	sp, #8
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f7ff ffd9 	bl	800fea4 <_ZN8touchgfx13PainterRGB565D1Ev>
 800fef2:	2114      	movs	r1, #20
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f017 fd51 	bl	802799c <_ZdlPvj>
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	4618      	mov	r0, r3
 800fefe:	3708      	adds	r7, #8
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}

0800ff04 <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 800ff04:	f1a0 0008 	sub.w	r0, r0, #8
 800ff08:	e7ec      	b.n	800fee4 <_ZN8touchgfx13PainterRGB565D0Ev>
	...

0800ff0c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	af00      	add	r7, sp, #0
    return bitmap_database;
 800ff10:	4b02      	ldr	r3, [pc, #8]	; (800ff1c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800ff12:	4618      	mov	r0, r3
 800ff14:	46bd      	mov	sp, r7
 800ff16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1a:	4770      	bx	lr
 800ff1c:	0802dc40 	.word	0x0802dc40

0800ff20 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800ff20:	b480      	push	{r7}
 800ff22:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800ff24:	2301      	movs	r3, #1
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2e:	4770      	bx	lr

0800ff30 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800ff30:	b480      	push	{r7}
 800ff32:	b085      	sub	sp, #20
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	60f8      	str	r0, [r7, #12]
 800ff38:	460b      	mov	r3, r1
 800ff3a:	607a      	str	r2, [r7, #4]
 800ff3c:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 800ff3e:	2300      	movs	r3, #0
    }
 800ff40:	4618      	mov	r0, r3
 800ff42:	3714      	adds	r7, #20
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr

0800ff4c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800ff4c:	b480      	push	{r7}
 800ff4e:	b083      	sub	sp, #12
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800ff54:	2300      	movs	r3, #0
    }
 800ff56:	4618      	mov	r0, r3
 800ff58:	370c      	adds	r7, #12
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff60:	4770      	bx	lr

0800ff62 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800ff62:	b480      	push	{r7}
 800ff64:	b083      	sub	sp, #12
 800ff66:	af00      	add	r7, sp, #0
 800ff68:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800ff6a:	2300      	movs	r3, #0
    }
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	370c      	adds	r7, #12
 800ff70:	46bd      	mov	sp, r7
 800ff72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff76:	4770      	bx	lr

0800ff78 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800ff78:	b480      	push	{r7}
 800ff7a:	b085      	sub	sp, #20
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	60f8      	str	r0, [r7, #12]
 800ff80:	60b9      	str	r1, [r7, #8]
 800ff82:	4613      	mov	r3, r2
 800ff84:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800ff86:	4a07      	ldr	r2, [pc, #28]	; (800ffa4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	6013      	str	r3, [r2, #0]
        fonts = f;
 800ff8c:	4a06      	ldr	r2, [pc, #24]	; (800ffa8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800ff92:	4a06      	ldr	r2, [pc, #24]	; (800ffac <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800ff94:	88fb      	ldrh	r3, [r7, #6]
 800ff96:	8013      	strh	r3, [r2, #0]
    }
 800ff98:	bf00      	nop
 800ff9a:	3714      	adds	r7, #20
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa2:	4770      	bx	lr
 800ffa4:	2000c494 	.word	0x2000c494
 800ffa8:	2000c49c 	.word	0x2000c49c
 800ffac:	2000c498 	.word	0x2000c498

0800ffb0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800ffb0:	b40e      	push	{r1, r2, r3}
 800ffb2:	b580      	push	{r7, lr}
 800ffb4:	b085      	sub	sp, #20
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800ffba:	f107 0320 	add.w	r3, r7, #32
 800ffbe:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	69fa      	ldr	r2, [r7, #28]
 800ffc4:	2100      	movs	r1, #0
 800ffc6:	6878      	ldr	r0, [r7, #4]
 800ffc8:	f008 ffde 	bl	8018f88 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800ffd0:	89fb      	ldrh	r3, [r7, #14]
}
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	3714      	adds	r7, #20
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ffdc:	b003      	add	sp, #12
 800ffde:	4770      	bx	lr

0800ffe0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800ffe0:	b40c      	push	{r2, r3}
 800ffe2:	b580      	push	{r7, lr}
 800ffe4:	b084      	sub	sp, #16
 800ffe6:	af00      	add	r7, sp, #0
 800ffe8:	6078      	str	r0, [r7, #4]
 800ffea:	460b      	mov	r3, r1
 800ffec:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800ffee:	f107 031c 	add.w	r3, r7, #28
 800fff2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800fff4:	78f9      	ldrb	r1, [r7, #3]
 800fff6:	68bb      	ldr	r3, [r7, #8]
 800fff8:	69ba      	ldr	r2, [r7, #24]
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f008 ffc4 	bl	8018f88 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8010000:	4603      	mov	r3, r0
 8010002:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8010004:	89fb      	ldrh	r3, [r7, #14]
}
 8010006:	4618      	mov	r0, r3
 8010008:	3710      	adds	r7, #16
 801000a:	46bd      	mov	sp, r7
 801000c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010010:	b002      	add	sp, #8
 8010012:	4770      	bx	lr

08010014 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b08a      	sub	sp, #40	; 0x28
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	460b      	mov	r3, r1
 801001e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010024:	2b00      	cmp	r3, #0
 8010026:	d016      	beq.n	8010056 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	3322      	adds	r3, #34	; 0x22
 801002c:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 801002e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010030:	8adb      	ldrh	r3, [r3, #22]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d105      	bne.n	8010042 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8010036:	4b43      	ldr	r3, [pc, #268]	; (8010144 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010038:	4a43      	ldr	r2, [pc, #268]	; (8010148 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 801003a:	21c0      	movs	r1, #192	; 0xc0
 801003c:	4843      	ldr	r0, [pc, #268]	; (801014c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801003e:	f017 fcdb 	bl	80279f8 <__assert_func>
            return buffer[pos];
 8010042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010044:	8a9b      	ldrh	r3, [r3, #20]
 8010046:	461a      	mov	r2, r3
 8010048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801004a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d001      	beq.n	8010056 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8010052:	2301      	movs	r3, #1
 8010054:	e000      	b.n	8010058 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8010056:	2300      	movs	r3, #0
 8010058:	2b00      	cmp	r3, #0
 801005a:	d06a      	beq.n	8010132 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f00a fb1e 	bl	801a69e <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	3322      	adds	r3, #34	; 0x22
 8010066:	623b      	str	r3, [r7, #32]
 8010068:	2301      	movs	r3, #1
 801006a:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 801006c:	6a3b      	ldr	r3, [r7, #32]
 801006e:	8adb      	ldrh	r3, [r3, #22]
 8010070:	8bfa      	ldrh	r2, [r7, #30]
 8010072:	429a      	cmp	r2, r3
 8010074:	d305      	bcc.n	8010082 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8010076:	4b36      	ldr	r3, [pc, #216]	; (8010150 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8010078:	4a36      	ldr	r2, [pc, #216]	; (8010154 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 801007a:	21c5      	movs	r1, #197	; 0xc5
 801007c:	4833      	ldr	r0, [pc, #204]	; (801014c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801007e:	f017 fcbb 	bl	80279f8 <__assert_func>
            const uint16_t index = pos + offset;
 8010082:	6a3b      	ldr	r3, [r7, #32]
 8010084:	8a9a      	ldrh	r2, [r3, #20]
 8010086:	8bfb      	ldrh	r3, [r7, #30]
 8010088:	4413      	add	r3, r2
 801008a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 801008c:	8bbb      	ldrh	r3, [r7, #28]
 801008e:	2b09      	cmp	r3, #9
 8010090:	d801      	bhi.n	8010096 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8010092:	8bbb      	ldrh	r3, [r7, #28]
 8010094:	e001      	b.n	801009a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8010096:	8bbb      	ldrh	r3, [r7, #28]
 8010098:	3b0a      	subs	r3, #10
 801009a:	6a3a      	ldr	r2, [r7, #32]
 801009c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80100a0:	f640 123f 	movw	r2, #2367	; 0x93f
 80100a4:	4293      	cmp	r3, r2
 80100a6:	bf0c      	ite	eq
 80100a8:	2301      	moveq	r3, #1
 80100aa:	2300      	movne	r3, #0
 80100ac:	b2db      	uxtb	r3, r3
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d03f      	beq.n	8010132 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	3322      	adds	r3, #34	; 0x22
 80100b6:	687a      	ldr	r2, [r7, #4]
 80100b8:	3222      	adds	r2, #34	; 0x22
 80100ba:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80100bc:	68ba      	ldr	r2, [r7, #8]
 80100be:	8ad2      	ldrh	r2, [r2, #22]
 80100c0:	2a00      	cmp	r2, #0
 80100c2:	d105      	bne.n	80100d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80100c4:	4b1f      	ldr	r3, [pc, #124]	; (8010144 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80100c6:	4a20      	ldr	r2, [pc, #128]	; (8010148 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80100c8:	21c0      	movs	r1, #192	; 0xc0
 80100ca:	4820      	ldr	r0, [pc, #128]	; (801014c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80100cc:	f017 fc94 	bl	80279f8 <__assert_func>
            return buffer[pos];
 80100d0:	68ba      	ldr	r2, [r7, #8]
 80100d2:	8a92      	ldrh	r2, [r2, #20]
 80100d4:	4611      	mov	r1, r2
 80100d6:	68ba      	ldr	r2, [r7, #8]
 80100d8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80100dc:	613b      	str	r3, [r7, #16]
 80100de:	4613      	mov	r3, r2
 80100e0:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80100e2:	693b      	ldr	r3, [r7, #16]
 80100e4:	8adb      	ldrh	r3, [r3, #22]
 80100e6:	2b01      	cmp	r3, #1
 80100e8:	d806      	bhi.n	80100f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80100ea:	4b1b      	ldr	r3, [pc, #108]	; (8010158 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80100ec:	4a1b      	ldr	r2, [pc, #108]	; (801015c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 80100ee:	f240 110d 	movw	r1, #269	; 0x10d
 80100f2:	4816      	ldr	r0, [pc, #88]	; (801014c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80100f4:	f017 fc80 	bl	80279f8 <__assert_func>
            const uint16_t index = pos + 1;
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	8a9b      	ldrh	r3, [r3, #20]
 80100fc:	3301      	adds	r3, #1
 80100fe:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8010100:	89bb      	ldrh	r3, [r7, #12]
 8010102:	2b09      	cmp	r3, #9
 8010104:	d801      	bhi.n	801010a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8010106:	89bb      	ldrh	r3, [r7, #12]
 8010108:	e000      	b.n	801010c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 801010a:	2300      	movs	r3, #0
 801010c:	693a      	ldr	r2, [r7, #16]
 801010e:	89f9      	ldrh	r1, [r7, #14]
 8010110:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8010114:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	3322      	adds	r3, #34	; 0x22
 801011a:	61bb      	str	r3, [r7, #24]
 801011c:	f640 133f 	movw	r3, #2367	; 0x93f
 8010120:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8010122:	69bb      	ldr	r3, [r7, #24]
 8010124:	8a9b      	ldrh	r3, [r3, #20]
 8010126:	4619      	mov	r1, r3
 8010128:	69bb      	ldr	r3, [r7, #24]
 801012a:	8afa      	ldrh	r2, [r7, #22]
 801012c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8010130:	bf00      	nop
        }
    }
    return getNextChar();
 8010132:	6878      	ldr	r0, [r7, #4]
 8010134:	f00a f9b6 	bl	801a4a4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010138:	4603      	mov	r3, r0
}
 801013a:	4618      	mov	r0, r3
 801013c:	3728      	adds	r7, #40	; 0x28
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
 8010142:	bf00      	nop
 8010144:	0802c848 	.word	0x0802c848
 8010148:	0802c854 	.word	0x0802c854
 801014c:	0802c900 	.word	0x0802c900
 8010150:	0802c948 	.word	0x0802c948
 8010154:	0802c958 	.word	0x0802c958
 8010158:	0802ca2c 	.word	0x0802ca2c
 801015c:	0802ca38 	.word	0x0802ca38

08010160 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b082      	sub	sp, #8
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8010168:	6878      	ldr	r0, [r7, #4]
 801016a:	f00a f962 	bl	801a432 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 801016e:	bf00      	nop
 8010170:	3708      	adds	r7, #8
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}

08010176 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8010176:	b580      	push	{r7, lr}
 8010178:	b088      	sub	sp, #32
 801017a:	af02      	add	r7, sp, #8
 801017c:	60f8      	str	r0, [r7, #12]
 801017e:	1d38      	adds	r0, r7, #4
 8010180:	e880 0006 	stmia.w	r0, {r1, r2}
 8010184:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8010186:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801018a:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 801018c:	1d39      	adds	r1, r7, #4
 801018e:	697b      	ldr	r3, [r7, #20]
 8010190:	9301      	str	r3, [sp, #4]
 8010192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010194:	9300      	str	r3, [sp, #0]
 8010196:	6a3b      	ldr	r3, [r7, #32]
 8010198:	683a      	ldr	r2, [r7, #0]
 801019a:	68f8      	ldr	r0, [r7, #12]
 801019c:	f007 fb81 	bl	80178a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80101a0:	bf00      	nop
 80101a2:	3718      	adds	r7, #24
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}

080101a8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80101a8:	b590      	push	{r4, r7, lr}
 80101aa:	b085      	sub	sp, #20
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	4603      	mov	r3, r0
 80101b0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80101b2:	2300      	movs	r3, #0
 80101b4:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80101b6:	88fb      	ldrh	r3, [r7, #6]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d127      	bne.n	801020c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80101bc:	88fb      	ldrh	r3, [r7, #6]
 80101be:	4a1e      	ldr	r2, [pc, #120]	; (8010238 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80101c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d016      	beq.n	80101f6 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80101c8:	88fb      	ldrh	r3, [r7, #6]
 80101ca:	4a1b      	ldr	r2, [pc, #108]	; (8010238 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80101cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101d0:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80101d2:	68bb      	ldr	r3, [r7, #8]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	68ba      	ldr	r2, [r7, #8]
 80101d8:	4413      	add	r3, r2
 80101da:	4a18      	ldr	r2, [pc, #96]	; (801023c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80101dc:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	685b      	ldr	r3, [r3, #4]
 80101e2:	68ba      	ldr	r2, [r7, #8]
 80101e4:	4413      	add	r3, r2
 80101e6:	4a16      	ldr	r2, [pc, #88]	; (8010240 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80101e8:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80101ea:	68bb      	ldr	r3, [r7, #8]
 80101ec:	689b      	ldr	r3, [r3, #8]
 80101ee:	68ba      	ldr	r2, [r7, #8]
 80101f0:	4413      	add	r3, r2
 80101f2:	60fb      	str	r3, [r7, #12]
 80101f4:	e00a      	b.n	801020c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80101f6:	4b11      	ldr	r3, [pc, #68]	; (801023c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80101f8:	4a12      	ldr	r2, [pc, #72]	; (8010244 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80101fa:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80101fc:	4a12      	ldr	r2, [pc, #72]	; (8010248 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80101fe:	4b10      	ldr	r3, [pc, #64]	; (8010240 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8010200:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8010202:	88fb      	ldrh	r3, [r7, #6]
 8010204:	4a11      	ldr	r2, [pc, #68]	; (801024c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8010206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801020a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d00d      	beq.n	801022e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8010212:	4a0f      	ldr	r2, [pc, #60]	; (8010250 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8010214:	88fb      	ldrh	r3, [r7, #6]
 8010216:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8010218:	f000 f83e 	bl	8010298 <_ZN17TypedTextDatabase8getFontsEv>
 801021c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 801021e:	f000 f833 	bl	8010288 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8010222:	4603      	mov	r3, r0
 8010224:	461a      	mov	r2, r3
 8010226:	4621      	mov	r1, r4
 8010228:	68f8      	ldr	r0, [r7, #12]
 801022a:	f7ff fea5 	bl	800ff78 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 801022e:	bf00      	nop
 8010230:	3714      	adds	r7, #20
 8010232:	46bd      	mov	sp, r7
 8010234:	bd90      	pop	{r4, r7, pc}
 8010236:	bf00      	nop
 8010238:	20009218 	.word	0x20009218
 801023c:	20009220 	.word	0x20009220
 8010240:	20009224 	.word	0x20009224
 8010244:	08030764 	.word	0x08030764
 8010248:	08030724 	.word	0x08030724
 801024c:	08030868 	.word	0x08030868
 8010250:	2000921c 	.word	0x2000921c

08010254 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8010254:	b480      	push	{r7}
 8010256:	b083      	sub	sp, #12
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
 801025c:	460b      	mov	r3, r1
 801025e:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8010260:	4b07      	ldr	r3, [pc, #28]	; (8010280 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8010262:	681a      	ldr	r2, [r3, #0]
 8010264:	4b07      	ldr	r3, [pc, #28]	; (8010284 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8010266:	6819      	ldr	r1, [r3, #0]
 8010268:	887b      	ldrh	r3, [r7, #2]
 801026a:	009b      	lsls	r3, r3, #2
 801026c:	440b      	add	r3, r1
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	005b      	lsls	r3, r3, #1
 8010272:	4413      	add	r3, r2
}
 8010274:	4618      	mov	r0, r3
 8010276:	370c      	adds	r7, #12
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr
 8010280:	20009220 	.word	0x20009220
 8010284:	20009224 	.word	0x20009224

08010288 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8010288:	b480      	push	{r7}
 801028a:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 801028c:	2310      	movs	r3, #16
}
 801028e:	4618      	mov	r0, r3
 8010290:	46bd      	mov	sp, r7
 8010292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010296:	4770      	bx	lr

08010298 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8010298:	b480      	push	{r7}
 801029a:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 801029c:	4b02      	ldr	r3, [pc, #8]	; (80102a8 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 801029e:	4618      	mov	r0, r3
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr
 80102a8:	20009228 	.word	0x20009228

080102ac <_Z41__static_initialization_and_destruction_0ii>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b082      	sub	sp, #8
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
 80102b4:	6039      	str	r1, [r7, #0]
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2b01      	cmp	r3, #1
 80102ba:	d118      	bne.n	80102ee <_Z41__static_initialization_and_destruction_0ii+0x42>
 80102bc:	683b      	ldr	r3, [r7, #0]
 80102be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102c2:	4293      	cmp	r3, r2
 80102c4:	d113      	bne.n	80102ee <_Z41__static_initialization_and_destruction_0ii+0x42>
    &(getFont_verdana_12_4bpp()),
 80102c6:	f7fc f825 	bl	800c314 <_Z23getFont_verdana_12_4bppv>
 80102ca:	4603      	mov	r3, r0
};
 80102cc:	4a0a      	ldr	r2, [pc, #40]	; (80102f8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80102ce:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_20_4bpp()),
 80102d0:	f7fc f876 	bl	800c3c0 <_Z23getFont_verdana_20_4bppv>
 80102d4:	4603      	mov	r3, r0
};
 80102d6:	4a08      	ldr	r2, [pc, #32]	; (80102f8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80102d8:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_40_4bpp()),
 80102da:	f7fc f8c7 	bl	800c46c <_Z23getFont_verdana_40_4bppv>
 80102de:	4603      	mov	r3, r0
};
 80102e0:	4a05      	ldr	r2, [pc, #20]	; (80102f8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80102e2:	6093      	str	r3, [r2, #8]
    &(getFont_verdana_10_4bpp())
 80102e4:	f7fb ffc0 	bl	800c268 <_Z23getFont_verdana_10_4bppv>
 80102e8:	4603      	mov	r3, r0
};
 80102ea:	4a03      	ldr	r2, [pc, #12]	; (80102f8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80102ec:	60d3      	str	r3, [r2, #12]
} // namespace TypedTextDatabase
 80102ee:	bf00      	nop
 80102f0:	3708      	adds	r7, #8
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}
 80102f6:	bf00      	nop
 80102f8:	20009228 	.word	0x20009228

080102fc <_GLOBAL__sub_I_touchgfx_fonts>:
 80102fc:	b580      	push	{r7, lr}
 80102fe:	af00      	add	r7, sp, #0
 8010300:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010304:	2001      	movs	r0, #1
 8010306:	f7ff ffd1 	bl	80102ac <_Z41__static_initialization_and_destruction_0ii>
 801030a:	bd80      	pop	{r7, pc}

0801030c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 801030c:	b580      	push	{r7, lr}
 801030e:	b082      	sub	sp, #8
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
 8010314:	4a05      	ldr	r2, [pc, #20]	; (801032c <_ZN19FrontendApplicationD1Ev+0x20>)
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	601a      	str	r2, [r3, #0]
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	4618      	mov	r0, r3
 801031e:	f7fc faf1 	bl	800c904 <_ZN23FrontendApplicationBaseD1Ev>
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	4618      	mov	r0, r3
 8010326:	3708      	adds	r7, #8
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}
 801032c:	0802dcb0 	.word	0x0802dcb0

08010330 <_ZN19FrontendApplicationD0Ev>:
 8010330:	b580      	push	{r7, lr}
 8010332:	b082      	sub	sp, #8
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
 8010338:	6878      	ldr	r0, [r7, #4]
 801033a:	f7ff ffe7 	bl	801030c <_ZN19FrontendApplicationD1Ev>
 801033e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f017 fb2a 	bl	802799c <_ZdlPvj>
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	4618      	mov	r0, r3
 801034c:	3708      	adds	r7, #8
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}

08010352 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8010352:	b580      	push	{r7, lr}
 8010354:	b082      	sub	sp, #8
 8010356:	af00      	add	r7, sp, #0
 8010358:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8010360:	4618      	mov	r0, r3
 8010362:	f000 fcb3 	bl	8010ccc <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	4618      	mov	r0, r3
 801036a:	f007 fe13 	bl	8017f94 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801036e:	bf00      	nop
 8010370:	3708      	adds	r7, #8
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
	...

08010378 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	60f8      	str	r0, [r7, #12]
 8010380:	60b9      	str	r1, [r7, #8]
 8010382:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	687a      	ldr	r2, [r7, #4]
 8010388:	68b9      	ldr	r1, [r7, #8]
 801038a:	4618      	mov	r0, r3
 801038c:	f7fc fb0a 	bl	800c9a4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8010390:	4a03      	ldr	r2, [pc, #12]	; (80103a0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	601a      	str	r2, [r3, #0]
{

}
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	4618      	mov	r0, r3
 801039a:	3710      	adds	r7, #16
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}
 80103a0:	0802dcb0 	.word	0x0802dcb0

080103a4 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80103a4:	b480      	push	{r7}
 80103a6:	b083      	sub	sp, #12
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
    {
    }
 80103ac:	bf00      	nop
 80103ae:	370c      	adds	r7, #12
 80103b0:	46bd      	mov	sp, r7
 80103b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b6:	4770      	bx	lr

080103b8 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80103b8:	b480      	push	{r7}
 80103ba:	b083      	sub	sp, #12
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
    {
    }
 80103c0:	bf00      	nop
 80103c2:	370c      	adds	r7, #12
 80103c4:	46bd      	mov	sp, r7
 80103c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ca:	4770      	bx	lr

080103cc <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 80103cc:	b480      	push	{r7}
 80103ce:	b083      	sub	sp, #12
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
    {
 80103d4:	4a04      	ldr	r2, [pc, #16]	; (80103e8 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	601a      	str	r2, [r3, #0]
    }
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	4618      	mov	r0, r3
 80103de:	370c      	adds	r7, #12
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr
 80103e8:	0802dd88 	.word	0x0802dd88

080103ec <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b082      	sub	sp, #8
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
    }
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	f7ff ffe9 	bl	80103cc <_ZN8touchgfx9PresenterD1Ev>
 80103fa:	2104      	movs	r1, #4
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f017 facd 	bl	802799c <_ZdlPvj>
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	4618      	mov	r0, r3
 8010406:	3708      	adds	r7, #8
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}

0801040c <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 801040c:	b480      	push	{r7}
 801040e:	b083      	sub	sp, #12
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
    {
 8010414:	4a04      	ldr	r2, [pc, #16]	; (8010428 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	601a      	str	r2, [r3, #0]
    }
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	4618      	mov	r0, r3
 801041e:	370c      	adds	r7, #12
 8010420:	46bd      	mov	sp, r7
 8010422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010426:	4770      	bx	lr
 8010428:	0802dd88 	.word	0x0802dd88

0801042c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 801042c:	b480      	push	{r7}
 801042e:	b083      	sub	sp, #12
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
 8010434:	4a06      	ldr	r2, [pc, #24]	; (8010450 <_ZN13ModelListenerC1Ev+0x24>)
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	601a      	str	r2, [r3, #0]
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2200      	movs	r2, #0
 801043e:	605a      	str	r2, [r3, #4]
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	4618      	mov	r0, r3
 8010444:	370c      	adds	r7, #12
 8010446:	46bd      	mov	sp, r7
 8010448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044c:	4770      	bx	lr
 801044e:	bf00      	nop
 8010450:	0802dd5c 	.word	0x0802dd5c

08010454 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8010454:	b480      	push	{r7}
 8010456:	b083      	sub	sp, #12
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
 801045c:	4a04      	ldr	r2, [pc, #16]	; (8010470 <_ZN13ModelListenerD1Ev+0x1c>)
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	601a      	str	r2, [r3, #0]
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	4618      	mov	r0, r3
 8010466:	370c      	adds	r7, #12
 8010468:	46bd      	mov	sp, r7
 801046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046e:	4770      	bx	lr
 8010470:	0802dd5c 	.word	0x0802dd5c

08010474 <_ZN13ModelListenerD0Ev>:
 8010474:	b580      	push	{r7, lr}
 8010476:	b082      	sub	sp, #8
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f7ff ffe9 	bl	8010454 <_ZN13ModelListenerD1Ev>
 8010482:	2108      	movs	r1, #8
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f017 fa89 	bl	802799c <_ZdlPvj>
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	4618      	mov	r0, r3
 801048e:	3708      	adds	r7, #8
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <_ZN13ModelListener11setNewValueEj>:

    virtual void setNewValue(unsigned int value) {}
 8010494:	b480      	push	{r7}
 8010496:	b083      	sub	sp, #12
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	6039      	str	r1, [r7, #0]
 801049e:	bf00      	nop
 80104a0:	370c      	adds	r7, #12
 80104a2:	46bd      	mov	sp, r7
 80104a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a8:	4770      	bx	lr

080104aa <_ZN13ModelListener11setLatitudeEf>:
    virtual void setLatitude(float latitude) {}
 80104aa:	b480      	push	{r7}
 80104ac:	b083      	sub	sp, #12
 80104ae:	af00      	add	r7, sp, #0
 80104b0:	6078      	str	r0, [r7, #4]
 80104b2:	ed87 0a00 	vstr	s0, [r7]
 80104b6:	bf00      	nop
 80104b8:	370c      	adds	r7, #12
 80104ba:	46bd      	mov	sp, r7
 80104bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c0:	4770      	bx	lr

080104c2 <_ZN13ModelListener12setLongitudeEf>:
    virtual void setLongitude(float longitude) {}
 80104c2:	b480      	push	{r7}
 80104c4:	b083      	sub	sp, #12
 80104c6:	af00      	add	r7, sp, #0
 80104c8:	6078      	str	r0, [r7, #4]
 80104ca:	ed87 0a00 	vstr	s0, [r7]
 80104ce:	bf00      	nop
 80104d0:	370c      	adds	r7, #12
 80104d2:	46bd      	mov	sp, r7
 80104d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d8:	4770      	bx	lr

080104da <_ZN13ModelListener10setVoltageEt>:
    virtual void setVoltage(uint16_t voltage) {}
 80104da:	b480      	push	{r7}
 80104dc:	b083      	sub	sp, #12
 80104de:	af00      	add	r7, sp, #0
 80104e0:	6078      	str	r0, [r7, #4]
 80104e2:	460b      	mov	r3, r1
 80104e4:	807b      	strh	r3, [r7, #2]
 80104e6:	bf00      	nop
 80104e8:	370c      	adds	r7, #12
 80104ea:	46bd      	mov	sp, r7
 80104ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f0:	4770      	bx	lr

080104f2 <_ZN13ModelListener10setCurrentEt>:
    virtual void setCurrent(uint16_t current) {}
 80104f2:	b480      	push	{r7}
 80104f4:	b083      	sub	sp, #12
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	6078      	str	r0, [r7, #4]
 80104fa:	460b      	mov	r3, r1
 80104fc:	807b      	strh	r3, [r7, #2]
 80104fe:	bf00      	nop
 8010500:	370c      	adds	r7, #12
 8010502:	46bd      	mov	sp, r7
 8010504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010508:	4770      	bx	lr

0801050a <_ZN13ModelListener13setTerimaTextEPht>:
    virtual void setTerimaText(uint8_t *buffer, uint16_t length) {}
 801050a:	b480      	push	{r7}
 801050c:	b085      	sub	sp, #20
 801050e:	af00      	add	r7, sp, #0
 8010510:	60f8      	str	r0, [r7, #12]
 8010512:	60b9      	str	r1, [r7, #8]
 8010514:	4613      	mov	r3, r2
 8010516:	80fb      	strh	r3, [r7, #6]
 8010518:	bf00      	nop
 801051a:	3714      	adds	r7, #20
 801051c:	46bd      	mov	sp, r7
 801051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010522:	4770      	bx	lr

08010524 <_ZN13ModelListener12setKirimTextEh>:
    virtual void setKirimText(uint8_t keyNumber) {}
 8010524:	b480      	push	{r7}
 8010526:	b083      	sub	sp, #12
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	460b      	mov	r3, r1
 801052e:	70fb      	strb	r3, [r7, #3]
 8010530:	bf00      	nop
 8010532:	370c      	adds	r7, #12
 8010534:	46bd      	mov	sp, r7
 8010536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053a:	4770      	bx	lr

0801053c <_ZN19mainScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~mainScreenPresenter() {};
 801053c:	b580      	push	{r7, lr}
 801053e:	b082      	sub	sp, #8
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	4a09      	ldr	r2, [pc, #36]	; (801056c <_ZN19mainScreenPresenterD1Ev+0x30>)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	601a      	str	r2, [r3, #0]
 801054a:	4a09      	ldr	r2, [pc, #36]	; (8010570 <_ZN19mainScreenPresenterD1Ev+0x34>)
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	605a      	str	r2, [r3, #4]
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	3304      	adds	r3, #4
 8010554:	4618      	mov	r0, r3
 8010556:	f7ff ff7d 	bl	8010454 <_ZN13ModelListenerD1Ev>
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	4618      	mov	r0, r3
 801055e:	f7ff ff35 	bl	80103cc <_ZN8touchgfx9PresenterD1Ev>
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	4618      	mov	r0, r3
 8010566:	3708      	adds	r7, #8
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}
 801056c:	0802dcfc 	.word	0x0802dcfc
 8010570:	0802dd30 	.word	0x0802dd30

08010574 <_ZThn4_N19mainScreenPresenterD1Ev>:
 8010574:	f1a0 0004 	sub.w	r0, r0, #4
 8010578:	e7e0      	b.n	801053c <_ZN19mainScreenPresenterD1Ev>
 801057a:	bf00      	nop

0801057c <_ZN19mainScreenPresenterD0Ev>:
 801057c:	b580      	push	{r7, lr}
 801057e:	b082      	sub	sp, #8
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
 8010584:	6878      	ldr	r0, [r7, #4]
 8010586:	f7ff ffd9 	bl	801053c <_ZN19mainScreenPresenterD1Ev>
 801058a:	2110      	movs	r1, #16
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f017 fa05 	bl	802799c <_ZdlPvj>
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	4618      	mov	r0, r3
 8010596:	3708      	adds	r7, #8
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}

0801059c <_ZThn4_N19mainScreenPresenterD0Ev>:
 801059c:	f1a0 0004 	sub.w	r0, r0, #4
 80105a0:	e7ec      	b.n	801057c <_ZN19mainScreenPresenterD0Ev>
	...

080105a4 <_ZN19mainScreenPresenterC1ER14mainScreenView>:
#include <gui/mainscreen_screen/mainScreenView.hpp>
#include <gui/mainscreen_screen/mainScreenPresenter.hpp>

mainScreenPresenter::mainScreenPresenter(mainScreenView& v)
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b082      	sub	sp, #8
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
 80105ac:	6039      	str	r1, [r7, #0]
    : view(v)
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	4618      	mov	r0, r3
 80105b2:	f7ff ff2b 	bl	801040c <_ZN8touchgfx9PresenterC1Ev>
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	3304      	adds	r3, #4
 80105ba:	4618      	mov	r0, r3
 80105bc:	f7ff ff36 	bl	801042c <_ZN13ModelListenerC1Ev>
 80105c0:	4a06      	ldr	r2, [pc, #24]	; (80105dc <_ZN19mainScreenPresenterC1ER14mainScreenView+0x38>)
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	601a      	str	r2, [r3, #0]
 80105c6:	4a06      	ldr	r2, [pc, #24]	; (80105e0 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x3c>)
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	605a      	str	r2, [r3, #4]
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	683a      	ldr	r2, [r7, #0]
 80105d0:	60da      	str	r2, [r3, #12]
{

}
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	4618      	mov	r0, r3
 80105d6:	3708      	adds	r7, #8
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}
 80105dc:	0802dcfc 	.word	0x0802dcfc
 80105e0:	0802dd30 	.word	0x0802dd30

080105e4 <_ZN19mainScreenPresenter8activateEv>:

void mainScreenPresenter::activate()
{
 80105e4:	b480      	push	{r7}
 80105e6:	b083      	sub	sp, #12
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]

}
 80105ec:	bf00      	nop
 80105ee:	370c      	adds	r7, #12
 80105f0:	46bd      	mov	sp, r7
 80105f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f6:	4770      	bx	lr

080105f8 <_ZN19mainScreenPresenter10deactivateEv>:

void mainScreenPresenter::deactivate()
{
 80105f8:	b480      	push	{r7}
 80105fa:	b083      	sub	sp, #12
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]

}
 8010600:	bf00      	nop
 8010602:	370c      	adds	r7, #12
 8010604:	46bd      	mov	sp, r7
 8010606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060a:	4770      	bx	lr

0801060c <_ZN19mainScreenPresenter11setNewValueEj>:

void mainScreenPresenter::setNewValue(unsigned int value){
 801060c:	b580      	push	{r7, lr}
 801060e:	b082      	sub	sp, #8
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	6039      	str	r1, [r7, #0]
	view.updateVal(value);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	68db      	ldr	r3, [r3, #12]
 801061a:	6839      	ldr	r1, [r7, #0]
 801061c:	4618      	mov	r0, r3
 801061e:	f000 f8e9 	bl	80107f4 <_ZN14mainScreenView9updateValEj>
}
 8010622:	bf00      	nop
 8010624:	3708      	adds	r7, #8
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}

0801062a <_ZThn4_N19mainScreenPresenter11setNewValueEj>:

    void setNewValue(unsigned int value);
 801062a:	f1a0 0004 	sub.w	r0, r0, #4
 801062e:	f7ff bfed 	b.w	801060c <_ZN19mainScreenPresenter11setNewValueEj>

08010632 <_ZN19mainScreenPresenter11setLatitudeEf>:

void mainScreenPresenter::setLatitude(float latitude){
 8010632:	b580      	push	{r7, lr}
 8010634:	b082      	sub	sp, #8
 8010636:	af00      	add	r7, sp, #0
 8010638:	6078      	str	r0, [r7, #4]
 801063a:	ed87 0a00 	vstr	s0, [r7]
	view.updateLatitude(latitude);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	68db      	ldr	r3, [r3, #12]
 8010642:	ed97 0a00 	vldr	s0, [r7]
 8010646:	4618      	mov	r0, r3
 8010648:	f000 f8f4 	bl	8010834 <_ZN14mainScreenView14updateLatitudeEf>
}
 801064c:	bf00      	nop
 801064e:	3708      	adds	r7, #8
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}

08010654 <_ZThn4_N19mainScreenPresenter11setLatitudeEf>:

    void setLatitude(float latitude);
 8010654:	f1a0 0004 	sub.w	r0, r0, #4
 8010658:	f7ff bfeb 	b.w	8010632 <_ZN19mainScreenPresenter11setLatitudeEf>

0801065c <_ZN19mainScreenPresenter12setLongitudeEf>:

void mainScreenPresenter::setLongitude(float longitude){
 801065c:	b580      	push	{r7, lr}
 801065e:	b082      	sub	sp, #8
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
 8010664:	ed87 0a00 	vstr	s0, [r7]
	view.updateLongitude(longitude);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	68db      	ldr	r3, [r3, #12]
 801066c:	ed97 0a00 	vldr	s0, [r7]
 8010670:	4618      	mov	r0, r3
 8010672:	f000 f901 	bl	8010878 <_ZN14mainScreenView15updateLongitudeEf>
}
 8010676:	bf00      	nop
 8010678:	3708      	adds	r7, #8
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}

0801067e <_ZThn4_N19mainScreenPresenter12setLongitudeEf>:
    void setLongitude(float longitude);
 801067e:	f1a0 0004 	sub.w	r0, r0, #4
 8010682:	f7ff bfeb 	b.w	801065c <_ZN19mainScreenPresenter12setLongitudeEf>

08010686 <_ZN19mainScreenPresenter10setVoltageEt>:

void mainScreenPresenter::setVoltage(uint16_t voltage){
 8010686:	b580      	push	{r7, lr}
 8010688:	b082      	sub	sp, #8
 801068a:	af00      	add	r7, sp, #0
 801068c:	6078      	str	r0, [r7, #4]
 801068e:	460b      	mov	r3, r1
 8010690:	807b      	strh	r3, [r7, #2]
	view.updateVoltage(voltage);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	68db      	ldr	r3, [r3, #12]
 8010696:	887a      	ldrh	r2, [r7, #2]
 8010698:	4611      	mov	r1, r2
 801069a:	4618      	mov	r0, r3
 801069c:	f000 f92e 	bl	80108fc <_ZN14mainScreenView13updateVoltageEt>
}
 80106a0:	bf00      	nop
 80106a2:	3708      	adds	r7, #8
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}

080106a8 <_ZThn4_N19mainScreenPresenter10setVoltageEt>:
    void setVoltage(uint16_t voltage);
 80106a8:	f1a0 0004 	sub.w	r0, r0, #4
 80106ac:	f7ff bfeb 	b.w	8010686 <_ZN19mainScreenPresenter10setVoltageEt>

080106b0 <_ZN19mainScreenPresenter10setCurrentEt>:

void mainScreenPresenter::setCurrent(uint16_t current){
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b082      	sub	sp, #8
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	460b      	mov	r3, r1
 80106ba:	807b      	strh	r3, [r7, #2]
	view.updateCurrent(current);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	68db      	ldr	r3, [r3, #12]
 80106c0:	887a      	ldrh	r2, [r7, #2]
 80106c2:	4611      	mov	r1, r2
 80106c4:	4618      	mov	r0, r3
 80106c6:	f000 f8f9 	bl	80108bc <_ZN14mainScreenView13updateCurrentEt>
}
 80106ca:	bf00      	nop
 80106cc:	3708      	adds	r7, #8
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}

080106d2 <_ZThn4_N19mainScreenPresenter10setCurrentEt>:
    void setCurrent(uint16_t current);
 80106d2:	f1a0 0004 	sub.w	r0, r0, #4
 80106d6:	f7ff bfeb 	b.w	80106b0 <_ZN19mainScreenPresenter10setCurrentEt>

080106da <_ZN19mainScreenPresenter13setTerimaTextEPht>:

void mainScreenPresenter::setTerimaText(uint8_t* buffer, uint16_t length){
 80106da:	b580      	push	{r7, lr}
 80106dc:	b084      	sub	sp, #16
 80106de:	af00      	add	r7, sp, #0
 80106e0:	60f8      	str	r0, [r7, #12]
 80106e2:	60b9      	str	r1, [r7, #8]
 80106e4:	4613      	mov	r3, r2
 80106e6:	80fb      	strh	r3, [r7, #6]
	view.updateTerimaText(buffer, length);
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	68db      	ldr	r3, [r3, #12]
 80106ec:	88fa      	ldrh	r2, [r7, #6]
 80106ee:	68b9      	ldr	r1, [r7, #8]
 80106f0:	4618      	mov	r0, r3
 80106f2:	f000 f923 	bl	801093c <_ZN14mainScreenView16updateTerimaTextEPht>
}
 80106f6:	bf00      	nop
 80106f8:	3710      	adds	r7, #16
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bd80      	pop	{r7, pc}

080106fe <_ZThn4_N19mainScreenPresenter13setTerimaTextEPht>:
    void setTerimaText(uint8_t *buffer, uint16_t length);
 80106fe:	f1a0 0004 	sub.w	r0, r0, #4
 8010702:	f7ff bfea 	b.w	80106da <_ZN19mainScreenPresenter13setTerimaTextEPht>

08010706 <_ZN19mainScreenPresenter12setKirimTextEh>:

void mainScreenPresenter::setKirimText(uint8_t keyNumber){
 8010706:	b580      	push	{r7, lr}
 8010708:	b082      	sub	sp, #8
 801070a:	af00      	add	r7, sp, #0
 801070c:	6078      	str	r0, [r7, #4]
 801070e:	460b      	mov	r3, r1
 8010710:	70fb      	strb	r3, [r7, #3]
	view.updateKirimText(keyNumber);
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	68db      	ldr	r3, [r3, #12]
 8010716:	78fa      	ldrb	r2, [r7, #3]
 8010718:	4611      	mov	r1, r2
 801071a:	4618      	mov	r0, r3
 801071c:	f000 f96c 	bl	80109f8 <_ZN14mainScreenView15updateKirimTextEh>
}
 8010720:	bf00      	nop
 8010722:	3708      	adds	r7, #8
 8010724:	46bd      	mov	sp, r7
 8010726:	bd80      	pop	{r7, pc}

08010728 <_ZThn4_N19mainScreenPresenter12setKirimTextEh>:
    void setKirimText(uint8_t keyNumber);
 8010728:	f1a0 0004 	sub.w	r0, r0, #4
 801072c:	f7ff bfeb 	b.w	8010706 <_ZN19mainScreenPresenter12setKirimTextEh>

08010730 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     * @return pointer to the first element in the buffer where the formatted string is
     *         placed.
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 8010730:	b580      	push	{r7, lr}
 8010732:	b084      	sub	sp, #16
 8010734:	af00      	add	r7, sp, #0
 8010736:	60f8      	str	r0, [r7, #12]
 8010738:	460b      	mov	r3, r1
 801073a:	607a      	str	r2, [r7, #4]
 801073c:	ed87 0a00 	vstr	s0, [r7]
 8010740:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8010742:	463b      	mov	r3, r7
 8010744:	8979      	ldrh	r1, [r7, #10]
 8010746:	687a      	ldr	r2, [r7, #4]
 8010748:	68f8      	ldr	r0, [r7, #12]
 801074a:	f00a ff13 	bl	801b574 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 801074e:	4603      	mov	r3, r0
    }
 8010750:	4618      	mov	r0, r3
 8010752:	3710      	adds	r7, #16
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}

08010758 <_ZN14mainScreenViewD1Ev>:

class mainScreenView : public mainScreenViewBase
{
public:
    mainScreenView();
    virtual ~mainScreenView() {}
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	4a05      	ldr	r2, [pc, #20]	; (8010778 <_ZN14mainScreenViewD1Ev+0x20>)
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	601a      	str	r2, [r3, #0]
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	4618      	mov	r0, r3
 801076a:	f7fd fb15 	bl	800dd98 <_ZN18mainScreenViewBaseD1Ev>
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	4618      	mov	r0, r3
 8010772:	3708      	adds	r7, #8
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}
 8010778:	0802dda0 	.word	0x0802dda0

0801077c <_ZN14mainScreenViewD0Ev>:
 801077c:	b580      	push	{r7, lr}
 801077e:	b082      	sub	sp, #8
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f7ff ffe7 	bl	8010758 <_ZN14mainScreenViewD1Ev>
 801078a:	f241 71c4 	movw	r1, #6084	; 0x17c4
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f017 f904 	bl	802799c <_ZdlPvj>
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	4618      	mov	r0, r3
 8010798:	3708      	adds	r7, #8
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
	...

080107a0 <_ZN14mainScreenViewC1Ev>:
#include "cmsis_os.h"
#include <string.h>
#include "main.h"
extern osMessageQueueId_t transmitQHandle;

mainScreenView::mainScreenView()
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b082      	sub	sp, #8
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7fd fbb8 	bl	800df20 <_ZN18mainScreenViewBaseC1Ev>
 80107b0:	4a03      	ldr	r2, [pc, #12]	; (80107c0 <_ZN14mainScreenViewC1Ev+0x20>)
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	601a      	str	r2, [r3, #0]
{

}
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	4618      	mov	r0, r3
 80107ba:	3708      	adds	r7, #8
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}
 80107c0:	0802dda0 	.word	0x0802dda0

080107c4 <_ZN14mainScreenView11setupScreenEv>:

void mainScreenView::setupScreen()
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b082      	sub	sp, #8
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
    mainScreenViewBase::setupScreen();
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7ff f958 	bl	800fa84 <_ZN18mainScreenViewBase11setupScreenEv>
}
 80107d4:	bf00      	nop
 80107d6:	3708      	adds	r7, #8
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}

080107dc <_ZN14mainScreenView14tearDownScreenEv>:

void mainScreenView::tearDownScreen()
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b082      	sub	sp, #8
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
    mainScreenViewBase::tearDownScreen();
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	4618      	mov	r0, r3
 80107e8:	f7fc fe28 	bl	800d43c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80107ec:	bf00      	nop
 80107ee:	3708      	adds	r7, #8
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}

080107f4 <_ZN14mainScreenView9updateValEj>:

void mainScreenView::updateVal(unsigned int newValue){
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b082      	sub	sp, #8
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	6039      	str	r1, [r7, #0]
	Unicode::snprintf(kirimTextBuffer, KIRIMTEXT_SIZE, "%d", newValue);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f603 002c 	addw	r0, r3, #2092	; 0x82c
 8010804:	683b      	ldr	r3, [r7, #0]
 8010806:	4a0a      	ldr	r2, [pc, #40]	; (8010830 <_ZN14mainScreenView9updateValEj+0x3c>)
 8010808:	2141      	movs	r1, #65	; 0x41
 801080a:	f00a fcf7 	bl	801b1fc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	kirimText.resizeToCurrentText();
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8010814:	4618      	mov	r0, r3
 8010816:	f004 ffb5 	bl	8015784 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	kirimText.invalidate();
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8010820:	4618      	mov	r0, r3
 8010822:	f008 fcd2 	bl	80191ca <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8010826:	bf00      	nop
 8010828:	3708      	adds	r7, #8
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}
 801082e:	bf00      	nop
 8010830:	0802cbf0 	.word	0x0802cbf0

08010834 <_ZN14mainScreenView14updateLatitudeEf>:

void mainScreenView::updateLatitude(float latitude){
 8010834:	b580      	push	{r7, lr}
 8010836:	b082      	sub	sp, #8
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	ed87 0a00 	vstr	s0, [r7]
	Unicode::snprintfFloat(latitudeTextBuffer, LATITUDETEXT_SIZE, "%f", latitude);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8010846:	ed97 0a00 	vldr	s0, [r7]
 801084a:	4a0a      	ldr	r2, [pc, #40]	; (8010874 <_ZN14mainScreenView14updateLatitudeEf+0x40>)
 801084c:	2121      	movs	r1, #33	; 0x21
 801084e:	4618      	mov	r0, r3
 8010850:	f7ff ff6e 	bl	8010730 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	latitudeText.resizeToCurrentText();
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f203 7324 	addw	r3, r3, #1828	; 0x724
 801085a:	4618      	mov	r0, r3
 801085c:	f004 ff92 	bl	8015784 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	latitudeText.invalidate();
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8010866:	4618      	mov	r0, r3
 8010868:	f008 fcaf 	bl	80191ca <_ZNK8touchgfx8Drawable10invalidateEv>
}
 801086c:	bf00      	nop
 801086e:	3708      	adds	r7, #8
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}
 8010874:	0802cbf4 	.word	0x0802cbf4

08010878 <_ZN14mainScreenView15updateLongitudeEf>:

void mainScreenView::updateLongitude(float longitude){
 8010878:	b580      	push	{r7, lr}
 801087a:	b082      	sub	sp, #8
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	ed87 0a00 	vstr	s0, [r7]
	Unicode::snprintfFloat(longitudeTextBuffer, LONGITUDETEXT_SIZE, "%f", longitude);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f603 1372 	addw	r3, r3, #2418	; 0x972
 801088a:	ed97 0a00 	vldr	s0, [r7]
 801088e:	4a0a      	ldr	r2, [pc, #40]	; (80108b8 <_ZN14mainScreenView15updateLongitudeEf+0x40>)
 8010890:	2121      	movs	r1, #33	; 0x21
 8010892:	4618      	mov	r0, r3
 8010894:	f7ff ff4c 	bl	8010730 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	longitudeText.resizeToCurrentText();
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 801089e:	4618      	mov	r0, r3
 80108a0:	f004 ff70 	bl	8015784 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	longitudeText.invalidate();
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 80108aa:	4618      	mov	r0, r3
 80108ac:	f008 fc8d 	bl	80191ca <_ZNK8touchgfx8Drawable10invalidateEv>
}
 80108b0:	bf00      	nop
 80108b2:	3708      	adds	r7, #8
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bd80      	pop	{r7, pc}
 80108b8:	0802cbf4 	.word	0x0802cbf4

080108bc <_ZN14mainScreenView13updateCurrentEt>:

void mainScreenView::updateCurrent(uint16_t current){
 80108bc:	b580      	push	{r7, lr}
 80108be:	b082      	sub	sp, #8
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
 80108c4:	460b      	mov	r3, r1
 80108c6:	807b      	strh	r3, [r7, #2]
	Unicode::snprintf(currentTextBuffer, CURRENTTEXT_SIZE, "%d", current);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f603 0018 	addw	r0, r3, #2072	; 0x818
 80108ce:	887b      	ldrh	r3, [r7, #2]
 80108d0:	4a09      	ldr	r2, [pc, #36]	; (80108f8 <_ZN14mainScreenView13updateCurrentEt+0x3c>)
 80108d2:	210a      	movs	r1, #10
 80108d4:	f00a fc92 	bl	801b1fc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	currentText.resizeToCurrentText();
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 80108de:	4618      	mov	r0, r3
 80108e0:	f004 ff50 	bl	8015784 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	currentText.invalidate();
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 80108ea:	4618      	mov	r0, r3
 80108ec:	f008 fc6d 	bl	80191ca <_ZNK8touchgfx8Drawable10invalidateEv>
}
 80108f0:	bf00      	nop
 80108f2:	3708      	adds	r7, #8
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}
 80108f8:	0802cbf0 	.word	0x0802cbf0

080108fc <_ZN14mainScreenView13updateVoltageEt>:

void mainScreenView::updateVoltage(uint16_t voltage){
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b082      	sub	sp, #8
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
 8010904:	460b      	mov	r3, r1
 8010906:	807b      	strh	r3, [r7, #2]
	Unicode::snprintf(voltageTextBuffer, VOLTAGETEXT_SIZE, "%d", voltage);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	f603 0004 	addw	r0, r3, #2052	; 0x804
 801090e:	887b      	ldrh	r3, [r7, #2]
 8010910:	4a09      	ldr	r2, [pc, #36]	; (8010938 <_ZN14mainScreenView13updateVoltageEt+0x3c>)
 8010912:	210a      	movs	r1, #10
 8010914:	f00a fc72 	bl	801b1fc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	voltageText.resizeToCurrentText();
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 801091e:	4618      	mov	r0, r3
 8010920:	f004 ff30 	bl	8015784 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	voltageText.invalidate();
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 801092a:	4618      	mov	r0, r3
 801092c:	f008 fc4d 	bl	80191ca <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8010930:	bf00      	nop
 8010932:	3708      	adds	r7, #8
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}
 8010938:	0802cbf0 	.word	0x0802cbf0

0801093c <_ZN14mainScreenView16updateTerimaTextEPht>:

void mainScreenView::updateTerimaText(uint8_t *buffer, uint16_t length){
 801093c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010940:	b087      	sub	sp, #28
 8010942:	af00      	add	r7, sp, #0
 8010944:	60f8      	str	r0, [r7, #12]
 8010946:	60b9      	str	r1, [r7, #8]
 8010948:	4613      	mov	r3, r2
 801094a:	80fb      	strh	r3, [r7, #6]
	buffer[length] = 0;
	Unicode::UnicodeChar bufferUnicode[length];
	Unicode::fromUTF8(buffer, bufferUnicode, length);
	Unicode::snprintf(terimaTextBuffer, TERIMATEXT_SIZE, "%s", bufferUnicode);
	terimaText.resizeToCurrentText();
	terimaText.invalidate();
 801094c:	466b      	mov	r3, sp
 801094e:	461e      	mov	r6, r3
	buffer[length] = 0;
 8010950:	88fb      	ldrh	r3, [r7, #6]
 8010952:	68ba      	ldr	r2, [r7, #8]
 8010954:	4413      	add	r3, r2
 8010956:	2200      	movs	r2, #0
 8010958:	701a      	strb	r2, [r3, #0]
	Unicode::UnicodeChar bufferUnicode[length];
 801095a:	88fb      	ldrh	r3, [r7, #6]
 801095c:	1e59      	subs	r1, r3, #1
 801095e:	6179      	str	r1, [r7, #20]
 8010960:	460b      	mov	r3, r1
 8010962:	3301      	adds	r3, #1
 8010964:	2200      	movs	r2, #0
 8010966:	4698      	mov	r8, r3
 8010968:	4691      	mov	r9, r2
 801096a:	f04f 0200 	mov.w	r2, #0
 801096e:	f04f 0300 	mov.w	r3, #0
 8010972:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8010976:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 801097a:	ea4f 1208 	mov.w	r2, r8, lsl #4
 801097e:	460b      	mov	r3, r1
 8010980:	3301      	adds	r3, #1
 8010982:	2200      	movs	r2, #0
 8010984:	461c      	mov	r4, r3
 8010986:	4615      	mov	r5, r2
 8010988:	f04f 0200 	mov.w	r2, #0
 801098c:	f04f 0300 	mov.w	r3, #0
 8010990:	012b      	lsls	r3, r5, #4
 8010992:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8010996:	0122      	lsls	r2, r4, #4
 8010998:	460b      	mov	r3, r1
 801099a:	3301      	adds	r3, #1
 801099c:	005b      	lsls	r3, r3, #1
 801099e:	3307      	adds	r3, #7
 80109a0:	08db      	lsrs	r3, r3, #3
 80109a2:	00db      	lsls	r3, r3, #3
 80109a4:	ebad 0d03 	sub.w	sp, sp, r3
 80109a8:	466b      	mov	r3, sp
 80109aa:	3301      	adds	r3, #1
 80109ac:	085b      	lsrs	r3, r3, #1
 80109ae:	005b      	lsls	r3, r3, #1
 80109b0:	613b      	str	r3, [r7, #16]
	Unicode::fromUTF8(buffer, bufferUnicode, length);
 80109b2:	88fb      	ldrh	r3, [r7, #6]
 80109b4:	461a      	mov	r2, r3
 80109b6:	6939      	ldr	r1, [r7, #16]
 80109b8:	68b8      	ldr	r0, [r7, #8]
 80109ba:	f00a fde4 	bl	801b586 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt>
	Unicode::snprintf(terimaTextBuffer, TERIMATEXT_SIZE, "%s", bufferUnicode);
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	f603 00ae 	addw	r0, r3, #2222	; 0x8ae
 80109c4:	693b      	ldr	r3, [r7, #16]
 80109c6:	4a0b      	ldr	r2, [pc, #44]	; (80109f4 <_ZN14mainScreenView16updateTerimaTextEPht+0xb8>)
 80109c8:	2141      	movs	r1, #65	; 0x41
 80109ca:	f00a fc17 	bl	801b1fc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	terimaText.resizeToCurrentText();
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 80109d4:	4618      	mov	r0, r3
 80109d6:	f004 fed5 	bl	8015784 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	terimaText.invalidate();
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 80109e0:	4618      	mov	r0, r3
 80109e2:	f008 fbf2 	bl	80191ca <_ZNK8touchgfx8Drawable10invalidateEv>
 80109e6:	46b5      	mov	sp, r6
}
 80109e8:	bf00      	nop
 80109ea:	371c      	adds	r7, #28
 80109ec:	46bd      	mov	sp, r7
 80109ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109f2:	bf00      	nop
 80109f4:	0802cbf8 	.word	0x0802cbf8

080109f8 <_ZN14mainScreenView15updateKirimTextEh>:

void mainScreenView::updateKirimText(uint8_t keyNumber){
 80109f8:	b590      	push	{r4, r7, lr}
 80109fa:	b0a7      	sub	sp, #156	; 0x9c
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	460b      	mov	r3, r1
 8010a02:	70fb      	strb	r3, [r7, #3]
	Unicode::UnicodeChar temp[64];
	switch(keyNumber){
 8010a04:	78fb      	ldrb	r3, [r7, #3]
 8010a06:	2b09      	cmp	r3, #9
 8010a08:	dc3c      	bgt.n	8010a84 <_ZN14mainScreenView15updateKirimTextEh+0x8c>
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	da40      	bge.n	8010a90 <_ZN14mainScreenView15updateKirimTextEh+0x98>
 8010a0e:	e12d      	b.n	8010c6c <_ZN14mainScreenView15updateKirimTextEh+0x274>
 8010a10:	3b41      	subs	r3, #65	; 0x41
 8010a12:	2b18      	cmp	r3, #24
 8010a14:	f200 812a 	bhi.w	8010c6c <_ZN14mainScreenView15updateKirimTextEh+0x274>
 8010a18:	a201      	add	r2, pc, #4	; (adr r2, 8010a20 <_ZN14mainScreenView15updateKirimTextEh+0x28>)
 8010a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a1e:	bf00      	nop
 8010a20:	08010acb 	.word	0x08010acb
 8010a24:	08010b05 	.word	0x08010b05
 8010a28:	08010b3f 	.word	0x08010b3f
 8010a2c:	08010b79 	.word	0x08010b79
 8010a30:	08010c6d 	.word	0x08010c6d
 8010a34:	08010c6d 	.word	0x08010c6d
 8010a38:	08010c6d 	.word	0x08010c6d
 8010a3c:	08010c6d 	.word	0x08010c6d
 8010a40:	08010c6d 	.word	0x08010c6d
 8010a44:	08010c6d 	.word	0x08010c6d
 8010a48:	08010c6d 	.word	0x08010c6d
 8010a4c:	08010c6d 	.word	0x08010c6d
 8010a50:	08010c6d 	.word	0x08010c6d
 8010a54:	08010c6d 	.word	0x08010c6d
 8010a58:	08010c6d 	.word	0x08010c6d
 8010a5c:	08010c6d 	.word	0x08010c6d
 8010a60:	08010c6d 	.word	0x08010c6d
 8010a64:	08010c6d 	.word	0x08010c6d
 8010a68:	08010c6d 	.word	0x08010c6d
 8010a6c:	08010c6d 	.word	0x08010c6d
 8010a70:	08010c6d 	.word	0x08010c6d
 8010a74:	08010c6d 	.word	0x08010c6d
 8010a78:	08010c6d 	.word	0x08010c6d
 8010a7c:	08010bb3 	.word	0x08010bb3
 8010a80:	08010c1f 	.word	0x08010c1f
 8010a84:	2b59      	cmp	r3, #89	; 0x59
 8010a86:	f300 80f1 	bgt.w	8010c6c <_ZN14mainScreenView15updateKirimTextEh+0x274>
 8010a8a:	2b41      	cmp	r3, #65	; 0x41
 8010a8c:	dac0      	bge.n	8010a10 <_ZN14mainScreenView15updateKirimTextEh+0x18>
 8010a8e:	e0ed      	b.n	8010c6c <_ZN14mainScreenView15updateKirimTextEh+0x274>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		Unicode::snprintf(&kirimTextBuffer[Unicode::strlen(kirimTextBuffer)], KIRIMTEXT_SIZE - Unicode::strlen(kirimTextBuffer), "%d", keyNumber);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 8010a96:	4618      	mov	r0, r3
 8010a98:	f00a f83c 	bl	801ab14 <_ZN8touchgfx7Unicode6strlenEPKt>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8010aa2:	005b      	lsls	r3, r3, #1
 8010aa4:	687a      	ldr	r2, [r7, #4]
 8010aa6:	4413      	add	r3, r2
 8010aa8:	1d1c      	adds	r4, r3, #4
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f00a f82f 	bl	801ab14 <_ZN8touchgfx7Unicode6strlenEPKt>
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 8010abc:	b299      	uxth	r1, r3
 8010abe:	78fb      	ldrb	r3, [r7, #3]
 8010ac0:	4a72      	ldr	r2, [pc, #456]	; (8010c8c <_ZN14mainScreenView15updateKirimTextEh+0x294>)
 8010ac2:	4620      	mov	r0, r4
 8010ac4:	f00a fb9a 	bl	801b1fc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		break;
 8010ac8:	e0d0      	b.n	8010c6c <_ZN14mainScreenView15updateKirimTextEh+0x274>
	case 'A':
		Unicode::snprintf(&kirimTextBuffer[Unicode::strlen(kirimTextBuffer)], KIRIMTEXT_SIZE - Unicode::strlen(kirimTextBuffer), " Salmon");
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f00a f81f 	bl	801ab14 <_ZN8touchgfx7Unicode6strlenEPKt>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8010adc:	005b      	lsls	r3, r3, #1
 8010ade:	687a      	ldr	r2, [r7, #4]
 8010ae0:	4413      	add	r3, r2
 8010ae2:	1d1c      	adds	r4, r3, #4
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 8010aea:	4618      	mov	r0, r3
 8010aec:	f00a f812 	bl	801ab14 <_ZN8touchgfx7Unicode6strlenEPKt>
 8010af0:	4603      	mov	r3, r0
 8010af2:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 8010af6:	b29b      	uxth	r3, r3
 8010af8:	4a65      	ldr	r2, [pc, #404]	; (8010c90 <_ZN14mainScreenView15updateKirimTextEh+0x298>)
 8010afa:	4619      	mov	r1, r3
 8010afc:	4620      	mov	r0, r4
 8010afe:	f00a fb7d 	bl	801b1fc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		break;
 8010b02:	e0b3      	b.n	8010c6c <_ZN14mainScreenView15updateKirimTextEh+0x274>
	case 'B':
		Unicode::snprintf(&kirimTextBuffer[Unicode::strlen(kirimTextBuffer)], KIRIMTEXT_SIZE - Unicode::strlen(kirimTextBuffer), " Lele");
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f00a f802 	bl	801ab14 <_ZN8touchgfx7Unicode6strlenEPKt>
 8010b10:	4603      	mov	r3, r0
 8010b12:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8010b16:	005b      	lsls	r3, r3, #1
 8010b18:	687a      	ldr	r2, [r7, #4]
 8010b1a:	4413      	add	r3, r2
 8010b1c:	1d1c      	adds	r4, r3, #4
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 8010b24:	4618      	mov	r0, r3
 8010b26:	f009 fff5 	bl	801ab14 <_ZN8touchgfx7Unicode6strlenEPKt>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 8010b30:	b29b      	uxth	r3, r3
 8010b32:	4a58      	ldr	r2, [pc, #352]	; (8010c94 <_ZN14mainScreenView15updateKirimTextEh+0x29c>)
 8010b34:	4619      	mov	r1, r3
 8010b36:	4620      	mov	r0, r4
 8010b38:	f00a fb60 	bl	801b1fc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		break;
 8010b3c:	e096      	b.n	8010c6c <_ZN14mainScreenView15updateKirimTextEh+0x274>
	case 'C':
		Unicode::snprintf(&kirimTextBuffer[Unicode::strlen(kirimTextBuffer)], KIRIMTEXT_SIZE - Unicode::strlen(kirimTextBuffer), " Hiu");
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 8010b44:	4618      	mov	r0, r3
 8010b46:	f009 ffe5 	bl	801ab14 <_ZN8touchgfx7Unicode6strlenEPKt>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8010b50:	005b      	lsls	r3, r3, #1
 8010b52:	687a      	ldr	r2, [r7, #4]
 8010b54:	4413      	add	r3, r2
 8010b56:	1d1c      	adds	r4, r3, #4
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f009 ffd8 	bl	801ab14 <_ZN8touchgfx7Unicode6strlenEPKt>
 8010b64:	4603      	mov	r3, r0
 8010b66:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 8010b6a:	b29b      	uxth	r3, r3
 8010b6c:	4a4a      	ldr	r2, [pc, #296]	; (8010c98 <_ZN14mainScreenView15updateKirimTextEh+0x2a0>)
 8010b6e:	4619      	mov	r1, r3
 8010b70:	4620      	mov	r0, r4
 8010b72:	f00a fb43 	bl	801b1fc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		break;
 8010b76:	e079      	b.n	8010c6c <_ZN14mainScreenView15updateKirimTextEh+0x274>
	case 'D':
		Unicode::snprintf(&kirimTextBuffer[Unicode::strlen(kirimTextBuffer)], KIRIMTEXT_SIZE - Unicode::strlen(kirimTextBuffer), " Paus");
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f009 ffc8 	bl	801ab14 <_ZN8touchgfx7Unicode6strlenEPKt>
 8010b84:	4603      	mov	r3, r0
 8010b86:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8010b8a:	005b      	lsls	r3, r3, #1
 8010b8c:	687a      	ldr	r2, [r7, #4]
 8010b8e:	4413      	add	r3, r2
 8010b90:	1d1c      	adds	r4, r3, #4
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f009 ffbb 	bl	801ab14 <_ZN8touchgfx7Unicode6strlenEPKt>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 8010ba4:	b29b      	uxth	r3, r3
 8010ba6:	4a3d      	ldr	r2, [pc, #244]	; (8010c9c <_ZN14mainScreenView15updateKirimTextEh+0x2a4>)
 8010ba8:	4619      	mov	r1, r3
 8010baa:	4620      	mov	r0, r4
 8010bac:	f00a fb26 	bl	801b1fc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		break;
 8010bb0:	e05c      	b.n	8010c6c <_ZN14mainScreenView15updateKirimTextEh+0x274>
	case 'X':
		for(int i=0;i<63;i++) temp[i] = ' ';
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010bb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010bbc:	2b3e      	cmp	r3, #62	; 0x3e
 8010bbe:	dc0d      	bgt.n	8010bdc <_ZN14mainScreenView15updateKirimTextEh+0x1e4>
 8010bc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010bc4:	005b      	lsls	r3, r3, #1
 8010bc6:	3398      	adds	r3, #152	; 0x98
 8010bc8:	443b      	add	r3, r7
 8010bca:	2220      	movs	r2, #32
 8010bcc:	f823 2c84 	strh.w	r2, [r3, #-132]
 8010bd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010bd4:	3301      	adds	r3, #1
 8010bd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010bda:	e7ed      	b.n	8010bb8 <_ZN14mainScreenView15updateKirimTextEh+0x1c0>
		temp[63] = 0;
 8010bdc:	2300      	movs	r3, #0
 8010bde:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		Unicode::snprintf(kirimTextBuffer, KIRIMTEXT_SIZE, "%s", temp);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f603 002c 	addw	r0, r3, #2092	; 0x82c
 8010be8:	f107 0314 	add.w	r3, r7, #20
 8010bec:	4a2c      	ldr	r2, [pc, #176]	; (8010ca0 <_ZN14mainScreenView15updateKirimTextEh+0x2a8>)
 8010bee:	2141      	movs	r1, #65	; 0x41
 8010bf0:	f00a fb04 	bl	801b1fc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		kirimText.resizeToCurrentText();
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f004 fdc2 	bl	8015784 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
		kirimText.invalidate();
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8010c06:	4618      	mov	r0, r3
 8010c08:	f008 fadf 	bl	80191ca <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintf(kirimTextBuffer, KIRIMTEXT_SIZE, "");
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 8010c12:	4a24      	ldr	r2, [pc, #144]	; (8010ca4 <_ZN14mainScreenView15updateKirimTextEh+0x2ac>)
 8010c14:	2141      	movs	r1, #65	; 0x41
 8010c16:	4618      	mov	r0, r3
 8010c18:	f00a faf0 	bl	801b1fc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		break;
 8010c1c:	e026      	b.n	8010c6c <_ZN14mainScreenView15updateKirimTextEh+0x274>
	case 'Y':
		static uint8_t messageSend[128];
		memset(messageSend, 0, 128);
 8010c1e:	2280      	movs	r2, #128	; 0x80
 8010c20:	2100      	movs	r1, #0
 8010c22:	4821      	ldr	r0, [pc, #132]	; (8010ca8 <_ZN14mainScreenView15updateKirimTextEh+0x2b0>)
 8010c24:	f017 f86e 	bl	8027d04 <memset>
		String_t messageStringSend;
		Unicode::toUTF8(kirimTextBuffer, messageSend, Unicode::strlen(kirimTextBuffer));
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	f603 042c 	addw	r4, r3, #2092	; 0x82c
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 8010c34:	4618      	mov	r0, r3
 8010c36:	f009 ff6d 	bl	801ab14 <_ZN8touchgfx7Unicode6strlenEPKt>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	461a      	mov	r2, r3
 8010c3e:	491a      	ldr	r1, [pc, #104]	; (8010ca8 <_ZN14mainScreenView15updateKirimTextEh+0x2b0>)
 8010c40:	4620      	mov	r0, r4
 8010c42:	f00a fcdf 	bl	801b604 <_ZN8touchgfx7Unicode6toUTF8EPKtPht>
		messageStringSend.message = messageSend;
 8010c46:	4b18      	ldr	r3, [pc, #96]	; (8010ca8 <_ZN14mainScreenView15updateKirimTextEh+0x2b0>)
 8010c48:	60fb      	str	r3, [r7, #12]
		messageStringSend.length = strlen((char*)messageSend) + 1;
 8010c4a:	4817      	ldr	r0, [pc, #92]	; (8010ca8 <_ZN14mainScreenView15updateKirimTextEh+0x2b0>)
 8010c4c:	f7ef fac0 	bl	80001d0 <strlen>
 8010c50:	4603      	mov	r3, r0
 8010c52:	b29b      	uxth	r3, r3
 8010c54:	3301      	adds	r3, #1
 8010c56:	b29b      	uxth	r3, r3
 8010c58:	823b      	strh	r3, [r7, #16]
		osMessageQueuePut(transmitQHandle, &messageStringSend, 0U, 0U);
 8010c5a:	4b14      	ldr	r3, [pc, #80]	; (8010cac <_ZN14mainScreenView15updateKirimTextEh+0x2b4>)
 8010c5c:	6818      	ldr	r0, [r3, #0]
 8010c5e:	f107 010c 	add.w	r1, r7, #12
 8010c62:	2300      	movs	r3, #0
 8010c64:	2200      	movs	r2, #0
 8010c66:	f7f7 fd55 	bl	8008714 <osMessageQueuePut>
		break;
 8010c6a:	bf00      	nop
	}
	//Unicode::snprintf(kirimTextBuffer, KIRIMTEXT_SIZE, "%d", keyNumber);
	kirimText.resizeToCurrentText();
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8010c72:	4618      	mov	r0, r3
 8010c74:	f004 fd86 	bl	8015784 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	kirimText.invalidate();
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8010c7e:	4618      	mov	r0, r3
 8010c80:	f008 faa3 	bl	80191ca <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8010c84:	bf00      	nop
 8010c86:	379c      	adds	r7, #156	; 0x9c
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd90      	pop	{r4, r7, pc}
 8010c8c:	0802cbf0 	.word	0x0802cbf0
 8010c90:	0802cbfc 	.word	0x0802cbfc
 8010c94:	0802cc04 	.word	0x0802cc04
 8010c98:	0802cc0c 	.word	0x0802cc0c
 8010c9c:	0802cc14 	.word	0x0802cc14
 8010ca0:	0802cbf8 	.word	0x0802cbf8
 8010ca4:	0802cc1c 	.word	0x0802cc1c
 8010ca8:	20009238 	.word	0x20009238
 8010cac:	20000550 	.word	0x20000550

08010cb0 <_ZN5ModelC1Ev>:
uint8_t terimaBuffer[128];
uint8_t keypadNumber = 0;

String_t rxQueue;

Model::Model() : modelListener(0)
 8010cb0:	b480      	push	{r7}
 8010cb2:	b083      	sub	sp, #12
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2200      	movs	r2, #0
 8010cbc:	601a      	str	r2, [r3, #0]
{

}
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	370c      	adds	r7, #12
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cca:	4770      	bx	lr

08010ccc <_ZN5Model4tickEv>:

void Model::tick()
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b082      	sub	sp, #8
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
//	if(osMessageQueueGet(testQHandle, &counter, NULL, 0) == osOK){
//		modelListener->setNewValue(counter);
//	}

	if(osMessageQueueGet(keypadQHandle, &keypadNumber, NULL, 0) == osOK){
 8010cd4:	4b53      	ldr	r3, [pc, #332]	; (8010e24 <_ZN5Model4tickEv+0x158>)
 8010cd6:	6818      	ldr	r0, [r3, #0]
 8010cd8:	2300      	movs	r3, #0
 8010cda:	2200      	movs	r2, #0
 8010cdc:	4952      	ldr	r1, [pc, #328]	; (8010e28 <_ZN5Model4tickEv+0x15c>)
 8010cde:	f7f7 fd79 	bl	80087d4 <osMessageQueueGet>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	bf0c      	ite	eq
 8010ce8:	2301      	moveq	r3, #1
 8010cea:	2300      	movne	r3, #0
 8010cec:	b2db      	uxtb	r3, r3
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d00a      	beq.n	8010d08 <_ZN5Model4tickEv+0x3c>
		modelListener->setKirimText(keypadNumber);
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681a      	ldr	r2, [r3, #0]
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	3320      	adds	r3, #32
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	4949      	ldr	r1, [pc, #292]	; (8010e28 <_ZN5Model4tickEv+0x15c>)
 8010d02:	7809      	ldrb	r1, [r1, #0]
 8010d04:	4610      	mov	r0, r2
 8010d06:	4798      	blx	r3
	}

	if(osMessageQueueGet(latitudeQHandle, &lat, NULL, 0) == osOK){
 8010d08:	4b48      	ldr	r3, [pc, #288]	; (8010e2c <_ZN5Model4tickEv+0x160>)
 8010d0a:	6818      	ldr	r0, [r3, #0]
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	2200      	movs	r2, #0
 8010d10:	4947      	ldr	r1, [pc, #284]	; (8010e30 <_ZN5Model4tickEv+0x164>)
 8010d12:	f7f7 fd5f 	bl	80087d4 <osMessageQueueGet>
 8010d16:	4603      	mov	r3, r0
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	bf0c      	ite	eq
 8010d1c:	2301      	moveq	r3, #1
 8010d1e:	2300      	movne	r3, #0
 8010d20:	b2db      	uxtb	r3, r3
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d00d      	beq.n	8010d42 <_ZN5Model4tickEv+0x76>
		modelListener->setLatitude(lat);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681a      	ldr	r2, [r3, #0]
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	330c      	adds	r3, #12
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	493e      	ldr	r1, [pc, #248]	; (8010e30 <_ZN5Model4tickEv+0x164>)
 8010d36:	edd1 7a00 	vldr	s15, [r1]
 8010d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8010d3e:	4610      	mov	r0, r2
 8010d40:	4798      	blx	r3
	}

	if(osMessageQueueGet(longitudeQHandle, &lon, NULL, 0) == osOK){
 8010d42:	4b3c      	ldr	r3, [pc, #240]	; (8010e34 <_ZN5Model4tickEv+0x168>)
 8010d44:	6818      	ldr	r0, [r3, #0]
 8010d46:	2300      	movs	r3, #0
 8010d48:	2200      	movs	r2, #0
 8010d4a:	493b      	ldr	r1, [pc, #236]	; (8010e38 <_ZN5Model4tickEv+0x16c>)
 8010d4c:	f7f7 fd42 	bl	80087d4 <osMessageQueueGet>
 8010d50:	4603      	mov	r3, r0
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	bf0c      	ite	eq
 8010d56:	2301      	moveq	r3, #1
 8010d58:	2300      	movne	r3, #0
 8010d5a:	b2db      	uxtb	r3, r3
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d00d      	beq.n	8010d7c <_ZN5Model4tickEv+0xb0>
		modelListener->setLongitude(lon);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681a      	ldr	r2, [r3, #0]
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	3310      	adds	r3, #16
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	4932      	ldr	r1, [pc, #200]	; (8010e38 <_ZN5Model4tickEv+0x16c>)
 8010d70:	edd1 7a00 	vldr	s15, [r1]
 8010d74:	eeb0 0a67 	vmov.f32	s0, s15
 8010d78:	4610      	mov	r0, r2
 8010d7a:	4798      	blx	r3
	}

	if(osMessageQueueGet(voltageQHandle, &voltage, 0U, 0U) == osOK){
 8010d7c:	4b2f      	ldr	r3, [pc, #188]	; (8010e3c <_ZN5Model4tickEv+0x170>)
 8010d7e:	6818      	ldr	r0, [r3, #0]
 8010d80:	2300      	movs	r3, #0
 8010d82:	2200      	movs	r2, #0
 8010d84:	492e      	ldr	r1, [pc, #184]	; (8010e40 <_ZN5Model4tickEv+0x174>)
 8010d86:	f7f7 fd25 	bl	80087d4 <osMessageQueueGet>
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	bf0c      	ite	eq
 8010d90:	2301      	moveq	r3, #1
 8010d92:	2300      	movne	r3, #0
 8010d94:	b2db      	uxtb	r3, r3
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d00a      	beq.n	8010db0 <_ZN5Model4tickEv+0xe4>
		modelListener->setVoltage(voltage);
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	681a      	ldr	r2, [r3, #0]
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	3314      	adds	r3, #20
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	4925      	ldr	r1, [pc, #148]	; (8010e40 <_ZN5Model4tickEv+0x174>)
 8010daa:	8809      	ldrh	r1, [r1, #0]
 8010dac:	4610      	mov	r0, r2
 8010dae:	4798      	blx	r3
	}

	if(osMessageQueueGet(currentQHandle, &current, 0U, 0U) == osOK){
 8010db0:	4b24      	ldr	r3, [pc, #144]	; (8010e44 <_ZN5Model4tickEv+0x178>)
 8010db2:	6818      	ldr	r0, [r3, #0]
 8010db4:	2300      	movs	r3, #0
 8010db6:	2200      	movs	r2, #0
 8010db8:	4923      	ldr	r1, [pc, #140]	; (8010e48 <_ZN5Model4tickEv+0x17c>)
 8010dba:	f7f7 fd0b 	bl	80087d4 <osMessageQueueGet>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	bf0c      	ite	eq
 8010dc4:	2301      	moveq	r3, #1
 8010dc6:	2300      	movne	r3, #0
 8010dc8:	b2db      	uxtb	r3, r3
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d00a      	beq.n	8010de4 <_ZN5Model4tickEv+0x118>
		modelListener->setCurrent(current);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681a      	ldr	r2, [r3, #0]
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	3318      	adds	r3, #24
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	491a      	ldr	r1, [pc, #104]	; (8010e48 <_ZN5Model4tickEv+0x17c>)
 8010dde:	8809      	ldrh	r1, [r1, #0]
 8010de0:	4610      	mov	r0, r2
 8010de2:	4798      	blx	r3
	}

	if(osMessageQueueGet(receiveQHandle, &rxQueue, 0U, 0U) == osOK){
 8010de4:	4b19      	ldr	r3, [pc, #100]	; (8010e4c <_ZN5Model4tickEv+0x180>)
 8010de6:	6818      	ldr	r0, [r3, #0]
 8010de8:	2300      	movs	r3, #0
 8010dea:	2200      	movs	r2, #0
 8010dec:	4918      	ldr	r1, [pc, #96]	; (8010e50 <_ZN5Model4tickEv+0x184>)
 8010dee:	f7f7 fcf1 	bl	80087d4 <osMessageQueueGet>
 8010df2:	4603      	mov	r3, r0
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	bf0c      	ite	eq
 8010df8:	2301      	moveq	r3, #1
 8010dfa:	2300      	movne	r3, #0
 8010dfc:	b2db      	uxtb	r3, r3
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d00b      	beq.n	8010e1a <_ZN5Model4tickEv+0x14e>
		modelListener->setTerimaText(rxQueue.message, rxQueue.length);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	6818      	ldr	r0, [r3, #0]
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	331c      	adds	r3, #28
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	4a0f      	ldr	r2, [pc, #60]	; (8010e50 <_ZN5Model4tickEv+0x184>)
 8010e12:	6811      	ldr	r1, [r2, #0]
 8010e14:	4a0e      	ldr	r2, [pc, #56]	; (8010e50 <_ZN5Model4tickEv+0x184>)
 8010e16:	8892      	ldrh	r2, [r2, #4]
 8010e18:	4798      	blx	r3

//	if(i != 0){
//		terimaBuffer[i + 1] = 0;
//		modelListener->setTerimaText(terimaBuffer, i);
//	}
}
 8010e1a:	bf00      	nop
 8010e1c:	3708      	adds	r7, #8
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}
 8010e22:	bf00      	nop
 8010e24:	20000564 	.word	0x20000564
 8010e28:	200092c4 	.word	0x200092c4
 8010e2c:	20000558 	.word	0x20000558
 8010e30:	200092b8 	.word	0x200092b8
 8010e34:	2000055c 	.word	0x2000055c
 8010e38:	200092bc 	.word	0x200092bc
 8010e3c:	20000570 	.word	0x20000570
 8010e40:	200092c2 	.word	0x200092c2
 8010e44:	2000056c 	.word	0x2000056c
 8010e48:	200092c0 	.word	0x200092c0
 8010e4c:	20000554 	.word	0x20000554
 8010e50:	200092c8 	.word	0x200092c8

08010e54 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8010e54:	b480      	push	{r7}
 8010e56:	b083      	sub	sp, #12
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
    {
 8010e5c:	4a04      	ldr	r2, [pc, #16]	; (8010e70 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	601a      	str	r2, [r3, #0]
    }
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	4618      	mov	r0, r3
 8010e66:	370c      	adds	r7, #12
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6e:	4770      	bx	lr
 8010e70:	0802ddec 	.word	0x0802ddec

08010e74 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b082      	sub	sp, #8
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
    }
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f7ff ffe9 	bl	8010e54 <_ZN8touchgfx15TouchControllerD1Ev>
 8010e82:	2104      	movs	r1, #4
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f016 fd89 	bl	802799c <_ZdlPvj>
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	3708      	adds	r7, #8
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}

08010e94 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8010e94:	b480      	push	{r7}
 8010e96:	b083      	sub	sp, #12
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8010e9c:	bf00      	nop
 8010e9e:	370c      	adds	r7, #12
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea6:	4770      	bx	lr

08010ea8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8010ea8:	b480      	push	{r7}
 8010eaa:	b085      	sub	sp, #20
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	60f8      	str	r0, [r7, #12]
 8010eb0:	60b9      	str	r1, [r7, #8]
 8010eb2:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8010eb4:	2300      	movs	r3, #0
}
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	3714      	adds	r7, #20
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec0:	4770      	bx	lr
	...

08010ec4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
 8010ecc:	4a05      	ldr	r2, [pc, #20]	; (8010ee4 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	601a      	str	r2, [r3, #0]
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7ff ffbd 	bl	8010e54 <_ZN8touchgfx15TouchControllerD1Ev>
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	4618      	mov	r0, r3
 8010ede:	3708      	adds	r7, #8
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}
 8010ee4:	0802ddd4 	.word	0x0802ddd4

08010ee8 <_ZN20STM32TouchControllerD0Ev>:
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b082      	sub	sp, #8
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	6878      	ldr	r0, [r7, #4]
 8010ef2:	f7ff ffe7 	bl	8010ec4 <_ZN20STM32TouchControllerD1Ev>
 8010ef6:	2104      	movs	r1, #4
 8010ef8:	6878      	ldr	r0, [r7, #4]
 8010efa:	f016 fd4f 	bl	802799c <_ZdlPvj>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	4618      	mov	r0, r3
 8010f02:	3708      	adds	r7, #8
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}

08010f08 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8010f08:	b480      	push	{r7}
 8010f0a:	b083      	sub	sp, #12
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	4603      	mov	r3, r0
 8010f10:	71fb      	strb	r3, [r7, #7]

}
 8010f12:	bf00      	nop
 8010f14:	370c      	adds	r7, #12
 8010f16:	46bd      	mov	sp, r7
 8010f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1c:	4770      	bx	lr

08010f1e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8010f1e:	b480      	push	{r7}
 8010f20:	b083      	sub	sp, #12
 8010f22:	af00      	add	r7, sp, #0
 8010f24:	4603      	mov	r3, r0
 8010f26:	71fb      	strb	r3, [r7, #7]

}
 8010f28:	bf00      	nop
 8010f2a:	370c      	adds	r7, #12
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f32:	4770      	bx	lr

08010f34 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8010f34:	b480      	push	{r7}
 8010f36:	b083      	sub	sp, #12
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	71fb      	strb	r3, [r7, #7]

}
 8010f3e:	bf00      	nop
 8010f40:	370c      	adds	r7, #12
 8010f42:	46bd      	mov	sp, r7
 8010f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f48:	4770      	bx	lr
	...

08010f4c <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8010f4c:	b480      	push	{r7}
 8010f4e:	b083      	sub	sp, #12
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
    {
 8010f54:	4a04      	ldr	r2, [pc, #16]	; (8010f68 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	601a      	str	r2, [r3, #0]
    }
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	370c      	adds	r7, #12
 8010f60:	46bd      	mov	sp, r7
 8010f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f66:	4770      	bx	lr
 8010f68:	0802e668 	.word	0x0802e668

08010f6c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b082      	sub	sp, #8
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
    }
 8010f74:	6878      	ldr	r0, [r7, #4]
 8010f76:	f7ff ffe9 	bl	8010f4c <_ZN8touchgfx3HALD1Ev>
 8010f7a:	217c      	movs	r1, #124	; 0x7c
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f016 fd0d 	bl	802799c <_ZdlPvj>
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	4618      	mov	r0, r3
 8010f86:	3708      	adds	r7, #8
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bd80      	pop	{r7, pc}

08010f8c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8010f8c:	b480      	push	{r7}
 8010f8e:	b083      	sub	sp, #12
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	460b      	mov	r3, r1
 8010f96:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	78fa      	ldrb	r2, [r7, #3]
 8010f9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2201      	movs	r2, #1
 8010fa4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8010fa8:	bf00      	nop
 8010faa:	370c      	adds	r7, #12
 8010fac:	46bd      	mov	sp, r7
 8010fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb2:	4770      	bx	lr

08010fb4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b082      	sub	sp, #8
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
 8010fbc:	460b      	mov	r3, r1
 8010fbe:	807b      	strh	r3, [r7, #2]
 8010fc0:	4613      	mov	r3, r2
 8010fc2:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8010fc4:	4b0c      	ldr	r3, [pc, #48]	; (8010ff8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8010fc6:	881b      	ldrh	r3, [r3, #0]
 8010fc8:	887a      	ldrh	r2, [r7, #2]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d304      	bcc.n	8010fd8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8010fce:	4b0b      	ldr	r3, [pc, #44]	; (8010ffc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8010fd0:	881b      	ldrh	r3, [r3, #0]
 8010fd2:	883a      	ldrh	r2, [r7, #0]
 8010fd4:	429a      	cmp	r2, r3
 8010fd6:	d205      	bcs.n	8010fe4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8010fd8:	4b09      	ldr	r3, [pc, #36]	; (8011000 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8010fda:	4a0a      	ldr	r2, [pc, #40]	; (8011004 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8010fdc:	219e      	movs	r1, #158	; 0x9e
 8010fde:	480a      	ldr	r0, [pc, #40]	; (8011008 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8010fe0:	f016 fd0a 	bl	80279f8 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8010fe4:	4a09      	ldr	r2, [pc, #36]	; (801100c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8010fe6:	887b      	ldrh	r3, [r7, #2]
 8010fe8:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8010fea:	4a09      	ldr	r2, [pc, #36]	; (8011010 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8010fec:	883b      	ldrh	r3, [r7, #0]
 8010fee:	8013      	strh	r3, [r2, #0]
    }
 8010ff0:	bf00      	nop
 8010ff2:	3708      	adds	r7, #8
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}
 8010ff8:	2000c430 	.word	0x2000c430
 8010ffc:	2000c432 	.word	0x2000c432
 8011000:	0802cc20 	.word	0x0802cc20
 8011004:	0802cc84 	.word	0x0802cc84
 8011008:	0802ccc8 	.word	0x0802ccc8
 801100c:	2000c436 	.word	0x2000c436
 8011010:	2000c438 	.word	0x2000c438

08011014 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8011014:	b580      	push	{r7, lr}
 8011016:	b082      	sub	sp, #8
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
        if (useDMAAcceleration)
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8011022:	2b00      	cmp	r3, #0
 8011024:	d009      	beq.n	801103a <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
            return dma.getBlitCaps();
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	685a      	ldr	r2, [r3, #4]
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	685b      	ldr	r3, [r3, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	4610      	mov	r0, r2
 8011034:	4798      	blx	r3
 8011036:	4603      	mov	r3, r0
 8011038:	e000      	b.n	801103c <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        return static_cast<BlitOperations>(0);
 801103a:	2300      	movs	r3, #0
    }
 801103c:	4618      	mov	r0, r3
 801103e:	3708      	adds	r7, #8
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}

08011044 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8011044:	b580      	push	{r7, lr}
 8011046:	b082      	sub	sp, #8
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 801104c:	6878      	ldr	r0, [r7, #4]
 801104e:	f003 fa71 	bl	8014534 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	33ac      	adds	r3, #172	; 0xac
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	6878      	ldr	r0, [r7, #4]
 801105c:	4798      	blx	r3
    }
 801105e:	bf00      	nop
 8011060:	3708      	adds	r7, #8
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}

08011066 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 8011066:	b480      	push	{r7}
 8011068:	b083      	sub	sp, #12
 801106a:	af00      	add	r7, sp, #0
 801106c:	6078      	str	r0, [r7, #4]
 801106e:	6039      	str	r1, [r7, #0]
        return false;
 8011070:	2300      	movs	r3, #0
    }
 8011072:	4618      	mov	r0, r3
 8011074:	370c      	adds	r7, #12
 8011076:	46bd      	mov	sp, r7
 8011078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107c:	4770      	bx	lr
	...

08011080 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8011080:	b580      	push	{r7, lr}
 8011082:	b084      	sub	sp, #16
 8011084:	af00      	add	r7, sp, #0
 8011086:	60f8      	str	r0, [r7, #12]
 8011088:	60b9      	str	r1, [r7, #8]
 801108a:	607a      	str	r2, [r7, #4]
 801108c:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d106      	bne.n	80110a2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8011094:	4b0f      	ldr	r3, [pc, #60]	; (80110d4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8011096:	4a10      	ldr	r2, [pc, #64]	; (80110d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8011098:	f240 21d2 	movw	r1, #722	; 0x2d2
 801109c:	480f      	ldr	r0, [pc, #60]	; (80110dc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801109e:	f016 fcab 	bl	80279f8 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	68ba      	ldr	r2, [r7, #8]
 80110a6:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	687a      	ldr	r2, [r7, #4]
 80110ac:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	bf14      	ite	ne
 80110b4:	2301      	movne	r3, #1
 80110b6:	2300      	moveq	r3, #0
 80110b8:	b2da      	uxtb	r2, r3
 80110ba:	4b09      	ldr	r3, [pc, #36]	; (80110e0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80110bc:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	338c      	adds	r3, #140	; 0x8c
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	6839      	ldr	r1, [r7, #0]
 80110c8:	68f8      	ldr	r0, [r7, #12]
 80110ca:	4798      	blx	r3
    }
 80110cc:	bf00      	nop
 80110ce:	3710      	adds	r7, #16
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}
 80110d4:	0802cd0c 	.word	0x0802cd0c
 80110d8:	0802cd44 	.word	0x0802cd44
 80110dc:	0802ccc8 	.word	0x0802ccc8
 80110e0:	2000c43a 	.word	0x2000c43a

080110e4 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
    virtual void setAnimationStorage(void* animationStorage)
 80110e4:	b480      	push	{r7}
 80110e6:	b083      	sub	sp, #12
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	6039      	str	r1, [r7, #0]
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	683a      	ldr	r2, [r7, #0]
 80110f2:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	bf14      	ite	ne
 80110fa:	2301      	movne	r3, #1
 80110fc:	2300      	moveq	r3, #0
 80110fe:	b2da      	uxtb	r2, r3
 8011100:	4b03      	ldr	r3, [pc, #12]	; (8011110 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8011102:	701a      	strb	r2, [r3, #0]
    }
 8011104:	bf00      	nop
 8011106:	370c      	adds	r7, #12
 8011108:	46bd      	mov	sp, r7
 801110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110e:	4770      	bx	lr
 8011110:	2000c43b 	.word	0x2000c43b

08011114 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
    virtual FlashDataReader* getFlashDataReader() const
 8011114:	b480      	push	{r7}
 8011116:	b083      	sub	sp, #12
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
        return 0;
 801111c:	2300      	movs	r3, #0
    }
 801111e:	4618      	mov	r0, r3
 8011120:	370c      	adds	r7, #12
 8011122:	46bd      	mov	sp, r7
 8011124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011128:	4770      	bx	lr

0801112a <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 801112a:	b580      	push	{r7, lr}
 801112c:	b082      	sub	sp, #8
 801112e:	af00      	add	r7, sp, #0
 8011130:	6078      	str	r0, [r7, #4]
 8011132:	460b      	mov	r3, r1
 8011134:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801113a:	2b00      	cmp	r3, #0
 801113c:	d004      	beq.n	8011148 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011142:	887a      	ldrh	r2, [r7, #2]
 8011144:	4610      	mov	r0, r2
 8011146:	4798      	blx	r3
    }
 8011148:	bf00      	nop
 801114a:	3708      	adds	r7, #8
 801114c:	46bd      	mov	sp, r7
 801114e:	bd80      	pop	{r7, pc}

08011150 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
    virtual uint16_t getTFTCurrentLine()
 8011150:	b480      	push	{r7}
 8011152:	b083      	sub	sp, #12
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
        return 0xFFFFu;
 8011158:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 801115c:	4618      	mov	r0, r3
 801115e:	370c      	adds	r7, #12
 8011160:	46bd      	mov	sp, r7
 8011162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011166:	4770      	bx	lr

08011168 <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 8011168:	b580      	push	{r7, lr}
 801116a:	b082      	sub	sp, #8
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	685a      	ldr	r2, [r3, #4]
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	685b      	ldr	r3, [r3, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	3318      	adds	r3, #24
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	4610      	mov	r0, r2
 8011180:	4798      	blx	r3
 8011182:	4603      	mov	r3, r0
    }
 8011184:	4618      	mov	r0, r3
 8011186:	3708      	adds	r7, #8
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}

0801118c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 801118c:	b480      	push	{r7}
 801118e:	b085      	sub	sp, #20
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80111a0:	429a      	cmp	r2, r3
 80111a2:	d011      	beq.n	80111c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 80111a4:	4b14      	ldr	r3, [pc, #80]	; (80111f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80111a6:	781b      	ldrb	r3, [r3, #0]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d11e      	bne.n	80111ea <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80111ac:	4b13      	ldr	r3, [pc, #76]	; (80111fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80111ae:	881b      	ldrh	r3, [r3, #0]
 80111b0:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80111b2:	4b13      	ldr	r3, [pc, #76]	; (8011200 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80111b4:	881a      	ldrh	r2, [r3, #0]
 80111b6:	4b11      	ldr	r3, [pc, #68]	; (80111fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80111b8:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 80111ba:	4a11      	ldr	r2, [pc, #68]	; (8011200 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80111bc:	89bb      	ldrh	r3, [r7, #12]
 80111be:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80111c0:	4b0d      	ldr	r3, [pc, #52]	; (80111f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80111c2:	2201      	movs	r2, #1
 80111c4:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80111c6:	e010      	b.n	80111ea <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 80111c8:	4b0b      	ldr	r3, [pc, #44]	; (80111f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d00c      	beq.n	80111ea <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 80111d0:	4b0a      	ldr	r3, [pc, #40]	; (80111fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80111d2:	881b      	ldrh	r3, [r3, #0]
 80111d4:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80111d6:	4b0a      	ldr	r3, [pc, #40]	; (8011200 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80111d8:	881a      	ldrh	r2, [r3, #0]
 80111da:	4b08      	ldr	r3, [pc, #32]	; (80111fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80111dc:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 80111de:	4a08      	ldr	r2, [pc, #32]	; (8011200 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80111e0:	89fb      	ldrh	r3, [r7, #14]
 80111e2:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80111e4:	4b04      	ldr	r3, [pc, #16]	; (80111f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80111e6:	2200      	movs	r2, #0
 80111e8:	701a      	strb	r2, [r3, #0]
    }
 80111ea:	bf00      	nop
 80111ec:	3714      	adds	r7, #20
 80111ee:	46bd      	mov	sp, r7
 80111f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f4:	4770      	bx	lr
 80111f6:	bf00      	nop
 80111f8:	2000c434 	.word	0x2000c434
 80111fc:	2000c432 	.word	0x2000c432
 8011200:	2000c430 	.word	0x2000c430

08011204 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 8011204:	b480      	push	{r7}
 8011206:	b083      	sub	sp, #12
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
    {
    }
 801120c:	bf00      	nop
 801120e:	370c      	adds	r7, #12
 8011210:	46bd      	mov	sp, r7
 8011212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011216:	4770      	bx	lr

08011218 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 8011218:	b480      	push	{r7}
 801121a:	b083      	sub	sp, #12
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
    {
    }
 8011220:	bf00      	nop
 8011222:	370c      	adds	r7, #12
 8011224:	46bd      	mov	sp, r7
 8011226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122a:	4770      	bx	lr

0801122c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801122c:	b580      	push	{r7, lr}
 801122e:	b082      	sub	sp, #8
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	4618      	mov	r0, r3
 8011238:	f002 fbe2 	bl	8013a00 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 801123c:	bf00      	nop
 801123e:	3708      	adds	r7, #8
 8011240:	46bd      	mov	sp, r7
 8011242:	bd80      	pop	{r7, pc}

08011244 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8011244:	b580      	push	{r7, lr}
 8011246:	b082      	sub	sp, #8
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
 801124c:	4a05      	ldr	r2, [pc, #20]	; (8011264 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	601a      	str	r2, [r3, #0]
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	4618      	mov	r0, r3
 8011256:	f7ff fe79 	bl	8010f4c <_ZN8touchgfx3HALD1Ev>
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	4618      	mov	r0, r3
 801125e:	3708      	adds	r7, #8
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}
 8011264:	0802e050 	.word	0x0802e050

08011268 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8011268:	b580      	push	{r7, lr}
 801126a:	b082      	sub	sp, #8
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
 8011270:	6878      	ldr	r0, [r7, #4]
 8011272:	f7ff ffe7 	bl	8011244 <_ZN20TouchGFXGeneratedHALD1Ev>
 8011276:	217c      	movs	r1, #124	; 0x7c
 8011278:	6878      	ldr	r0, [r7, #4]
 801127a:	f016 fb8f 	bl	802799c <_ZdlPvj>
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	4618      	mov	r0, r3
 8011282:	3708      	adds	r7, #8
 8011284:	46bd      	mov	sp, r7
 8011286:	bd80      	pop	{r7, pc}

08011288 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8011288:	b580      	push	{r7, lr}
 801128a:	b082      	sub	sp, #8
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	4618      	mov	r0, r3
 8011294:	f7ff ffca 	bl	801122c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8011298:	bf00      	nop
 801129a:	3708      	adds	r7, #8
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}

080112a0 <_ZN11TouchGFXHAL10initializeEv>:
 */
//#error "A user must call touchgfx::startNewTransfer(); once touchgfxDisplayDriverTransmitBlock() has succesfully sent a block."
//#error "A user must implement C-methods touchgfxDisplayDriverTransmitActive() and touchgfxDisplayDriverTransmitBlock() used by the Partial Framebuffer Strategy."

void TouchGFXHAL::initialize()
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b082      	sub	sp, #8
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	4618      	mov	r0, r3
 80112ac:	f001 f8a6 	bl	80123fc <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80112b0:	bf00      	nop
 80112b2:	3708      	adds	r7, #8
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}

080112b8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b082      	sub	sp, #8
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	4618      	mov	r0, r3
 80112c4:	f001 f90a 	bl	80124dc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80112c8:	4603      	mov	r3, r0
}
 80112ca:	4618      	mov	r0, r3
 80112cc:	3708      	adds	r7, #8
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}

080112d2 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80112d2:	b580      	push	{r7, lr}
 80112d4:	b082      	sub	sp, #8
 80112d6:	af00      	add	r7, sp, #0
 80112d8:	6078      	str	r0, [r7, #4]
 80112da:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6839      	ldr	r1, [r7, #0]
 80112e0:	4618      	mov	r0, r3
 80112e2:	f001 f906 	bl	80124f2 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80112e6:	bf00      	nop
 80112e8:	3708      	adds	r7, #8
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd80      	pop	{r7, pc}

080112ee <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80112ee:	b580      	push	{r7, lr}
 80112f0:	b082      	sub	sp, #8
 80112f2:	af00      	add	r7, sp, #0
 80112f4:	6078      	str	r0, [r7, #4]
 80112f6:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	6839      	ldr	r1, [r7, #0]
 80112fc:	4618      	mov	r0, r3
 80112fe:	f001 f903 	bl	8012508 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8011302:	bf00      	nop
 8011304:	3708      	adds	r7, #8
 8011306:	46bd      	mov	sp, r7
 8011308:	bd80      	pop	{r7, pc}

0801130a <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 801130a:	b580      	push	{r7, lr}
 801130c:	b084      	sub	sp, #16
 801130e:	af00      	add	r7, sp, #0
 8011310:	60f8      	str	r0, [r7, #12]
 8011312:	60b9      	str	r1, [r7, #8]
 8011314:	607a      	str	r2, [r7, #4]
 8011316:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8011318:	68f8      	ldr	r0, [r7, #12]
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	687a      	ldr	r2, [r7, #4]
 801131e:	68b9      	ldr	r1, [r7, #8]
 8011320:	f001 f935 	bl	801258e <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8011324:	4603      	mov	r3, r0
}
 8011326:	4618      	mov	r0, r3
 8011328:	3710      	adds	r7, #16
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}

0801132e <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 801132e:	b580      	push	{r7, lr}
 8011330:	b082      	sub	sp, #8
 8011332:	af00      	add	r7, sp, #0
 8011334:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	4618      	mov	r0, r3
 801133a:	f001 f883 	bl	8012444 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 801133e:	bf00      	nop
 8011340:	3708      	adds	r7, #8
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}

08011346 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8011346:	b580      	push	{r7, lr}
 8011348:	b082      	sub	sp, #8
 801134a:	af00      	add	r7, sp, #0
 801134c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	4618      	mov	r0, r3
 8011352:	f001 f881 	bl	8012458 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8011356:	bf00      	nop
 8011358:	3708      	adds	r7, #8
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}

0801135e <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 801135e:	b580      	push	{r7, lr}
 8011360:	b082      	sub	sp, #8
 8011362:	af00      	add	r7, sp, #0
 8011364:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	4618      	mov	r0, r3
 801136a:	f001 f87f 	bl	801246c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 801136e:	bf00      	nop
 8011370:	3708      	adds	r7, #8
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}

08011376 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8011376:	b580      	push	{r7, lr}
 8011378:	b082      	sub	sp, #8
 801137a:	af00      	add	r7, sp, #0
 801137c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	4618      	mov	r0, r3
 8011382:	f001 f87d 	bl	8012480 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8011386:	bf00      	nop
 8011388:	3708      	adds	r7, #8
 801138a:	46bd      	mov	sp, r7
 801138c:	bd80      	pop	{r7, pc}
	...

08011390 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8011390:	b580      	push	{r7, lr}
 8011392:	b082      	sub	sp, #8
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
 8011398:	4a05      	ldr	r2, [pc, #20]	; (80113b0 <_ZN11TouchGFXHALD1Ev+0x20>)
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	601a      	str	r2, [r3, #0]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	4618      	mov	r0, r3
 80113a2:	f7ff ff4f 	bl	8011244 <_ZN20TouchGFXGeneratedHALD1Ev>
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	4618      	mov	r0, r3
 80113aa:	3708      	adds	r7, #8
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}
 80113b0:	0802de04 	.word	0x0802de04

080113b4 <_ZN11TouchGFXHALD0Ev>:
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b082      	sub	sp, #8
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
 80113bc:	6878      	ldr	r0, [r7, #4]
 80113be:	f7ff ffe7 	bl	8011390 <_ZN11TouchGFXHALD1Ev>
 80113c2:	217c      	movs	r1, #124	; 0x7c
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	f016 fae9 	bl	802799c <_ZdlPvj>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	4618      	mov	r0, r3
 80113ce:	3708      	adds	r7, #8
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bd80      	pop	{r7, pc}

080113d4 <touchgfxDisplayDriverTransmitActive>:
extern void DisplayDriver_TransferCompleteCallback();

static uint8_t isTransmittingData = 0;

uint32_t touchgfxDisplayDriverTransmitActive(void)
{
 80113d4:	b480      	push	{r7}
 80113d6:	af00      	add	r7, sp, #0
	return isTransmittingData;
 80113d8:	4b03      	ldr	r3, [pc, #12]	; (80113e8 <touchgfxDisplayDriverTransmitActive+0x14>)
 80113da:	781b      	ldrb	r3, [r3, #0]
}
 80113dc:	4618      	mov	r0, r3
 80113de:	46bd      	mov	sp, r7
 80113e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e4:	4770      	bx	lr
 80113e6:	bf00      	nop
 80113e8:	200092d0 	.word	0x200092d0

080113ec <touchgfxDisplayDriverTransmitBlock>:

void touchgfxDisplayDriverTransmitBlock(uint8_t* pixels, uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
 80113ec:	b590      	push	{r4, r7, lr}
 80113ee:	b085      	sub	sp, #20
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	60f8      	str	r0, [r7, #12]
 80113f4:	4608      	mov	r0, r1
 80113f6:	4611      	mov	r1, r2
 80113f8:	461a      	mov	r2, r3
 80113fa:	4603      	mov	r3, r0
 80113fc:	817b      	strh	r3, [r7, #10]
 80113fe:	460b      	mov	r3, r1
 8011400:	813b      	strh	r3, [r7, #8]
 8011402:	4613      	mov	r3, r2
 8011404:	80fb      	strh	r3, [r7, #6]
	isTransmittingData = 1;
 8011406:	4b0f      	ldr	r3, [pc, #60]	; (8011444 <touchgfxDisplayDriverTransmitBlock+0x58>)
 8011408:	2201      	movs	r2, #1
 801140a:	701a      	strb	r2, [r3, #0]
	ILI9341_SetWindow(x, y, x+w-1, y+h-1);
 801140c:	897a      	ldrh	r2, [r7, #10]
 801140e:	88fb      	ldrh	r3, [r7, #6]
 8011410:	4413      	add	r3, r2
 8011412:	b29b      	uxth	r3, r3
 8011414:	3b01      	subs	r3, #1
 8011416:	b29c      	uxth	r4, r3
 8011418:	893a      	ldrh	r2, [r7, #8]
 801141a:	8c3b      	ldrh	r3, [r7, #32]
 801141c:	4413      	add	r3, r2
 801141e:	b29b      	uxth	r3, r3
 8011420:	3b01      	subs	r3, #1
 8011422:	b29b      	uxth	r3, r3
 8011424:	8939      	ldrh	r1, [r7, #8]
 8011426:	8978      	ldrh	r0, [r7, #10]
 8011428:	4622      	mov	r2, r4
 801142a:	f7f0 f81e 	bl	800146a <ILI9341_SetWindow>
	ILI9341_DrawBitmap(w, h, pixels);
 801142e:	8c39      	ldrh	r1, [r7, #32]
 8011430:	88fb      	ldrh	r3, [r7, #6]
 8011432:	68fa      	ldr	r2, [r7, #12]
 8011434:	4618      	mov	r0, r3
 8011436:	f7f0 f883 	bl	8001540 <ILI9341_DrawBitmap>
}
 801143a:	bf00      	nop
 801143c:	3714      	adds	r7, #20
 801143e:	46bd      	mov	sp, r7
 8011440:	bd90      	pop	{r4, r7, pc}
 8011442:	bf00      	nop
 8011444:	200092d0 	.word	0x200092d0

08011448 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b082      	sub	sp, #8
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	4a06      	ldr	r2, [pc, #24]	; (8011470 <HAL_SPI_TxCpltCallback+0x28>)
 8011456:	4293      	cmp	r3, r2
 8011458:	d106      	bne.n	8011468 <HAL_SPI_TxCpltCallback+0x20>
		ILI9341_EndOfDrawBitmap();
 801145a:	f7f0 f899 	bl	8001590 <ILI9341_EndOfDrawBitmap>
		isTransmittingData = 0;
 801145e:	4b05      	ldr	r3, [pc, #20]	; (8011474 <HAL_SPI_TxCpltCallback+0x2c>)
 8011460:	2200      	movs	r2, #0
 8011462:	701a      	strb	r2, [r3, #0]
		DisplayDriver_TransferCompleteCallback();
 8011464:	f001 f8ee 	bl	8012644 <DisplayDriver_TransferCompleteCallback>
	}
}
 8011468:	bf00      	nop
 801146a:	3708      	adds	r7, #8
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}
 8011470:	40013000 	.word	0x40013000
 8011474:	200092d0 	.word	0x200092d0

08011478 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8011478:	b580      	push	{r7, lr}
 801147a:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 801147c:	2200      	movs	r2, #0
 801147e:	2101      	movs	r1, #1
 8011480:	2001      	movs	r0, #1
 8011482:	f7f6 ffb3 	bl	80083ec <osSemaphoreNew>
 8011486:	4603      	mov	r3, r0
 8011488:	4a0f      	ldr	r2, [pc, #60]	; (80114c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 801148a:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 801148c:	4b0e      	ldr	r3, [pc, #56]	; (80114c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d105      	bne.n	80114a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8011494:	4b0d      	ldr	r3, [pc, #52]	; (80114cc <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8011496:	4a0e      	ldr	r2, [pc, #56]	; (80114d0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8011498:	2128      	movs	r1, #40	; 0x28
 801149a:	480e      	ldr	r0, [pc, #56]	; (80114d4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 801149c:	f016 faac 	bl	80279f8 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80114a0:	2200      	movs	r2, #0
 80114a2:	2104      	movs	r1, #4
 80114a4:	2001      	movs	r0, #1
 80114a6:	f7f7 f8c1 	bl	800862c <osMessageQueueNew>
 80114aa:	4603      	mov	r3, r0
 80114ac:	4a0a      	ldr	r2, [pc, #40]	; (80114d8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80114ae:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80114b0:	4b09      	ldr	r3, [pc, #36]	; (80114d8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d105      	bne.n	80114c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 80114b8:	4b08      	ldr	r3, [pc, #32]	; (80114dc <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80114ba:	4a05      	ldr	r2, [pc, #20]	; (80114d0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80114bc:	212c      	movs	r1, #44	; 0x2c
 80114be:	4805      	ldr	r0, [pc, #20]	; (80114d4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80114c0:	f016 fa9a 	bl	80279f8 <__assert_func>
}
 80114c4:	bf00      	nop
 80114c6:	bd80      	pop	{r7, pc}
 80114c8:	200092d4 	.word	0x200092d4
 80114cc:	0802cd94 	.word	0x0802cd94
 80114d0:	0802cde0 	.word	0x0802cde0
 80114d4:	0802ce10 	.word	0x0802ce10
 80114d8:	200092d8 	.word	0x200092d8
 80114dc:	0802ce3c 	.word	0x0802ce3c

080114e0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80114e4:	4b04      	ldr	r3, [pc, #16]	; (80114f8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	f04f 31ff 	mov.w	r1, #4294967295
 80114ec:	4618      	mov	r0, r3
 80114ee:	f7f7 f807 	bl	8008500 <osSemaphoreAcquire>
}
 80114f2:	bf00      	nop
 80114f4:	bd80      	pop	{r7, pc}
 80114f6:	bf00      	nop
 80114f8:	200092d4 	.word	0x200092d4

080114fc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8011500:	4b03      	ldr	r3, [pc, #12]	; (8011510 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	4618      	mov	r0, r3
 8011506:	f7f7 f84d 	bl	80085a4 <osSemaphoreRelease>
}
 801150a:	bf00      	nop
 801150c:	bd80      	pop	{r7, pc}
 801150e:	bf00      	nop
 8011510:	200092d4 	.word	0x200092d4

08011514 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8011514:	b580      	push	{r7, lr}
 8011516:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8011518:	4b03      	ldr	r3, [pc, #12]	; (8011528 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	2100      	movs	r1, #0
 801151e:	4618      	mov	r0, r3
 8011520:	f7f6 ffee 	bl	8008500 <osSemaphoreAcquire>
}
 8011524:	bf00      	nop
 8011526:	bd80      	pop	{r7, pc}
 8011528:	200092d4 	.word	0x200092d4

0801152c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 801152c:	b580      	push	{r7, lr}
 801152e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8011530:	4b03      	ldr	r3, [pc, #12]	; (8011540 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	4618      	mov	r0, r3
 8011536:	f7f7 f835 	bl	80085a4 <osSemaphoreRelease>
}
 801153a:	bf00      	nop
 801153c:	bd80      	pop	{r7, pc}
 801153e:	bf00      	nop
 8011540:	200092d4 	.word	0x200092d4

08011544 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8011544:	b580      	push	{r7, lr}
 8011546:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8011548:	4b04      	ldr	r3, [pc, #16]	; (801155c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 801154a:	6818      	ldr	r0, [r3, #0]
 801154c:	2300      	movs	r3, #0
 801154e:	2200      	movs	r2, #0
 8011550:	4903      	ldr	r1, [pc, #12]	; (8011560 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8011552:	f7f7 f8df 	bl	8008714 <osMessageQueuePut>
}
 8011556:	bf00      	nop
 8011558:	bd80      	pop	{r7, pc}
 801155a:	bf00      	nop
 801155c:	200092d8 	.word	0x200092d8
 8011560:	20000014 	.word	0x20000014

08011564 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b082      	sub	sp, #8
 8011568:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 801156a:	4b09      	ldr	r3, [pc, #36]	; (8011590 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 801156c:	6818      	ldr	r0, [r3, #0]
 801156e:	1d39      	adds	r1, r7, #4
 8011570:	2300      	movs	r3, #0
 8011572:	2200      	movs	r2, #0
 8011574:	f7f7 f92e 	bl	80087d4 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8011578:	4b05      	ldr	r3, [pc, #20]	; (8011590 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 801157a:	6818      	ldr	r0, [r3, #0]
 801157c:	1d39      	adds	r1, r7, #4
 801157e:	f04f 33ff 	mov.w	r3, #4294967295
 8011582:	2200      	movs	r2, #0
 8011584:	f7f7 f926 	bl	80087d4 <osMessageQueueGet>
}
 8011588:	bf00      	nop
 801158a:	3708      	adds	r7, #8
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}
 8011590:	200092d8 	.word	0x200092d8

08011594 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8011594:	b480      	push	{r7}
 8011596:	b083      	sub	sp, #12
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
    {
 801159c:	4a04      	ldr	r2, [pc, #16]	; (80115b0 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	601a      	str	r2, [r3, #0]
    }
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	4618      	mov	r0, r3
 80115a6:	370c      	adds	r7, #12
 80115a8:	46bd      	mov	sp, r7
 80115aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ae:	4770      	bx	lr
 80115b0:	0802df2c 	.word	0x0802df2c

080115b4 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b082      	sub	sp, #8
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
    }
 80115bc:	6878      	ldr	r0, [r7, #4]
 80115be:	f7ff ffe9 	bl	8011594 <_ZN8touchgfx9DMA_QueueD1Ev>
 80115c2:	2104      	movs	r1, #4
 80115c4:	6878      	ldr	r0, [r7, #4]
 80115c6:	f016 f9e9 	bl	802799c <_ZdlPvj>
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	4618      	mov	r0, r3
 80115ce:	3708      	adds	r7, #8
 80115d0:	46bd      	mov	sp, r7
 80115d2:	bd80      	pop	{r7, pc}

080115d4 <_ZN8touchgfx13DMA_Interface10initializeEv>:
    {
        waitForFrameBufferSemaphore();
    }

    /** Perform initialization. Does nothing in this base class. */
    virtual void initialize()
 80115d4:	b480      	push	{r7}
 80115d6:	b083      	sub	sp, #12
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
    {
    }
 80115dc:	bf00      	nop
 80115de:	370c      	adds	r7, #12
 80115e0:	46bd      	mov	sp, r7
 80115e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e6:	4770      	bx	lr

080115e8 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
 80115e8:	b480      	push	{r7}
 80115ea:	b083      	sub	sp, #12
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 80115f0:	2300      	movs	r3, #0
    }
 80115f2:	4618      	mov	r0, r3
 80115f4:	370c      	adds	r7, #12
 80115f6:	46bd      	mov	sp, r7
 80115f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fc:	4770      	bx	lr
	...

08011600 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8011600:	b480      	push	{r7}
 8011602:	b083      	sub	sp, #12
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
    {
 8011608:	4a04      	ldr	r2, [pc, #16]	; (801161c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	601a      	str	r2, [r3, #0]
    }
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	4618      	mov	r0, r3
 8011612:	370c      	adds	r7, #12
 8011614:	46bd      	mov	sp, r7
 8011616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161a:	4770      	bx	lr
 801161c:	0802e740 	.word	0x0802e740

08011620 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8011620:	b580      	push	{r7, lr}
 8011622:	b082      	sub	sp, #8
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
    }
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	f7ff ffe9 	bl	8011600 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801162e:	210c      	movs	r1, #12
 8011630:	6878      	ldr	r0, [r7, #4]
 8011632:	f016 f9b3 	bl	802799c <_ZdlPvj>
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	4618      	mov	r0, r3
 801163a:	3708      	adds	r7, #8
 801163c:	46bd      	mov	sp, r7
 801163e:	bd80      	pop	{r7, pc}

08011640 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8011640:	b480      	push	{r7}
 8011642:	b083      	sub	sp, #12
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
 8011648:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801164a:	4a09      	ldr	r2, [pc, #36]	; (8011670 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	601a      	str	r2, [r3, #0]
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	683a      	ldr	r2, [r7, #0]
 8011654:	605a      	str	r2, [r3, #4]
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	2200      	movs	r2, #0
 801165a:	721a      	strb	r2, [r3, #8]
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	2200      	movs	r2, #0
 8011660:	725a      	strb	r2, [r3, #9]
    {
    }
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	4618      	mov	r0, r3
 8011666:	370c      	adds	r7, #12
 8011668:	46bd      	mov	sp, r7
 801166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166e:	4770      	bx	lr
 8011670:	0802e740 	.word	0x0802e740

08011674 <_ZN8STM32DMA18signalDMAInterruptEv>:
    /**
     * @fn virtual void STM32DMA::signalDMAInterrupt();
     *
     * @brief Does nothing.
     */
    virtual void signalDMAInterrupt()
 8011674:	b480      	push	{r7}
 8011676:	b083      	sub	sp, #12
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
    {
    }
 801167c:	bf00      	nop
 801167e:	370c      	adds	r7, #12
 8011680:	46bd      	mov	sp, r7
 8011682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011686:	4770      	bx	lr

08011688 <_ZN8STM32DMA5flushEv>:
     * @fn virtual void STM32DMA::flush();
     *
     * @brief Block until all DMA transfers are complete. Since this particular DMA does not do
     * anything, return immediately.
     */
    virtual void flush()
 8011688:	b480      	push	{r7}
 801168a:	b083      	sub	sp, #12
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
    {
    }
 8011690:	bf00      	nop
 8011692:	370c      	adds	r7, #12
 8011694:	46bd      	mov	sp, r7
 8011696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169a:	4770      	bx	lr

0801169c <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 801169c:	b580      	push	{r7, lr}
 801169e:	b082      	sub	sp, #8
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	330c      	adds	r3, #12
 80116a8:	4618      	mov	r0, r3
 80116aa:	f7fb fc69 	bl	800cf80 <_ZN8touchgfx9colortypeC1Ev>
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	4618      	mov	r0, r3
 80116b2:	3708      	adds	r7, #8
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}

080116b8 <_ZN8STM32DMAC1Ev>:
  */

#include <STM32DMA.hpp>
#include <assert.h>

STM32DMA::STM32DMA()
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b082      	sub	sp, #8
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
    : DMA_Interface(q), q(&b, 1)
 80116c0:	687a      	ldr	r2, [r7, #4]
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	330c      	adds	r3, #12
 80116c6:	4619      	mov	r1, r3
 80116c8:	4610      	mov	r0, r2
 80116ca:	f7ff ffb9 	bl	8011640 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80116ce:	4a0b      	ldr	r2, [pc, #44]	; (80116fc <_ZN8STM32DMAC1Ev+0x44>)
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	601a      	str	r2, [r3, #0]
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f103 000c 	add.w	r0, r3, #12
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	3320      	adds	r3, #32
 80116de:	2201      	movs	r2, #1
 80116e0:	4619      	mov	r1, r3
 80116e2:	f003 f879 	bl	80147d8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	3320      	adds	r3, #32
 80116ea:	4618      	mov	r0, r3
 80116ec:	f7ff ffd6 	bl	801169c <_ZN8touchgfx6BlitOpC1Ev>
{
}
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	4618      	mov	r0, r3
 80116f4:	3708      	adds	r7, #8
 80116f6:	46bd      	mov	sp, r7
 80116f8:	bd80      	pop	{r7, pc}
 80116fa:	bf00      	nop
 80116fc:	0802dedc 	.word	0x0802dedc

08011700 <_ZN8STM32DMA11getBlitCapsEv>:

touchgfx::BlitOperations STM32DMA::getBlitCaps()
{
 8011700:	b480      	push	{r7}
 8011702:	b083      	sub	sp, #12
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
    return static_cast<touchgfx::BlitOperations>(0);
 8011708:	2300      	movs	r3, #0
}
 801170a:	4618      	mov	r0, r3
 801170c:	370c      	adds	r7, #12
 801170e:	46bd      	mov	sp, r7
 8011710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011714:	4770      	bx	lr
	...

08011718 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32DMA::setupDataCopy(const touchgfx::BlitOp& blitOp)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b082      	sub	sp, #8
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
 8011720:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 8011722:	4b03      	ldr	r3, [pc, #12]	; (8011730 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18>)
 8011724:	4a03      	ldr	r2, [pc, #12]	; (8011734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c>)
 8011726:	2122      	movs	r1, #34	; 0x22
 8011728:	4803      	ldr	r0, [pc, #12]	; (8011738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>)
 801172a:	f016 f965 	bl	80279f8 <__assert_func>
 801172e:	bf00      	nop
 8011730:	0802ce80 	.word	0x0802ce80
 8011734:	0802cea4 	.word	0x0802cea4
 8011738:	0802cee4 	.word	0x0802cee4

0801173c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
}

void STM32DMA::setupDataFill(const touchgfx::BlitOp& blitOp)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b082      	sub	sp, #8
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 8011746:	4b03      	ldr	r3, [pc, #12]	; (8011754 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18>)
 8011748:	4a03      	ldr	r2, [pc, #12]	; (8011758 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>)
 801174a:	2127      	movs	r1, #39	; 0x27
 801174c:	4803      	ldr	r0, [pc, #12]	; (801175c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x20>)
 801174e:	f016 f953 	bl	80279f8 <__assert_func>
 8011752:	bf00      	nop
 8011754:	0802ce80 	.word	0x0802ce80
 8011758:	0802cf10 	.word	0x0802cf10
 801175c:	0802cee4 	.word	0x0802cee4

08011760 <_ZN8STM32DMAD1Ev>:
class STM32DMA : public touchgfx::DMA_Interface
 8011760:	b580      	push	{r7, lr}
 8011762:	b082      	sub	sp, #8
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
 8011768:	4a08      	ldr	r2, [pc, #32]	; (801178c <_ZN8STM32DMAD1Ev+0x2c>)
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	601a      	str	r2, [r3, #0]
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	330c      	adds	r3, #12
 8011772:	4618      	mov	r0, r3
 8011774:	f000 f81c 	bl	80117b0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	4618      	mov	r0, r3
 801177c:	f7ff ff40 	bl	8011600 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	4618      	mov	r0, r3
 8011784:	3708      	adds	r7, #8
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}
 801178a:	bf00      	nop
 801178c:	0802dedc 	.word	0x0802dedc

08011790 <_ZN8STM32DMAD0Ev>:
 8011790:	b580      	push	{r7, lr}
 8011792:	b082      	sub	sp, #8
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f7ff ffe1 	bl	8011760 <_ZN8STM32DMAD1Ev>
 801179e:	2144      	movs	r1, #68	; 0x44
 80117a0:	6878      	ldr	r0, [r7, #4]
 80117a2:	f016 f8fb 	bl	802799c <_ZdlPvj>
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	4618      	mov	r0, r3
 80117aa:	3708      	adds	r7, #8
 80117ac:	46bd      	mov	sp, r7
 80117ae:	bd80      	pop	{r7, pc}

080117b0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b082      	sub	sp, #8
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
 80117b8:	4a05      	ldr	r2, [pc, #20]	; (80117d0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	601a      	str	r2, [r3, #0]
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	4618      	mov	r0, r3
 80117c2:	f7ff fee7 	bl	8011594 <_ZN8touchgfx9DMA_QueueD1Ev>
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	4618      	mov	r0, r3
 80117ca:	3708      	adds	r7, #8
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}
 80117d0:	0802e790 	.word	0x0802e790

080117d4 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b082      	sub	sp, #8
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
 80117dc:	6878      	ldr	r0, [r7, #4]
 80117de:	f7ff ffe7 	bl	80117b0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80117e2:	2114      	movs	r1, #20
 80117e4:	6878      	ldr	r0, [r7, #4]
 80117e6:	f016 f8d9 	bl	802799c <_ZdlPvj>
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	4618      	mov	r0, r3
 80117ee:	3708      	adds	r7, #8
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}

080117f4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 80117f4:	b480      	push	{r7}
 80117f6:	b083      	sub	sp, #12
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 80117fc:	4a04      	ldr	r2, [pc, #16]	; (8011810 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	6013      	str	r3, [r2, #0]
    }
 8011802:	bf00      	nop
 8011804:	370c      	adds	r7, #12
 8011806:	46bd      	mov	sp, r7
 8011808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180c:	4770      	bx	lr
 801180e:	bf00      	nop
 8011810:	2000c4a0 	.word	0x2000c4a0

08011814 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8011814:	b480      	push	{r7}
 8011816:	b085      	sub	sp, #20
 8011818:	af00      	add	r7, sp, #0
 801181a:	60f8      	str	r0, [r7, #12]
 801181c:	60b9      	str	r1, [r7, #8]
 801181e:	607a      	str	r2, [r7, #4]
 8011820:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8011822:	4a0b      	ldr	r2, [pc, #44]	; (8011850 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	601a      	str	r2, [r3, #0]
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	68ba      	ldr	r2, [r7, #8]
 801182c:	605a      	str	r2, [r3, #4]
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	687a      	ldr	r2, [r7, #4]
 8011832:	609a      	str	r2, [r3, #8]
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	683a      	ldr	r2, [r7, #0]
 8011838:	60da      	str	r2, [r3, #12]
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	69ba      	ldr	r2, [r7, #24]
 801183e:	611a      	str	r2, [r3, #16]
    {
    }
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	4618      	mov	r0, r3
 8011844:	3714      	adds	r7, #20
 8011846:	46bd      	mov	sp, r7
 8011848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184c:	4770      	bx	lr
 801184e:	bf00      	nop
 8011850:	0802e014 	.word	0x0802e014

08011854 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8011854:	b480      	push	{r7}
 8011856:	b083      	sub	sp, #12
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
    {
 801185c:	4a04      	ldr	r2, [pc, #16]	; (8011870 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	601a      	str	r2, [r3, #0]
    }
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	4618      	mov	r0, r3
 8011866:	370c      	adds	r7, #12
 8011868:	46bd      	mov	sp, r7
 801186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186e:	4770      	bx	lr
 8011870:	0802e014 	.word	0x0802e014

08011874 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8011874:	b580      	push	{r7, lr}
 8011876:	b082      	sub	sp, #8
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
    }
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f7ff ffe9 	bl	8011854 <_ZN8touchgfx7MVPHeapD1Ev>
 8011882:	2114      	movs	r1, #20
 8011884:	6878      	ldr	r0, [r7, #4]
 8011886:	f016 f889 	bl	802799c <_ZdlPvj>
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	4618      	mov	r0, r3
 801188e:	3708      	adds	r7, #8
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}

08011894 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8011894:	b480      	push	{r7}
 8011896:	b083      	sub	sp, #12
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
    {
 801189c:	4a04      	ldr	r2, [pc, #16]	; (80118b0 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	601a      	str	r2, [r3, #0]
    }
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	4618      	mov	r0, r3
 80118a6:	370c      	adds	r7, #12
 80118a8:	46bd      	mov	sp, r7
 80118aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ae:	4770      	bx	lr
 80118b0:	0802ec04 	.word	0x0802ec04

080118b4 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b082      	sub	sp, #8
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
    }
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f7ff ffe9 	bl	8011894 <_ZN8touchgfx3LCDD1Ev>
 80118c2:	2108      	movs	r1, #8
 80118c4:	6878      	ldr	r0, [r7, #4]
 80118c6:	f016 f869 	bl	802799c <_ZdlPvj>
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	4618      	mov	r0, r3
 80118ce:	3708      	adds	r7, #8
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd80      	pop	{r7, pc}

080118d4 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80118d4:	b480      	push	{r7}
 80118d6:	b083      	sub	sp, #12
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2200      	movs	r2, #0
 80118e0:	801a      	strh	r2, [r3, #0]
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	2200      	movs	r2, #0
 80118e6:	805a      	strh	r2, [r3, #2]
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2200      	movs	r2, #0
 80118ec:	809a      	strh	r2, [r3, #4]
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	2200      	movs	r2, #0
 80118f2:	80da      	strh	r2, [r3, #6]
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2200      	movs	r2, #0
 80118f8:	811a      	strh	r2, [r3, #8]
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	2200      	movs	r2, #0
 80118fe:	815a      	strh	r2, [r3, #10]
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	2200      	movs	r2, #0
 8011904:	819a      	strh	r2, [r3, #12]
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	2200      	movs	r2, #0
 801190a:	739a      	strb	r2, [r3, #14]
        {
        }
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	4618      	mov	r0, r3
 8011910:	370c      	adds	r7, #12
 8011912:	46bd      	mov	sp, r7
 8011914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011918:	4770      	bx	lr

0801191a <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 801191a:	b580      	push	{r7, lr}
 801191c:	b082      	sub	sp, #8
 801191e:	af00      	add	r7, sp, #0
 8011920:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	4618      	mov	r0, r3
 8011926:	f7ff ffd5 	bl	80118d4 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	2200      	movs	r2, #0
 801192e:	611a      	str	r2, [r3, #16]
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	2200      	movs	r2, #0
 8011934:	829a      	strh	r2, [r3, #20]
    {
    }
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	4618      	mov	r0, r3
 801193a:	3708      	adds	r7, #8
 801193c:	46bd      	mov	sp, r7
 801193e:	bd80      	pop	{r7, pc}

08011940 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8011940:	b580      	push	{r7, lr}
 8011942:	b084      	sub	sp, #16
 8011944:	af00      	add	r7, sp, #0
 8011946:	60f8      	str	r0, [r7, #12]
 8011948:	60b9      	str	r1, [r7, #8]
 801194a:	607a      	str	r2, [r7, #4]
 801194c:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 801194e:	4a55      	ldr	r2, [pc, #340]	; (8011aa4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	601a      	str	r2, [r3, #0]
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	68ba      	ldr	r2, [r7, #8]
 8011958:	605a      	str	r2, [r3, #4]
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	687a      	ldr	r2, [r7, #4]
 801195e:	609a      	str	r2, [r3, #8]
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	683a      	ldr	r2, [r7, #0]
 8011964:	60da      	str	r2, [r3, #12]
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	2200      	movs	r2, #0
 801196a:	611a      	str	r2, [r3, #16]
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	2200      	movs	r2, #0
 8011970:	615a      	str	r2, [r3, #20]
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	2200      	movs	r2, #0
 8011976:	619a      	str	r2, [r3, #24]
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	331c      	adds	r3, #28
 801197c:	4618      	mov	r0, r3
 801197e:	f7ff ffcc 	bl	801191a <_ZN8touchgfx8GesturesC1Ev>
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	2200      	movs	r2, #0
 8011986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	2200      	movs	r2, #0
 801198e:	639a      	str	r2, [r3, #56]	; 0x38
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	2200      	movs	r2, #0
 8011994:	63da      	str	r2, [r3, #60]	; 0x3c
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	2200      	movs	r2, #0
 801199a:	641a      	str	r2, [r3, #64]	; 0x40
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	2200      	movs	r2, #0
 80119a0:	645a      	str	r2, [r3, #68]	; 0x44
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	2200      	movs	r2, #0
 80119a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	2201      	movs	r2, #1
 80119ae:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	2200      	movs	r2, #0
 80119b6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	2200      	movs	r2, #0
 80119be:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	2200      	movs	r2, #0
 80119c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	3350      	adds	r3, #80	; 0x50
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7fb fb00 	bl	800cfd2 <_ZN8touchgfx4RectC1Ev>
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	2200      	movs	r2, #0
 80119d6:	659a      	str	r2, [r3, #88]	; 0x58
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	2200      	movs	r2, #0
 80119dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	2200      	movs	r2, #0
 80119e2:	661a      	str	r2, [r3, #96]	; 0x60
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	2201      	movs	r2, #1
 80119e8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	2200      	movs	r2, #0
 80119f0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	2200      	movs	r2, #0
 80119f8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	2201      	movs	r2, #1
 8011a00:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	2200      	movs	r2, #0
 8011a08:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	2200      	movs	r2, #0
 8011a10:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	2200      	movs	r2, #0
 8011a18:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	2200      	movs	r2, #0
 8011a20:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	2200      	movs	r2, #0
 8011a28:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	2200      	movs	r2, #0
 8011a30:	671a      	str	r2, [r3, #112]	; 0x70
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	2200      	movs	r2, #0
 8011a36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	2200      	movs	r2, #0
 8011a46:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	2201      	movs	r2, #1
 8011a4e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	2201      	movs	r2, #1
 8011a56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8011a5a:	4a13      	ldr	r2, [pc, #76]	; (8011aa8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8011a60:	4a12      	ldr	r2, [pc, #72]	; (8011aac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8011a62:	8b3b      	ldrh	r3, [r7, #24]
 8011a64:	8013      	strh	r3, [r2, #0]
 8011a66:	4b11      	ldr	r3, [pc, #68]	; (8011aac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8011a68:	881a      	ldrh	r2, [r3, #0]
 8011a6a:	4b11      	ldr	r3, [pc, #68]	; (8011ab0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8011a6c:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8011a6e:	4a11      	ldr	r2, [pc, #68]	; (8011ab4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8011a70:	8bbb      	ldrh	r3, [r7, #28]
 8011a72:	8013      	strh	r3, [r2, #0]
 8011a74:	4b0f      	ldr	r3, [pc, #60]	; (8011ab4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8011a76:	881a      	ldrh	r2, [r3, #0]
 8011a78:	4b0f      	ldr	r3, [pc, #60]	; (8011ab8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8011a7a:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8011a7c:	4b0f      	ldr	r3, [pc, #60]	; (8011abc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8011a7e:	2200      	movs	r2, #0
 8011a80:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8011a82:	8b3a      	ldrh	r2, [r7, #24]
 8011a84:	8bbb      	ldrh	r3, [r7, #28]
 8011a86:	429a      	cmp	r2, r3
 8011a88:	bf34      	ite	cc
 8011a8a:	2301      	movcc	r3, #1
 8011a8c:	2300      	movcs	r3, #0
 8011a8e:	b2db      	uxtb	r3, r3
 8011a90:	461a      	mov	r2, r3
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	3710      	adds	r7, #16
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}
 8011aa2:	bf00      	nop
 8011aa4:	0802e668 	.word	0x0802e668
 8011aa8:	2000c43c 	.word	0x2000c43c
 8011aac:	2000c430 	.word	0x2000c430
 8011ab0:	2000c436 	.word	0x2000c436
 8011ab4:	2000c432 	.word	0x2000c432
 8011ab8:	2000c438 	.word	0x2000c438
 8011abc:	2000c434 	.word	0x2000c434

08011ac0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b082      	sub	sp, #8
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
 8011ac8:	6039      	str	r1, [r7, #0]
    {
        app.gotomainScreenScreenNoTransition();
 8011aca:	683b      	ldr	r3, [r7, #0]
 8011acc:	4618      	mov	r0, r3
 8011ace:	f7fa ffc5 	bl	800ca5c <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 8011ad2:	bf00      	nop
 8011ad4:	3708      	adds	r7, #8
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}
	...

08011adc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b086      	sub	sp, #24
 8011ae0:	af02      	add	r7, sp, #8
 8011ae2:	60f8      	str	r0, [r7, #12]
 8011ae4:	60b9      	str	r1, [r7, #8]
 8011ae6:	607a      	str	r2, [r7, #4]
 8011ae8:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8011aea:	68f8      	ldr	r0, [r7, #12]
 8011aec:	69bb      	ldr	r3, [r7, #24]
 8011aee:	9300      	str	r3, [sp, #0]
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	687a      	ldr	r2, [r7, #4]
 8011af4:	68b9      	ldr	r1, [r7, #8]
 8011af6:	f7ff fe8d 	bl	8011814 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8011afa:	4a04      	ldr	r2, [pc, #16]	; (8011b0c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	601a      	str	r2, [r3, #0]
    {

    }
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	4618      	mov	r0, r3
 8011b04:	3710      	adds	r7, #16
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}
 8011b0a:	bf00      	nop
 8011b0c:	0802e000 	.word	0x0802e000

08011b10 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8011b10:	b580      	push	{r7, lr}
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	4801      	ldr	r0, [pc, #4]	; (8011b1c <__tcf_0+0xc>)
 8011b16:	f000 f967 	bl	8011de8 <_ZN12FrontendHeapD1Ev>
 8011b1a:	bd80      	pop	{r7, pc}
 8011b1c:	200092dc 	.word	0x200092dc

08011b20 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8011b20:	b580      	push	{r7, lr}
 8011b22:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8011b24:	4b12      	ldr	r3, [pc, #72]	; (8011b70 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8011b26:	781b      	ldrb	r3, [r3, #0]
 8011b28:	f3bf 8f5b 	dmb	ish
 8011b2c:	b2db      	uxtb	r3, r3
 8011b2e:	f003 0301 	and.w	r3, r3, #1
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	bf0c      	ite	eq
 8011b36:	2301      	moveq	r3, #1
 8011b38:	2300      	movne	r3, #0
 8011b3a:	b2db      	uxtb	r3, r3
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d013      	beq.n	8011b68 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8011b40:	480b      	ldr	r0, [pc, #44]	; (8011b70 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8011b42:	f015 ff2d 	bl	80279a0 <__cxa_guard_acquire>
 8011b46:	4603      	mov	r3, r0
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	bf14      	ite	ne
 8011b4c:	2301      	movne	r3, #1
 8011b4e:	2300      	moveq	r3, #0
 8011b50:	b2db      	uxtb	r3, r3
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d008      	beq.n	8011b68 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8011b56:	4807      	ldr	r0, [pc, #28]	; (8011b74 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8011b58:	f000 f868 	bl	8011c2c <_ZN12FrontendHeapC1Ev>
 8011b5c:	4806      	ldr	r0, [pc, #24]	; (8011b78 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8011b5e:	f015 ff69 	bl	8027a34 <atexit>
 8011b62:	4803      	ldr	r0, [pc, #12]	; (8011b70 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8011b64:	f015 ff28 	bl	80279b8 <__cxa_guard_release>
        return instance;
 8011b68:	4b02      	ldr	r3, [pc, #8]	; (8011b74 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	bd80      	pop	{r7, pc}
 8011b6e:	bf00      	nop
 8011b70:	2000ac44 	.word	0x2000ac44
 8011b74:	200092dc 	.word	0x200092dc
 8011b78:	08011b11 	.word	0x08011b11

08011b7c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b082      	sub	sp, #8
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
 8011b84:	4a05      	ldr	r2, [pc, #20]	; (8011b9c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	601a      	str	r2, [r3, #0]
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f7ff fe61 	bl	8011854 <_ZN8touchgfx7MVPHeapD1Ev>
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	4618      	mov	r0, r3
 8011b96:	3708      	adds	r7, #8
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bd80      	pop	{r7, pc}
 8011b9c:	0802e000 	.word	0x0802e000

08011ba0 <_ZN16FrontendHeapBaseD0Ev>:
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b082      	sub	sp, #8
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
 8011ba8:	6878      	ldr	r0, [r7, #4]
 8011baa:	f7ff ffe7 	bl	8011b7c <_ZN16FrontendHeapBaseD1Ev>
 8011bae:	2114      	movs	r1, #20
 8011bb0:	6878      	ldr	r0, [r7, #4]
 8011bb2:	f015 fef3 	bl	802799c <_ZdlPvj>
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	4618      	mov	r0, r3
 8011bba:	3708      	adds	r7, #8
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	bd80      	pop	{r7, pc}

08011bc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b082      	sub	sp, #8
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f000 fff4 	bl	8012bb8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8011bd0:	4a03      	ldr	r2, [pc, #12]	; (8011be0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	601a      	str	r2, [r3, #0]
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	4618      	mov	r0, r3
 8011bda:	3708      	adds	r7, #8
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}
 8011be0:	0802dfcc 	.word	0x0802dfcc

08011be4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b082      	sub	sp, #8
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f000 ffe2 	bl	8012bb8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8011bf4:	4a03      	ldr	r2, [pc, #12]	; (8011c04 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	601a      	str	r2, [r3, #0]
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3708      	adds	r7, #8
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}
 8011c04:	0802df98 	.word	0x0802df98

08011c08 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b082      	sub	sp, #8
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	4618      	mov	r0, r3
 8011c14:	f000 ffd0 	bl	8012bb8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8011c18:	4a03      	ldr	r2, [pc, #12]	; (8011c28 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	601a      	str	r2, [r3, #0]
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	4618      	mov	r0, r3
 8011c22:	3708      	adds	r7, #8
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd80      	pop	{r7, pc}
 8011c28:	0802df64 	.word	0x0802df64

08011c2c <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8011c2c:	b590      	push	{r4, r7, lr}
 8011c2e:	b085      	sub	sp, #20
 8011c30:	af02      	add	r7, sp, #8
 8011c32:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8011c34:	6878      	ldr	r0, [r7, #4]
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	f103 0114 	add.w	r1, r3, #20
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	f503 52bf 	add.w	r2, r3, #6112	; 0x17e0
 8011c48:	3218      	adds	r2, #24
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8011c50:	3310      	adds	r3, #16
                     app(model, *this)
 8011c52:	9300      	str	r3, [sp, #0]
 8011c54:	4613      	mov	r3, r2
 8011c56:	4622      	mov	r2, r4
 8011c58:	f7ff ff40 	bl	8011adc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8011c5c:	4a1a      	ldr	r2, [pc, #104]	; (8011cc8 <_ZN12FrontendHeapC1Ev+0x9c>)
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	601a      	str	r2, [r3, #0]
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	3314      	adds	r3, #20
 8011c66:	4618      	mov	r0, r3
 8011c68:	f7ff ffaa 	bl	8011bc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	332c      	adds	r3, #44	; 0x2c
 8011c70:	4618      	mov	r0, r3
 8011c72:	f7ff ffb7 	bl	8011be4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8011c7c:	3318      	adds	r3, #24
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f7ff ffc2 	bl	8011c08 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8011c8a:	330c      	adds	r3, #12
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	f7ff f80f 	bl	8010cb0 <_ZN5ModelC1Ev>
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8011c98:	3310      	adds	r3, #16
 8011c9a:	687a      	ldr	r2, [r7, #4]
 8011c9c:	f502 51c0 	add.w	r1, r2, #6144	; 0x1800
 8011ca0:	310c      	adds	r1, #12
 8011ca2:	687a      	ldr	r2, [r7, #4]
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f7fe fb67 	bl	8010378 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8011caa:	687a      	ldr	r2, [r7, #4]
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8011cb2:	3310      	adds	r3, #16
 8011cb4:	4619      	mov	r1, r3
 8011cb6:	4610      	mov	r0, r2
 8011cb8:	f7ff ff02 	bl	8011ac0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	370c      	adds	r7, #12
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	bd90      	pop	{r4, r7, pc}
 8011cc6:	bf00      	nop
 8011cc8:	0802df50 	.word	0x0802df50

08011ccc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b086      	sub	sp, #24
 8011cd0:	af02      	add	r7, sp, #8
 8011cd2:	60f8      	str	r0, [r7, #12]
 8011cd4:	60b9      	str	r1, [r7, #8]
 8011cd6:	607a      	str	r2, [r7, #4]
 8011cd8:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8011cda:	68f8      	ldr	r0, [r7, #12]
 8011cdc:	8bbb      	ldrh	r3, [r7, #28]
 8011cde:	9301      	str	r3, [sp, #4]
 8011ce0:	8b3b      	ldrh	r3, [r7, #24]
 8011ce2:	9300      	str	r3, [sp, #0]
 8011ce4:	683b      	ldr	r3, [r7, #0]
 8011ce6:	687a      	ldr	r2, [r7, #4]
 8011ce8:	68b9      	ldr	r1, [r7, #8]
 8011cea:	f7ff fe29 	bl	8011940 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8011cee:	4a04      	ldr	r2, [pc, #16]	; (8011d00 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	601a      	str	r2, [r3, #0]
    }
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	3710      	adds	r7, #16
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	bd80      	pop	{r7, pc}
 8011cfe:	bf00      	nop
 8011d00:	0802e050 	.word	0x0802e050

08011d04 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b086      	sub	sp, #24
 8011d08:	af02      	add	r7, sp, #8
 8011d0a:	60f8      	str	r0, [r7, #12]
 8011d0c:	60b9      	str	r1, [r7, #8]
 8011d0e:	607a      	str	r2, [r7, #4]
 8011d10:	603b      	str	r3, [r7, #0]
 8011d12:	68f8      	ldr	r0, [r7, #12]
 8011d14:	8bbb      	ldrh	r3, [r7, #28]
 8011d16:	9301      	str	r3, [sp, #4]
 8011d18:	8b3b      	ldrh	r3, [r7, #24]
 8011d1a:	9300      	str	r3, [sp, #0]
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	687a      	ldr	r2, [r7, #4]
 8011d20:	68b9      	ldr	r1, [r7, #8]
 8011d22:	f7ff ffd3 	bl	8011ccc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8011d26:	4a04      	ldr	r2, [pc, #16]	; (8011d38 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	601a      	str	r2, [r3, #0]
    }
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	4618      	mov	r0, r3
 8011d30:	3710      	adds	r7, #16
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}
 8011d36:	bf00      	nop
 8011d38:	0802de04 	.word	0x0802de04

08011d3c <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8011d3c:	b480      	push	{r7}
 8011d3e:	b083      	sub	sp, #12
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
 8011d44:	4a04      	ldr	r2, [pc, #16]	; (8011d58 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	601a      	str	r2, [r3, #0]
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	370c      	adds	r7, #12
 8011d50:	46bd      	mov	sp, r7
 8011d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d56:	4770      	bx	lr
 8011d58:	0802ddec 	.word	0x0802ddec

08011d5c <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b082      	sub	sp, #8
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	4618      	mov	r0, r3
 8011d68:	f7ff ffe8 	bl	8011d3c <_ZN8touchgfx15TouchControllerC1Ev>
 8011d6c:	4a03      	ldr	r2, [pc, #12]	; (8011d7c <_ZN20STM32TouchControllerC1Ev+0x20>)
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	601a      	str	r2, [r3, #0]
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	4618      	mov	r0, r3
 8011d76:	3708      	adds	r7, #8
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	bd80      	pop	{r7, pc}
 8011d7c:	0802ddd4 	.word	0x0802ddd4

08011d80 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 320, 240);

void touchgfx_init()
{
 8011d80:	b590      	push	{r4, r7, lr}
 8011d82:	b085      	sub	sp, #20
 8011d84:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8011d86:	f7fe f8c1 	bl	800ff0c <_ZN14BitmapDatabase11getInstanceEv>
 8011d8a:	4604      	mov	r4, r0
 8011d8c:	f7fe f8c8 	bl	800ff20 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8011d90:	4603      	mov	r3, r0
 8011d92:	4619      	mov	r1, r3
 8011d94:	2300      	movs	r3, #0
 8011d96:	9300      	str	r3, [sp, #0]
 8011d98:	2300      	movs	r3, #0
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	4620      	mov	r0, r4
 8011d9e:	f009 fd07 	bl	801b7b0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8011da2:	4809      	ldr	r0, [pc, #36]	; (8011dc8 <touchgfx_init+0x48>)
 8011da4:	f7ff fd26 	bl	80117f4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8011da8:	2000      	movs	r0, #0
 8011daa:	f7fe f9fd 	bl	80101a8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8011dae:	4807      	ldr	r0, [pc, #28]	; (8011dcc <touchgfx_init+0x4c>)
 8011db0:	f009 fc66 	bl	801b680 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8011db4:	f7ff feb4 	bl	8011b20 <_ZN12FrontendHeap11getInstanceEv>
 8011db8:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8011dba:	4805      	ldr	r0, [pc, #20]	; (8011dd0 <touchgfx_init+0x50>)
 8011dbc:	f7ff fa70 	bl	80112a0 <_ZN11TouchGFXHAL10initializeEv>
}
 8011dc0:	bf00      	nop
 8011dc2:	370c      	adds	r7, #12
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd90      	pop	{r4, r7, pc}
 8011dc8:	2000ad08 	.word	0x2000ad08
 8011dcc:	20000018 	.word	0x20000018
 8011dd0:	2000ad0c 	.word	0x2000ad0c

08011dd4 <touchgfx_taskEntry>:
void touchgfx_components_init()
{
}

void touchgfx_taskEntry()
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8011dd8:	4802      	ldr	r0, [pc, #8]	; (8011de4 <touchgfx_taskEntry+0x10>)
 8011dda:	f001 fe78 	bl	8013ace <_ZN8touchgfx3HAL9taskEntryEv>
}
 8011dde:	bf00      	nop
 8011de0:	bd80      	pop	{r7, pc}
 8011de2:	bf00      	nop
 8011de4:	2000ad0c 	.word	0x2000ad0c

08011de8 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	4a11      	ldr	r2, [pc, #68]	; (8011e38 <_ZN12FrontendHeapD1Ev+0x50>)
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	601a      	str	r2, [r3, #0]
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8011dfc:	3310      	adds	r3, #16
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f7fe fa84 	bl	801030c <_ZN19FrontendApplicationD1Ev>
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8011e0a:	3318      	adds	r3, #24
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f000 f827 	bl	8011e60 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	332c      	adds	r3, #44	; 0x2c
 8011e16:	4618      	mov	r0, r3
 8011e18:	f000 f844 	bl	8011ea4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	3314      	adds	r3, #20
 8011e20:	4618      	mov	r0, r3
 8011e22:	f000 f863 	bl	8011eec <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f7ff fea7 	bl	8011b7c <_ZN16FrontendHeapBaseD1Ev>
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	4618      	mov	r0, r3
 8011e32:	3708      	adds	r7, #8
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}
 8011e38:	0802df50 	.word	0x0802df50

08011e3c <_ZN12FrontendHeapD0Ev>:
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b082      	sub	sp, #8
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
 8011e44:	6878      	ldr	r0, [r7, #4]
 8011e46:	f7ff ffcf 	bl	8011de8 <_ZN12FrontendHeapD1Ev>
 8011e4a:	f641 1168 	movw	r1, #6504	; 0x1968
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f015 fda4 	bl	802799c <_ZdlPvj>
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	4618      	mov	r0, r3
 8011e58:	3708      	adds	r7, #8
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}
	...

08011e60 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b082      	sub	sp, #8
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	4a05      	ldr	r2, [pc, #20]	; (8011e80 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	601a      	str	r2, [r3, #0]
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	4618      	mov	r0, r3
 8011e72:	f000 fea0 	bl	8012bb6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	4618      	mov	r0, r3
 8011e7a:	3708      	adds	r7, #8
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd80      	pop	{r7, pc}
 8011e80:	0802df64 	.word	0x0802df64

08011e84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b082      	sub	sp, #8
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
 8011e8c:	6878      	ldr	r0, [r7, #4]
 8011e8e:	f7ff ffe7 	bl	8011e60 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011e92:	2114      	movs	r1, #20
 8011e94:	6878      	ldr	r0, [r7, #4]
 8011e96:	f015 fd81 	bl	802799c <_ZdlPvj>
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	3708      	adds	r7, #8
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd80      	pop	{r7, pc}

08011ea4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b082      	sub	sp, #8
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
 8011eac:	4a05      	ldr	r2, [pc, #20]	; (8011ec4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	601a      	str	r2, [r3, #0]
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	f000 fe7e 	bl	8012bb6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	3708      	adds	r7, #8
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}
 8011ec4:	0802df98 	.word	0x0802df98

08011ec8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b082      	sub	sp, #8
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
 8011ed0:	6878      	ldr	r0, [r7, #4]
 8011ed2:	f7ff ffe7 	bl	8011ea4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011ed6:	f241 71cc 	movw	r1, #6092	; 0x17cc
 8011eda:	6878      	ldr	r0, [r7, #4]
 8011edc:	f015 fd5e 	bl	802799c <_ZdlPvj>
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	3708      	adds	r7, #8
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bd80      	pop	{r7, pc}
	...

08011eec <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b082      	sub	sp, #8
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
 8011ef4:	4a05      	ldr	r2, [pc, #20]	; (8011f0c <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	601a      	str	r2, [r3, #0]
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	4618      	mov	r0, r3
 8011efe:	f000 fe5a 	bl	8012bb6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	4618      	mov	r0, r3
 8011f06:	3708      	adds	r7, #8
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	bd80      	pop	{r7, pc}
 8011f0c:	0802dfcc 	.word	0x0802dfcc

08011f10 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b082      	sub	sp, #8
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	f7ff ffe7 	bl	8011eec <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011f1e:	2118      	movs	r1, #24
 8011f20:	6878      	ldr	r0, [r7, #4]
 8011f22:	f015 fd3b 	bl	802799c <_ZdlPvj>
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	4618      	mov	r0, r3
 8011f2a:	3708      	adds	r7, #8
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	bd80      	pop	{r7, pc}

08011f30 <_ZN8touchgfx8LCD16bppD1Ev>:
class LCD16bpp : public LCD
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b082      	sub	sp, #8
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
 8011f38:	4a05      	ldr	r2, [pc, #20]	; (8011f50 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	601a      	str	r2, [r3, #0]
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	4618      	mov	r0, r3
 8011f42:	f7ff fca7 	bl	8011894 <_ZN8touchgfx3LCDD1Ev>
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	4618      	mov	r0, r3
 8011f4a:	3708      	adds	r7, #8
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd80      	pop	{r7, pc}
 8011f50:	0802f008 	.word	0x0802f008

08011f54 <_ZN8touchgfx8LCD16bppD0Ev>:
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b082      	sub	sp, #8
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f7ff ffe7 	bl	8011f30 <_ZN8touchgfx8LCD16bppD1Ev>
 8011f62:	2178      	movs	r1, #120	; 0x78
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f015 fd19 	bl	802799c <_ZdlPvj>
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	3708      	adds	r7, #8
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd80      	pop	{r7, pc}

08011f74 <_Z41__static_initialization_and_destruction_0ii>:
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b084      	sub	sp, #16
 8011f78:	af02      	add	r7, sp, #8
 8011f7a:	6078      	str	r0, [r7, #4]
 8011f7c:	6039      	str	r1, [r7, #0]
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	2b01      	cmp	r3, #1
 8011f82:	d118      	bne.n	8011fb6 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f8a:	4293      	cmp	r3, r2
 8011f8c:	d113      	bne.n	8011fb6 <_Z41__static_initialization_and_destruction_0ii+0x42>
static STM32TouchController tc;
 8011f8e:	4817      	ldr	r0, [pc, #92]	; (8011fec <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8011f90:	f7ff fee4 	bl	8011d5c <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8011f94:	4816      	ldr	r0, [pc, #88]	; (8011ff0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8011f96:	f7ff fb8f 	bl	80116b8 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8011f9a:	4816      	ldr	r0, [pc, #88]	; (8011ff4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8011f9c:	f00c fd08 	bl	801e9b0 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 320, 240);
 8011fa0:	23f0      	movs	r3, #240	; 0xf0
 8011fa2:	9301      	str	r3, [sp, #4]
 8011fa4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8011fa8:	9300      	str	r3, [sp, #0]
 8011faa:	4b10      	ldr	r3, [pc, #64]	; (8011fec <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8011fac:	4a11      	ldr	r2, [pc, #68]	; (8011ff4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8011fae:	4910      	ldr	r1, [pc, #64]	; (8011ff0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8011fb0:	4811      	ldr	r0, [pc, #68]	; (8011ff8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8011fb2:	f7ff fea7 	bl	8011d04 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d113      	bne.n	8011fe4 <_Z41__static_initialization_and_destruction_0ii+0x70>
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011fc2:	4293      	cmp	r3, r2
 8011fc4:	d10e      	bne.n	8011fe4 <_Z41__static_initialization_and_destruction_0ii+0x70>
 8011fc6:	480c      	ldr	r0, [pc, #48]	; (8011ff8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8011fc8:	f7ff f9e2 	bl	8011390 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8011fcc:	480b      	ldr	r0, [pc, #44]	; (8011ffc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8011fce:	f7f9 ff77 	bl	800bec0 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8011fd2:	4808      	ldr	r0, [pc, #32]	; (8011ff4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8011fd4:	f7ff ffac 	bl	8011f30 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8011fd8:	4805      	ldr	r0, [pc, #20]	; (8011ff0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8011fda:	f7ff fbc1 	bl	8011760 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8011fde:	4803      	ldr	r0, [pc, #12]	; (8011fec <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8011fe0:	f7fe ff70 	bl	8010ec4 <_ZN20STM32TouchControllerD1Ev>
}
 8011fe4:	bf00      	nop
 8011fe6:	3708      	adds	r7, #8
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	bd80      	pop	{r7, pc}
 8011fec:	2000ac48 	.word	0x2000ac48
 8011ff0:	2000ac4c 	.word	0x2000ac4c
 8011ff4:	2000ac90 	.word	0x2000ac90
 8011ff8:	2000ad0c 	.word	0x2000ad0c
 8011ffc:	20000018 	.word	0x20000018

08012000 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8012000:	b480      	push	{r7}
 8012002:	b083      	sub	sp, #12
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8012008:	2301      	movs	r3, #1
    }
 801200a:	4618      	mov	r0, r3
 801200c:	370c      	adds	r7, #12
 801200e:	46bd      	mov	sp, r7
 8012010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012014:	4770      	bx	lr

08012016 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8012016:	b480      	push	{r7}
 8012018:	b083      	sub	sp, #12
 801201a:	af00      	add	r7, sp, #0
 801201c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801201e:	230c      	movs	r3, #12
    }
 8012020:	4618      	mov	r0, r3
 8012022:	370c      	adds	r7, #12
 8012024:	46bd      	mov	sp, r7
 8012026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202a:	4770      	bx	lr

0801202c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 801202c:	b480      	push	{r7}
 801202e:	b083      	sub	sp, #12
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
 8012034:	460b      	mov	r3, r1
 8012036:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8012038:	887a      	ldrh	r2, [r7, #2]
 801203a:	4613      	mov	r3, r2
 801203c:	005b      	lsls	r3, r3, #1
 801203e:	4413      	add	r3, r2
 8012040:	009b      	lsls	r3, r3, #2
 8012042:	3308      	adds	r3, #8
 8012044:	687a      	ldr	r2, [r7, #4]
 8012046:	4413      	add	r3, r2
    }
 8012048:	4618      	mov	r0, r3
 801204a:	370c      	adds	r7, #12
 801204c:	46bd      	mov	sp, r7
 801204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012052:	4770      	bx	lr

08012054 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8012054:	b480      	push	{r7}
 8012056:	b083      	sub	sp, #12
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
 801205c:	460b      	mov	r3, r1
 801205e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8012060:	887a      	ldrh	r2, [r7, #2]
 8012062:	4613      	mov	r3, r2
 8012064:	005b      	lsls	r3, r3, #1
 8012066:	4413      	add	r3, r2
 8012068:	009b      	lsls	r3, r3, #2
 801206a:	3308      	adds	r3, #8
 801206c:	687a      	ldr	r2, [r7, #4]
 801206e:	4413      	add	r3, r2
    }
 8012070:	4618      	mov	r0, r3
 8012072:	370c      	adds	r7, #12
 8012074:	46bd      	mov	sp, r7
 8012076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207a:	4770      	bx	lr

0801207c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801207c:	b480      	push	{r7}
 801207e:	b083      	sub	sp, #12
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8012084:	2301      	movs	r3, #1
    }
 8012086:	4618      	mov	r0, r3
 8012088:	370c      	adds	r7, #12
 801208a:	46bd      	mov	sp, r7
 801208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012090:	4770      	bx	lr

08012092 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8012092:	b480      	push	{r7}
 8012094:	b083      	sub	sp, #12
 8012096:	af00      	add	r7, sp, #0
 8012098:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801209a:	f241 73c4 	movw	r3, #6084	; 0x17c4
    }
 801209e:	4618      	mov	r0, r3
 80120a0:	370c      	adds	r7, #12
 80120a2:	46bd      	mov	sp, r7
 80120a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a8:	4770      	bx	lr

080120aa <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80120aa:	b480      	push	{r7}
 80120ac:	b083      	sub	sp, #12
 80120ae:	af00      	add	r7, sp, #0
 80120b0:	6078      	str	r0, [r7, #4]
 80120b2:	460b      	mov	r3, r1
 80120b4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80120b6:	887b      	ldrh	r3, [r7, #2]
 80120b8:	f241 72c4 	movw	r2, #6084	; 0x17c4
 80120bc:	fb02 f303 	mul.w	r3, r2, r3
 80120c0:	3308      	adds	r3, #8
 80120c2:	687a      	ldr	r2, [r7, #4]
 80120c4:	4413      	add	r3, r2
    }
 80120c6:	4618      	mov	r0, r3
 80120c8:	370c      	adds	r7, #12
 80120ca:	46bd      	mov	sp, r7
 80120cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d0:	4770      	bx	lr

080120d2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80120d2:	b480      	push	{r7}
 80120d4:	b083      	sub	sp, #12
 80120d6:	af00      	add	r7, sp, #0
 80120d8:	6078      	str	r0, [r7, #4]
 80120da:	460b      	mov	r3, r1
 80120dc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80120de:	887b      	ldrh	r3, [r7, #2]
 80120e0:	f241 72c4 	movw	r2, #6084	; 0x17c4
 80120e4:	fb02 f303 	mul.w	r3, r2, r3
 80120e8:	3308      	adds	r3, #8
 80120ea:	687a      	ldr	r2, [r7, #4]
 80120ec:	4413      	add	r3, r2
    }
 80120ee:	4618      	mov	r0, r3
 80120f0:	370c      	adds	r7, #12
 80120f2:	46bd      	mov	sp, r7
 80120f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f8:	4770      	bx	lr

080120fa <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80120fa:	b480      	push	{r7}
 80120fc:	b083      	sub	sp, #12
 80120fe:	af00      	add	r7, sp, #0
 8012100:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8012102:	2301      	movs	r3, #1
    }
 8012104:	4618      	mov	r0, r3
 8012106:	370c      	adds	r7, #12
 8012108:	46bd      	mov	sp, r7
 801210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210e:	4770      	bx	lr

08012110 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8012110:	b480      	push	{r7}
 8012112:	b083      	sub	sp, #12
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8012118:	2310      	movs	r3, #16
    }
 801211a:	4618      	mov	r0, r3
 801211c:	370c      	adds	r7, #12
 801211e:	46bd      	mov	sp, r7
 8012120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012124:	4770      	bx	lr

08012126 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8012126:	b480      	push	{r7}
 8012128:	b083      	sub	sp, #12
 801212a:	af00      	add	r7, sp, #0
 801212c:	6078      	str	r0, [r7, #4]
 801212e:	460b      	mov	r3, r1
 8012130:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8012132:	887b      	ldrh	r3, [r7, #2]
 8012134:	011b      	lsls	r3, r3, #4
 8012136:	3308      	adds	r3, #8
 8012138:	687a      	ldr	r2, [r7, #4]
 801213a:	4413      	add	r3, r2
    }
 801213c:	4618      	mov	r0, r3
 801213e:	370c      	adds	r7, #12
 8012140:	46bd      	mov	sp, r7
 8012142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012146:	4770      	bx	lr

08012148 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8012148:	b480      	push	{r7}
 801214a:	b083      	sub	sp, #12
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
 8012150:	460b      	mov	r3, r1
 8012152:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8012154:	887b      	ldrh	r3, [r7, #2]
 8012156:	011b      	lsls	r3, r3, #4
 8012158:	3308      	adds	r3, #8
 801215a:	687a      	ldr	r2, [r7, #4]
 801215c:	4413      	add	r3, r2
    }
 801215e:	4618      	mov	r0, r3
 8012160:	370c      	adds	r7, #12
 8012162:	46bd      	mov	sp, r7
 8012164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012168:	4770      	bx	lr

0801216a <_GLOBAL__sub_I_touchgfx_init>:
 801216a:	b580      	push	{r7, lr}
 801216c:	af00      	add	r7, sp, #0
 801216e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012172:	2001      	movs	r0, #1
 8012174:	f7ff fefe 	bl	8011f74 <_Z41__static_initialization_and_destruction_0ii>
 8012178:	bd80      	pop	{r7, pc}

0801217a <_GLOBAL__sub_D_touchgfx_init>:
 801217a:	b580      	push	{r7, lr}
 801217c:	af00      	add	r7, sp, #0
 801217e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012182:	2000      	movs	r0, #0
 8012184:	f7ff fef6 	bl	8011f74 <_Z41__static_initialization_and_destruction_0ii>
 8012188:	bd80      	pop	{r7, pc}
	...

0801218c <_ZN8touchgfx20FrameBufferAllocatorD1Ev>:
     * transferred and ready to reuse.
     */
    virtual void freeBlockAfterTransfer() = 0;

    /** Finalizes an instance of the FrameBufferAllocator class. */
    virtual ~FrameBufferAllocator()
 801218c:	b480      	push	{r7}
 801218e:	b083      	sub	sp, #12
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
    {
 8012194:	4a04      	ldr	r2, [pc, #16]	; (80121a8 <_ZN8touchgfx20FrameBufferAllocatorD1Ev+0x1c>)
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	601a      	str	r2, [r3, #0]
    }
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	4618      	mov	r0, r3
 801219e:	370c      	adds	r7, #12
 80121a0:	46bd      	mov	sp, r7
 80121a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a6:	4770      	bx	lr
 80121a8:	0802e128 	.word	0x0802e128

080121ac <_ZN8touchgfx20FrameBufferAllocatorD0Ev>:
    virtual ~FrameBufferAllocator()
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b082      	sub	sp, #8
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
    }
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	f7ff ffe9 	bl	801218c <_ZN8touchgfx20FrameBufferAllocatorD1Ev>
 80121ba:	2104      	movs	r1, #4
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	f015 fbed 	bl	802799c <_ZdlPvj>
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	4618      	mov	r0, r3
 80121c6:	3708      	adds	r7, #8
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}

080121cc <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80121cc:	b480      	push	{r7}
 80121ce:	b083      	sub	sp, #12
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80121da:	3301      	adds	r3, #1
 80121dc:	b2da      	uxtb	r2, r3
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80121e4:	bf00      	nop
 80121e6:	370c      	adds	r7, #12
 80121e8:	46bd      	mov	sp, r7
 80121ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ee:	4770      	bx	lr

080121f0 <_ZN8touchgfx3HAL23setFrameBufferAllocatorEPNS_20FrameBufferAllocatorE>:
    void setFrameBufferAllocator(FrameBufferAllocator* allocator)
 80121f0:	b480      	push	{r7}
 80121f2:	b083      	sub	sp, #12
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
 80121f8:	6039      	str	r1, [r7, #0]
        frameBufferAllocator = allocator;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	683a      	ldr	r2, [r7, #0]
 80121fe:	619a      	str	r2, [r3, #24]
    }
 8012200:	bf00      	nop
 8012202:	370c      	adds	r7, #12
 8012204:	46bd      	mov	sp, r7
 8012206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220a:	4770      	bx	lr

0801220c <_ZN8touchgfx3HAL23getFrameBufferAllocatorEv>:
    FrameBufferAllocator* getFrameBufferAllocator()
 801220c:	b480      	push	{r7}
 801220e:	b083      	sub	sp, #12
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
        return frameBufferAllocator;
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	699b      	ldr	r3, [r3, #24]
    }
 8012218:	4618      	mov	r0, r3
 801221a:	370c      	adds	r7, #12
 801221c:	46bd      	mov	sp, r7
 801221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012222:	4770      	bx	lr

08012224 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8012224:	b580      	push	{r7, lr}
 8012226:	b082      	sub	sp, #8
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
 801222c:	460b      	mov	r3, r1
 801222e:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8012230:	78fb      	ldrb	r3, [r7, #3]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d002      	beq.n	801223c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8012236:	78fb      	ldrb	r3, [r7, #3]
 8012238:	2b02      	cmp	r3, #2
 801223a:	d105      	bne.n	8012248 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	78fa      	ldrb	r2, [r7, #3]
 8012240:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8012244:	2301      	movs	r3, #1
 8012246:	e027      	b.n	8012298 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8012248:	78fb      	ldrb	r3, [r7, #3]
 801224a:	2b01      	cmp	r3, #1
 801224c:	d123      	bne.n	8012296 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012252:	2b00      	cmp	r3, #0
 8012254:	d014      	beq.n	8012280 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	339c      	adds	r3, #156	; 0x9c
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	6878      	ldr	r0, [r7, #4]
 8012260:	4798      	blx	r3
 8012262:	4603      	mov	r3, r0
 8012264:	461a      	mov	r2, r3
 8012266:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801226a:	429a      	cmp	r2, r3
 801226c:	d008      	beq.n	8012280 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801226e:	4b0c      	ldr	r3, [pc, #48]	; (80122a0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8012270:	781b      	ldrb	r3, [r3, #0]
 8012272:	f083 0301 	eor.w	r3, r3, #1
 8012276:	b2db      	uxtb	r3, r3
 8012278:	2b00      	cmp	r3, #0
 801227a:	d001      	beq.n	8012280 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801227c:	2301      	movs	r3, #1
 801227e:	e000      	b.n	8012282 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8012280:	2300      	movs	r3, #0
 8012282:	2b00      	cmp	r3, #0
 8012284:	d005      	beq.n	8012292 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	78fa      	ldrb	r2, [r7, #3]
 801228a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 801228e:	2301      	movs	r3, #1
 8012290:	e002      	b.n	8012298 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8012292:	2300      	movs	r3, #0
 8012294:	e000      	b.n	8012298 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8012296:	2300      	movs	r3, #0
    }
 8012298:	4618      	mov	r0, r3
 801229a:	3708      	adds	r7, #8
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}
 80122a0:	2000c43a 	.word	0x2000c43a

080122a4 <_ZN8touchgfx5paint6rgb5658tearDownEv>:
{
    blendL8CLUT = data;
}

void tearDown(void)
{
 80122a4:	b480      	push	{r7}
 80122a6:	af00      	add	r7, sp, #0
}
 80122a8:	bf00      	nop
 80122aa:	46bd      	mov	sp, r7
 80122ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b0:	4770      	bx	lr
	...

080122b4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:

void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
 80122b4:	b480      	push	{r7}
 80122b6:	b08b      	sub	sp, #44	; 0x2c
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	60f8      	str	r0, [r7, #12]
 80122bc:	60b9      	str	r1, [r7, #8]
 80122be:	607a      	str	r2, [r7, #4]
 80122c0:	70fb      	strb	r3, [r7, #3]
    uint16_t* framebuffer = ptr;
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	627b      	str	r3, [r7, #36]	; 0x24
    const uint16_t* const lineEnd = framebuffer + count;
 80122c6:	68bb      	ldr	r3, [r7, #8]
 80122c8:	005b      	lsls	r3, r3, #1
 80122ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122cc:	4413      	add	r3, r2
 80122ce:	623b      	str	r3, [r7, #32]
    if (alpha == 0xFF)
 80122d0:	78fb      	ldrb	r3, [r7, #3]
 80122d2:	2bff      	cmp	r3, #255	; 0xff
 80122d4:	d110      	bne.n	80122f8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x44>
    {
        do
        {
            *framebuffer = color565;
 80122d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122d8:	b29a      	uxth	r2, r3
 80122da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122dc:	801a      	strh	r2, [r3, #0]
        } while (++framebuffer < lineEnd);
 80122de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e0:	3302      	adds	r3, #2
 80122e2:	627b      	str	r3, [r7, #36]	; 0x24
 80122e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122e6:	6a3b      	ldr	r3, [r7, #32]
 80122e8:	429a      	cmp	r2, r3
 80122ea:	bf34      	ite	cc
 80122ec:	2301      	movcc	r3, #1
 80122ee:	2300      	movcs	r3, #0
 80122f0:	b2db      	uxtb	r3, r3
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d079      	beq.n	80123ea <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x136>
        do
 80122f6:	e7ee      	b.n	80122d6 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x22>
    }
    else
    {
        do
        {
            *framebuffer = alphaBlend(color565, *framebuffer, alpha);
 80122f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122fa:	b29a      	uxth	r2, r3
 80122fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122fe:	881b      	ldrh	r3, [r3, #0]
 8012300:	83fa      	strh	r2, [r7, #30]
 8012302:	83bb      	strh	r3, [r7, #28]
 8012304:	78fb      	ldrb	r3, [r7, #3]
 8012306:	76fb      	strb	r3, [r7, #27]
 *
 * @return The result of blending the two colors into a new color.
 */
FORCE_INLINE_FUNCTION uint16_t alphaBlend(uint16_t newpix, uint16_t bufpix, uint8_t alpha)
{
    return alphaBlend(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha);
 8012308:	8bfb      	ldrh	r3, [r7, #30]
 801230a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801230e:	f023 0307 	bic.w	r3, r3, #7
 8012312:	b299      	uxth	r1, r3
 8012314:	8bfb      	ldrh	r3, [r7, #30]
 8012316:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801231a:	b29a      	uxth	r2, r3
 801231c:	8bfb      	ldrh	r3, [r7, #30]
 801231e:	f003 031f 	and.w	r3, r3, #31
 8012322:	b29b      	uxth	r3, r3
 8012324:	8339      	strh	r1, [r7, #24]
 8012326:	82fa      	strh	r2, [r7, #22]
 8012328:	82bb      	strh	r3, [r7, #20]
 801232a:	8bbb      	ldrh	r3, [r7, #28]
 801232c:	827b      	strh	r3, [r7, #18]
 801232e:	7efb      	ldrb	r3, [r7, #27]
 8012330:	747b      	strb	r3, [r7, #17]
    const uint8_t ialpha = 0xFF - alpha;
 8012332:	7c7b      	ldrb	r3, [r7, #17]
 8012334:	43db      	mvns	r3, r3
 8012336:	743b      	strb	r3, [r7, #16]
    return (((R * alpha + (bufpix & RMASK) * ialpha) / 255) & RMASK) |
 8012338:	8b3b      	ldrh	r3, [r7, #24]
 801233a:	7c7a      	ldrb	r2, [r7, #17]
 801233c:	fb03 f202 	mul.w	r2, r3, r2
 8012340:	8a7b      	ldrh	r3, [r7, #18]
 8012342:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8012346:	7c39      	ldrb	r1, [r7, #16]
 8012348:	fb01 f303 	mul.w	r3, r1, r3
 801234c:	4413      	add	r3, r2
 801234e:	4a2a      	ldr	r2, [pc, #168]	; (80123f8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x144>)
 8012350:	fb82 1203 	smull	r1, r2, r2, r3
 8012354:	441a      	add	r2, r3
 8012356:	11d2      	asrs	r2, r2, #7
 8012358:	17db      	asrs	r3, r3, #31
 801235a:	1ad3      	subs	r3, r2, r3
 801235c:	b21b      	sxth	r3, r3
 801235e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8012362:	f023 0307 	bic.w	r3, r3, #7
 8012366:	b21a      	sxth	r2, r3
           (((G * alpha + (bufpix & GMASK) * ialpha) / 255) & GMASK) |
 8012368:	8afb      	ldrh	r3, [r7, #22]
 801236a:	7c79      	ldrb	r1, [r7, #17]
 801236c:	fb03 f101 	mul.w	r1, r3, r1
 8012370:	8a7b      	ldrh	r3, [r7, #18]
 8012372:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8012376:	7c38      	ldrb	r0, [r7, #16]
 8012378:	fb00 f303 	mul.w	r3, r0, r3
 801237c:	440b      	add	r3, r1
 801237e:	491e      	ldr	r1, [pc, #120]	; (80123f8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x144>)
 8012380:	fb81 0103 	smull	r0, r1, r1, r3
 8012384:	4419      	add	r1, r3
 8012386:	11c9      	asrs	r1, r1, #7
 8012388:	17db      	asrs	r3, r3, #31
 801238a:	1acb      	subs	r3, r1, r3
 801238c:	b21b      	sxth	r3, r3
 801238e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8012392:	b21b      	sxth	r3, r3
    return (((R * alpha + (bufpix & RMASK) * ialpha) / 255) & RMASK) |
 8012394:	4313      	orrs	r3, r2
 8012396:	b21a      	sxth	r2, r3
           (((B * alpha + (bufpix & BMASK) * ialpha) / 255) & BMASK);
 8012398:	8abb      	ldrh	r3, [r7, #20]
 801239a:	7c79      	ldrb	r1, [r7, #17]
 801239c:	fb03 f101 	mul.w	r1, r3, r1
 80123a0:	8a7b      	ldrh	r3, [r7, #18]
 80123a2:	f003 031f 	and.w	r3, r3, #31
 80123a6:	7c38      	ldrb	r0, [r7, #16]
 80123a8:	fb00 f303 	mul.w	r3, r0, r3
 80123ac:	440b      	add	r3, r1
 80123ae:	4912      	ldr	r1, [pc, #72]	; (80123f8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x144>)
 80123b0:	fb81 0103 	smull	r0, r1, r1, r3
 80123b4:	4419      	add	r1, r3
 80123b6:	11c9      	asrs	r1, r1, #7
 80123b8:	17db      	asrs	r3, r3, #31
 80123ba:	1acb      	subs	r3, r1, r3
 80123bc:	b21b      	sxth	r3, r3
 80123be:	f003 031f 	and.w	r3, r3, #31
 80123c2:	b21b      	sxth	r3, r3
           (((G * alpha + (bufpix & GMASK) * ialpha) / 255) & GMASK) |
 80123c4:	4313      	orrs	r3, r2
 80123c6:	b21b      	sxth	r3, r3
           (((B * alpha + (bufpix & BMASK) * ialpha) / 255) & BMASK);
 80123c8:	b29a      	uxth	r2, r3
    return alphaBlend(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha);
 80123ca:	bf00      	nop
 80123cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ce:	801a      	strh	r2, [r3, #0]
        } while (++framebuffer < lineEnd);
 80123d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d2:	3302      	adds	r3, #2
 80123d4:	627b      	str	r3, [r7, #36]	; 0x24
 80123d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123d8:	6a3b      	ldr	r3, [r7, #32]
 80123da:	429a      	cmp	r2, r3
 80123dc:	bf34      	ite	cc
 80123de:	2301      	movcc	r3, #1
 80123e0:	2300      	movcs	r3, #0
 80123e2:	b2db      	uxtb	r3, r3
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d000      	beq.n	80123ea <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x136>
        do
 80123e8:	e786      	b.n	80122f8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x44>
    }
}
 80123ea:	bf00      	nop
 80123ec:	372c      	adds	r7, #44	; 0x2c
 80123ee:	46bd      	mov	sp, r7
 80123f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f4:	4770      	bx	lr
 80123f6:	bf00      	nop
 80123f8:	80808081 	.word	0x80808081

080123fc <_ZN20TouchGFXGeneratedHAL10initializeEv>:
                   3, /* number of blocks */
                   2  /* bytes per pixel */
                   > blockAllocator;

void TouchGFXGeneratedHAL::initialize()
{
 80123fc:	b5b0      	push	{r4, r5, r7, lr}
 80123fe:	b082      	sub	sp, #8
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	4618      	mov	r0, r3
 8012408:	f001 fb4f 	bl	8013aaa <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 801240c:	687d      	ldr	r5, [r7, #4]
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	3364      	adds	r3, #100	; 0x64
 8012414:	681c      	ldr	r4, [r3, #0]
 8012416:	f005 ff05 	bl	8018224 <_ZN8touchgfx11Application11getInstanceEv>
 801241a:	4603      	mov	r3, r0
 801241c:	4619      	mov	r1, r3
 801241e:	4628      	mov	r0, r5
 8012420:	47a0      	blx	r4
    // Partial framebuffer strategy
    setFrameBufferAllocator(&blockAllocator);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	4906      	ldr	r1, [pc, #24]	; (8012440 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8012426:	4618      	mov	r0, r3
 8012428:	f7ff fee2 	bl	80121f0 <_ZN8touchgfx3HAL23setFrameBufferAllocatorEPNS_20FrameBufferAllocatorE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	2102      	movs	r1, #2
 8012430:	4618      	mov	r0, r3
 8012432:	f7ff fef7 	bl	8012224 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
}
 8012436:	bf00      	nop
 8012438:	3708      	adds	r7, #8
 801243a:	46bd      	mov	sp, r7
 801243c:	bdb0      	pop	{r4, r5, r7, pc}
 801243e:	bf00      	nop
 8012440:	2000ad88 	.word	0x2000ad88

08012444 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8012444:	b480      	push	{r7}
 8012446:	b083      	sub	sp, #12
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
}
 801244c:	bf00      	nop
 801244e:	370c      	adds	r7, #12
 8012450:	46bd      	mov	sp, r7
 8012452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012456:	4770      	bx	lr

08012458 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8012458:	b480      	push	{r7}
 801245a:	b083      	sub	sp, #12
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
}
 8012460:	bf00      	nop
 8012462:	370c      	adds	r7, #12
 8012464:	46bd      	mov	sp, r7
 8012466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246a:	4770      	bx	lr

0801246c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 801246c:	b480      	push	{r7}
 801246e:	b083      	sub	sp, #12
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
}
 8012474:	bf00      	nop
 8012476:	370c      	adds	r7, #12
 8012478:	46bd      	mov	sp, r7
 801247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247e:	4770      	bx	lr

08012480 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8012480:	b480      	push	{r7}
 8012482:	b083      	sub	sp, #12
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
}
 8012488:	bf00      	nop
 801248a:	370c      	adds	r7, #12
 801248c:	46bd      	mov	sp, r7
 801248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012492:	4770      	bx	lr

08012494 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b082      	sub	sp, #8
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	4618      	mov	r0, r3
 80124a0:	f001 faea 	bl	8013a78 <_ZN8touchgfx3HAL10beginFrameEv>
 80124a4:	4603      	mov	r3, r0
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	3708      	adds	r7, #8
 80124aa:	46bd      	mov	sp, r7
 80124ac:	bd80      	pop	{r7, pc}

080124ae <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80124ae:	b580      	push	{r7, lr}
 80124b0:	b082      	sub	sp, #8
 80124b2:	af00      	add	r7, sp, #0
 80124b4:	6078      	str	r0, [r7, #4]
    // We must guard the next frame until we're done transferring all blocks over our display interface
    // through either a semaphore if user is running an OS or a simple variable if not
    // Wait until all blocks have been transmitted
    while(touchgfxDisplayDriverTransmitActive()){}
 80124b6:	f7fe ff8d 	bl	80113d4 <touchgfxDisplayDriverTransmitActive>
 80124ba:	4603      	mov	r3, r0
 80124bc:	2b00      	cmp	r3, #0
 80124be:	bf14      	ite	ne
 80124c0:	2301      	movne	r3, #1
 80124c2:	2300      	moveq	r3, #0
 80124c4:	b2db      	uxtb	r3, r3
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d000      	beq.n	80124cc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x1e>
 80124ca:	e7f4      	b.n	80124b6 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x8>

    HAL::endFrame();
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	4618      	mov	r0, r3
 80124d0:	f001 fade 	bl	8013a90 <_ZN8touchgfx3HAL8endFrameEv>
}
 80124d4:	bf00      	nop
 80124d6:	3708      	adds	r7, #8
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    fbPtr += rect.y * lcd().framebufferStride() + rect.x * 2;
    return fbPtr;
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80124dc:	b480      	push	{r7}
 80124de:	b083      	sub	sp, #12
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
    //getTFTFrameBuffer() not used for selected Frame Buffer Strategy
    return 0;
 80124e4:	2300      	movs	r3, #0
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	370c      	adds	r7, #12
 80124ea:	46bd      	mov	sp, r7
 80124ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f0:	4770      	bx	lr

080124f2 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80124f2:	b480      	push	{r7}
 80124f4:	b083      	sub	sp, #12
 80124f6:	af00      	add	r7, sp, #0
 80124f8:	6078      	str	r0, [r7, #4]
 80124fa:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 80124fc:	bf00      	nop
 80124fe:	370c      	adds	r7, #12
 8012500:	46bd      	mov	sp, r7
 8012502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012506:	4770      	bx	lr

08012508 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b088      	sub	sp, #32
 801250c:	af02      	add	r7, sp, #8
 801250e:	6078      	str	r0, [r7, #4]
 8012510:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	6839      	ldr	r1, [r7, #0]
 8012516:	4618      	mov	r0, r3
 8012518:	f001 fa78 	bl	8013a0c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // Once flushFrameBuffer() is called by the framework a block is already for transfer
    // Mark it ready for transfer and transmit it if user defined method isTransmittingData() does not return false
    // If data is not being transmitted, transfer the data with user defined method transmitFrameBufferBlock().
    frameBufferAllocator->markBlockReadyForTransfer();
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	699a      	ldr	r2, [r3, #24]
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	699b      	ldr	r3, [r3, #24]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	3304      	adds	r3, #4
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	4610      	mov	r0, r2
 801252c:	4798      	blx	r3
    if (!touchgfxDisplayDriverTransmitActive())
 801252e:	f7fe ff51 	bl	80113d4 <touchgfxDisplayDriverTransmitActive>
 8012532:	4603      	mov	r3, r0
 8012534:	2b00      	cmp	r3, #0
 8012536:	bf0c      	ite	eq
 8012538:	2301      	moveq	r3, #1
 801253a:	2300      	movne	r3, #0
 801253c:	b2db      	uxtb	r3, r3
 801253e:	2b00      	cmp	r3, #0
 8012540:	d021      	beq.n	8012586 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x7e>
    {
        touchgfx::Rect r;
 8012542:	f107 030c 	add.w	r3, r7, #12
 8012546:	4618      	mov	r0, r3
 8012548:	f7fa fd43 	bl	800cfd2 <_ZN8touchgfx4RectC1Ev>
        // Get pointer to block buffer and coordinates of the rect
        const uint8_t* pixels = frameBufferAllocator->getBlockForTransfer(r);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	699a      	ldr	r2, [r3, #24]
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	699b      	ldr	r3, [r3, #24]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	330c      	adds	r3, #12
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	f107 010c 	add.w	r1, r7, #12
 801255e:	4610      	mov	r0, r2
 8012560:	4798      	blx	r3
 8012562:	6178      	str	r0, [r7, #20]
        // Start transmission of the block
        touchgfxDisplayDriverTransmitBlock((uint8_t*)pixels, r.x, r.y, r.width, r.height);
 8012564:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012568:	b299      	uxth	r1, r3
 801256a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801256e:	b29a      	uxth	r2, r3
 8012570:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012574:	b298      	uxth	r0, r3
 8012576:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801257a:	b29b      	uxth	r3, r3
 801257c:	9300      	str	r3, [sp, #0]
 801257e:	4603      	mov	r3, r0
 8012580:	6978      	ldr	r0, [r7, #20]
 8012582:	f7fe ff33 	bl	80113ec <touchgfxDisplayDriverTransmitBlock>
    }
}
 8012586:	bf00      	nop
 8012588:	3718      	adds	r7, #24
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}

0801258e <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 801258e:	b580      	push	{r7, lr}
 8012590:	b084      	sub	sp, #16
 8012592:	af00      	add	r7, sp, #0
 8012594:	60f8      	str	r0, [r7, #12]
 8012596:	60b9      	str	r1, [r7, #8]
 8012598:	607a      	str	r2, [r7, #4]
 801259a:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 801259c:	68f8      	ldr	r0, [r7, #12]
 801259e:	683b      	ldr	r3, [r7, #0]
 80125a0:	687a      	ldr	r2, [r7, #4]
 80125a2:	68b9      	ldr	r1, [r7, #8]
 80125a4:	f001 fb9b 	bl	8013cde <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 80125a8:	4603      	mov	r3, r0
}
 80125aa:	4618      	mov	r0, r3
 80125ac:	3710      	adds	r7, #16
 80125ae:	46bd      	mov	sp, r7
 80125b0:	bd80      	pop	{r7, pc}

080125b2 <_ZN8touchgfx34FrameBufferAllocatorWaitOnTransferEv>:
/**
 * This function is called by FrameBufferAllocator if no block is
 * available.
 */
__weak void FrameBufferAllocatorWaitOnTransfer()
{
 80125b2:	b480      	push	{r7}
 80125b4:	af00      	add	r7, sp, #0
  /* NOTE: This function should not be modified, when the fuction is needed,
   *       FrameBufferAllocatorWaitOnTransfer should be implemented in the user file
   */
}
 80125b6:	bf00      	nop
 80125b8:	46bd      	mov	sp, r7
 80125ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125be:	4770      	bx	lr

080125c0 <_ZN8touchgfx36FrameBufferAllocatorSignalBlockDrawnEv>:
 * Called by FrameBufferAllocator when a block is drawn and
 * therefore ready for transfer. The LCD driver should use this
 * method to start a transfer.
 */
__weak void FrameBufferAllocatorSignalBlockDrawn()
{
 80125c0:	b480      	push	{r7}
 80125c2:	af00      	add	r7, sp, #0
  /* NOTE: This function should not be modified, when the fuction is needed,
   *       FrameBufferAllocatorSignalBlockDrawn should be implemented in the user file
   */
}
 80125c4:	bf00      	nop
 80125c6:	46bd      	mov	sp, r7
 80125c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125cc:	4770      	bx	lr

080125ce <_ZN8touchgfx16startNewTransferEv>:

// A user must call touchgfx::startNewTransfer(); once transmitFrameBufferBlock() has successfully sent a block.
void startNewTransfer()
{
 80125ce:	b580      	push	{r7, lr}
 80125d0:	b086      	sub	sp, #24
 80125d2:	af02      	add	r7, sp, #8
    FrameBufferAllocator* fba = HAL::getInstance()->getFrameBufferAllocator();
 80125d4:	f7fa f84e 	bl	800c674 <_ZN8touchgfx3HAL11getInstanceEv>
 80125d8:	4603      	mov	r3, r0
 80125da:	4618      	mov	r0, r3
 80125dc:	f7ff fe16 	bl	801220c <_ZN8touchgfx3HAL23getFrameBufferAllocatorEv>
 80125e0:	60f8      	str	r0, [r7, #12]

  // Free the previous transmitted block, marking it ready for rendering
    fba->freeBlockAfterTransfer();
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	3318      	adds	r3, #24
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	68f8      	ldr	r0, [r7, #12]
 80125ec:	4798      	blx	r3
    if (fba->hasBlockReadyForTransfer())
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	3308      	adds	r3, #8
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	68f8      	ldr	r0, [r7, #12]
 80125f8:	4798      	blx	r3
 80125fa:	4603      	mov	r3, r0
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d01d      	beq.n	801263c <_ZN8touchgfx16startNewTransferEv+0x6e>
    {
        touchgfx::Rect r;
 8012600:	463b      	mov	r3, r7
 8012602:	4618      	mov	r0, r3
 8012604:	f7fa fce5 	bl	800cfd2 <_ZN8touchgfx4RectC1Ev>
        // Get pointer to block buffer and coordinates of the rect
        const uint8_t* pixels = fba->getBlockForTransfer(r);
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	330c      	adds	r3, #12
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	463a      	mov	r2, r7
 8012612:	4611      	mov	r1, r2
 8012614:	68f8      	ldr	r0, [r7, #12]
 8012616:	4798      	blx	r3
 8012618:	60b8      	str	r0, [r7, #8]
        // Start transmission of the block
        touchgfxDisplayDriverTransmitBlock((uint8_t*)pixels, r.x, r.y, r.width, r.height);
 801261a:	f9b7 3000 	ldrsh.w	r3, [r7]
 801261e:	b299      	uxth	r1, r3
 8012620:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012624:	b29a      	uxth	r2, r3
 8012626:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801262a:	b298      	uxth	r0, r3
 801262c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012630:	b29b      	uxth	r3, r3
 8012632:	9300      	str	r3, [sp, #0]
 8012634:	4603      	mov	r3, r0
 8012636:	68b8      	ldr	r0, [r7, #8]
 8012638:	f7fe fed8 	bl	80113ec <touchgfxDisplayDriverTransmitBlock>
    }
}
 801263c:	bf00      	nop
 801263e:	3710      	adds	r7, #16
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}

08012644 <DisplayDriver_TransferCompleteCallback>:

extern "C"
void DisplayDriver_TransferCompleteCallback()
{
 8012644:	b580      	push	{r7, lr}
 8012646:	af00      	add	r7, sp, #0
  // After completed transmission start new transfer if blocks are ready.
    touchgfx::startNewTransfer();
 8012648:	f7ff ffc1 	bl	80125ce <_ZN8touchgfx16startNewTransferEv>
}
 801264c:	bf00      	nop
 801264e:	bd80      	pop	{r7, pc}

08012650 <touchgfxSignalVSync>:
}

extern "C"
void touchgfxSignalVSync(void)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	af00      	add	r7, sp, #0
    /* VSync has occurred, increment TouchGFX engine vsync counter */
    touchgfx::HAL::getInstance()->vSync();
 8012654:	f7fa f80e 	bl	800c674 <_ZN8touchgfx3HAL11getInstanceEv>
 8012658:	4603      	mov	r3, r0
 801265a:	4618      	mov	r0, r3
 801265c:	f7ff fdb6 	bl	80121cc <_ZN8touchgfx3HAL5vSyncEv>

    /* VSync has occurred, signal TouchGFX engine */
    touchgfx::OSWrappers::signalVSync();
 8012660:	f7fe ff70 	bl	8011544 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
}
 8012664:	bf00      	nop
 8012666:	bd80      	pop	{r7, pc}

08012668 <_ZN8touchgfx20FrameBufferAllocatorC1Ev>:
class FrameBufferAllocator
 8012668:	b480      	push	{r7}
 801266a:	b083      	sub	sp, #12
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
 8012670:	4a04      	ldr	r2, [pc, #16]	; (8012684 <_ZN8touchgfx20FrameBufferAllocatorC1Ev+0x1c>)
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	601a      	str	r2, [r3, #0]
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	4618      	mov	r0, r3
 801267a:	370c      	adds	r7, #12
 801267c:	46bd      	mov	sp, r7
 801267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012682:	4770      	bx	lr
 8012684:	0802e128 	.word	0x0802e128

08012688 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev>:
 */
template <uint32_t block_size, uint32_t blocks, uint32_t bytes_pr_pixel>
class ManyBlockAllocator : public FrameBufferAllocator
{
public:
    ManyBlockAllocator()
 8012688:	b5b0      	push	{r4, r5, r7, lr}
 801268a:	b084      	sub	sp, #16
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
    {
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	4618      	mov	r0, r3
 8012694:	f7ff ffe8 	bl	8012668 <_ZN8touchgfx20FrameBufferAllocatorC1Ev>
 8012698:	4a1a      	ldr	r2, [pc, #104]	; (8012704 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x7c>)
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	601a      	str	r2, [r3, #0]
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80126a4:	3308      	adds	r3, #8
 80126a6:	2402      	movs	r4, #2
 80126a8:	461d      	mov	r5, r3
 80126aa:	2c00      	cmp	r4, #0
 80126ac:	db05      	blt.n	80126ba <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x32>
 80126ae:	4628      	mov	r0, r5
 80126b0:	f7fa fc8f 	bl	800cfd2 <_ZN8touchgfx4RectC1Ev>
 80126b4:	3508      	adds	r5, #8
 80126b6:	3c01      	subs	r4, #1
 80126b8:	e7f7      	b.n	80126aa <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x22>
        sendingBlock = -1;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80126c0:	461a      	mov	r2, r3
 80126c2:	f04f 33ff 	mov.w	r3, #4294967295
 80126c6:	f8c2 36a0 	str.w	r3, [r2, #1696]	; 0x6a0
        drawingBlock = -1;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80126d0:	461a      	mov	r2, r3
 80126d2:	f04f 33ff 	mov.w	r3, #4294967295
 80126d6:	f8c2 36a4 	str.w	r3, [r2, #1700]	; 0x6a4
        for (uint32_t i = 0; i < blocks; i++)
 80126da:	2300      	movs	r3, #0
 80126dc:	60fb      	str	r3, [r7, #12]
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	2b02      	cmp	r3, #2
 80126e2:	d809      	bhi.n	80126f8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x70>
        {
            state[i] = EMPTY;
 80126e4:	687a      	ldr	r2, [r7, #4]
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	4413      	add	r3, r2
 80126ea:	3304      	adds	r3, #4
 80126ec:	2200      	movs	r2, #0
 80126ee:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < blocks; i++)
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	3301      	adds	r3, #1
 80126f4:	60fb      	str	r3, [r7, #12]
 80126f6:	e7f2      	b.n	80126de <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x56>
        }
    }
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	4618      	mov	r0, r3
 80126fc:	3710      	adds	r7, #16
 80126fe:	46bd      	mov	sp, r7
 8012700:	bdb0      	pop	{r4, r5, r7, pc}
 8012702:	bf00      	nop
 8012704:	0802e024 	.word	0x0802e024

08012708 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev>:
class ManyBlockAllocator : public FrameBufferAllocator
 8012708:	b580      	push	{r7, lr}
 801270a:	b082      	sub	sp, #8
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
 8012710:	4a05      	ldr	r2, [pc, #20]	; (8012728 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev+0x20>)
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	601a      	str	r2, [r3, #0]
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	4618      	mov	r0, r3
 801271a:	f7ff fd37 	bl	801218c <_ZN8touchgfx20FrameBufferAllocatorD1Ev>
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	4618      	mov	r0, r3
 8012722:	3708      	adds	r7, #8
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}
 8012728:	0802e024 	.word	0x0802e024

0801272c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED0Ev>:
 801272c:	b580      	push	{r7, lr}
 801272e:	b082      	sub	sp, #8
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f7ff ffe7 	bl	8012708 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev>
 801273a:	f241 61a8 	movw	r1, #5800	; 0x16a8
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f015 f92c 	bl	802799c <_ZdlPvj>
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	4618      	mov	r0, r3
 8012748:	3708      	adds	r7, #8
 801274a:	46bd      	mov	sp, r7
 801274c:	bd80      	pop	{r7, pc}
	...

08012750 <_Z41__static_initialization_and_destruction_0ii>:
 8012750:	b580      	push	{r7, lr}
 8012752:	b082      	sub	sp, #8
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
 8012758:	6039      	str	r1, [r7, #0]
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	2b01      	cmp	r3, #1
 801275e:	d107      	bne.n	8012770 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012766:	4293      	cmp	r3, r2
 8012768:	d102      	bne.n	8012770 <_Z41__static_initialization_and_destruction_0ii+0x20>
                   > blockAllocator;
 801276a:	4809      	ldr	r0, [pc, #36]	; (8012790 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801276c:	f7ff ff8c 	bl	8012688 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev>
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d107      	bne.n	8012786 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8012776:	683b      	ldr	r3, [r7, #0]
 8012778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801277c:	4293      	cmp	r3, r2
 801277e:	d102      	bne.n	8012786 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8012780:	4803      	ldr	r0, [pc, #12]	; (8012790 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8012782:	f7ff ffc1 	bl	8012708 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev>
}
 8012786:	bf00      	nop
 8012788:	3708      	adds	r7, #8
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}
 801278e:	bf00      	nop
 8012790:	2000ad88 	.word	0x2000ad88

08012794 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh>:
     * @param          height The height of the block.
     * @param [in,out] block  Pointer to pointer to return the block address in.
     *
     * @return The height of the allocated block.
     */
    virtual uint16_t allocateBlock(const uint16_t x, const uint16_t y, const uint16_t width, const uint16_t height, uint8_t** block)
 8012794:	b580      	push	{r7, lr}
 8012796:	b086      	sub	sp, #24
 8012798:	af00      	add	r7, sp, #0
 801279a:	60f8      	str	r0, [r7, #12]
 801279c:	4608      	mov	r0, r1
 801279e:	4611      	mov	r1, r2
 80127a0:	461a      	mov	r2, r3
 80127a2:	4603      	mov	r3, r0
 80127a4:	817b      	strh	r3, [r7, #10]
 80127a6:	460b      	mov	r3, r1
 80127a8:	813b      	strh	r3, [r7, #8]
 80127aa:	4613      	mov	r3, r2
 80127ac:	80fb      	strh	r3, [r7, #6]
    {
        drawingBlock++;
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80127b4:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 80127b8:	3301      	adds	r3, #1
 80127ba:	68fa      	ldr	r2, [r7, #12]
 80127bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80127c0:	f8c2 36a4 	str.w	r3, [r2, #1700]	; 0x6a4
        if (drawingBlock == blocks)
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80127ca:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 80127ce:	2b03      	cmp	r3, #3
 80127d0:	d106      	bne.n	80127e0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x4c>
        {
            drawingBlock = 0;
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80127d8:	461a      	mov	r2, r3
 80127da:	2300      	movs	r3, #0
 80127dc:	f8c2 36a4 	str.w	r3, [r2, #1700]	; 0x6a4
        }
        while (state[drawingBlock] != EMPTY)
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80127e6:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 80127ea:	68fa      	ldr	r2, [r7, #12]
 80127ec:	4413      	add	r3, r2
 80127ee:	791b      	ldrb	r3, [r3, #4]
 80127f0:	b2db      	uxtb	r3, r3
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	bf14      	ite	ne
 80127f6:	2301      	movne	r3, #1
 80127f8:	2300      	moveq	r3, #0
 80127fa:	b2db      	uxtb	r3, r3
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d002      	beq.n	8012806 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x72>
        {
            FrameBufferAllocatorWaitOnTransfer();
 8012800:	f7ff fed7 	bl	80125b2 <_ZN8touchgfx34FrameBufferAllocatorWaitOnTransferEv>
        while (state[drawingBlock] != EMPTY)
 8012804:	e7ec      	b.n	80127e0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x4c>
        }
        assert(state[drawingBlock] == EMPTY);
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801280c:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8012810:	68fa      	ldr	r2, [r7, #12]
 8012812:	4413      	add	r3, r2
 8012814:	791b      	ldrb	r3, [r3, #4]
 8012816:	b2db      	uxtb	r3, r3
 8012818:	2b00      	cmp	r3, #0
 801281a:	d005      	beq.n	8012828 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x94>
 801281c:	4b38      	ldr	r3, [pc, #224]	; (8012900 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x16c>)
 801281e:	4a39      	ldr	r2, [pc, #228]	; (8012904 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x170>)
 8012820:	21aa      	movs	r1, #170	; 0xaa
 8012822:	4839      	ldr	r0, [pc, #228]	; (8012908 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x174>)
 8012824:	f015 f8e8 	bl	80279f8 <__assert_func>
        state[drawingBlock] = ALLOCATED;
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801282e:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8012832:	68fa      	ldr	r2, [r7, #12]
 8012834:	4413      	add	r3, r2
 8012836:	2201      	movs	r2, #1
 8012838:	711a      	strb	r2, [r3, #4]
        const int32_t stride = width * bytes_pr_pixel;
 801283a:	88fb      	ldrh	r3, [r7, #6]
 801283c:	005b      	lsls	r3, r3, #1
 801283e:	617b      	str	r3, [r7, #20]
        const int32_t lines = block_size / stride;
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8012846:	fbb2 f3f3 	udiv	r3, r2, r3
 801284a:	613b      	str	r3, [r7, #16]
        *block = (uint8_t*)&memory[drawingBlock][0];
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012852:	f8d3 26a4 	ldr.w	r2, [r3, #1700]	; 0x6a4
 8012856:	4613      	mov	r3, r2
 8012858:	011b      	lsls	r3, r3, #4
 801285a:	1a9b      	subs	r3, r3, r2
 801285c:	01db      	lsls	r3, r3, #7
 801285e:	3308      	adds	r3, #8
 8012860:	68fa      	ldr	r2, [r7, #12]
 8012862:	441a      	add	r2, r3
 8012864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012866:	601a      	str	r2, [r3, #0]
        blockRect[drawingBlock].x = x;
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801286e:	f8d3 26a4 	ldr.w	r2, [r3, #1700]	; 0x6a4
 8012872:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	f202 22d1 	addw	r2, r2, #721	; 0x2d1
 801287c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
        blockRect[drawingBlock].y = y;
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012886:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 801288a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 801288e:	68fa      	ldr	r2, [r7, #12]
 8012890:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 8012894:	00db      	lsls	r3, r3, #3
 8012896:	4413      	add	r3, r2
 8012898:	460a      	mov	r2, r1
 801289a:	805a      	strh	r2, [r3, #2]
        blockRect[drawingBlock].width = width;
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80128a2:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 80128a6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80128aa:	68fa      	ldr	r2, [r7, #12]
 80128ac:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 80128b0:	00db      	lsls	r3, r3, #3
 80128b2:	4413      	add	r3, r2
 80128b4:	460a      	mov	r2, r1
 80128b6:	809a      	strh	r2, [r3, #4]
        blockRect[drawingBlock].height = MIN(height, lines);
 80128b8:	8c3a      	ldrh	r2, [r7, #32]
 80128ba:	693b      	ldr	r3, [r7, #16]
 80128bc:	429a      	cmp	r2, r3
 80128be:	bfa8      	it	ge
 80128c0:	461a      	movge	r2, r3
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80128c8:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 80128cc:	b211      	sxth	r1, r2
 80128ce:	68fa      	ldr	r2, [r7, #12]
 80128d0:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 80128d4:	00db      	lsls	r3, r3, #3
 80128d6:	4413      	add	r3, r2
 80128d8:	460a      	mov	r2, r1
 80128da:	80da      	strh	r2, [r3, #6]
        return blockRect[drawingBlock].height;
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80128e2:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 80128e6:	68fa      	ldr	r2, [r7, #12]
 80128e8:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 80128ec:	00db      	lsls	r3, r3, #3
 80128ee:	4413      	add	r3, r2
 80128f0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80128f4:	b29b      	uxth	r3, r3
    }
 80128f6:	4618      	mov	r0, r3
 80128f8:	3718      	adds	r7, #24
 80128fa:	46bd      	mov	sp, r7
 80128fc:	bd80      	pop	{r7, pc}
 80128fe:	bf00      	nop
 8012900:	0802d0c4 	.word	0x0802d0c4
 8012904:	0802d0e4 	.word	0x0802d0e4
 8012908:	0802d218 	.word	0x0802d218

0801290c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv>:

    /** Marks a previously allocated block as ready to be transferred to the LCD. */
    virtual void markBlockReadyForTransfer()
 801290c:	b580      	push	{r7, lr}
 801290e:	b082      	sub	sp, #8
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
    {
        assert(state[drawingBlock] == ALLOCATED);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801291a:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 801291e:	687a      	ldr	r2, [r7, #4]
 8012920:	4413      	add	r3, r2
 8012922:	791b      	ldrb	r3, [r3, #4]
 8012924:	b2db      	uxtb	r3, r3
 8012926:	2b01      	cmp	r3, #1
 8012928:	d005      	beq.n	8012936 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x2a>
 801292a:	4b0a      	ldr	r3, [pc, #40]	; (8012954 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x48>)
 801292c:	4a0a      	ldr	r2, [pc, #40]	; (8012958 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x4c>)
 801292e:	21b9      	movs	r1, #185	; 0xb9
 8012930:	480a      	ldr	r0, [pc, #40]	; (801295c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x50>)
 8012932:	f015 f861 	bl	80279f8 <__assert_func>
        state[drawingBlock] = DRAWN;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801293c:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8012940:	687a      	ldr	r2, [r7, #4]
 8012942:	4413      	add	r3, r2
 8012944:	2202      	movs	r2, #2
 8012946:	711a      	strb	r2, [r3, #4]
        FrameBufferAllocatorSignalBlockDrawn();
 8012948:	f7ff fe3a 	bl	80125c0 <_ZN8touchgfx36FrameBufferAllocatorSignalBlockDrawnEv>
    }
 801294c:	bf00      	nop
 801294e:	3708      	adds	r7, #8
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}
 8012954:	0802d26c 	.word	0x0802d26c
 8012958:	0802d290 	.word	0x0802d290
 801295c:	0802d218 	.word	0x0802d218

08012960 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv>:
    /**
     * Check if a block is ready for transfer to the LCD.
     *
     * @return True if a block is ready for transfer.
     */
    virtual bool hasBlockReadyForTransfer()
 8012960:	b480      	push	{r7}
 8012962:	b085      	sub	sp, #20
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t i = 0; i < blocks; i++)
 8012968:	2300      	movs	r3, #0
 801296a:	60fb      	str	r3, [r7, #12]
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	2b02      	cmp	r3, #2
 8012970:	d812      	bhi.n	8012998 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0x38>
        {
            if (state[i] == DRAWN)
 8012972:	687a      	ldr	r2, [r7, #4]
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	4413      	add	r3, r2
 8012978:	3304      	adds	r3, #4
 801297a:	781b      	ldrb	r3, [r3, #0]
 801297c:	b2db      	uxtb	r3, r3
 801297e:	2b02      	cmp	r3, #2
 8012980:	bf0c      	ite	eq
 8012982:	2301      	moveq	r3, #1
 8012984:	2300      	movne	r3, #0
 8012986:	b2db      	uxtb	r3, r3
 8012988:	2b00      	cmp	r3, #0
 801298a:	d001      	beq.n	8012990 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0x30>
            {
                return true;
 801298c:	2301      	movs	r3, #1
 801298e:	e004      	b.n	801299a <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0x3a>
        for (uint32_t i = 0; i < blocks; i++)
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	3301      	adds	r3, #1
 8012994:	60fb      	str	r3, [r7, #12]
 8012996:	e7e9      	b.n	801296c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0xc>
            }
        }
        return false;
 8012998:	2300      	movs	r3, #0
    }
 801299a:	4618      	mov	r0, r3
 801299c:	3714      	adds	r7, #20
 801299e:	46bd      	mov	sp, r7
 80129a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a4:	4770      	bx	lr
	...

080129a8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE>:
     *
     * @param [in,out] rect Reference to rect to write block x, y, width, and height.
     *
     * @return Returns the address of the block ready for transfer.
     */
    virtual const uint8_t* getBlockForTransfer(Rect& rect)
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b082      	sub	sp, #8
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
 80129b0:	6039      	str	r1, [r7, #0]
    {
        sendingBlock++;
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80129b8:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 80129bc:	3301      	adds	r3, #1
 80129be:	687a      	ldr	r2, [r7, #4]
 80129c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80129c4:	f8c2 36a0 	str.w	r3, [r2, #1696]	; 0x6a0
        if (sendingBlock == blocks)
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80129ce:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 80129d2:	2b03      	cmp	r3, #3
 80129d4:	d106      	bne.n	80129e4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x3c>
        {
            sendingBlock = 0;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80129dc:	461a      	mov	r2, r3
 80129de:	2300      	movs	r3, #0
 80129e0:	f8c2 36a0 	str.w	r3, [r2, #1696]	; 0x6a0
        }
        assert(state[sendingBlock] == DRAWN);
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80129ea:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 80129ee:	687a      	ldr	r2, [r7, #4]
 80129f0:	4413      	add	r3, r2
 80129f2:	791b      	ldrb	r3, [r3, #4]
 80129f4:	b2db      	uxtb	r3, r3
 80129f6:	2b02      	cmp	r3, #2
 80129f8:	d005      	beq.n	8012a06 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x5e>
 80129fa:	4b16      	ldr	r3, [pc, #88]	; (8012a54 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xac>)
 80129fc:	4a16      	ldr	r2, [pc, #88]	; (8012a58 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xb0>)
 80129fe:	21dd      	movs	r1, #221	; 0xdd
 8012a00:	4816      	ldr	r0, [pc, #88]	; (8012a5c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xb4>)
 8012a02:	f014 fff9 	bl	80279f8 <__assert_func>
        rect = blockRect[sendingBlock];
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012a0c:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8012a10:	683a      	ldr	r2, [r7, #0]
 8012a12:	6879      	ldr	r1, [r7, #4]
 8012a14:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 8012a18:	00db      	lsls	r3, r3, #3
 8012a1a:	440b      	add	r3, r1
 8012a1c:	cb03      	ldmia	r3!, {r0, r1}
 8012a1e:	6010      	str	r0, [r2, #0]
 8012a20:	6051      	str	r1, [r2, #4]
        state[sendingBlock] = SENDING;
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012a28:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8012a2c:	687a      	ldr	r2, [r7, #4]
 8012a2e:	4413      	add	r3, r2
 8012a30:	2203      	movs	r2, #3
 8012a32:	711a      	strb	r2, [r3, #4]
        return (const uint8_t*)&memory[sendingBlock][0];
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012a3a:	f8d3 26a0 	ldr.w	r2, [r3, #1696]	; 0x6a0
 8012a3e:	4613      	mov	r3, r2
 8012a40:	011b      	lsls	r3, r3, #4
 8012a42:	1a9b      	subs	r3, r3, r2
 8012a44:	01db      	lsls	r3, r3, #7
 8012a46:	3308      	adds	r3, #8
 8012a48:	687a      	ldr	r2, [r7, #4]
 8012a4a:	4413      	add	r3, r2
    }
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	3708      	adds	r7, #8
 8012a50:	46bd      	mov	sp, r7
 8012a52:	bd80      	pop	{r7, pc}
 8012a54:	0802d364 	.word	0x0802d364
 8012a58:	0802d384 	.word	0x0802d384
 8012a5c:	0802d218 	.word	0x0802d218

08012a60 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv>:

    virtual const Rect& peekBlockForTransfer()
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b084      	sub	sp, #16
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
    {
        int nextSendingBlock = sendingBlock + 1;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012a6e:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8012a72:	3301      	adds	r3, #1
 8012a74:	60fb      	str	r3, [r7, #12]
        if (nextSendingBlock == blocks)
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	2b03      	cmp	r3, #3
 8012a7a:	d101      	bne.n	8012a80 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x20>
        {
            nextSendingBlock = 0;
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	60fb      	str	r3, [r7, #12]
        }
        assert(state[nextSendingBlock] == DRAWN);
 8012a80:	687a      	ldr	r2, [r7, #4]
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	4413      	add	r3, r2
 8012a86:	3304      	adds	r3, #4
 8012a88:	781b      	ldrb	r3, [r3, #0]
 8012a8a:	b2db      	uxtb	r3, r3
 8012a8c:	2b02      	cmp	r3, #2
 8012a8e:	d005      	beq.n	8012a9c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x3c>
 8012a90:	4b07      	ldr	r3, [pc, #28]	; (8012ab0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x50>)
 8012a92:	4a08      	ldr	r2, [pc, #32]	; (8012ab4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x54>)
 8012a94:	21ea      	movs	r1, #234	; 0xea
 8012a96:	4808      	ldr	r0, [pc, #32]	; (8012ab8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x58>)
 8012a98:	f014 ffae 	bl	80279f8 <__assert_func>
        return blockRect[nextSendingBlock];
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 8012aa2:	00db      	lsls	r3, r3, #3
 8012aa4:	687a      	ldr	r2, [r7, #4]
 8012aa6:	4413      	add	r3, r2
    }
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3710      	adds	r7, #16
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}
 8012ab0:	0802d484 	.word	0x0802d484
 8012ab4:	0802d4a8 	.word	0x0802d4a8
 8012ab8:	0802d218 	.word	0x0802d218

08012abc <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13hasEmptyBlockEv>:

    virtual bool hasEmptyBlock()
 8012abc:	b480      	push	{r7}
 8012abe:	b085      	sub	sp, #20
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
    {
        int nextDrawingBlock = drawingBlock + 1;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012aca:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8012ace:	3301      	adds	r3, #1
 8012ad0:	60fb      	str	r3, [r7, #12]
        if (nextDrawingBlock == blocks)
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	2b03      	cmp	r3, #3
 8012ad6:	d101      	bne.n	8012adc <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13hasEmptyBlockEv+0x20>
        {
            nextDrawingBlock = 0;
 8012ad8:	2300      	movs	r3, #0
 8012ada:	60fb      	str	r3, [r7, #12]
        }
        return (state[nextDrawingBlock] == EMPTY);
 8012adc:	687a      	ldr	r2, [r7, #4]
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	4413      	add	r3, r2
 8012ae2:	3304      	adds	r3, #4
 8012ae4:	781b      	ldrb	r3, [r3, #0]
 8012ae6:	b2db      	uxtb	r3, r3
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	bf0c      	ite	eq
 8012aec:	2301      	moveq	r3, #1
 8012aee:	2300      	movne	r3, #0
 8012af0:	b2db      	uxtb	r3, r3
    }
 8012af2:	4618      	mov	r0, r3
 8012af4:	3714      	adds	r7, #20
 8012af6:	46bd      	mov	sp, r7
 8012af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afc:	4770      	bx	lr
	...

08012b00 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv>:
    /**
     * Free a block after transfer to the LCD.
     *
     * Marks a previously allocated block as transferred and ready to reuse.
     */
    virtual void freeBlockAfterTransfer()
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b082      	sub	sp, #8
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
    {
        assert(state[sendingBlock] == SENDING);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012b0e:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8012b12:	687a      	ldr	r2, [r7, #4]
 8012b14:	4413      	add	r3, r2
 8012b16:	791b      	ldrb	r3, [r3, #4]
 8012b18:	b2db      	uxtb	r3, r3
 8012b1a:	2b03      	cmp	r3, #3
 8012b1c:	d005      	beq.n	8012b2a <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x2a>
 8012b1e:	4b09      	ldr	r3, [pc, #36]	; (8012b44 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x44>)
 8012b20:	4a09      	ldr	r2, [pc, #36]	; (8012b48 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x48>)
 8012b22:	21ff      	movs	r1, #255	; 0xff
 8012b24:	4809      	ldr	r0, [pc, #36]	; (8012b4c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x4c>)
 8012b26:	f014 ff67 	bl	80279f8 <__assert_func>
        state[sendingBlock] = EMPTY;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012b30:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8012b34:	687a      	ldr	r2, [r7, #4]
 8012b36:	4413      	add	r3, r2
 8012b38:	2200      	movs	r2, #0
 8012b3a:	711a      	strb	r2, [r3, #4]
    }
 8012b3c:	bf00      	nop
 8012b3e:	3708      	adds	r7, #8
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}
 8012b44:	0802d588 	.word	0x0802d588
 8012b48:	0802d5a8 	.word	0x0802d5a8
 8012b4c:	0802d218 	.word	0x0802d218

08012b50 <_GLOBAL__sub_I__ZN8touchgfx5paint6rgb56511blendL8CLUTE>:
 8012b50:	b580      	push	{r7, lr}
 8012b52:	af00      	add	r7, sp, #0
 8012b54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012b58:	2001      	movs	r0, #1
 8012b5a:	f7ff fdf9 	bl	8012750 <_Z41__static_initialization_and_destruction_0ii>
 8012b5e:	bd80      	pop	{r7, pc}

08012b60 <_GLOBAL__sub_D__ZN8touchgfx5paint6rgb56511blendL8CLUTE>:
 8012b60:	b580      	push	{r7, lr}
 8012b62:	af00      	add	r7, sp, #0
 8012b64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012b68:	2000      	movs	r0, #0
 8012b6a:	f7ff fdf1 	bl	8012750 <_Z41__static_initialization_and_destruction_0ii>
 8012b6e:	bd80      	pop	{r7, pc}

08012b70 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8012b70:	8880      	ldrh	r0, [r0, #4]
 8012b72:	4770      	bx	lr

08012b74 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8012b74:	b570      	push	{r4, r5, r6, lr}
 8012b76:	6803      	ldr	r3, [r0, #0]
 8012b78:	4605      	mov	r5, r0
 8012b7a:	460c      	mov	r4, r1
 8012b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b7e:	2100      	movs	r1, #0
 8012b80:	4798      	blx	r3
 8012b82:	682b      	ldr	r3, [r5, #0]
 8012b84:	4606      	mov	r6, r0
 8012b86:	6a1b      	ldr	r3, [r3, #32]
 8012b88:	4628      	mov	r0, r5
 8012b8a:	4798      	blx	r3
 8012b8c:	1ba4      	subs	r4, r4, r6
 8012b8e:	b2a4      	uxth	r4, r4
 8012b90:	fbb4 f0f0 	udiv	r0, r4, r0
 8012b94:	bd70      	pop	{r4, r5, r6, pc}

08012b96 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8012b96:	2300      	movs	r3, #0
 8012b98:	8083      	strh	r3, [r0, #4]
 8012b9a:	4770      	bx	lr

08012b9c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8012b9c:	b510      	push	{r4, lr}
 8012b9e:	6803      	ldr	r3, [r0, #0]
 8012ba0:	8881      	ldrh	r1, [r0, #4]
 8012ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ba4:	4604      	mov	r4, r0
 8012ba6:	4798      	blx	r3
 8012ba8:	88a3      	ldrh	r3, [r4, #4]
 8012baa:	3301      	adds	r3, #1
 8012bac:	80a3      	strh	r3, [r4, #4]
 8012bae:	bd10      	pop	{r4, pc}

08012bb0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8012bb0:	6803      	ldr	r3, [r0, #0]
 8012bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bb4:	4718      	bx	r3

08012bb6 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8012bb6:	4770      	bx	lr

08012bb8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8012bb8:	4a02      	ldr	r2, [pc, #8]	; (8012bc4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8012bba:	6002      	str	r2, [r0, #0]
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	8082      	strh	r2, [r0, #4]
 8012bc0:	4770      	bx	lr
 8012bc2:	bf00      	nop
 8012bc4:	0802e154 	.word	0x0802e154

08012bc8 <_ZN8touchgfx9Container13getFirstChildEv>:
 8012bc8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8012bca:	4770      	bx	lr

08012bcc <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 8012bcc:	f8c0 10e0 	str.w	r1, [r0, #224]	; 0xe0
 8012bd0:	4770      	bx	lr

08012bd2 <_ZNK8touchgfx11BoxProgress8getColorEv>:
 8012bd2:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
 8012bd6:	4770      	bx	lr

08012bd8 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 8012bd8:	b538      	push	{r3, r4, r5, lr}
 8012bda:	4604      	mov	r4, r0
 8012bdc:	460d      	mov	r5, r1
 8012bde:	f000 f965 	bl	8012eac <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 8012be2:	f884 50de 	strb.w	r5, [r4, #222]	; 0xde
 8012be6:	bd38      	pop	{r3, r4, r5, pc}

08012be8 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>:
 8012be8:	b510      	push	{r4, lr}
 8012bea:	6803      	ldr	r3, [r0, #0]
 8012bec:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8012bf0:	4604      	mov	r4, r0
 8012bf2:	4798      	blx	r3
 8012bf4:	b120      	cbz	r0, 8012c00 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x18>
 8012bf6:	4620      	mov	r0, r4
 8012bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bfc:	f000 bca1 	b.w	8013542 <_ZNK8touchgfx9Container17invalidateContentEv>
 8012c00:	bd10      	pop	{r4, pc}

08012c02 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 8012c02:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012c06:	4617      	mov	r7, r2
 8012c08:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8012c0c:	9500      	str	r5, [sp, #0]
 8012c0e:	2200      	movs	r2, #0
 8012c10:	4604      	mov	r4, r0
 8012c12:	460e      	mov	r6, r1
 8012c14:	30b8      	adds	r0, #184	; 0xb8
 8012c16:	4611      	mov	r1, r2
 8012c18:	4698      	mov	r8, r3
 8012c1a:	f7fa fa7f 	bl	800d11c <_ZN8touchgfx8Drawable11setPositionEssss>
 8012c1e:	4643      	mov	r3, r8
 8012c20:	463a      	mov	r2, r7
 8012c22:	4631      	mov	r1, r6
 8012c24:	4620      	mov	r0, r4
 8012c26:	9508      	str	r5, [sp, #32]
 8012c28:	b002      	add	sp, #8
 8012c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c2e:	f000 ba00 	b.w	8013032 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08012c32 <_ZN8touchgfx11BoxProgress8setValueEi>:
 8012c32:	b530      	push	{r4, r5, lr}
 8012c34:	4604      	mov	r4, r0
 8012c36:	b085      	sub	sp, #20
 8012c38:	f000 f981 	bl	8012f3e <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8012c3c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8012c40:	2b03      	cmp	r3, #3
 8012c42:	d814      	bhi.n	8012c6e <_ZN8touchgfx11BoxProgress8setValueEi+0x3c>
 8012c44:	e8df f003 	tbb	[pc, r3]
 8012c48:	10100202 	.word	0x10100202
 8012c4c:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8012c50:	4620      	mov	r0, r4
 8012c52:	f000 f9d1 	bl	8012ff8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8012c56:	b200      	sxth	r0, r0
 8012c58:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8012c5c:	2b03      	cmp	r3, #3
 8012c5e:	d82f      	bhi.n	8012cc0 <_ZN8touchgfx11BoxProgress8setValueEi+0x8e>
 8012c60:	e8df f003 	tbb	[pc, r3]
 8012c64:	63413007 	.word	0x63413007
 8012c68:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8012c6c:	e7f0      	b.n	8012c50 <_ZN8touchgfx11BoxProgress8setValueEi+0x1e>
 8012c6e:	2000      	movs	r0, #0
 8012c70:	e7f2      	b.n	8012c58 <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 8012c72:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8012c76:	9300      	str	r3, [sp, #0]
 8012c78:	2200      	movs	r2, #0
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	4611      	mov	r1, r2
 8012c7e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8012c82:	f9b4 50c0 	ldrsh.w	r5, [r4, #192]	; 0xc0
 8012c86:	f7fa fa49 	bl	800d11c <_ZN8touchgfx8Drawable11setPositionEssss>
 8012c8a:	f9b4 30c0 	ldrsh.w	r3, [r4, #192]	; 0xc0
 8012c8e:	f9b4 20c2 	ldrsh.w	r2, [r4, #194]	; 0xc2
 8012c92:	f8ad 200e 	strh.w	r2, [sp, #14]
 8012c96:	4629      	mov	r1, r5
 8012c98:	429d      	cmp	r5, r3
 8012c9a:	eba5 0503 	sub.w	r5, r5, r3
 8012c9e:	bfa8      	it	ge
 8012ca0:	4619      	movge	r1, r3
 8012ca2:	2d00      	cmp	r5, #0
 8012ca4:	f8ad 1008 	strh.w	r1, [sp, #8]
 8012ca8:	bfb8      	it	lt
 8012caa:	426d      	neglt	r5, r5
 8012cac:	2100      	movs	r1, #0
 8012cae:	f8ad 100a 	strh.w	r1, [sp, #10]
 8012cb2:	f8ad 500c 	strh.w	r5, [sp, #12]
 8012cb6:	a902      	add	r1, sp, #8
 8012cb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012cbc:	f006 fad6 	bl	801926c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>
 8012cc0:	b005      	add	sp, #20
 8012cc2:	bd30      	pop	{r4, r5, pc}
 8012cc4:	8921      	ldrh	r1, [r4, #8]
 8012cc6:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8012cca:	9300      	str	r3, [sp, #0]
 8012ccc:	1a09      	subs	r1, r1, r0
 8012cce:	4603      	mov	r3, r0
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	b209      	sxth	r1, r1
 8012cd4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8012cd8:	f9b4 50bc 	ldrsh.w	r5, [r4, #188]	; 0xbc
 8012cdc:	f7fa fa1e 	bl	800d11c <_ZN8touchgfx8Drawable11setPositionEssss>
 8012ce0:	f9b4 30bc 	ldrsh.w	r3, [r4, #188]	; 0xbc
 8012ce4:	e7d3      	b.n	8012c8e <_ZN8touchgfx11BoxProgress8setValueEi+0x5c>
 8012ce6:	2200      	movs	r2, #0
 8012ce8:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8012cec:	9000      	str	r0, [sp, #0]
 8012cee:	4611      	mov	r1, r2
 8012cf0:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8012cf4:	f9b4 50c2 	ldrsh.w	r5, [r4, #194]	; 0xc2
 8012cf8:	f7fa fa10 	bl	800d11c <_ZN8touchgfx8Drawable11setPositionEssss>
 8012cfc:	f9b4 30c2 	ldrsh.w	r3, [r4, #194]	; 0xc2
 8012d00:	f9b4 20c0 	ldrsh.w	r2, [r4, #192]	; 0xc0
 8012d04:	f8ad 200c 	strh.w	r2, [sp, #12]
 8012d08:	2100      	movs	r1, #0
 8012d0a:	429d      	cmp	r5, r3
 8012d0c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8012d10:	4629      	mov	r1, r5
 8012d12:	eba5 0503 	sub.w	r5, r5, r3
 8012d16:	bfa8      	it	ge
 8012d18:	4619      	movge	r1, r3
 8012d1a:	2d00      	cmp	r5, #0
 8012d1c:	bfb8      	it	lt
 8012d1e:	426d      	neglt	r5, r5
 8012d20:	f8ad 100a 	strh.w	r1, [sp, #10]
 8012d24:	f8ad 500e 	strh.w	r5, [sp, #14]
 8012d28:	e7c5      	b.n	8012cb6 <_ZN8touchgfx11BoxProgress8setValueEi+0x84>
 8012d2a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8012d2e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8012d32:	9000      	str	r0, [sp, #0]
 8012d34:	1a12      	subs	r2, r2, r0
 8012d36:	b212      	sxth	r2, r2
 8012d38:	2100      	movs	r1, #0
 8012d3a:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8012d3e:	f9b4 50be 	ldrsh.w	r5, [r4, #190]	; 0xbe
 8012d42:	f7fa f9eb 	bl	800d11c <_ZN8touchgfx8Drawable11setPositionEssss>
 8012d46:	f9b4 30be 	ldrsh.w	r3, [r4, #190]	; 0xbe
 8012d4a:	e7d9      	b.n	8012d00 <_ZN8touchgfx11BoxProgress8setValueEi+0xce>

08012d4c <_ZN8touchgfx11BoxProgressC1Ev>:
 8012d4c:	b510      	push	{r4, lr}
 8012d4e:	4604      	mov	r4, r0
 8012d50:	f000 f852 	bl	8012df8 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8012d54:	2201      	movs	r2, #1
 8012d56:	f884 20dd 	strb.w	r2, [r4, #221]	; 0xdd
 8012d5a:	4b16      	ldr	r3, [pc, #88]	; (8012db4 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8012d5c:	4a16      	ldr	r2, [pc, #88]	; (8012db8 <_ZN8touchgfx11BoxProgressC1Ev+0x6c>)
 8012d5e:	6023      	str	r3, [r4, #0]
 8012d60:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
 8012d64:	2300      	movs	r3, #0
 8012d66:	22ff      	movs	r2, #255	; 0xff
 8012d68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012d6c:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
 8012d70:	f8a4 30be 	strh.w	r3, [r4, #190]	; 0xbe
 8012d74:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
 8012d78:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 8012d7c:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 8012d80:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8012d84:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 8012d88:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
 8012d8c:	e9c4 3333 	strd	r3, r3, [r4, #204]	; 0xcc
 8012d90:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 8012d94:	f8a4 30d8 	strh.w	r3, [r4, #216]	; 0xd8
 8012d98:	f8a4 30da 	strh.w	r3, [r4, #218]	; 0xda
 8012d9c:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
 8012da0:	f884 20de 	strb.w	r2, [r4, #222]	; 0xde
 8012da4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8012da8:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
 8012dac:	f000 fb90 	bl	80134d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012db0:	4620      	mov	r0, r4
 8012db2:	bd10      	pop	{r4, pc}
 8012db4:	0802e188 	.word	0x0802e188
 8012db8:	0802ea90 	.word	0x0802ea90

08012dbc <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 8012dbc:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
 8012dc0:	4770      	bx	lr

08012dc2 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>:
 8012dc2:	b570      	push	{r4, r5, r6, lr}
 8012dc4:	4604      	mov	r4, r0
 8012dc6:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
 8012dca:	3058      	adds	r0, #88	; 0x58
 8012dcc:	f006 f9fd 	bl	80191ca <_ZNK8touchgfx8Drawable10invalidateEv>
 8012dd0:	6823      	ldr	r3, [r4, #0]
 8012dd2:	4620      	mov	r0, r4
 8012dd4:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8012dd8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8012ddc:	4798      	blx	r3
 8012dde:	462b      	mov	r3, r5
 8012de0:	4601      	mov	r1, r0
 8012de2:	4620      	mov	r0, r4
 8012de4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012de8:	4718      	bx	r3

08012dea <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 8012dea:	f890 30b4 	ldrb.w	r3, [r0, #180]	; 0xb4
 8012dee:	428b      	cmp	r3, r1
 8012df0:	d001      	beq.n	8012df6 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE+0xc>
 8012df2:	f7ff bfe6 	b.w	8012dc2 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>
 8012df6:	4770      	bx	lr

08012df8 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 8012df8:	b510      	push	{r4, lr}
 8012dfa:	4604      	mov	r4, r0
 8012dfc:	f000 f946 	bl	801308c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8012e00:	4b03      	ldr	r3, [pc, #12]	; (8012e10 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 8012e02:	6023      	str	r3, [r4, #0]
 8012e04:	2300      	movs	r3, #0
 8012e06:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	bd10      	pop	{r4, pc}
 8012e0e:	bf00      	nop
 8012e10:	0802e26c 	.word	0x0802e26c

08012e14 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8012e14:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8012e18:	4770      	bx	lr

08012e1a <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8012e1a:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8012e1e:	4770      	bx	lr

08012e20 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8012e20:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8012e24:	4770      	bx	lr

08012e26 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8012e26:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8012e2a:	4770      	bx	lr

08012e2c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 8012e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e2e:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 8012e32:	461e      	mov	r6, r3
 8012e34:	6803      	ldr	r3, [r0, #0]
 8012e36:	460f      	mov	r7, r1
 8012e38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012e3c:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8012e40:	4604      	mov	r4, r0
 8012e42:	4615      	mov	r5, r2
 8012e44:	4798      	blx	r3
 8012e46:	b93e      	cbnz	r6, 8012e58 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x2c>
 8012e48:	1bed      	subs	r5, r5, r7
 8012e4a:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 8012e4e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8012e52:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
 8012e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e58:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
 8012e5c:	e7f7      	b.n	8012e4e <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x22>

08012e5e <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 8012e5e:	b510      	push	{r4, lr}
 8012e60:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8012e64:	600c      	str	r4, [r1, #0]
 8012e66:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8012e6a:	6011      	str	r1, [r2, #0]
 8012e6c:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8012e70:	801a      	strh	r2, [r3, #0]
 8012e72:	9b02      	ldr	r3, [sp, #8]
 8012e74:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 8012e78:	801a      	strh	r2, [r3, #0]
 8012e7a:	bd10      	pop	{r4, pc}

08012e7c <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 8012e7c:	b510      	push	{r4, lr}
 8012e7e:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8012e82:	600c      	str	r4, [r1, #0]
 8012e84:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8012e88:	6011      	str	r1, [r2, #0]
 8012e8a:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8012e8e:	801a      	strh	r2, [r3, #0]
 8012e90:	bd10      	pop	{r4, pc}

08012e92 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 8012e92:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8012e96:	600b      	str	r3, [r1, #0]
 8012e98:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8012e9c:	6013      	str	r3, [r2, #0]
 8012e9e:	4770      	bx	lr

08012ea0 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 8012ea0:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 8012ea4:	4770      	bx	lr

08012ea6 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8012ea6:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8012eaa:	4770      	bx	lr

08012eac <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 8012eac:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8012eb0:	4770      	bx	lr

08012eb2 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 8012eb2:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 8012eb6:	4770      	bx	lr

08012eb8 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 8012eb8:	b570      	push	{r4, r5, r6, lr}
 8012eba:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8012ebe:	428d      	cmp	r5, r1
 8012ec0:	bfb8      	it	lt
 8012ec2:	460d      	movlt	r5, r1
 8012ec4:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8012ec8:	428d      	cmp	r5, r1
 8012eca:	4604      	mov	r4, r0
 8012ecc:	bfa8      	it	ge
 8012ece:	460d      	movge	r5, r1
 8012ed0:	4616      	mov	r6, r2
 8012ed2:	b99a      	cbnz	r2, 8012efc <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 8012ed4:	6803      	ldr	r3, [r0, #0]
 8012ed6:	4629      	mov	r1, r5
 8012ed8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012edc:	4798      	blx	r3
 8012ede:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8012ee2:	b358      	cbz	r0, 8012f3c <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 8012ee4:	6803      	ldr	r3, [r0, #0]
 8012ee6:	68db      	ldr	r3, [r3, #12]
 8012ee8:	4798      	blx	r3
 8012eea:	b338      	cbz	r0, 8012f3c <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 8012eec:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8012ef0:	6803      	ldr	r3, [r0, #0]
 8012ef2:	4621      	mov	r1, r4
 8012ef4:	689b      	ldr	r3, [r3, #8]
 8012ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012efa:	4718      	bx	r3
 8012efc:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	dd07      	ble.n	8012f14 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5c>
 8012f04:	f005 f98e 	bl	8018224 <_ZN8touchgfx11Application11getInstanceEv>
 8012f08:	4621      	mov	r1, r4
 8012f0a:	f005 f9b7 	bl	801827c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8012f0e:	2300      	movs	r3, #0
 8012f10:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8012f14:	6823      	ldr	r3, [r4, #0]
 8012f16:	4620      	mov	r0, r4
 8012f18:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8012f1c:	4798      	blx	r3
 8012f1e:	2300      	movs	r3, #0
 8012f20:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8012f24:	e9c4 0527 	strd	r0, r5, [r4, #156]	; 0x9c
 8012f28:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 8012f2c:	f005 f97a 	bl	8018224 <_ZN8touchgfx11Application11getInstanceEv>
 8012f30:	4621      	mov	r1, r4
 8012f32:	f005 f97d 	bl	8018230 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8012f36:	2301      	movs	r3, #1
 8012f38:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8012f3c:	bd70      	pop	{r4, r5, r6, pc}

08012f3e <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8012f3e:	b510      	push	{r4, lr}
 8012f40:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8012f44:	4299      	cmp	r1, r3
 8012f46:	bfb8      	it	lt
 8012f48:	4619      	movlt	r1, r3
 8012f4a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8012f4e:	4299      	cmp	r1, r3
 8012f50:	bfa8      	it	ge
 8012f52:	4619      	movge	r1, r3
 8012f54:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8012f58:	428b      	cmp	r3, r1
 8012f5a:	4604      	mov	r4, r0
 8012f5c:	d010      	beq.n	8012f80 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8012f5e:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8012f62:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 8012f66:	b158      	cbz	r0, 8012f80 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8012f68:	6803      	ldr	r3, [r0, #0]
 8012f6a:	68db      	ldr	r3, [r3, #12]
 8012f6c:	4798      	blx	r3
 8012f6e:	b138      	cbz	r0, 8012f80 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8012f70:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8012f74:	6803      	ldr	r3, [r0, #0]
 8012f76:	4621      	mov	r1, r4
 8012f78:	689b      	ldr	r3, [r3, #8]
 8012f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f7e:	4718      	bx	r3
 8012f80:	bd10      	pop	{r4, pc}

08012f82 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 8012f82:	b570      	push	{r4, r5, r6, lr}
 8012f84:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8012f88:	4604      	mov	r4, r0
 8012f8a:	b3a3      	cbz	r3, 8012ff6 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8012f8c:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	; 0x9c
 8012f90:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 8012f94:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 8012f98:	3001      	adds	r0, #1
 8012f9a:	1ad2      	subs	r2, r2, r3
 8012f9c:	b212      	sxth	r2, r2
 8012f9e:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 8012fa2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8012fa6:	2100      	movs	r1, #0
 8012fa8:	b280      	uxth	r0, r0
 8012faa:	47a8      	blx	r5
 8012fac:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8012fb0:	6823      	ldr	r3, [r4, #0]
 8012fb2:	4401      	add	r1, r0
 8012fb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012fb8:	4620      	mov	r0, r4
 8012fba:	4798      	blx	r3
 8012fbc:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 8012fc0:	429a      	cmp	r2, r3
 8012fc2:	db18      	blt.n	8012ff6 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8012fc4:	2500      	movs	r5, #0
 8012fc6:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8012fca:	f005 f92b 	bl	8018224 <_ZN8touchgfx11Application11getInstanceEv>
 8012fce:	4621      	mov	r1, r4
 8012fd0:	f005 f954 	bl	801827c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8012fd4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8012fd8:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8012fdc:	b158      	cbz	r0, 8012ff6 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8012fde:	6803      	ldr	r3, [r0, #0]
 8012fe0:	68db      	ldr	r3, [r3, #12]
 8012fe2:	4798      	blx	r3
 8012fe4:	b138      	cbz	r0, 8012ff6 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8012fe6:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8012fea:	6803      	ldr	r3, [r0, #0]
 8012fec:	4621      	mov	r1, r4
 8012fee:	689b      	ldr	r3, [r3, #8]
 8012ff0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ff4:	4718      	bx	r3
 8012ff6:	bd70      	pop	{r4, r5, r6, pc}

08012ff8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8012ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012ffa:	4604      	mov	r4, r0
 8012ffc:	460d      	mov	r5, r1
 8012ffe:	b1a9      	cbz	r1, 801302c <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 8013000:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 8013004:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 8013008:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 801300c:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 8013010:	ab01      	add	r3, sp, #4
 8013012:	1a12      	subs	r2, r2, r0
 8013014:	1b89      	subs	r1, r1, r6
 8013016:	1a38      	subs	r0, r7, r0
 8013018:	f006 fa79 	bl	801950e <_ZN8touchgfx6muldivElllRl>
 801301c:	4629      	mov	r1, r5
 801301e:	ab01      	add	r3, sp, #4
 8013020:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 8013024:	4430      	add	r0, r6
 8013026:	f006 fa72 	bl	801950e <_ZN8touchgfx6muldivElllRl>
 801302a:	b285      	uxth	r5, r0
 801302c:	4628      	mov	r0, r5
 801302e:	b003      	add	sp, #12
 8013030:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013032 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8013032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013036:	4604      	mov	r4, r0
 8013038:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 801303c:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 8013040:	460e      	mov	r6, r1
 8013042:	4615      	mov	r5, r2
 8013044:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8013048:	4619      	mov	r1, r3
 801304a:	463a      	mov	r2, r7
 801304c:	3058      	adds	r0, #88	; 0x58
 801304e:	4698      	mov	r8, r3
 8013050:	f7fa f8ff 	bl	800d252 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013054:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8013058:	4446      	add	r6, r8
 801305a:	42b3      	cmp	r3, r6
 801305c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013060:	bfb8      	it	lt
 8013062:	8126      	strhlt	r6, [r4, #8]
 8013064:	443d      	add	r5, r7
 8013066:	42ab      	cmp	r3, r5
 8013068:	bfb8      	it	lt
 801306a:	8165      	strhlt	r5, [r4, #10]
 801306c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013070 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8013070:	b510      	push	{r4, lr}
 8013072:	4604      	mov	r4, r0
 8013074:	302c      	adds	r0, #44	; 0x2c
 8013076:	f002 fcd3 	bl	8015a20 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801307a:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 801307e:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8013082:	4620      	mov	r0, r4
 8013084:	f7fa f8e5 	bl	800d252 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013088:	bd10      	pop	{r4, pc}
	...

0801308c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 801308c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801308e:	4604      	mov	r4, r0
 8013090:	4626      	mov	r6, r4
 8013092:	2500      	movs	r5, #0
 8013094:	f7f9 ffd4 	bl	800d040 <_ZN8touchgfx8DrawableC1Ev>
 8013098:	4b23      	ldr	r3, [pc, #140]	; (8013128 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 801309a:	62a5      	str	r5, [r4, #40]	; 0x28
 801309c:	f846 3b2c 	str.w	r3, [r6], #44
 80130a0:	2226      	movs	r2, #38	; 0x26
 80130a2:	4629      	mov	r1, r5
 80130a4:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80130a8:	4630      	mov	r0, r6
 80130aa:	f8ad 7004 	strh.w	r7, [sp, #4]
 80130ae:	f014 fe29 	bl	8027d04 <memset>
 80130b2:	4630      	mov	r0, r6
 80130b4:	f7f9 ffc4 	bl	800d040 <_ZN8touchgfx8DrawableC1Ev>
 80130b8:	a902      	add	r1, sp, #8
 80130ba:	4b1c      	ldr	r3, [pc, #112]	; (801312c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 80130bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80130be:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 80130c2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80130c6:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 80130ca:	4630      	mov	r0, r6
 80130cc:	f104 0758 	add.w	r7, r4, #88	; 0x58
 80130d0:	f002 fca6 	bl	8015a20 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80130d4:	4638      	mov	r0, r7
 80130d6:	f7f9 ffb3 	bl	800d040 <_ZN8touchgfx8DrawableC1Ev>
 80130da:	4b15      	ldr	r3, [pc, #84]	; (8013130 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 80130dc:	65a3      	str	r3, [r4, #88]	; 0x58
 80130de:	2364      	movs	r3, #100	; 0x64
 80130e0:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 80130e4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80130e8:	4b12      	ldr	r3, [pc, #72]	; (8013134 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 80130ea:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 80130ee:	4629      	mov	r1, r5
 80130f0:	4630      	mov	r0, r6
 80130f2:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 80130f6:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 80130fa:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 80130fe:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8013102:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 8013106:	f7fa f82a 	bl	800d15e <_ZN8touchgfx8Drawable4setXEs>
 801310a:	4629      	mov	r1, r5
 801310c:	4630      	mov	r0, r6
 801310e:	f7fa f835 	bl	800d17c <_ZN8touchgfx8Drawable4setYEs>
 8013112:	4631      	mov	r1, r6
 8013114:	4620      	mov	r0, r4
 8013116:	f000 f9db 	bl	80134d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801311a:	4620      	mov	r0, r4
 801311c:	4639      	mov	r1, r7
 801311e:	f000 f9d7 	bl	80134d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013122:	4620      	mov	r0, r4
 8013124:	b003      	add	sp, #12
 8013126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013128:	0802e348 	.word	0x0802e348
 801312c:	0802eb88 	.word	0x0802eb88
 8013130:	0802e5cc 	.word	0x0802e5cc
 8013134:	08019bf5 	.word	0x08019bf5

08013138 <_ZNK8touchgfx12DigitalClock14getDisplayModeEv>:
 8013138:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
 801313c:	4770      	bx	lr

0801313e <_ZN8touchgfx12DigitalClock8setWidthEs>:
 801313e:	b508      	push	{r3, lr}
 8013140:	3034      	adds	r0, #52	; 0x34
 8013142:	f820 1c2c 	strh.w	r1, [r0, #-44]
 8013146:	f7fa fa85 	bl	800d654 <_ZN8touchgfx8TextArea8setWidthEs>
 801314a:	bd08      	pop	{r3, pc}

0801314c <_ZN8touchgfx12DigitalClock9setHeightEs>:
 801314c:	b508      	push	{r3, lr}
 801314e:	3034      	adds	r0, #52	; 0x34
 8013150:	f820 1c2a 	strh.w	r1, [r0, #-42]
 8013154:	f7fa fa9e 	bl	800d694 <_ZN8touchgfx8TextArea9setHeightEs>
 8013158:	bd08      	pop	{r3, pc}
	...

0801315c <_ZN8touchgfx12DigitalClock12setBaselineYEs>:
 801315c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013160:	4a10      	ldr	r2, [pc, #64]	; (80131a4 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x48>)
 8013162:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8013166:	8812      	ldrh	r2, [r2, #0]
 8013168:	429a      	cmp	r2, r3
 801316a:	4604      	mov	r4, r0
 801316c:	460d      	mov	r5, r1
 801316e:	d916      	bls.n	801319e <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x42>
 8013170:	6802      	ldr	r2, [r0, #0]
 8013172:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 8013176:	6d96      	ldr	r6, [r2, #88]	; 0x58
 8013178:	4a0b      	ldr	r2, [pc, #44]	; (80131a8 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x4c>)
 801317a:	6812      	ldr	r2, [r2, #0]
 801317c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8013180:	4b0a      	ldr	r3, [pc, #40]	; (80131ac <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x50>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013188:	6803      	ldr	r3, [r0, #0]
 801318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801318c:	4798      	blx	r3
 801318e:	1a2a      	subs	r2, r5, r0
 8013190:	4639      	mov	r1, r7
 8013192:	4620      	mov	r0, r4
 8013194:	4633      	mov	r3, r6
 8013196:	b212      	sxth	r2, r2
 8013198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801319c:	4718      	bx	r3
 801319e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131a2:	bf00      	nop
 80131a4:	2000c498 	.word	0x2000c498
 80131a8:	2000c494 	.word	0x2000c494
 80131ac:	2000c49c 	.word	0x2000c49c

080131b0 <_ZN8touchgfx12DigitalClock8setAlphaEh>:
 80131b0:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
 80131b4:	4770      	bx	lr

080131b6 <_ZNK8touchgfx12DigitalClock8getAlphaEv>:
 80131b6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80131ba:	4770      	bx	lr

080131bc <_ZNK8touchgfx12DigitalClock8getColorEv>:
 80131bc:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80131be:	4770      	bx	lr

080131c0 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>:
 80131c0:	6641      	str	r1, [r0, #100]	; 0x64
 80131c2:	3034      	adds	r0, #52	; 0x34
 80131c4:	f002 bbbc 	b.w	8015940 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>

080131c8 <_ZNK8touchgfx12DigitalClock12getTextWidthEv>:
 80131c8:	3034      	adds	r0, #52	; 0x34
 80131ca:	f001 bfdf 	b.w	801518c <_ZNK8touchgfx8TextArea12getTextWidthEv>

080131ce <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>:
 80131ce:	b538      	push	{r3, r4, r5, lr}
 80131d0:	f100 0434 	add.w	r4, r0, #52	; 0x34
 80131d4:	460d      	mov	r5, r1
 80131d6:	4620      	mov	r0, r4
 80131d8:	f002 fbb2 	bl	8015940 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
 80131dc:	4620      	mov	r0, r4
 80131de:	4629      	mov	r1, r5
 80131e0:	f002 faf0 	bl	80157c4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80131e4:	4620      	mov	r0, r4
 80131e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131ea:	f002 bba9 	b.w	8015940 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
	...

080131f0 <_ZN8touchgfx12DigitalClock11updateClockEv>:
 80131f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80131f4:	4604      	mov	r4, r0
 80131f6:	f100 0634 	add.w	r6, r0, #52	; 0x34
 80131fa:	4630      	mov	r0, r6
 80131fc:	f002 fba0 	bl	8015940 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
 8013200:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8013204:	bb03      	cbnz	r3, 8013248 <_ZN8touchgfx12DigitalClock11updateClockEv+0x58>
 8013206:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 801320a:	4a41      	ldr	r2, [pc, #260]	; (8013310 <_ZN8touchgfx12DigitalClock11updateClockEv+0x120>)
 801320c:	4d41      	ldr	r5, [pc, #260]	; (8013314 <_ZN8touchgfx12DigitalClock11updateClockEv+0x124>)
 801320e:	4620      	mov	r0, r4
 8013210:	2b00      	cmp	r3, #0
 8013212:	bf08      	it	eq
 8013214:	4615      	moveq	r5, r2
 8013216:	f000 f938 	bl	801348a <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 801321a:	4680      	mov	r8, r0
 801321c:	4620      	mov	r0, r4
 801321e:	f000 f947 	bl	80134b0 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8013222:	4681      	mov	r9, r0
 8013224:	4620      	mov	r0, r4
 8013226:	f000 f93c 	bl	80134a2 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 801322a:	2800      	cmp	r0, #0
 801322c:	bf14      	ite	ne
 801322e:	2341      	movne	r3, #65	; 0x41
 8013230:	2350      	moveq	r3, #80	; 0x50
 8013232:	f104 0780 	add.w	r7, r4, #128	; 0x80
 8013236:	e9cd 9300 	strd	r9, r3, [sp]
 801323a:	462a      	mov	r2, r5
 801323c:	4643      	mov	r3, r8
 801323e:	210c      	movs	r1, #12
 8013240:	4638      	mov	r0, r7
 8013242:	f007 ffdb 	bl	801b1fc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013246:	e017      	b.n	8013278 <_ZN8touchgfx12DigitalClock11updateClockEv+0x88>
 8013248:	2b01      	cmp	r3, #1
 801324a:	d11b      	bne.n	8013284 <_ZN8touchgfx12DigitalClock11updateClockEv+0x94>
 801324c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8013250:	4a31      	ldr	r2, [pc, #196]	; (8013318 <_ZN8touchgfx12DigitalClock11updateClockEv+0x128>)
 8013252:	4d32      	ldr	r5, [pc, #200]	; (801331c <_ZN8touchgfx12DigitalClock11updateClockEv+0x12c>)
 8013254:	4620      	mov	r0, r4
 8013256:	2b00      	cmp	r3, #0
 8013258:	bf08      	it	eq
 801325a:	4615      	moveq	r5, r2
 801325c:	f000 f912 	bl	8013484 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 8013260:	4607      	mov	r7, r0
 8013262:	4620      	mov	r0, r4
 8013264:	f000 f924 	bl	80134b0 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8013268:	463b      	mov	r3, r7
 801326a:	9000      	str	r0, [sp, #0]
 801326c:	462a      	mov	r2, r5
 801326e:	210c      	movs	r1, #12
 8013270:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8013274:	f007 ffc2 	bl	801b1fc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013278:	4630      	mov	r0, r6
 801327a:	b004      	add	sp, #16
 801327c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013280:	f002 bb5e 	b.w	8015940 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
 8013284:	2b02      	cmp	r3, #2
 8013286:	d126      	bne.n	80132d6 <_ZN8touchgfx12DigitalClock11updateClockEv+0xe6>
 8013288:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 801328c:	4a24      	ldr	r2, [pc, #144]	; (8013320 <_ZN8touchgfx12DigitalClock11updateClockEv+0x130>)
 801328e:	4d25      	ldr	r5, [pc, #148]	; (8013324 <_ZN8touchgfx12DigitalClock11updateClockEv+0x134>)
 8013290:	4620      	mov	r0, r4
 8013292:	2b00      	cmp	r3, #0
 8013294:	bf08      	it	eq
 8013296:	4615      	moveq	r5, r2
 8013298:	f000 f8f7 	bl	801348a <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 801329c:	4680      	mov	r8, r0
 801329e:	4620      	mov	r0, r4
 80132a0:	f000 f906 	bl	80134b0 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 80132a4:	4681      	mov	r9, r0
 80132a6:	4620      	mov	r0, r4
 80132a8:	f000 f905 	bl	80134b6 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 80132ac:	4682      	mov	sl, r0
 80132ae:	4620      	mov	r0, r4
 80132b0:	f000 f8f7 	bl	80134a2 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 80132b4:	2800      	cmp	r0, #0
 80132b6:	bf14      	ite	ne
 80132b8:	2341      	movne	r3, #65	; 0x41
 80132ba:	2350      	moveq	r3, #80	; 0x50
 80132bc:	f104 0780 	add.w	r7, r4, #128	; 0x80
 80132c0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80132c4:	f8cd 9000 	str.w	r9, [sp]
 80132c8:	4643      	mov	r3, r8
 80132ca:	462a      	mov	r2, r5
 80132cc:	210c      	movs	r1, #12
 80132ce:	4638      	mov	r0, r7
 80132d0:	f007 ff94 	bl	801b1fc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80132d4:	e7d0      	b.n	8013278 <_ZN8touchgfx12DigitalClock11updateClockEv+0x88>
 80132d6:	2b03      	cmp	r3, #3
 80132d8:	d1ce      	bne.n	8013278 <_ZN8touchgfx12DigitalClock11updateClockEv+0x88>
 80132da:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80132de:	4a12      	ldr	r2, [pc, #72]	; (8013328 <_ZN8touchgfx12DigitalClock11updateClockEv+0x138>)
 80132e0:	4d12      	ldr	r5, [pc, #72]	; (801332c <_ZN8touchgfx12DigitalClock11updateClockEv+0x13c>)
 80132e2:	4620      	mov	r0, r4
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	bf08      	it	eq
 80132e8:	4615      	moveq	r5, r2
 80132ea:	f000 f8cb 	bl	8013484 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 80132ee:	4607      	mov	r7, r0
 80132f0:	4620      	mov	r0, r4
 80132f2:	f000 f8dd 	bl	80134b0 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 80132f6:	4680      	mov	r8, r0
 80132f8:	4620      	mov	r0, r4
 80132fa:	f000 f8dc 	bl	80134b6 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 80132fe:	463b      	mov	r3, r7
 8013300:	e9cd 8000 	strd	r8, r0, [sp]
 8013304:	462a      	mov	r2, r5
 8013306:	210c      	movs	r1, #12
 8013308:	f104 0080 	add.w	r0, r4, #128	; 0x80
 801330c:	e799      	b.n	8013242 <_ZN8touchgfx12DigitalClock11updateClockEv+0x52>
 801330e:	bf00      	nop
 8013310:	0802e414 	.word	0x0802e414
 8013314:	0802e43e 	.word	0x0802e43e
 8013318:	0802e420 	.word	0x0802e420
 801331c:	0802e45e 	.word	0x0802e45e
 8013320:	0802e43b 	.word	0x0802e43b
 8013324:	0802e428 	.word	0x0802e428
 8013328:	0802e45b 	.word	0x0802e45b
 801332c:	0802e44c 	.word	0x0802e44c

08013330 <_ZNK8touchgfx12DigitalClock17invalidateContentEv>:
 8013330:	b510      	push	{r4, lr}
 8013332:	6803      	ldr	r3, [r0, #0]
 8013334:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013338:	4604      	mov	r4, r0
 801333a:	4798      	blx	r3
 801333c:	b120      	cbz	r0, 8013348 <_ZNK8touchgfx12DigitalClock17invalidateContentEv+0x18>
 801333e:	4620      	mov	r0, r4
 8013340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013344:	f000 b8fd 	b.w	8013542 <_ZNK8touchgfx9Container17invalidateContentEv>
 8013348:	bd10      	pop	{r4, pc}
	...

0801334c <_ZN8touchgfx12DigitalClockC1Ev>:
 801334c:	b510      	push	{r4, lr}
 801334e:	4604      	mov	r4, r0
 8013350:	f000 f87c 	bl	801344c <_ZN8touchgfx13AbstractClockC1Ev>
 8013354:	2201      	movs	r2, #1
 8013356:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801335a:	4a20      	ldr	r2, [pc, #128]	; (80133dc <_ZN8touchgfx12DigitalClockC1Ev+0x90>)
 801335c:	65e2      	str	r2, [r4, #92]	; 0x5c
 801335e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013362:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
 8013366:	f8a4 2074 	strh.w	r2, [r4, #116]	; 0x74
 801336a:	f8a4 2076 	strh.w	r2, [r4, #118]	; 0x76
 801336e:	4b1c      	ldr	r3, [pc, #112]	; (80133e0 <_ZN8touchgfx12DigitalClockC1Ev+0x94>)
 8013370:	4a1c      	ldr	r2, [pc, #112]	; (80133e4 <_ZN8touchgfx12DigitalClockC1Ev+0x98>)
 8013372:	6023      	str	r3, [r4, #0]
 8013374:	6362      	str	r2, [r4, #52]	; 0x34
 8013376:	2303      	movs	r3, #3
 8013378:	4622      	mov	r2, r4
 801337a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 801337e:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8013382:	2300      	movs	r3, #0
 8013384:	66a1      	str	r1, [r4, #104]	; 0x68
 8013386:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 801338a:	8723      	strh	r3, [r4, #56]	; 0x38
 801338c:	8763      	strh	r3, [r4, #58]	; 0x3a
 801338e:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8013390:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8013392:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8013396:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 801339a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 801339e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80133a2:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80133a6:	6523      	str	r3, [r4, #80]	; 0x50
 80133a8:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 80133ac:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 80133b0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80133b4:	6663      	str	r3, [r4, #100]	; 0x64
 80133b6:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 80133ba:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 80133be:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
 80133c2:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 80133c6:	67a3      	str	r3, [r4, #120]	; 0x78
 80133c8:	f822 3f80 	strh.w	r3, [r2, #128]!
 80133cc:	4620      	mov	r0, r4
 80133ce:	67e2      	str	r2, [r4, #124]	; 0x7c
 80133d0:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80133d4:	f000 f87c 	bl	80134d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80133d8:	4620      	mov	r0, r4
 80133da:	bd10      	pop	{r4, pc}
 80133dc:	0802d8f4 	.word	0x0802d8f4
 80133e0:	0802e470 	.word	0x0802e470
 80133e4:	0802db50 	.word	0x0802db50

080133e8 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>:
 80133e8:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
 80133ec:	4770      	bx	lr

080133ee <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>:
 80133ee:	b470      	push	{r4, r5, r6}
 80133f0:	2518      	movs	r5, #24
 80133f2:	fbb1 f6f5 	udiv	r6, r1, r5
 80133f6:	fb06 1115 	mls	r1, r6, r5, r1
 80133fa:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 80133fe:	213c      	movs	r1, #60	; 0x3c
 8013400:	fbb2 f5f1 	udiv	r5, r2, r1
 8013404:	fb05 2211 	mls	r2, r5, r1, r2
 8013408:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
 801340c:	fbb3 f2f1 	udiv	r2, r3, r1
 8013410:	fb02 3311 	mls	r3, r2, r1, r3
 8013414:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
 8013418:	6803      	ldr	r3, [r0, #0]
 801341a:	bc70      	pop	{r4, r5, r6}
 801341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013420:	4718      	bx	r3

08013422 <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>:
 8013422:	b4f0      	push	{r4, r5, r6, r7}
 8013424:	6804      	ldr	r4, [r0, #0]
 8013426:	f89d 6010 	ldrb.w	r6, [sp, #16]
 801342a:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 801342e:	2e00      	cmp	r6, #0
 8013430:	f04f 040c 	mov.w	r4, #12
 8013434:	fbb1 f7f4 	udiv	r7, r1, r4
 8013438:	fb07 1114 	mls	r1, r7, r4, r1
 801343c:	bf18      	it	ne
 801343e:	2400      	movne	r4, #0
 8013440:	fa54 f181 	uxtab	r1, r4, r1
 8013444:	46ac      	mov	ip, r5
 8013446:	b2c9      	uxtb	r1, r1
 8013448:	bcf0      	pop	{r4, r5, r6, r7}
 801344a:	4760      	bx	ip

0801344c <_ZN8touchgfx13AbstractClockC1Ev>:
 801344c:	2101      	movs	r1, #1
 801344e:	2200      	movs	r2, #0
 8013450:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8013454:	490a      	ldr	r1, [pc, #40]	; (8013480 <_ZN8touchgfx13AbstractClockC1Ev+0x34>)
 8013456:	8082      	strh	r2, [r0, #4]
 8013458:	80c2      	strh	r2, [r0, #6]
 801345a:	8102      	strh	r2, [r0, #8]
 801345c:	8142      	strh	r2, [r0, #10]
 801345e:	8182      	strh	r2, [r0, #12]
 8013460:	81c2      	strh	r2, [r0, #14]
 8013462:	8202      	strh	r2, [r0, #16]
 8013464:	8242      	strh	r2, [r0, #18]
 8013466:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801346a:	61c2      	str	r2, [r0, #28]
 801346c:	8402      	strh	r2, [r0, #32]
 801346e:	8442      	strh	r2, [r0, #34]	; 0x22
 8013470:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8013474:	6001      	str	r1, [r0, #0]
 8013476:	6282      	str	r2, [r0, #40]	; 0x28
 8013478:	8582      	strh	r2, [r0, #44]	; 0x2c
 801347a:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 801347e:	4770      	bx	lr
 8013480:	0802e530 	.word	0x0802e530

08013484 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>:
 8013484:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8013488:	4770      	bx	lr

0801348a <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>:
 801348a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801348e:	220c      	movs	r2, #12
 8013490:	f100 030b 	add.w	r3, r0, #11
 8013494:	fb93 f0f2 	sdiv	r0, r3, r2
 8013498:	fb02 3010 	mls	r0, r2, r0, r3
 801349c:	3001      	adds	r0, #1
 801349e:	b2c0      	uxtb	r0, r0
 80134a0:	4770      	bx	lr

080134a2 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>:
 80134a2:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80134a6:	280b      	cmp	r0, #11
 80134a8:	bf8c      	ite	hi
 80134aa:	2000      	movhi	r0, #0
 80134ac:	2001      	movls	r0, #1
 80134ae:	4770      	bx	lr

080134b0 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>:
 80134b0:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 80134b4:	4770      	bx	lr

080134b6 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>:
 80134b6:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 80134ba:	4770      	bx	lr

080134bc <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80134bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80134be:	2000      	movs	r0, #0
 80134c0:	b12b      	cbz	r3, 80134ce <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80134c2:	b920      	cbnz	r0, 80134ce <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80134c4:	1a5a      	subs	r2, r3, r1
 80134c6:	4250      	negs	r0, r2
 80134c8:	4150      	adcs	r0, r2
 80134ca:	699b      	ldr	r3, [r3, #24]
 80134cc:	e7f8      	b.n	80134c0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80134ce:	4770      	bx	lr

080134d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80134d0:	2300      	movs	r3, #0
 80134d2:	6148      	str	r0, [r1, #20]
 80134d4:	618b      	str	r3, [r1, #24]
 80134d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80134d8:	b913      	cbnz	r3, 80134e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80134da:	6281      	str	r1, [r0, #40]	; 0x28
 80134dc:	4770      	bx	lr
 80134de:	4613      	mov	r3, r2
 80134e0:	699a      	ldr	r2, [r3, #24]
 80134e2:	2a00      	cmp	r2, #0
 80134e4:	d1fb      	bne.n	80134de <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80134e6:	6199      	str	r1, [r3, #24]
 80134e8:	4770      	bx	lr

080134ea <_ZN8touchgfx9Container9removeAllEv>:
 80134ea:	2200      	movs	r2, #0
 80134ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80134ee:	b123      	cbz	r3, 80134fa <_ZN8touchgfx9Container9removeAllEv+0x10>
 80134f0:	6999      	ldr	r1, [r3, #24]
 80134f2:	6281      	str	r1, [r0, #40]	; 0x28
 80134f4:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80134f8:	e7f8      	b.n	80134ec <_ZN8touchgfx9Container9removeAllEv+0x2>
 80134fa:	4770      	bx	lr

080134fc <_ZN8touchgfx9Container6unlinkEv>:
 80134fc:	2300      	movs	r3, #0
 80134fe:	6283      	str	r3, [r0, #40]	; 0x28
 8013500:	4770      	bx	lr

08013502 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8013502:	2200      	movs	r2, #0
 8013504:	8002      	strh	r2, [r0, #0]
 8013506:	8042      	strh	r2, [r0, #2]
 8013508:	8082      	strh	r2, [r0, #4]
 801350a:	80c2      	strh	r2, [r0, #6]
 801350c:	4770      	bx	lr

0801350e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801350e:	b570      	push	{r4, r5, r6, lr}
 8013510:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013512:	460d      	mov	r5, r1
 8013514:	4616      	mov	r6, r2
 8013516:	b13c      	cbz	r4, 8013528 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8013518:	6823      	ldr	r3, [r4, #0]
 801351a:	4620      	mov	r0, r4
 801351c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801351e:	4632      	mov	r2, r6
 8013520:	4629      	mov	r1, r5
 8013522:	4798      	blx	r3
 8013524:	69a4      	ldr	r4, [r4, #24]
 8013526:	e7f6      	b.n	8013516 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8013528:	bd70      	pop	{r4, r5, r6, pc}

0801352a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801352a:	b538      	push	{r3, r4, r5, lr}
 801352c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801352e:	460d      	mov	r5, r1
 8013530:	b134      	cbz	r4, 8013540 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8013532:	682b      	ldr	r3, [r5, #0]
 8013534:	4621      	mov	r1, r4
 8013536:	689b      	ldr	r3, [r3, #8]
 8013538:	4628      	mov	r0, r5
 801353a:	4798      	blx	r3
 801353c:	69a4      	ldr	r4, [r4, #24]
 801353e:	e7f7      	b.n	8013530 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8013540:	bd38      	pop	{r3, r4, r5, pc}

08013542 <_ZNK8touchgfx9Container17invalidateContentEv>:
 8013542:	b510      	push	{r4, lr}
 8013544:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013546:	b12c      	cbz	r4, 8013554 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8013548:	6823      	ldr	r3, [r4, #0]
 801354a:	4620      	mov	r0, r4
 801354c:	699b      	ldr	r3, [r3, #24]
 801354e:	4798      	blx	r3
 8013550:	69a4      	ldr	r4, [r4, #24]
 8013552:	e7f8      	b.n	8013546 <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 8013554:	bd10      	pop	{r4, pc}

08013556 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8013556:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013558:	b19b      	cbz	r3, 8013582 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801355a:	428b      	cmp	r3, r1
 801355c:	d109      	bne.n	8013572 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801355e:	699a      	ldr	r2, [r3, #24]
 8013560:	2100      	movs	r1, #0
 8013562:	6159      	str	r1, [r3, #20]
 8013564:	6282      	str	r2, [r0, #40]	; 0x28
 8013566:	b902      	cbnz	r2, 801356a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8013568:	4770      	bx	lr
 801356a:	6199      	str	r1, [r3, #24]
 801356c:	4770      	bx	lr
 801356e:	4613      	mov	r3, r2
 8013570:	b13a      	cbz	r2, 8013582 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013572:	699a      	ldr	r2, [r3, #24]
 8013574:	428a      	cmp	r2, r1
 8013576:	d1fa      	bne.n	801356e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8013578:	698a      	ldr	r2, [r1, #24]
 801357a:	619a      	str	r2, [r3, #24]
 801357c:	2300      	movs	r3, #0
 801357e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8013582:	4770      	bx	lr

08013584 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8013584:	b410      	push	{r4}
 8013586:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013588:	4604      	mov	r4, r0
 801358a:	b92b      	cbnz	r3, 8013598 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801358c:	6803      	ldr	r3, [r0, #0]
 801358e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013594:	4611      	mov	r1, r2
 8013596:	4718      	bx	r3
 8013598:	b941      	cbnz	r1, 80135ac <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801359a:	6193      	str	r3, [r2, #24]
 801359c:	6282      	str	r2, [r0, #40]	; 0x28
 801359e:	6154      	str	r4, [r2, #20]
 80135a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135a4:	4770      	bx	lr
 80135a6:	4603      	mov	r3, r0
 80135a8:	2800      	cmp	r0, #0
 80135aa:	d0f9      	beq.n	80135a0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80135ac:	4299      	cmp	r1, r3
 80135ae:	6998      	ldr	r0, [r3, #24]
 80135b0:	d1f9      	bne.n	80135a6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80135b2:	6190      	str	r0, [r2, #24]
 80135b4:	618a      	str	r2, [r1, #24]
 80135b6:	e7f2      	b.n	801359e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080135b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80135b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135bc:	461f      	mov	r7, r3
 80135be:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80135c2:	460d      	mov	r5, r1
 80135c4:	4616      	mov	r6, r2
 80135c6:	b103      	cbz	r3, 80135ca <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80135c8:	6038      	str	r0, [r7, #0]
 80135ca:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80135cc:	b314      	cbz	r4, 8013614 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80135ce:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80135d2:	b1eb      	cbz	r3, 8013610 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80135d4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80135d8:	428d      	cmp	r5, r1
 80135da:	db19      	blt.n	8013610 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80135dc:	8923      	ldrh	r3, [r4, #8]
 80135de:	b289      	uxth	r1, r1
 80135e0:	440b      	add	r3, r1
 80135e2:	b21b      	sxth	r3, r3
 80135e4:	429d      	cmp	r5, r3
 80135e6:	da13      	bge.n	8013610 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80135e8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80135ec:	4296      	cmp	r6, r2
 80135ee:	db0f      	blt.n	8013610 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80135f0:	8963      	ldrh	r3, [r4, #10]
 80135f2:	b292      	uxth	r2, r2
 80135f4:	4413      	add	r3, r2
 80135f6:	b21b      	sxth	r3, r3
 80135f8:	429e      	cmp	r6, r3
 80135fa:	da09      	bge.n	8013610 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80135fc:	6823      	ldr	r3, [r4, #0]
 80135fe:	1ab2      	subs	r2, r6, r2
 8013600:	1a69      	subs	r1, r5, r1
 8013602:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8013606:	b212      	sxth	r2, r2
 8013608:	463b      	mov	r3, r7
 801360a:	b209      	sxth	r1, r1
 801360c:	4620      	mov	r0, r4
 801360e:	47c0      	blx	r8
 8013610:	69a4      	ldr	r4, [r4, #24]
 8013612:	e7db      	b.n	80135cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8013614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013618 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8013618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801361c:	4c6e      	ldr	r4, [pc, #440]	; (80137d8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 801361e:	b0a1      	sub	sp, #132	; 0x84
 8013620:	6824      	ldr	r4, [r4, #0]
 8013622:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8013624:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8013628:	9303      	str	r3, [sp, #12]
 801362a:	2400      	movs	r4, #0
 801362c:	802c      	strh	r4, [r5, #0]
 801362e:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8013630:	802c      	strh	r4, [r5, #0]
 8013632:	601c      	str	r4, [r3, #0]
 8013634:	4606      	mov	r6, r0
 8013636:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801363a:	f7ff ffbd 	bl	80135b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801363e:	f1b9 0f03 	cmp.w	r9, #3
 8013642:	f340 80c2 	ble.w	80137ca <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8013646:	4631      	mov	r1, r6
 8013648:	a80c      	add	r0, sp, #48	; 0x30
 801364a:	f005 fe59 	bl	8019300 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801364e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8013652:	9306      	str	r3, [sp, #24]
 8013654:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8013658:	9307      	str	r3, [sp, #28]
 801365a:	9b03      	ldr	r3, [sp, #12]
 801365c:	f8d3 a000 	ldr.w	sl, [r3]
 8013660:	f1ba 0f00 	cmp.w	sl, #0
 8013664:	f000 80b4 	beq.w	80137d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 8013668:	4651      	mov	r1, sl
 801366a:	a810      	add	r0, sp, #64	; 0x40
 801366c:	f005 fe48 	bl	8019300 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013670:	9b01      	ldr	r3, [sp, #4]
 8013672:	9a06      	ldr	r2, [sp, #24]
 8013674:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8013678:	189d      	adds	r5, r3, r2
 801367a:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 801367e:	9a07      	ldr	r2, [sp, #28]
 8013680:	2002      	movs	r0, #2
 8013682:	fb91 f1f0 	sdiv	r1, r1, r0
 8013686:	4419      	add	r1, r3
 8013688:	1a6d      	subs	r5, r5, r1
 801368a:	9b02      	ldr	r3, [sp, #8]
 801368c:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8013690:	4413      	add	r3, r2
 8013692:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8013696:	fb92 f2f0 	sdiv	r2, r2, r0
 801369a:	440a      	add	r2, r1
 801369c:	1a9b      	subs	r3, r3, r2
 801369e:	435b      	muls	r3, r3
 80136a0:	fb05 3505 	mla	r5, r5, r5, r3
 80136a4:	4f4d      	ldr	r7, [pc, #308]	; (80137dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 80136a6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80136a8:	ac10      	add	r4, sp, #64	; 0x40
 80136aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80136ac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80136ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80136b0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80136b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80136b4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80136b8:	f1b9 0f0c 	cmp.w	r9, #12
 80136bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80136c0:	f04f 0303 	mov.w	r3, #3
 80136c4:	bfc8      	it	gt
 80136c6:	4698      	movgt	r8, r3
 80136c8:	f8cd 9000 	str.w	r9, [sp]
 80136cc:	f04f 0400 	mov.w	r4, #0
 80136d0:	bfdc      	itt	le
 80136d2:	f109 32ff 	addle.w	r2, r9, #4294967295
 80136d6:	fb92 f8f3 	sdivle	r8, r2, r3
 80136da:	1c63      	adds	r3, r4, #1
 80136dc:	aa10      	add	r2, sp, #64	; 0x40
 80136de:	f004 0401 	and.w	r4, r4, #1
 80136e2:	9308      	str	r3, [sp, #32]
 80136e4:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80136e8:	9b00      	ldr	r3, [sp, #0]
 80136ea:	fb93 f3f8 	sdiv	r3, r3, r8
 80136ee:	b29b      	uxth	r3, r3
 80136f0:	3404      	adds	r4, #4
 80136f2:	f04f 0b00 	mov.w	fp, #0
 80136f6:	9304      	str	r3, [sp, #16]
 80136f8:	9a04      	ldr	r2, [sp, #16]
 80136fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80136fe:	fb13 f302 	smulbb	r3, r3, r2
 8013702:	9a01      	ldr	r2, [sp, #4]
 8013704:	b29b      	uxth	r3, r3
 8013706:	1899      	adds	r1, r3, r2
 8013708:	9305      	str	r3, [sp, #20]
 801370a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801370e:	b209      	sxth	r1, r1
 8013710:	4299      	cmp	r1, r3
 8013712:	db4d      	blt.n	80137b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013714:	8932      	ldrh	r2, [r6, #8]
 8013716:	4413      	add	r3, r2
 8013718:	b21b      	sxth	r3, r3
 801371a:	4299      	cmp	r1, r3
 801371c:	da48      	bge.n	80137b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801371e:	9b04      	ldr	r3, [sp, #16]
 8013720:	6827      	ldr	r7, [r4, #0]
 8013722:	fb17 f703 	smulbb	r7, r7, r3
 8013726:	9b02      	ldr	r3, [sp, #8]
 8013728:	b2bf      	uxth	r7, r7
 801372a:	18fa      	adds	r2, r7, r3
 801372c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8013730:	b212      	sxth	r2, r2
 8013732:	429a      	cmp	r2, r3
 8013734:	db3c      	blt.n	80137b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013736:	8970      	ldrh	r0, [r6, #10]
 8013738:	4403      	add	r3, r0
 801373a:	b21b      	sxth	r3, r3
 801373c:	429a      	cmp	r2, r3
 801373e:	da37      	bge.n	80137b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013740:	2300      	movs	r3, #0
 8013742:	930b      	str	r3, [sp, #44]	; 0x2c
 8013744:	4630      	mov	r0, r6
 8013746:	ab0b      	add	r3, sp, #44	; 0x2c
 8013748:	f7ff ff36 	bl	80135b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801374c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801374e:	b37a      	cbz	r2, 80137b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013750:	4552      	cmp	r2, sl
 8013752:	d02d      	beq.n	80137b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013754:	4611      	mov	r1, r2
 8013756:	a80e      	add	r0, sp, #56	; 0x38
 8013758:	9209      	str	r2, [sp, #36]	; 0x24
 801375a:	f005 fdd1 	bl	8019300 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801375e:	9a06      	ldr	r2, [sp, #24]
 8013760:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8013764:	9b01      	ldr	r3, [sp, #4]
 8013766:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 801376a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801376e:	4413      	add	r3, r2
 8013770:	f04f 0e02 	mov.w	lr, #2
 8013774:	fb91 f1fe 	sdiv	r1, r1, lr
 8013778:	4401      	add	r1, r0
 801377a:	1a58      	subs	r0, r3, r1
 801377c:	9a07      	ldr	r2, [sp, #28]
 801377e:	9b02      	ldr	r3, [sp, #8]
 8013780:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8013784:	fb9c fcfe 	sdiv	ip, ip, lr
 8013788:	4413      	add	r3, r2
 801378a:	448c      	add	ip, r1
 801378c:	eba3 030c 	sub.w	r3, r3, ip
 8013790:	435b      	muls	r3, r3
 8013792:	fb00 3300 	mla	r3, r0, r0, r3
 8013796:	42ab      	cmp	r3, r5
 8013798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801379a:	d208      	bcs.n	80137ae <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 801379c:	9803      	ldr	r0, [sp, #12]
 801379e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80137a0:	6001      	str	r1, [r0, #0]
 80137a2:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80137a4:	9805      	ldr	r0, [sp, #20]
 80137a6:	8008      	strh	r0, [r1, #0]
 80137a8:	992b      	ldr	r1, [sp, #172]	; 0xac
 80137aa:	461d      	mov	r5, r3
 80137ac:	800f      	strh	r7, [r1, #0]
 80137ae:	4692      	mov	sl, r2
 80137b0:	f10b 0b01 	add.w	fp, fp, #1
 80137b4:	f1bb 0f04 	cmp.w	fp, #4
 80137b8:	f104 0408 	add.w	r4, r4, #8
 80137bc:	d19c      	bne.n	80136f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 80137be:	9b00      	ldr	r3, [sp, #0]
 80137c0:	9c08      	ldr	r4, [sp, #32]
 80137c2:	444b      	add	r3, r9
 80137c4:	4544      	cmp	r4, r8
 80137c6:	9300      	str	r3, [sp, #0]
 80137c8:	d187      	bne.n	80136da <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 80137ca:	b021      	add	sp, #132	; 0x84
 80137cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137d0:	f04f 35ff 	mov.w	r5, #4294967295
 80137d4:	e766      	b.n	80136a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80137d6:	bf00      	nop
 80137d8:	2000c43c 	.word	0x2000c43c
 80137dc:	0802d678 	.word	0x0802d678

080137e0 <_ZN8touchgfx4RectaNERKS0_>:
 80137e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80137e4:	f9b1 7000 	ldrsh.w	r7, [r1]
 80137e8:	888c      	ldrh	r4, [r1, #4]
 80137ea:	f9b0 9000 	ldrsh.w	r9, [r0]
 80137ee:	443c      	add	r4, r7
 80137f0:	b2a4      	uxth	r4, r4
 80137f2:	fa0f f884 	sxth.w	r8, r4
 80137f6:	45c1      	cmp	r9, r8
 80137f8:	da2f      	bge.n	801385a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80137fa:	8882      	ldrh	r2, [r0, #4]
 80137fc:	444a      	add	r2, r9
 80137fe:	b292      	uxth	r2, r2
 8013800:	fa0f fe82 	sxth.w	lr, r2
 8013804:	4577      	cmp	r7, lr
 8013806:	da28      	bge.n	801385a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013808:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801380c:	88cb      	ldrh	r3, [r1, #6]
 801380e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8013812:	442b      	add	r3, r5
 8013814:	b21b      	sxth	r3, r3
 8013816:	429e      	cmp	r6, r3
 8013818:	da1f      	bge.n	801385a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801381a:	88c3      	ldrh	r3, [r0, #6]
 801381c:	4433      	add	r3, r6
 801381e:	b29b      	uxth	r3, r3
 8013820:	fa0f fc83 	sxth.w	ip, r3
 8013824:	4565      	cmp	r5, ip
 8013826:	da18      	bge.n	801385a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013828:	454f      	cmp	r7, r9
 801382a:	bfb8      	it	lt
 801382c:	464f      	movlt	r7, r9
 801382e:	42b5      	cmp	r5, r6
 8013830:	bfb8      	it	lt
 8013832:	4635      	movlt	r5, r6
 8013834:	45f0      	cmp	r8, lr
 8013836:	bfd8      	it	le
 8013838:	4622      	movle	r2, r4
 801383a:	1bd2      	subs	r2, r2, r7
 801383c:	8082      	strh	r2, [r0, #4]
 801383e:	884a      	ldrh	r2, [r1, #2]
 8013840:	88c9      	ldrh	r1, [r1, #6]
 8013842:	8007      	strh	r7, [r0, #0]
 8013844:	440a      	add	r2, r1
 8013846:	b292      	uxth	r2, r2
 8013848:	b211      	sxth	r1, r2
 801384a:	458c      	cmp	ip, r1
 801384c:	bfa8      	it	ge
 801384e:	4613      	movge	r3, r2
 8013850:	1b5b      	subs	r3, r3, r5
 8013852:	80c3      	strh	r3, [r0, #6]
 8013854:	8045      	strh	r5, [r0, #2]
 8013856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801385a:	2300      	movs	r3, #0
 801385c:	8003      	strh	r3, [r0, #0]
 801385e:	8043      	strh	r3, [r0, #2]
 8013860:	8083      	strh	r3, [r0, #4]
 8013862:	80c3      	strh	r3, [r0, #6]
 8013864:	e7f7      	b.n	8013856 <_ZN8touchgfx4RectaNERKS0_+0x76>

08013866 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8013866:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801386a:	2b00      	cmp	r3, #0
 801386c:	dd06      	ble.n	801387c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801386e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8013872:	2800      	cmp	r0, #0
 8013874:	bfcc      	ite	gt
 8013876:	2000      	movgt	r0, #0
 8013878:	2001      	movle	r0, #1
 801387a:	4770      	bx	lr
 801387c:	2001      	movs	r0, #1
 801387e:	4770      	bx	lr

08013880 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8013880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013884:	2300      	movs	r3, #0
 8013886:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8013888:	8003      	strh	r3, [r0, #0]
 801388a:	4604      	mov	r4, r0
 801388c:	8043      	strh	r3, [r0, #2]
 801388e:	8083      	strh	r3, [r0, #4]
 8013890:	80c3      	strh	r3, [r0, #6]
 8013892:	2d00      	cmp	r5, #0
 8013894:	d040      	beq.n	8013918 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8013896:	1d28      	adds	r0, r5, #4
 8013898:	f7ff ffe5 	bl	8013866 <_ZNK8touchgfx4Rect7isEmptyEv>
 801389c:	b988      	cbnz	r0, 80138c2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801389e:	4620      	mov	r0, r4
 80138a0:	f7ff ffe1 	bl	8013866 <_ZNK8touchgfx4Rect7isEmptyEv>
 80138a4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80138a8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80138ac:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80138b0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80138b4:	b138      	cbz	r0, 80138c6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80138b6:	8022      	strh	r2, [r4, #0]
 80138b8:	8063      	strh	r3, [r4, #2]
 80138ba:	f8a4 e004 	strh.w	lr, [r4, #4]
 80138be:	f8a4 c006 	strh.w	ip, [r4, #6]
 80138c2:	69ad      	ldr	r5, [r5, #24]
 80138c4:	e7e5      	b.n	8013892 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80138c6:	f9b4 0000 	ldrsh.w	r0, [r4]
 80138ca:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80138ce:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80138d2:	4290      	cmp	r0, r2
 80138d4:	4607      	mov	r7, r0
 80138d6:	bfa8      	it	ge
 80138d8:	4617      	movge	r7, r2
 80138da:	4472      	add	r2, lr
 80138dc:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80138e0:	8027      	strh	r7, [r4, #0]
 80138e2:	4299      	cmp	r1, r3
 80138e4:	460e      	mov	r6, r1
 80138e6:	4440      	add	r0, r8
 80138e8:	bfa8      	it	ge
 80138ea:	461e      	movge	r6, r3
 80138ec:	4471      	add	r1, lr
 80138ee:	4463      	add	r3, ip
 80138f0:	b200      	sxth	r0, r0
 80138f2:	b212      	sxth	r2, r2
 80138f4:	b209      	sxth	r1, r1
 80138f6:	b21b      	sxth	r3, r3
 80138f8:	4290      	cmp	r0, r2
 80138fa:	bfac      	ite	ge
 80138fc:	ebc7 0200 	rsbge	r2, r7, r0
 8013900:	ebc7 0202 	rsblt	r2, r7, r2
 8013904:	4299      	cmp	r1, r3
 8013906:	bfac      	ite	ge
 8013908:	ebc6 0301 	rsbge	r3, r6, r1
 801390c:	ebc6 0303 	rsblt	r3, r6, r3
 8013910:	8066      	strh	r6, [r4, #2]
 8013912:	80a2      	strh	r2, [r4, #4]
 8013914:	80e3      	strh	r3, [r4, #6]
 8013916:	e7d4      	b.n	80138c2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8013918:	4620      	mov	r0, r4
 801391a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801391e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801391e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013922:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8013926:	b383      	cbz	r3, 801398a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8013928:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801392a:	b374      	cbz	r4, 801398a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801392c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8013930:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8013934:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8013938:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801393c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013940:	b303      	cbz	r3, 8013984 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8013942:	4668      	mov	r0, sp
 8013944:	1d21      	adds	r1, r4, #4
 8013946:	f8ad 5000 	strh.w	r5, [sp]
 801394a:	f8ad 6002 	strh.w	r6, [sp, #2]
 801394e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8013952:	f8ad 8006 	strh.w	r8, [sp, #6]
 8013956:	f7ff ff43 	bl	80137e0 <_ZN8touchgfx4RectaNERKS0_>
 801395a:	4668      	mov	r0, sp
 801395c:	f7ff ff83 	bl	8013866 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013960:	b980      	cbnz	r0, 8013984 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8013962:	f8bd 3000 	ldrh.w	r3, [sp]
 8013966:	88a2      	ldrh	r2, [r4, #4]
 8013968:	1a9b      	subs	r3, r3, r2
 801396a:	f8ad 3000 	strh.w	r3, [sp]
 801396e:	88e2      	ldrh	r2, [r4, #6]
 8013970:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013974:	1a9b      	subs	r3, r3, r2
 8013976:	f8ad 3002 	strh.w	r3, [sp, #2]
 801397a:	6823      	ldr	r3, [r4, #0]
 801397c:	4669      	mov	r1, sp
 801397e:	689b      	ldr	r3, [r3, #8]
 8013980:	4620      	mov	r0, r4
 8013982:	4798      	blx	r3
 8013984:	69a4      	ldr	r4, [r4, #24]
 8013986:	2c00      	cmp	r4, #0
 8013988:	d1d8      	bne.n	801393c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801398a:	b002      	add	sp, #8
 801398c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013990 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8013990:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013992:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8013996:	460d      	mov	r5, r1
 8013998:	4616      	mov	r6, r2
 801399a:	b323      	cbz	r3, 80139e6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801399c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801399e:	b314      	cbz	r4, 80139e6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80139a0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80139a4:	b1eb      	cbz	r3, 80139e2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80139a6:	6828      	ldr	r0, [r5, #0]
 80139a8:	6869      	ldr	r1, [r5, #4]
 80139aa:	466b      	mov	r3, sp
 80139ac:	c303      	stmia	r3!, {r0, r1}
 80139ae:	4668      	mov	r0, sp
 80139b0:	1d21      	adds	r1, r4, #4
 80139b2:	f7ff ff15 	bl	80137e0 <_ZN8touchgfx4RectaNERKS0_>
 80139b6:	4668      	mov	r0, sp
 80139b8:	f7ff ff55 	bl	8013866 <_ZNK8touchgfx4Rect7isEmptyEv>
 80139bc:	b988      	cbnz	r0, 80139e2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80139be:	f8bd 3000 	ldrh.w	r3, [sp]
 80139c2:	88a2      	ldrh	r2, [r4, #4]
 80139c4:	1a9b      	subs	r3, r3, r2
 80139c6:	f8ad 3000 	strh.w	r3, [sp]
 80139ca:	88e2      	ldrh	r2, [r4, #6]
 80139cc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80139d0:	1a9b      	subs	r3, r3, r2
 80139d2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80139d6:	6823      	ldr	r3, [r4, #0]
 80139d8:	4632      	mov	r2, r6
 80139da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80139dc:	4669      	mov	r1, sp
 80139de:	4620      	mov	r0, r4
 80139e0:	4798      	blx	r3
 80139e2:	69a4      	ldr	r4, [r4, #24]
 80139e4:	e7db      	b.n	801399e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80139e6:	b002      	add	sp, #8
 80139e8:	bd70      	pop	{r4, r5, r6, pc}

080139ea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80139ea:	b513      	push	{r0, r1, r4, lr}
 80139ec:	6803      	ldr	r3, [r0, #0]
 80139ee:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80139f2:	2300      	movs	r3, #0
 80139f4:	e9cd 3300 	strd	r3, r3, [sp]
 80139f8:	466b      	mov	r3, sp
 80139fa:	47a0      	blx	r4
 80139fc:	b002      	add	sp, #8
 80139fe:	bd10      	pop	{r4, pc}

08013a00 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8013a00:	2301      	movs	r3, #1
 8013a02:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8013a06:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8013a0a:	4770      	bx	lr

08013a0c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8013a0c:	2301      	movs	r3, #1
 8013a0e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8013a12:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8013a16:	4770      	bx	lr

08013a18 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8013a18:	6843      	ldr	r3, [r0, #4]
 8013a1a:	2201      	movs	r2, #1
 8013a1c:	725a      	strb	r2, [r3, #9]
 8013a1e:	6840      	ldr	r0, [r0, #4]
 8013a20:	6803      	ldr	r3, [r0, #0]
 8013a22:	691b      	ldr	r3, [r3, #16]
 8013a24:	4718      	bx	r3

08013a26 <_ZN8touchgfx3HAL8flushDMAEv>:
 8013a26:	6840      	ldr	r0, [r0, #4]
 8013a28:	6803      	ldr	r3, [r0, #0]
 8013a2a:	689b      	ldr	r3, [r3, #8]
 8013a2c:	4718      	bx	r3

08013a2e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8013a2e:	b530      	push	{r4, r5, lr}
 8013a30:	b08b      	sub	sp, #44	; 0x2c
 8013a32:	6804      	ldr	r4, [r0, #0]
 8013a34:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8013a38:	9509      	str	r5, [sp, #36]	; 0x24
 8013a3a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8013a3e:	9508      	str	r5, [sp, #32]
 8013a40:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8013a44:	9507      	str	r5, [sp, #28]
 8013a46:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8013a4a:	9506      	str	r5, [sp, #24]
 8013a4c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8013a50:	9505      	str	r5, [sp, #20]
 8013a52:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8013a56:	9504      	str	r5, [sp, #16]
 8013a58:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8013a5c:	9503      	str	r5, [sp, #12]
 8013a5e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8013a62:	9502      	str	r5, [sp, #8]
 8013a64:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8013a68:	e9cd 3500 	strd	r3, r5, [sp]
 8013a6c:	4613      	mov	r3, r2
 8013a6e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8013a70:	2200      	movs	r2, #0
 8013a72:	47a0      	blx	r4
 8013a74:	b00b      	add	sp, #44	; 0x2c
 8013a76:	bd30      	pop	{r4, r5, pc}

08013a78 <_ZN8touchgfx3HAL10beginFrameEv>:
 8013a78:	4b04      	ldr	r3, [pc, #16]	; (8013a8c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8013a7a:	781b      	ldrb	r3, [r3, #0]
 8013a7c:	b123      	cbz	r3, 8013a88 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8013a7e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8013a82:	f080 0001 	eor.w	r0, r0, #1
 8013a86:	4770      	bx	lr
 8013a88:	2001      	movs	r0, #1
 8013a8a:	4770      	bx	lr
 8013a8c:	2000c43a 	.word	0x2000c43a

08013a90 <_ZN8touchgfx3HAL8endFrameEv>:
 8013a90:	b510      	push	{r4, lr}
 8013a92:	4604      	mov	r4, r0
 8013a94:	6840      	ldr	r0, [r0, #4]
 8013a96:	6803      	ldr	r3, [r0, #0]
 8013a98:	689b      	ldr	r3, [r3, #8]
 8013a9a:	4798      	blx	r3
 8013a9c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8013aa0:	b113      	cbz	r3, 8013aa8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8013aa2:	2301      	movs	r3, #1
 8013aa4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8013aa8:	bd10      	pop	{r4, pc}

08013aaa <_ZN8touchgfx3HAL10initializeEv>:
 8013aaa:	b510      	push	{r4, lr}
 8013aac:	4604      	mov	r4, r0
 8013aae:	f7fd fce3 	bl	8011478 <_ZN8touchgfx10OSWrappers10initializeEv>
 8013ab2:	6860      	ldr	r0, [r4, #4]
 8013ab4:	6803      	ldr	r3, [r0, #0]
 8013ab6:	68db      	ldr	r3, [r3, #12]
 8013ab8:	4798      	blx	r3
 8013aba:	68e0      	ldr	r0, [r4, #12]
 8013abc:	6803      	ldr	r3, [r0, #0]
 8013abe:	689b      	ldr	r3, [r3, #8]
 8013ac0:	4798      	blx	r3
 8013ac2:	6823      	ldr	r3, [r4, #0]
 8013ac4:	4620      	mov	r0, r4
 8013ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013acc:	4718      	bx	r3

08013ace <_ZN8touchgfx3HAL9taskEntryEv>:
 8013ace:	b508      	push	{r3, lr}
 8013ad0:	6803      	ldr	r3, [r0, #0]
 8013ad2:	4604      	mov	r4, r0
 8013ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013ad8:	4798      	blx	r3
 8013ada:	6823      	ldr	r3, [r4, #0]
 8013adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013ade:	4620      	mov	r0, r4
 8013ae0:	4798      	blx	r3
 8013ae2:	f7fd fd3f 	bl	8011564 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8013ae6:	6823      	ldr	r3, [r4, #0]
 8013ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013aea:	e7f8      	b.n	8013ade <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08013aec <_ZN8touchgfx3HAL4tickEv>:
 8013aec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013aee:	6803      	ldr	r3, [r0, #0]
 8013af0:	4d5b      	ldr	r5, [pc, #364]	; (8013c60 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8013af2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013af6:	4604      	mov	r4, r0
 8013af8:	4798      	blx	r3
 8013afa:	2800      	cmp	r0, #0
 8013afc:	f000 8095 	beq.w	8013c2a <_ZN8touchgfx3HAL4tickEv+0x13e>
 8013b00:	2001      	movs	r0, #1
 8013b02:	f7fd fa01 	bl	8010f08 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8013b06:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8013b0a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013b0e:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8013b12:	2600      	movs	r6, #0
 8013b14:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8013b18:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8013b1c:	b133      	cbz	r3, 8013b2c <_ZN8touchgfx3HAL4tickEv+0x40>
 8013b1e:	6823      	ldr	r3, [r4, #0]
 8013b20:	4620      	mov	r0, r4
 8013b22:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8013b26:	4798      	blx	r3
 8013b28:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8013b2c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8013b30:	6862      	ldr	r2, [r4, #4]
 8013b32:	f083 0301 	eor.w	r3, r3, #1
 8013b36:	7253      	strb	r3, [r2, #9]
 8013b38:	2601      	movs	r6, #1
 8013b3a:	702e      	strb	r6, [r5, #0]
 8013b3c:	f004 fb72 	bl	8018224 <_ZN8touchgfx11Application11getInstanceEv>
 8013b40:	6803      	ldr	r3, [r0, #0]
 8013b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b44:	4798      	blx	r3
 8013b46:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8013b4a:	b90b      	cbnz	r3, 8013b50 <_ZN8touchgfx3HAL4tickEv+0x64>
 8013b4c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8013b50:	f004 fb68 	bl	8018224 <_ZN8touchgfx11Application11getInstanceEv>
 8013b54:	6803      	ldr	r3, [r0, #0]
 8013b56:	695b      	ldr	r3, [r3, #20]
 8013b58:	4798      	blx	r3
 8013b5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b5c:	6803      	ldr	r3, [r0, #0]
 8013b5e:	691b      	ldr	r3, [r3, #16]
 8013b60:	4798      	blx	r3
 8013b62:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8013b66:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8013b6a:	3b01      	subs	r3, #1
 8013b6c:	b2db      	uxtb	r3, r3
 8013b6e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013b72:	b10a      	cbz	r2, 8013b78 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d1eb      	bne.n	8013b50 <_ZN8touchgfx3HAL4tickEv+0x64>
 8013b78:	4a3a      	ldr	r2, [pc, #232]	; (8013c64 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8013b7a:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8013b7e:	7813      	ldrb	r3, [r2, #0]
 8013b80:	3301      	adds	r3, #1
 8013b82:	b25b      	sxtb	r3, r3
 8013b84:	4299      	cmp	r1, r3
 8013b86:	7013      	strb	r3, [r2, #0]
 8013b88:	dc10      	bgt.n	8013bac <_ZN8touchgfx3HAL4tickEv+0xc0>
 8013b8a:	68e0      	ldr	r0, [r4, #12]
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	7013      	strb	r3, [r2, #0]
 8013b90:	6803      	ldr	r3, [r0, #0]
 8013b92:	aa03      	add	r2, sp, #12
 8013b94:	68db      	ldr	r3, [r3, #12]
 8013b96:	a902      	add	r1, sp, #8
 8013b98:	4798      	blx	r3
 8013b9a:	6823      	ldr	r3, [r4, #0]
 8013b9c:	2800      	cmp	r0, #0
 8013b9e:	d050      	beq.n	8013c42 <_ZN8touchgfx3HAL4tickEv+0x156>
 8013ba0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013ba4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8013ba8:	4620      	mov	r0, r4
 8013baa:	4798      	blx	r3
 8013bac:	6960      	ldr	r0, [r4, #20]
 8013bae:	2300      	movs	r3, #0
 8013bb0:	f88d 3007 	strb.w	r3, [sp, #7]
 8013bb4:	b158      	cbz	r0, 8013bce <_ZN8touchgfx3HAL4tickEv+0xe2>
 8013bb6:	6803      	ldr	r3, [r0, #0]
 8013bb8:	f10d 0107 	add.w	r1, sp, #7
 8013bbc:	68db      	ldr	r3, [r3, #12]
 8013bbe:	4798      	blx	r3
 8013bc0:	b128      	cbz	r0, 8013bce <_ZN8touchgfx3HAL4tickEv+0xe2>
 8013bc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013bc4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013bc8:	6803      	ldr	r3, [r0, #0]
 8013bca:	68db      	ldr	r3, [r3, #12]
 8013bcc:	4798      	blx	r3
 8013bce:	f104 001c 	add.w	r0, r4, #28
 8013bd2:	f013 fb1b 	bl	802720c <_ZN8touchgfx8Gestures4tickEv>
 8013bd6:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8013bda:	b30b      	cbz	r3, 8013c20 <_ZN8touchgfx3HAL4tickEv+0x134>
 8013bdc:	6920      	ldr	r0, [r4, #16]
 8013bde:	6803      	ldr	r3, [r0, #0]
 8013be0:	691b      	ldr	r3, [r3, #16]
 8013be2:	4798      	blx	r3
 8013be4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013be6:	4606      	mov	r6, r0
 8013be8:	b903      	cbnz	r3, 8013bec <_ZN8touchgfx3HAL4tickEv+0x100>
 8013bea:	6720      	str	r0, [r4, #112]	; 0x70
 8013bec:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013bee:	4a1e      	ldr	r2, [pc, #120]	; (8013c68 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8013bf0:	1af3      	subs	r3, r6, r3
 8013bf2:	4293      	cmp	r3, r2
 8013bf4:	d914      	bls.n	8013c20 <_ZN8touchgfx3HAL4tickEv+0x134>
 8013bf6:	6920      	ldr	r0, [r4, #16]
 8013bf8:	6803      	ldr	r3, [r0, #0]
 8013bfa:	699b      	ldr	r3, [r3, #24]
 8013bfc:	4798      	blx	r3
 8013bfe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013c00:	2264      	movs	r2, #100	; 0x64
 8013c02:	1af3      	subs	r3, r6, r3
 8013c04:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c08:	fbb0 f0f3 	udiv	r0, r0, r3
 8013c0c:	2800      	cmp	r0, #0
 8013c0e:	dc1d      	bgt.n	8013c4c <_ZN8touchgfx3HAL4tickEv+0x160>
 8013c10:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8013c14:	6920      	ldr	r0, [r4, #16]
 8013c16:	6803      	ldr	r3, [r0, #0]
 8013c18:	2100      	movs	r1, #0
 8013c1a:	69db      	ldr	r3, [r3, #28]
 8013c1c:	4798      	blx	r3
 8013c1e:	6726      	str	r6, [r4, #112]	; 0x70
 8013c20:	f004 fb00 	bl	8018224 <_ZN8touchgfx11Application11getInstanceEv>
 8013c24:	6803      	ldr	r3, [r0, #0]
 8013c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c28:	4798      	blx	r3
 8013c2a:	6823      	ldr	r3, [r4, #0]
 8013c2c:	4620      	mov	r0, r4
 8013c2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013c32:	4798      	blx	r3
 8013c34:	2001      	movs	r0, #1
 8013c36:	f7fd f972 	bl	8010f1e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	702b      	strb	r3, [r5, #0]
 8013c3e:	b004      	add	sp, #16
 8013c40:	bd70      	pop	{r4, r5, r6, pc}
 8013c42:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8013c46:	4620      	mov	r0, r4
 8013c48:	4798      	blx	r3
 8013c4a:	e7af      	b.n	8013bac <_ZN8touchgfx3HAL4tickEv+0xc0>
 8013c4c:	2863      	cmp	r0, #99	; 0x63
 8013c4e:	bfcb      	itete	gt
 8013c50:	2300      	movgt	r3, #0
 8013c52:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8013c56:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8013c5a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8013c5e:	e7d9      	b.n	8013c14 <_ZN8touchgfx3HAL4tickEv+0x128>
 8013c60:	2000c440 	.word	0x2000c440
 8013c64:	2000c441 	.word	0x2000c441
 8013c68:	05f5e100 	.word	0x05f5e100

08013c6c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8013c6c:	f7fd bc46 	b.w	80114fc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013c70 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8013c70:	6581      	str	r1, [r0, #88]	; 0x58
 8013c72:	301c      	adds	r0, #28
 8013c74:	f013 bac8 	b.w	8027208 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08013c78 <_ZN8touchgfx3HAL5touchEll>:
 8013c78:	b530      	push	{r4, r5, lr}
 8013c7a:	b087      	sub	sp, #28
 8013c7c:	4604      	mov	r4, r0
 8013c7e:	a804      	add	r0, sp, #16
 8013c80:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8013c84:	f004 f854 	bl	8017d30 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8013c88:	9b04      	ldr	r3, [sp, #16]
 8013c8a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013c8e:	a906      	add	r1, sp, #24
 8013c90:	9b05      	ldr	r3, [sp, #20]
 8013c92:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8013c96:	a803      	add	r0, sp, #12
 8013c98:	f004 f89c 	bl	8017dd4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8013c9c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8013ca0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8013ca4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8013ca8:	f104 001c 	add.w	r0, r4, #28
 8013cac:	b189      	cbz	r1, 8013cd2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8013cae:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8013cb2:	9300      	str	r3, [sp, #0]
 8013cb4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8013cb8:	4613      	mov	r3, r2
 8013cba:	462a      	mov	r2, r5
 8013cbc:	f013 fab4 	bl	8027228 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8013cc0:	b128      	cbz	r0, 8013cce <_ZN8touchgfx3HAL5touchEll+0x56>
 8013cc2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8013cc6:	65e3      	str	r3, [r4, #92]	; 0x5c
 8013cc8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8013ccc:	6623      	str	r3, [r4, #96]	; 0x60
 8013cce:	b007      	add	sp, #28
 8013cd0:	bd30      	pop	{r4, r5, pc}
 8013cd2:	f013 fae9 	bl	80272a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8013cd6:	2301      	movs	r3, #1
 8013cd8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8013cdc:	e7f1      	b.n	8013cc2 <_ZN8touchgfx3HAL5touchEll+0x4a>

08013cde <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8013cde:	b510      	push	{r4, lr}
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d046      	beq.n	8013d72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013ce4:	ea81 0002 	eor.w	r0, r1, r2
 8013ce8:	07c4      	lsls	r4, r0, #31
 8013cea:	d508      	bpl.n	8013cfe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8013cec:	440b      	add	r3, r1
 8013cee:	3a01      	subs	r2, #1
 8013cf0:	428b      	cmp	r3, r1
 8013cf2:	d93e      	bls.n	8013d72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013cf4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8013cf8:	f801 0b01 	strb.w	r0, [r1], #1
 8013cfc:	e7f8      	b.n	8013cf0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8013cfe:	07d0      	lsls	r0, r2, #31
 8013d00:	bf42      	ittt	mi
 8013d02:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8013d06:	f801 0b01 	strbmi.w	r0, [r1], #1
 8013d0a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8013d0e:	2b01      	cmp	r3, #1
 8013d10:	d911      	bls.n	8013d36 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8013d12:	ea81 0402 	eor.w	r4, r1, r2
 8013d16:	07a4      	lsls	r4, r4, #30
 8013d18:	4610      	mov	r0, r2
 8013d1a:	d022      	beq.n	8013d62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8013d1c:	f023 0401 	bic.w	r4, r3, #1
 8013d20:	440c      	add	r4, r1
 8013d22:	428c      	cmp	r4, r1
 8013d24:	4602      	mov	r2, r0
 8013d26:	d904      	bls.n	8013d32 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8013d28:	8812      	ldrh	r2, [r2, #0]
 8013d2a:	f821 2b02 	strh.w	r2, [r1], #2
 8013d2e:	3002      	adds	r0, #2
 8013d30:	e7f7      	b.n	8013d22 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8013d32:	f003 0301 	and.w	r3, r3, #1
 8013d36:	f023 0003 	bic.w	r0, r3, #3
 8013d3a:	4408      	add	r0, r1
 8013d3c:	4288      	cmp	r0, r1
 8013d3e:	4614      	mov	r4, r2
 8013d40:	d904      	bls.n	8013d4c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8013d42:	6824      	ldr	r4, [r4, #0]
 8013d44:	f841 4b04 	str.w	r4, [r1], #4
 8013d48:	3204      	adds	r2, #4
 8013d4a:	e7f7      	b.n	8013d3c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8013d4c:	f003 0303 	and.w	r3, r3, #3
 8013d50:	440b      	add	r3, r1
 8013d52:	3a01      	subs	r2, #1
 8013d54:	428b      	cmp	r3, r1
 8013d56:	d90c      	bls.n	8013d72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013d58:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8013d5c:	f801 0b01 	strb.w	r0, [r1], #1
 8013d60:	e7f8      	b.n	8013d54 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8013d62:	0790      	lsls	r0, r2, #30
 8013d64:	d0e7      	beq.n	8013d36 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8013d66:	f832 0b02 	ldrh.w	r0, [r2], #2
 8013d6a:	f821 0b02 	strh.w	r0, [r1], #2
 8013d6e:	3b02      	subs	r3, #2
 8013d70:	e7e1      	b.n	8013d36 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8013d72:	2001      	movs	r0, #1
 8013d74:	bd10      	pop	{r4, pc}

08013d76 <_ZN8touchgfx3HAL7noTouchEv>:
 8013d76:	b510      	push	{r4, lr}
 8013d78:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8013d7c:	4604      	mov	r4, r0
 8013d7e:	b153      	cbz	r3, 8013d96 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8013d80:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8013d84:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8013d88:	2101      	movs	r1, #1
 8013d8a:	301c      	adds	r0, #28
 8013d8c:	f013 fa8c 	bl	80272a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8013d90:	2300      	movs	r3, #0
 8013d92:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8013d96:	bd10      	pop	{r4, pc}

08013d98 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8013d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013d9c:	b085      	sub	sp, #20
 8013d9e:	ad04      	add	r5, sp, #16
 8013da0:	4604      	mov	r4, r0
 8013da2:	2000      	movs	r0, #0
 8013da4:	f845 0d04 	str.w	r0, [r5, #-4]!
 8013da8:	69a0      	ldr	r0, [r4, #24]
 8013daa:	6806      	ldr	r6, [r0, #0]
 8013dac:	9501      	str	r5, [sp, #4]
 8013dae:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8013db2:	9500      	str	r5, [sp, #0]
 8013db4:	6835      	ldr	r5, [r6, #0]
 8013db6:	4699      	mov	r9, r3
 8013db8:	460f      	mov	r7, r1
 8013dba:	4690      	mov	r8, r2
 8013dbc:	47a8      	blx	r5
 8013dbe:	4d10      	ldr	r5, [pc, #64]	; (8013e00 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8013dc0:	4606      	mov	r6, r0
 8013dc2:	f8a5 9000 	strh.w	r9, [r5]
 8013dc6:	f7f8 fc61 	bl	800c68c <_ZN8touchgfx3HAL3lcdEv>
 8013dca:	6803      	ldr	r3, [r0, #0]
 8013dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dce:	4798      	blx	r3
 8013dd0:	b128      	cbz	r0, 8013dde <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8013dd2:	2801      	cmp	r0, #1
 8013dd4:	d00b      	beq.n	8013dee <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8013dd6:	4630      	mov	r0, r6
 8013dd8:	b005      	add	sp, #20
 8013dda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013dde:	882b      	ldrh	r3, [r5, #0]
 8013de0:	fb08 7203 	mla	r2, r8, r3, r7
 8013de4:	9b03      	ldr	r3, [sp, #12]
 8013de6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8013dea:	63e3      	str	r3, [r4, #60]	; 0x3c
 8013dec:	e7f3      	b.n	8013dd6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8013dee:	882a      	ldrh	r2, [r5, #0]
 8013df0:	9b03      	ldr	r3, [sp, #12]
 8013df2:	fb08 7202 	mla	r2, r8, r2, r7
 8013df6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013dfa:	1a9a      	subs	r2, r3, r2
 8013dfc:	63e2      	str	r2, [r4, #60]	; 0x3c
 8013dfe:	e7ea      	b.n	8013dd6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8013e00:	2000c436 	.word	0x2000c436

08013e04 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8013e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e06:	b08b      	sub	sp, #44	; 0x2c
 8013e08:	4617      	mov	r7, r2
 8013e0a:	4604      	mov	r4, r0
 8013e0c:	460e      	mov	r6, r1
 8013e0e:	461d      	mov	r5, r3
 8013e10:	f7f8 fc3c 	bl	800c68c <_ZN8touchgfx3HAL3lcdEv>
 8013e14:	6803      	ldr	r3, [r0, #0]
 8013e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e18:	4798      	blx	r3
 8013e1a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8013e1e:	9007      	str	r0, [sp, #28]
 8013e20:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8013e24:	4b0d      	ldr	r3, [pc, #52]	; (8013e5c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8013e26:	6822      	ldr	r2, [r4, #0]
 8013e28:	881b      	ldrh	r3, [r3, #0]
 8013e2a:	9306      	str	r3, [sp, #24]
 8013e2c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8013e30:	9305      	str	r3, [sp, #20]
 8013e32:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8013e36:	9304      	str	r3, [sp, #16]
 8013e38:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013e3c:	9303      	str	r3, [sp, #12]
 8013e3e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8013e42:	9302      	str	r3, [sp, #8]
 8013e44:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013e48:	e9cd 5300 	strd	r5, r3, [sp]
 8013e4c:	4631      	mov	r1, r6
 8013e4e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8013e50:	463b      	mov	r3, r7
 8013e52:	2200      	movs	r2, #0
 8013e54:	4620      	mov	r0, r4
 8013e56:	47a8      	blx	r5
 8013e58:	b00b      	add	sp, #44	; 0x2c
 8013e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e5c:	2000c436 	.word	0x2000c436

08013e60 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8013e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013e64:	4698      	mov	r8, r3
 8013e66:	6803      	ldr	r3, [r0, #0]
 8013e68:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8013e6a:	4b15      	ldr	r3, [pc, #84]	; (8013ec0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8013e6c:	b08b      	sub	sp, #44	; 0x2c
 8013e6e:	4617      	mov	r7, r2
 8013e70:	f8b3 9000 	ldrh.w	r9, [r3]
 8013e74:	460e      	mov	r6, r1
 8013e76:	4604      	mov	r4, r0
 8013e78:	f7f8 fc08 	bl	800c68c <_ZN8touchgfx3HAL3lcdEv>
 8013e7c:	6803      	ldr	r3, [r0, #0]
 8013e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e80:	4798      	blx	r3
 8013e82:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8013e86:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8013e8a:	2302      	movs	r3, #2
 8013e8c:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8013e90:	2301      	movs	r3, #1
 8013e92:	9305      	str	r3, [sp, #20]
 8013e94:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8013e98:	9304      	str	r3, [sp, #16]
 8013e9a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8013e9e:	9303      	str	r3, [sp, #12]
 8013ea0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8013ea4:	9302      	str	r3, [sp, #8]
 8013ea6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013eaa:	2200      	movs	r2, #0
 8013eac:	e9cd 8300 	strd	r8, r3, [sp]
 8013eb0:	4631      	mov	r1, r6
 8013eb2:	463b      	mov	r3, r7
 8013eb4:	4620      	mov	r0, r4
 8013eb6:	47a8      	blx	r5
 8013eb8:	b00b      	add	sp, #44	; 0x2c
 8013eba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ebe:	bf00      	nop
 8013ec0:	2000c436 	.word	0x2000c436

08013ec4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8013ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ec8:	4698      	mov	r8, r3
 8013eca:	6803      	ldr	r3, [r0, #0]
 8013ecc:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8013ece:	4b11      	ldr	r3, [pc, #68]	; (8013f14 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8013ed0:	b087      	sub	sp, #28
 8013ed2:	f8b3 9000 	ldrh.w	r9, [r3]
 8013ed6:	460e      	mov	r6, r1
 8013ed8:	4617      	mov	r7, r2
 8013eda:	4604      	mov	r4, r0
 8013edc:	f7f8 fbd6 	bl	800c68c <_ZN8touchgfx3HAL3lcdEv>
 8013ee0:	6803      	ldr	r3, [r0, #0]
 8013ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ee4:	4798      	blx	r3
 8013ee6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8013eea:	f8cd 900c 	str.w	r9, [sp, #12]
 8013eee:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8013ef2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8013ef6:	9302      	str	r3, [sp, #8]
 8013ef8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8013efc:	9301      	str	r3, [sp, #4]
 8013efe:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8013f02:	9300      	str	r3, [sp, #0]
 8013f04:	463a      	mov	r2, r7
 8013f06:	4643      	mov	r3, r8
 8013f08:	4631      	mov	r1, r6
 8013f0a:	4620      	mov	r0, r4
 8013f0c:	47a8      	blx	r5
 8013f0e:	b007      	add	sp, #28
 8013f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f14:	2000c436 	.word	0x2000c436

08013f18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8013f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f1c:	4604      	mov	r4, r0
 8013f1e:	b08f      	sub	sp, #60	; 0x3c
 8013f20:	4610      	mov	r0, r2
 8013f22:	460d      	mov	r5, r1
 8013f24:	4691      	mov	r9, r2
 8013f26:	461e      	mov	r6, r3
 8013f28:	f007 fbc2 	bl	801b6b0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8013f2c:	2800      	cmp	r0, #0
 8013f2e:	f000 809d 	beq.w	801406c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8013f32:	6823      	ldr	r3, [r4, #0]
 8013f34:	f8df b198 	ldr.w	fp, [pc, #408]	; 80140d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8013f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f3a:	f8df a198 	ldr.w	sl, [pc, #408]	; 80140d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8013f3e:	4f61      	ldr	r7, [pc, #388]	; (80140c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8013f40:	4620      	mov	r0, r4
 8013f42:	4798      	blx	r3
 8013f44:	6823      	ldr	r3, [r4, #0]
 8013f46:	4620      	mov	r0, r4
 8013f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f4a:	4798      	blx	r3
 8013f4c:	f8bb 3000 	ldrh.w	r3, [fp]
 8013f50:	9301      	str	r3, [sp, #4]
 8013f52:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8013f56:	f8ba 3000 	ldrh.w	r3, [sl]
 8013f5a:	9302      	str	r3, [sp, #8]
 8013f5c:	883b      	ldrh	r3, [r7, #0]
 8013f5e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8013f62:	9303      	str	r3, [sp, #12]
 8013f64:	4b58      	ldr	r3, [pc, #352]	; (80140c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8013f66:	9305      	str	r3, [sp, #20]
 8013f68:	881a      	ldrh	r2, [r3, #0]
 8013f6a:	9204      	str	r2, [sp, #16]
 8013f6c:	4640      	mov	r0, r8
 8013f6e:	f007 fc33 	bl	801b7d8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013f72:	8038      	strh	r0, [r7, #0]
 8013f74:	4640      	mov	r0, r8
 8013f76:	f007 fc63 	bl	801b840 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013f7a:	9b05      	ldr	r3, [sp, #20]
 8013f7c:	b280      	uxth	r0, r0
 8013f7e:	8018      	strh	r0, [r3, #0]
 8013f80:	4b52      	ldr	r3, [pc, #328]	; (80140cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8013f82:	781b      	ldrb	r3, [r3, #0]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d174      	bne.n	8014072 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8013f88:	883b      	ldrh	r3, [r7, #0]
 8013f8a:	f8ab 3000 	strh.w	r3, [fp]
 8013f8e:	f8aa 0000 	strh.w	r0, [sl]
 8013f92:	4648      	mov	r0, r9
 8013f94:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8013f98:	f007 fb8a 	bl	801b6b0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8013f9c:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8013fa0:	2200      	movs	r2, #0
 8013fa2:	4611      	mov	r1, r2
 8013fa4:	4628      	mov	r0, r5
 8013fa6:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8013faa:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8013fae:	f7f9 f8f4 	bl	800d19a <_ZN8touchgfx8Drawable5setXYEss>
 8013fb2:	2301      	movs	r3, #1
 8013fb4:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8013fb8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8013fbc:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	dd5c      	ble.n	801407e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8013fc4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	dd58      	ble.n	801407e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8013fcc:	462a      	mov	r2, r5
 8013fce:	ab0a      	add	r3, sp, #40	; 0x28
 8013fd0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8013fd4:	6851      	ldr	r1, [r2, #4]
 8013fd6:	c303      	stmia	r3!, {r0, r1}
 8013fd8:	4631      	mov	r1, r6
 8013fda:	a80a      	add	r0, sp, #40	; 0x28
 8013fdc:	f7ff fc00 	bl	80137e0 <_ZN8touchgfx4RectaNERKS0_>
 8013fe0:	4b38      	ldr	r3, [pc, #224]	; (80140c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8013fe2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013fe6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8013fea:	2100      	movs	r1, #0
 8013fec:	aa0a      	add	r2, sp, #40	; 0x28
 8013fee:	4b36      	ldr	r3, [pc, #216]	; (80140c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8013ff0:	910c      	str	r1, [sp, #48]	; 0x30
 8013ff2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013ffa:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8013ffe:	ab08      	add	r3, sp, #32
 8014000:	e883 0003 	stmia.w	r3, {r0, r1}
 8014004:	4618      	mov	r0, r3
 8014006:	a90c      	add	r1, sp, #48	; 0x30
 8014008:	f7ff fbea 	bl	80137e0 <_ZN8touchgfx4RectaNERKS0_>
 801400c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801400e:	2b00      	cmp	r3, #0
 8014010:	d13c      	bne.n	801408c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8014012:	2000      	movs	r0, #0
 8014014:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8014018:	2600      	movs	r6, #0
 801401a:	682a      	ldr	r2, [r5, #0]
 801401c:	696b      	ldr	r3, [r5, #20]
 801401e:	616e      	str	r6, [r5, #20]
 8014020:	9305      	str	r3, [sp, #20]
 8014022:	6892      	ldr	r2, [r2, #8]
 8014024:	a908      	add	r1, sp, #32
 8014026:	4628      	mov	r0, r5
 8014028:	4790      	blx	r2
 801402a:	9b05      	ldr	r3, [sp, #20]
 801402c:	616b      	str	r3, [r5, #20]
 801402e:	4652      	mov	r2, sl
 8014030:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8014034:	4649      	mov	r1, r9
 8014036:	4628      	mov	r0, r5
 8014038:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801403c:	f7f9 f8ad 	bl	800d19a <_ZN8touchgfx8Drawable5setXYEss>
 8014040:	4b23      	ldr	r3, [pc, #140]	; (80140d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8014042:	9a01      	ldr	r2, [sp, #4]
 8014044:	801a      	strh	r2, [r3, #0]
 8014046:	4b23      	ldr	r3, [pc, #140]	; (80140d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8014048:	9a02      	ldr	r2, [sp, #8]
 801404a:	801a      	strh	r2, [r3, #0]
 801404c:	4b1d      	ldr	r3, [pc, #116]	; (80140c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801404e:	9a03      	ldr	r2, [sp, #12]
 8014050:	801a      	strh	r2, [r3, #0]
 8014052:	4b1d      	ldr	r3, [pc, #116]	; (80140c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014054:	9a04      	ldr	r2, [sp, #16]
 8014056:	801a      	strh	r2, [r3, #0]
 8014058:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 801405c:	6823      	ldr	r3, [r4, #0]
 801405e:	4620      	mov	r0, r4
 8014060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014062:	4798      	blx	r3
 8014064:	6823      	ldr	r3, [r4, #0]
 8014066:	4620      	mov	r0, r4
 8014068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801406a:	4798      	blx	r3
 801406c:	b00f      	add	sp, #60	; 0x3c
 801406e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014072:	883b      	ldrh	r3, [r7, #0]
 8014074:	f8ab 0000 	strh.w	r0, [fp]
 8014078:	f8aa 3000 	strh.w	r3, [sl]
 801407c:	e789      	b.n	8013f92 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801407e:	462a      	mov	r2, r5
 8014080:	ab0a      	add	r3, sp, #40	; 0x28
 8014082:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8014086:	6851      	ldr	r1, [r2, #4]
 8014088:	c303      	stmia	r3!, {r0, r1}
 801408a:	e7a9      	b.n	8013fe0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 801408c:	a807      	add	r0, sp, #28
 801408e:	f007 fd13 	bl	801bab8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014092:	4606      	mov	r6, r0
 8014094:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8014096:	6803      	ldr	r3, [r0, #0]
 8014098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801409a:	4798      	blx	r3
 801409c:	4286      	cmp	r6, r0
 801409e:	d1b8      	bne.n	8014012 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80140a0:	f7f8 faf4 	bl	800c68c <_ZN8touchgfx3HAL3lcdEv>
 80140a4:	6803      	ldr	r3, [r0, #0]
 80140a6:	4606      	mov	r6, r0
 80140a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80140aa:	9305      	str	r3, [sp, #20]
 80140ac:	a807      	add	r0, sp, #28
 80140ae:	f007 fd03 	bl	801bab8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80140b2:	9b05      	ldr	r3, [sp, #20]
 80140b4:	4601      	mov	r1, r0
 80140b6:	4630      	mov	r0, r6
 80140b8:	4798      	blx	r3
 80140ba:	f080 0001 	eor.w	r0, r0, #1
 80140be:	b2c0      	uxtb	r0, r0
 80140c0:	e7a8      	b.n	8014014 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80140c2:	bf00      	nop
 80140c4:	2000c430 	.word	0x2000c430
 80140c8:	2000c432 	.word	0x2000c432
 80140cc:	2000c434 	.word	0x2000c434
 80140d0:	2000c436 	.word	0x2000c436
 80140d4:	2000c438 	.word	0x2000c438

080140d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80140d8:	b510      	push	{r4, lr}
 80140da:	4b07      	ldr	r3, [pc, #28]	; (80140f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80140dc:	781b      	ldrb	r3, [r3, #0]
 80140de:	4604      	mov	r4, r0
 80140e0:	b13b      	cbz	r3, 80140f2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80140e2:	6803      	ldr	r3, [r0, #0]
 80140e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80140e6:	4798      	blx	r3
 80140e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80140ea:	4283      	cmp	r3, r0
 80140ec:	d101      	bne.n	80140f2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80140ee:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80140f0:	bd10      	pop	{r4, pc}
 80140f2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80140f4:	e7fc      	b.n	80140f0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80140f6:	bf00      	nop
 80140f8:	2000c43a 	.word	0x2000c43a

080140fc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80140fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014100:	b08a      	sub	sp, #40	; 0x28
 8014102:	461d      	mov	r5, r3
 8014104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014108:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801410c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014110:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014114:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014118:	f8ad 301a 	strh.w	r3, [sp, #26]
 801411c:	2400      	movs	r4, #0
 801411e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014122:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8014126:	f8ad 301c 	strh.w	r3, [sp, #28]
 801412a:	4690      	mov	r8, r2
 801412c:	4607      	mov	r7, r0
 801412e:	9404      	str	r4, [sp, #16]
 8014130:	f88d 4020 	strb.w	r4, [sp, #32]
 8014134:	f7ff ffd0 	bl	80140d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014138:	fb06 8505 	mla	r5, r6, r5, r8
 801413c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014140:	6878      	ldr	r0, [r7, #4]
 8014142:	9505      	str	r5, [sp, #20]
 8014144:	f8ad 601e 	strh.w	r6, [sp, #30]
 8014148:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801414c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8014150:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8014154:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8014158:	6803      	ldr	r3, [r0, #0]
 801415a:	a901      	add	r1, sp, #4
 801415c:	685b      	ldr	r3, [r3, #4]
 801415e:	4798      	blx	r3
 8014160:	b00a      	add	sp, #40	; 0x28
 8014162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014166 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8014166:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801416a:	b08b      	sub	sp, #44	; 0x2c
 801416c:	2400      	movs	r4, #0
 801416e:	461d      	mov	r5, r3
 8014170:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014174:	4688      	mov	r8, r1
 8014176:	4691      	mov	r9, r2
 8014178:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801417c:	9404      	str	r4, [sp, #16]
 801417e:	4607      	mov	r7, r0
 8014180:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014184:	f7ff ffa8 	bl	80140d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014188:	fb06 9505 	mla	r5, r6, r5, r9
 801418c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014190:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014194:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014198:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801419c:	6878      	ldr	r0, [r7, #4]
 801419e:	9505      	str	r5, [sp, #20]
 80141a0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80141a4:	f8ad 401c 	strh.w	r4, [sp, #28]
 80141a8:	f8ad 601e 	strh.w	r6, [sp, #30]
 80141ac:	f8cd 8010 	str.w	r8, [sp, #16]
 80141b0:	f8ad 4020 	strh.w	r4, [sp, #32]
 80141b4:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80141b8:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80141bc:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80141c0:	6803      	ldr	r3, [r0, #0]
 80141c2:	a901      	add	r1, sp, #4
 80141c4:	685b      	ldr	r3, [r3, #4]
 80141c6:	4798      	blx	r3
 80141c8:	b00b      	add	sp, #44	; 0x2c
 80141ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080141d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80141d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141d4:	b08a      	sub	sp, #40	; 0x28
 80141d6:	4698      	mov	r8, r3
 80141d8:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80141dc:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80141e0:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 80141e4:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 80141e8:	2300      	movs	r3, #0
 80141ea:	2d0b      	cmp	r5, #11
 80141ec:	4606      	mov	r6, r0
 80141ee:	9304      	str	r3, [sp, #16]
 80141f0:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80141f4:	d138      	bne.n	8014268 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 80141f6:	2380      	movs	r3, #128	; 0x80
 80141f8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80141fc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014200:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014204:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014208:	f8ad 301a 	strh.w	r3, [sp, #26]
 801420c:	f88d 0020 	strb.w	r0, [sp, #32]
 8014210:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014214:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014218:	4630      	mov	r0, r6
 801421a:	9203      	str	r2, [sp, #12]
 801421c:	f7ff ff5c 	bl	80140d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014220:	2c0b      	cmp	r4, #11
 8014222:	bf98      	it	ls
 8014224:	4b1b      	ldrls	r3, [pc, #108]	; (8014294 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8014226:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801422a:	bf98      	it	ls
 801422c:	5d19      	ldrbls	r1, [r3, r4]
 801422e:	f8ad 701e 	strh.w	r7, [sp, #30]
 8014232:	bf88      	it	hi
 8014234:	2100      	movhi	r1, #0
 8014236:	fb02 8307 	mla	r3, r2, r7, r8
 801423a:	10c9      	asrs	r1, r1, #3
 801423c:	fb01 0003 	mla	r0, r1, r3, r0
 8014240:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8014244:	9005      	str	r0, [sp, #20]
 8014246:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801424a:	6870      	ldr	r0, [r6, #4]
 801424c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8014250:	2300      	movs	r3, #0
 8014252:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8014256:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801425a:	6803      	ldr	r3, [r0, #0]
 801425c:	a901      	add	r1, sp, #4
 801425e:	685b      	ldr	r3, [r3, #4]
 8014260:	4798      	blx	r3
 8014262:	b00a      	add	sp, #40	; 0x28
 8014264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014268:	2d02      	cmp	r5, #2
 801426a:	d109      	bne.n	8014280 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 801426c:	28ff      	cmp	r0, #255	; 0xff
 801426e:	d105      	bne.n	801427c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 8014270:	f1bc 0f00 	cmp.w	ip, #0
 8014274:	bf14      	ite	ne
 8014276:	2340      	movne	r3, #64	; 0x40
 8014278:	2320      	moveq	r3, #32
 801427a:	e7bd      	b.n	80141f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801427c:	2340      	movs	r3, #64	; 0x40
 801427e:	e7bb      	b.n	80141f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014280:	28ff      	cmp	r0, #255	; 0xff
 8014282:	d105      	bne.n	8014290 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 8014284:	f1bc 0f00 	cmp.w	ip, #0
 8014288:	bf14      	ite	ne
 801428a:	2304      	movne	r3, #4
 801428c:	2301      	moveq	r3, #1
 801428e:	e7b3      	b.n	80141f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014290:	2304      	movs	r3, #4
 8014292:	e7b1      	b.n	80141f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014294:	0802e654 	.word	0x0802e654

08014298 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8014298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801429c:	b08b      	sub	sp, #44	; 0x2c
 801429e:	461d      	mov	r5, r3
 80142a0:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 80142a4:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 80142a8:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 80142ac:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80142b0:	bf14      	ite	ne
 80142b2:	2308      	movne	r3, #8
 80142b4:	2302      	moveq	r3, #2
 80142b6:	2400      	movs	r4, #0
 80142b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80142bc:	4688      	mov	r8, r1
 80142be:	4693      	mov	fp, r2
 80142c0:	9404      	str	r4, [sp, #16]
 80142c2:	4607      	mov	r7, r0
 80142c4:	f7ff ff08 	bl	80140d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80142c8:	2e0b      	cmp	r6, #11
 80142ca:	bf98      	it	ls
 80142cc:	4b15      	ldrls	r3, [pc, #84]	; (8014324 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80142ce:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80142d2:	bf98      	it	ls
 80142d4:	5d9c      	ldrbls	r4, [r3, r6]
 80142d6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80142da:	f8ad 3018 	strh.w	r3, [sp, #24]
 80142de:	fb05 b50a 	mla	r5, r5, sl, fp
 80142e2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80142e6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80142ea:	10e4      	asrs	r4, r4, #3
 80142ec:	fb04 0405 	mla	r4, r4, r5, r0
 80142f0:	2300      	movs	r3, #0
 80142f2:	6878      	ldr	r0, [r7, #4]
 80142f4:	9405      	str	r4, [sp, #20]
 80142f6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80142fa:	f8ad a01e 	strh.w	sl, [sp, #30]
 80142fe:	f8cd 8010 	str.w	r8, [sp, #16]
 8014302:	f88d 9020 	strb.w	r9, [sp, #32]
 8014306:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 801430a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801430e:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8014312:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8014316:	6803      	ldr	r3, [r0, #0]
 8014318:	a901      	add	r1, sp, #4
 801431a:	685b      	ldr	r3, [r3, #4]
 801431c:	4798      	blx	r3
 801431e:	b00b      	add	sp, #44	; 0x2c
 8014320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014324:	0802e654 	.word	0x0802e654

08014328 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8014328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801432c:	461e      	mov	r6, r3
 801432e:	4b0a      	ldr	r3, [pc, #40]	; (8014358 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8014330:	460f      	mov	r7, r1
 8014332:	881d      	ldrh	r5, [r3, #0]
 8014334:	4690      	mov	r8, r2
 8014336:	f7f8 f9a9 	bl	800c68c <_ZN8touchgfx3HAL3lcdEv>
 801433a:	6803      	ldr	r3, [r0, #0]
 801433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801433e:	4798      	blx	r3
 8014340:	280b      	cmp	r0, #11
 8014342:	bf9a      	itte	ls
 8014344:	4b05      	ldrls	r3, [pc, #20]	; (801435c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8014346:	5c1c      	ldrbls	r4, [r3, r0]
 8014348:	2400      	movhi	r4, #0
 801434a:	fb08 7005 	mla	r0, r8, r5, r7
 801434e:	10e4      	asrs	r4, r4, #3
 8014350:	fb04 6000 	mla	r0, r4, r0, r6
 8014354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014358:	2000c436 	.word	0x2000c436
 801435c:	0802e654 	.word	0x0802e654

08014360 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8014360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014362:	b08b      	sub	sp, #44	; 0x2c
 8014364:	461f      	mov	r7, r3
 8014366:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801436a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801436e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014372:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014376:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801437a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801437e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014382:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014386:	2500      	movs	r5, #0
 8014388:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801438c:	f88d 3020 	strb.w	r3, [sp, #32]
 8014390:	4604      	mov	r4, r0
 8014392:	4616      	mov	r6, r2
 8014394:	9504      	str	r5, [sp, #16]
 8014396:	f7ff fe9f 	bl	80140d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801439a:	463a      	mov	r2, r7
 801439c:	4631      	mov	r1, r6
 801439e:	4603      	mov	r3, r0
 80143a0:	4620      	mov	r0, r4
 80143a2:	f7ff ffc1 	bl	8014328 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80143a6:	4b0e      	ldr	r3, [pc, #56]	; (80143e0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80143a8:	9005      	str	r0, [sp, #20]
 80143aa:	881b      	ldrh	r3, [r3, #0]
 80143ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 80143b0:	f7f8 f96c 	bl	800c68c <_ZN8touchgfx3HAL3lcdEv>
 80143b4:	6803      	ldr	r3, [r0, #0]
 80143b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143b8:	4798      	blx	r3
 80143ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80143bc:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 80143c0:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80143c4:	9304      	str	r3, [sp, #16]
 80143c6:	6860      	ldr	r0, [r4, #4]
 80143c8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80143cc:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80143d0:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 80143d4:	6803      	ldr	r3, [r0, #0]
 80143d6:	a901      	add	r1, sp, #4
 80143d8:	685b      	ldr	r3, [r3, #4]
 80143da:	4798      	blx	r3
 80143dc:	b00b      	add	sp, #44	; 0x2c
 80143de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143e0:	2000c436 	.word	0x2000c436

080143e4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80143e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143e6:	b08d      	sub	sp, #52	; 0x34
 80143e8:	466b      	mov	r3, sp
 80143ea:	e883 0006 	stmia.w	r3, {r1, r2}
 80143ee:	2300      	movs	r3, #0
 80143f0:	9306      	str	r3, [sp, #24]
 80143f2:	6803      	ldr	r3, [r0, #0]
 80143f4:	f8bd 6000 	ldrh.w	r6, [sp]
 80143f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143fa:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80143fe:	2501      	movs	r5, #1
 8014400:	9503      	str	r5, [sp, #12]
 8014402:	4604      	mov	r4, r0
 8014404:	4798      	blx	r3
 8014406:	463a      	mov	r2, r7
 8014408:	4631      	mov	r1, r6
 801440a:	4603      	mov	r3, r0
 801440c:	4620      	mov	r0, r4
 801440e:	f7ff ff8b 	bl	8014328 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014412:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014414:	9307      	str	r3, [sp, #28]
 8014416:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801441a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801441e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014422:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014426:	4b0f      	ldr	r3, [pc, #60]	; (8014464 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8014428:	9004      	str	r0, [sp, #16]
 801442a:	881b      	ldrh	r3, [r3, #0]
 801442c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8014430:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8014434:	f7f8 f92a 	bl	800c68c <_ZN8touchgfx3HAL3lcdEv>
 8014438:	6803      	ldr	r3, [r0, #0]
 801443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801443c:	4798      	blx	r3
 801443e:	23ff      	movs	r3, #255	; 0xff
 8014440:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8014444:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8014448:	6860      	ldr	r0, [r4, #4]
 801444a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801444e:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8014452:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8014456:	6803      	ldr	r3, [r0, #0]
 8014458:	a903      	add	r1, sp, #12
 801445a:	685b      	ldr	r3, [r3, #4]
 801445c:	4798      	blx	r3
 801445e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8014460:	b00d      	add	sp, #52	; 0x34
 8014462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014464:	2000c436 	.word	0x2000c436

08014468 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8014468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801446c:	b08c      	sub	sp, #48	; 0x30
 801446e:	461e      	mov	r6, r3
 8014470:	466d      	mov	r5, sp
 8014472:	2300      	movs	r3, #0
 8014474:	e885 0006 	stmia.w	r5, {r1, r2}
 8014478:	9306      	str	r3, [sp, #24]
 801447a:	6803      	ldr	r3, [r0, #0]
 801447c:	f8bd 7000 	ldrh.w	r7, [sp]
 8014480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014482:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8014486:	2501      	movs	r5, #1
 8014488:	9503      	str	r5, [sp, #12]
 801448a:	4604      	mov	r4, r0
 801448c:	4798      	blx	r3
 801448e:	4642      	mov	r2, r8
 8014490:	4639      	mov	r1, r7
 8014492:	4603      	mov	r3, r0
 8014494:	4620      	mov	r0, r4
 8014496:	f7ff ff47 	bl	8014328 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801449a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801449e:	f8ad 3020 	strh.w	r3, [sp, #32]
 80144a2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80144a6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80144aa:	4b11      	ldr	r3, [pc, #68]	; (80144f0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80144ac:	9004      	str	r0, [sp, #16]
 80144ae:	881b      	ldrh	r3, [r3, #0]
 80144b0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80144b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80144b6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80144ba:	9607      	str	r6, [sp, #28]
 80144bc:	f7f8 f8e6 	bl	800c68c <_ZN8touchgfx3HAL3lcdEv>
 80144c0:	6803      	ldr	r3, [r0, #0]
 80144c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144c4:	4798      	blx	r3
 80144c6:	23ff      	movs	r3, #255	; 0xff
 80144c8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80144cc:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80144d0:	6860      	ldr	r0, [r4, #4]
 80144d2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80144d6:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80144da:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80144de:	6803      	ldr	r3, [r0, #0]
 80144e0:	a903      	add	r1, sp, #12
 80144e2:	685b      	ldr	r3, [r3, #4]
 80144e4:	4798      	blx	r3
 80144e6:	4630      	mov	r0, r6
 80144e8:	b00c      	add	sp, #48	; 0x30
 80144ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144ee:	bf00      	nop
 80144f0:	2000c436 	.word	0x2000c436

080144f4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80144f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144f6:	b085      	sub	sp, #20
 80144f8:	ac02      	add	r4, sp, #8
 80144fa:	e884 0006 	stmia.w	r4, {r1, r2}
 80144fe:	4605      	mov	r5, r0
 8014500:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8014504:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8014508:	f7ff fde6 	bl	80140d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801450c:	463a      	mov	r2, r7
 801450e:	4603      	mov	r3, r0
 8014510:	4631      	mov	r1, r6
 8014512:	4628      	mov	r0, r5
 8014514:	f7ff ff08 	bl	8014328 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014518:	4a05      	ldr	r2, [pc, #20]	; (8014530 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801451a:	682b      	ldr	r3, [r5, #0]
 801451c:	8812      	ldrh	r2, [r2, #0]
 801451e:	9200      	str	r2, [sp, #0]
 8014520:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8014522:	e894 0006 	ldmia.w	r4, {r1, r2}
 8014526:	4603      	mov	r3, r0
 8014528:	4628      	mov	r0, r5
 801452a:	47b0      	blx	r6
 801452c:	b005      	add	sp, #20
 801452e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014530:	2000c436 	.word	0x2000c436

08014534 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8014534:	b570      	push	{r4, r5, r6, lr}
 8014536:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801453a:	4604      	mov	r4, r0
 801453c:	b19b      	cbz	r3, 8014566 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801453e:	2002      	movs	r0, #2
 8014540:	f7fc fcf8 	bl	8010f34 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8014544:	2300      	movs	r3, #0
 8014546:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801454a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801454e:	6823      	ldr	r3, [r4, #0]
 8014550:	4620      	mov	r0, r4
 8014552:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8014556:	f7ff fdbf 	bl	80140d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801455a:	462b      	mov	r3, r5
 801455c:	4601      	mov	r1, r0
 801455e:	4620      	mov	r0, r4
 8014560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014564:	4718      	bx	r3
 8014566:	bd70      	pop	{r4, r5, r6, pc}

08014568 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8014568:	b538      	push	{r3, r4, r5, lr}
 801456a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 801456e:	428b      	cmp	r3, r1
 8014570:	4604      	mov	r4, r0
 8014572:	460d      	mov	r5, r1
 8014574:	d006      	beq.n	8014584 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8014576:	6803      	ldr	r3, [r0, #0]
 8014578:	b929      	cbnz	r1, 8014586 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801457a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801457e:	4798      	blx	r3
 8014580:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8014584:	bd38      	pop	{r3, r4, r5, pc}
 8014586:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801458a:	e7f8      	b.n	801457e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801458c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801458c:	b510      	push	{r4, lr}
 801458e:	4b0d      	ldr	r3, [pc, #52]	; (80145c4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8014590:	781b      	ldrb	r3, [r3, #0]
 8014592:	4604      	mov	r4, r0
 8014594:	b95b      	cbnz	r3, 80145ae <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014596:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801459a:	2b02      	cmp	r3, #2
 801459c:	d007      	beq.n	80145ae <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801459e:	6840      	ldr	r0, [r0, #4]
 80145a0:	f000 f926 	bl	80147f0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80145a4:	b118      	cbz	r0, 80145ae <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80145a6:	6862      	ldr	r2, [r4, #4]
 80145a8:	7a53      	ldrb	r3, [r2, #9]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d0fc      	beq.n	80145a8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80145ae:	f7fc ff97 	bl	80114e0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80145b2:	4620      	mov	r0, r4
 80145b4:	2100      	movs	r1, #0
 80145b6:	f7ff ffd7 	bl	8014568 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80145ba:	4620      	mov	r0, r4
 80145bc:	f7ff fd8c 	bl	80140d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80145c0:	bd10      	pop	{r4, pc}
 80145c2:	bf00      	nop
 80145c4:	2000c43a 	.word	0x2000c43a

080145c8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 80145c8:	b570      	push	{r4, r5, r6, lr}
 80145ca:	4604      	mov	r4, r0
 80145cc:	6803      	ldr	r3, [r0, #0]
 80145ce:	b919      	cbnz	r1, 80145d8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 80145d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80145d6:	4718      	bx	r3
 80145d8:	2200      	movs	r2, #0
 80145da:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 80145de:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 80145e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145e4:	4798      	blx	r3
 80145e6:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 80145ea:	4605      	mov	r5, r0
 80145ec:	2101      	movs	r1, #1
 80145ee:	4620      	mov	r0, r4
 80145f0:	f7ff ffba 	bl	8014568 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80145f4:	4628      	mov	r0, r5
 80145f6:	bd70      	pop	{r4, r5, r6, pc}

080145f8 <_ZN8touchgfx13DMA_Interface5flushEv>:
 80145f8:	6803      	ldr	r3, [r0, #0]
 80145fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80145fc:	4718      	bx	r3

080145fe <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80145fe:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8014602:	1a13      	subs	r3, r2, r0
 8014604:	4258      	negs	r0, r3
 8014606:	4158      	adcs	r0, r3
 8014608:	4770      	bx	lr

0801460a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801460a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801460e:	1a9b      	subs	r3, r3, r2
 8014610:	2b00      	cmp	r3, #0
 8014612:	bfdc      	itt	le
 8014614:	6882      	ldrle	r2, [r0, #8]
 8014616:	189b      	addle	r3, r3, r2
 8014618:	2b01      	cmp	r3, #1
 801461a:	bfcc      	ite	gt
 801461c:	2000      	movgt	r0, #0
 801461e:	2001      	movle	r0, #1
 8014620:	4770      	bx	lr

08014622 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8014622:	6902      	ldr	r2, [r0, #16]
 8014624:	6843      	ldr	r3, [r0, #4]
 8014626:	2024      	movs	r0, #36	; 0x24
 8014628:	fb00 3002 	mla	r0, r0, r2, r3
 801462c:	4770      	bx	lr

0801462e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801462e:	6803      	ldr	r3, [r0, #0]
 8014630:	691b      	ldr	r3, [r3, #16]
 8014632:	4718      	bx	r3

08014634 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8014634:	b570      	push	{r4, r5, r6, lr}
 8014636:	2301      	movs	r3, #1
 8014638:	7203      	strb	r3, [r0, #8]
 801463a:	4604      	mov	r4, r0
 801463c:	6840      	ldr	r0, [r0, #4]
 801463e:	6803      	ldr	r3, [r0, #0]
 8014640:	699b      	ldr	r3, [r3, #24]
 8014642:	4798      	blx	r3
 8014644:	6803      	ldr	r3, [r0, #0]
 8014646:	2b40      	cmp	r3, #64	; 0x40
 8014648:	4605      	mov	r5, r0
 801464a:	d00c      	beq.n	8014666 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801464c:	d810      	bhi.n	8014670 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801464e:	2b04      	cmp	r3, #4
 8014650:	d01d      	beq.n	801468e <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8014652:	d804      	bhi.n	801465e <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8014654:	2b01      	cmp	r3, #1
 8014656:	d006      	beq.n	8014666 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014658:	2b02      	cmp	r3, #2
 801465a:	d02c      	beq.n	80146b6 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801465c:	bd70      	pop	{r4, r5, r6, pc}
 801465e:	2b08      	cmp	r3, #8
 8014660:	d01d      	beq.n	801469e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8014662:	2b20      	cmp	r3, #32
 8014664:	d1fa      	bne.n	801465c <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8014666:	6823      	ldr	r3, [r4, #0]
 8014668:	4620      	mov	r0, r4
 801466a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801466c:	4798      	blx	r3
 801466e:	e013      	b.n	8014698 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8014670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014674:	d0f7      	beq.n	8014666 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014676:	d804      	bhi.n	8014682 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8014678:	2b80      	cmp	r3, #128	; 0x80
 801467a:	d0f4      	beq.n	8014666 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801467c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014680:	e7f0      	b.n	8014664 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8014682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014686:	d0ee      	beq.n	8014666 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014688:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801468c:	e7e5      	b.n	801465a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801468e:	6823      	ldr	r3, [r4, #0]
 8014690:	7f01      	ldrb	r1, [r0, #28]
 8014692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014694:	4620      	mov	r0, r4
 8014696:	4798      	blx	r3
 8014698:	6823      	ldr	r3, [r4, #0]
 801469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801469c:	e006      	b.n	80146ac <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801469e:	6823      	ldr	r3, [r4, #0]
 80146a0:	7f01      	ldrb	r1, [r0, #28]
 80146a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146a4:	4620      	mov	r0, r4
 80146a6:	4798      	blx	r3
 80146a8:	6823      	ldr	r3, [r4, #0]
 80146aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146ac:	4629      	mov	r1, r5
 80146ae:	4620      	mov	r0, r4
 80146b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146b4:	4718      	bx	r3
 80146b6:	6823      	ldr	r3, [r4, #0]
 80146b8:	4620      	mov	r0, r4
 80146ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80146bc:	4798      	blx	r3
 80146be:	e7f3      	b.n	80146a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080146c0 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80146c0:	4770      	bx	lr

080146c2 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80146c2:	4770      	bx	lr

080146c4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80146c4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80146c8:	1ad2      	subs	r2, r2, r3
 80146ca:	2a00      	cmp	r2, #0
 80146cc:	b510      	push	{r4, lr}
 80146ce:	bfdc      	itt	le
 80146d0:	6884      	ldrle	r4, [r0, #8]
 80146d2:	1912      	addle	r2, r2, r4
 80146d4:	2a01      	cmp	r2, #1
 80146d6:	dd16      	ble.n	8014706 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80146d8:	6842      	ldr	r2, [r0, #4]
 80146da:	2424      	movs	r4, #36	; 0x24
 80146dc:	fb04 2303 	mla	r3, r4, r3, r2
 80146e0:	f101 0220 	add.w	r2, r1, #32
 80146e4:	f851 4b04 	ldr.w	r4, [r1], #4
 80146e8:	f843 4b04 	str.w	r4, [r3], #4
 80146ec:	4291      	cmp	r1, r2
 80146ee:	d1f9      	bne.n	80146e4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80146f0:	780a      	ldrb	r2, [r1, #0]
 80146f2:	701a      	strb	r2, [r3, #0]
 80146f4:	68c3      	ldr	r3, [r0, #12]
 80146f6:	6882      	ldr	r2, [r0, #8]
 80146f8:	f3bf 8f5b 	dmb	ish
 80146fc:	3301      	adds	r3, #1
 80146fe:	429a      	cmp	r2, r3
 8014700:	bfd8      	it	le
 8014702:	1a9b      	suble	r3, r3, r2
 8014704:	60c3      	str	r3, [r0, #12]
 8014706:	bd10      	pop	{r4, pc}

08014708 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8014708:	6903      	ldr	r3, [r0, #16]
 801470a:	6882      	ldr	r2, [r0, #8]
 801470c:	f3bf 8f5b 	dmb	ish
 8014710:	3301      	adds	r3, #1
 8014712:	429a      	cmp	r2, r3
 8014714:	bfd8      	it	le
 8014716:	1a9b      	suble	r3, r3, r2
 8014718:	6103      	str	r3, [r0, #16]
 801471a:	4770      	bx	lr

0801471c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801471c:	b570      	push	{r4, r5, r6, lr}
 801471e:	4604      	mov	r4, r0
 8014720:	460e      	mov	r6, r1
 8014722:	6860      	ldr	r0, [r4, #4]
 8014724:	6803      	ldr	r3, [r0, #0]
 8014726:	685b      	ldr	r3, [r3, #4]
 8014728:	4798      	blx	r3
 801472a:	2800      	cmp	r0, #0
 801472c:	d1f9      	bne.n	8014722 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801472e:	4d0d      	ldr	r5, [pc, #52]	; (8014764 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8014730:	6828      	ldr	r0, [r5, #0]
 8014732:	6803      	ldr	r3, [r0, #0]
 8014734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014736:	4798      	blx	r3
 8014738:	f7fc feec 	bl	8011514 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801473c:	6828      	ldr	r0, [r5, #0]
 801473e:	2101      	movs	r1, #1
 8014740:	f7ff ff12 	bl	8014568 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014744:	6860      	ldr	r0, [r4, #4]
 8014746:	6803      	ldr	r3, [r0, #0]
 8014748:	4631      	mov	r1, r6
 801474a:	689b      	ldr	r3, [r3, #8]
 801474c:	4798      	blx	r3
 801474e:	6823      	ldr	r3, [r4, #0]
 8014750:	4620      	mov	r0, r4
 8014752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014754:	4798      	blx	r3
 8014756:	6828      	ldr	r0, [r5, #0]
 8014758:	6803      	ldr	r3, [r0, #0]
 801475a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801475e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014760:	4718      	bx	r3
 8014762:	bf00      	nop
 8014764:	2000c43c 	.word	0x2000c43c

08014768 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8014768:	b508      	push	{r3, lr}
 801476a:	f7fc feb9 	bl	80114e0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801476e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014772:	f7fc bec3 	b.w	80114fc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014776 <_ZN8touchgfx13DMA_Interface5startEv>:
 8014776:	b510      	push	{r4, lr}
 8014778:	4604      	mov	r4, r0
 801477a:	6840      	ldr	r0, [r0, #4]
 801477c:	6803      	ldr	r3, [r0, #0]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	4798      	blx	r3
 8014782:	b948      	cbnz	r0, 8014798 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014784:	7a63      	ldrb	r3, [r4, #9]
 8014786:	b13b      	cbz	r3, 8014798 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014788:	7a23      	ldrb	r3, [r4, #8]
 801478a:	b92b      	cbnz	r3, 8014798 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801478c:	6823      	ldr	r3, [r4, #0]
 801478e:	4620      	mov	r0, r4
 8014790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014796:	4718      	bx	r3
 8014798:	bd10      	pop	{r4, pc}

0801479a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801479a:	b570      	push	{r4, r5, r6, lr}
 801479c:	4604      	mov	r4, r0
 801479e:	6840      	ldr	r0, [r0, #4]
 80147a0:	6803      	ldr	r3, [r0, #0]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	4798      	blx	r3
 80147a6:	4605      	mov	r5, r0
 80147a8:	b930      	cbnz	r0, 80147b8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80147aa:	7a23      	ldrb	r3, [r4, #8]
 80147ac:	b123      	cbz	r3, 80147b8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80147ae:	6860      	ldr	r0, [r4, #4]
 80147b0:	6803      	ldr	r3, [r0, #0]
 80147b2:	695b      	ldr	r3, [r3, #20]
 80147b4:	4798      	blx	r3
 80147b6:	7225      	strb	r5, [r4, #8]
 80147b8:	6860      	ldr	r0, [r4, #4]
 80147ba:	6803      	ldr	r3, [r0, #0]
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	4798      	blx	r3
 80147c0:	b928      	cbnz	r0, 80147ce <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80147c2:	6823      	ldr	r3, [r4, #0]
 80147c4:	4620      	mov	r0, r4
 80147c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80147cc:	4718      	bx	r3
 80147ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80147d2:	f7fc beab 	b.w	801152c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

080147d8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80147d8:	b510      	push	{r4, lr}
 80147da:	4c04      	ldr	r4, [pc, #16]	; (80147ec <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80147dc:	6082      	str	r2, [r0, #8]
 80147de:	2200      	movs	r2, #0
 80147e0:	e9c0 4100 	strd	r4, r1, [r0]
 80147e4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80147e8:	bd10      	pop	{r4, pc}
 80147ea:	bf00      	nop
 80147ec:	0802e790 	.word	0x0802e790

080147f0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80147f0:	6840      	ldr	r0, [r0, #4]
 80147f2:	6803      	ldr	r3, [r0, #0]
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	4718      	bx	r3

080147f8 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 80147f8:	b508      	push	{r3, lr}
 80147fa:	4b05      	ldr	r3, [pc, #20]	; (8014810 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 80147fc:	6818      	ldr	r0, [r3, #0]
 80147fe:	6803      	ldr	r3, [r0, #0]
 8014800:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014804:	4798      	blx	r3
 8014806:	1e43      	subs	r3, r0, #1
 8014808:	4258      	negs	r0, r3
 801480a:	4158      	adcs	r0, r3
 801480c:	bd08      	pop	{r3, pc}
 801480e:	bf00      	nop
 8014810:	2000c43c 	.word	0x2000c43c

08014814 <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 8014814:	b430      	push	{r4, r5}
 8014816:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 801481a:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801481e:	8a02      	ldrh	r2, [r0, #16]
 8014820:	9202      	str	r2, [sp, #8]
 8014822:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8014826:	68c2      	ldr	r2, [r0, #12]
 8014828:	4629      	mov	r1, r5
 801482a:	4620      	mov	r0, r4
 801482c:	bc30      	pop	{r4, r5}
 801482e:	f7fd bd41 	b.w	80122b4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

08014832 <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 8014832:	f7fd bd37 	b.w	80122a4 <_ZN8touchgfx5paint6rgb5658tearDownEv>

08014836 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8014836:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 801483a:	4770      	bx	lr

0801483c <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 801483c:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8014840:	4770      	bx	lr

08014842 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8014842:	b510      	push	{r4, lr}
 8014844:	2200      	movs	r2, #0
 8014846:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801484a:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801484e:	8002      	strh	r2, [r0, #0]
 8014850:	8042      	strh	r2, [r0, #2]
 8014852:	8084      	strh	r4, [r0, #4]
 8014854:	80c1      	strh	r1, [r0, #6]
 8014856:	bd10      	pop	{r4, pc}

08014858 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8014858:	2200      	movs	r2, #0
 801485a:	8002      	strh	r2, [r0, #0]
 801485c:	8042      	strh	r2, [r0, #2]
 801485e:	8082      	strh	r2, [r0, #4]
 8014860:	80c2      	strh	r2, [r0, #6]
 8014862:	4770      	bx	lr

08014864 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8014864:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014866:	6803      	ldr	r3, [r0, #0]
 8014868:	460d      	mov	r5, r1
 801486a:	4604      	mov	r4, r0
 801486c:	4601      	mov	r1, r0
 801486e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014870:	a802      	add	r0, sp, #8
 8014872:	4798      	blx	r3
 8014874:	6828      	ldr	r0, [r5, #0]
 8014876:	6869      	ldr	r1, [r5, #4]
 8014878:	466b      	mov	r3, sp
 801487a:	c303      	stmia	r3!, {r0, r1}
 801487c:	4668      	mov	r0, sp
 801487e:	4619      	mov	r1, r3
 8014880:	f7fe ffae 	bl	80137e0 <_ZN8touchgfx4RectaNERKS0_>
 8014884:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014886:	b1a8      	cbz	r0, 80148b4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8014888:	6803      	ldr	r3, [r0, #0]
 801488a:	1d21      	adds	r1, r4, #4
 801488c:	68db      	ldr	r3, [r3, #12]
 801488e:	4798      	blx	r3
 8014890:	b180      	cbz	r0, 80148b4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8014892:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8014896:	2b00      	cmp	r3, #0
 8014898:	dd0c      	ble.n	80148b4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801489a:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 801489e:	2d00      	cmp	r5, #0
 80148a0:	dd08      	ble.n	80148b4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 80148a2:	4a2d      	ldr	r2, [pc, #180]	; (8014958 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 80148a4:	7812      	ldrb	r2, [r2, #0]
 80148a6:	b13a      	cbz	r2, 80148b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 80148a8:	2a01      	cmp	r2, #1
 80148aa:	d02d      	beq.n	8014908 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 80148ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80148ae:	6803      	ldr	r3, [r0, #0]
 80148b0:	691b      	ldr	r3, [r3, #16]
 80148b2:	4798      	blx	r3
 80148b4:	b004      	add	sp, #16
 80148b6:	bd70      	pop	{r4, r5, r6, pc}
 80148b8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80148bc:	441d      	add	r5, r3
 80148be:	b2ad      	uxth	r5, r5
 80148c0:	b22e      	sxth	r6, r5
 80148c2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80148c6:	42b3      	cmp	r3, r6
 80148c8:	daf0      	bge.n	80148ac <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80148ca:	6823      	ldr	r3, [r4, #0]
 80148cc:	4669      	mov	r1, sp
 80148ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80148d0:	4620      	mov	r0, r4
 80148d2:	4798      	blx	r3
 80148d4:	b940      	cbnz	r0, 80148e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 80148d6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80148da:	2b01      	cmp	r3, #1
 80148dc:	d004      	beq.n	80148e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 80148de:	3301      	adds	r3, #1
 80148e0:	105b      	asrs	r3, r3, #1
 80148e2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80148e6:	e7f0      	b.n	80148ca <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 80148e8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80148ec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80148f0:	4413      	add	r3, r2
 80148f2:	b29b      	uxth	r3, r3
 80148f4:	441a      	add	r2, r3
 80148f6:	b212      	sxth	r2, r2
 80148f8:	4296      	cmp	r6, r2
 80148fa:	f8ad 3002 	strh.w	r3, [sp, #2]
 80148fe:	dae0      	bge.n	80148c2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8014900:	1aeb      	subs	r3, r5, r3
 8014902:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014906:	e7dc      	b.n	80148c2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8014908:	f8bd 5000 	ldrh.w	r5, [sp]
 801490c:	441d      	add	r5, r3
 801490e:	b2ad      	uxth	r5, r5
 8014910:	b22e      	sxth	r6, r5
 8014912:	f9bd 3000 	ldrsh.w	r3, [sp]
 8014916:	42b3      	cmp	r3, r6
 8014918:	dac8      	bge.n	80148ac <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801491a:	6823      	ldr	r3, [r4, #0]
 801491c:	4669      	mov	r1, sp
 801491e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014920:	4620      	mov	r0, r4
 8014922:	4798      	blx	r3
 8014924:	b940      	cbnz	r0, 8014938 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 8014926:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801492a:	2b01      	cmp	r3, #1
 801492c:	d004      	beq.n	8014938 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 801492e:	3301      	adds	r3, #1
 8014930:	105b      	asrs	r3, r3, #1
 8014932:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014936:	e7f0      	b.n	801491a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 8014938:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801493c:	f8bd 3000 	ldrh.w	r3, [sp]
 8014940:	4413      	add	r3, r2
 8014942:	b29b      	uxth	r3, r3
 8014944:	441a      	add	r2, r3
 8014946:	b212      	sxth	r2, r2
 8014948:	4296      	cmp	r6, r2
 801494a:	f8ad 3000 	strh.w	r3, [sp]
 801494e:	dae0      	bge.n	8014912 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8014950:	1aeb      	subs	r3, r5, r3
 8014952:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014956:	e7dc      	b.n	8014912 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8014958:	2000c434 	.word	0x2000c434

0801495c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801495c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801495e:	6803      	ldr	r3, [r0, #0]
 8014960:	4604      	mov	r4, r0
 8014962:	4601      	mov	r1, r0
 8014964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014966:	4668      	mov	r0, sp
 8014968:	4798      	blx	r3
 801496a:	2100      	movs	r1, #0
 801496c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8014970:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014974:	9102      	str	r1, [sp, #8]
 8014976:	4668      	mov	r0, sp
 8014978:	a902      	add	r1, sp, #8
 801497a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801497e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014982:	f7fe ff2d 	bl	80137e0 <_ZN8touchgfx4RectaNERKS0_>
 8014986:	6823      	ldr	r3, [r4, #0]
 8014988:	4669      	mov	r1, sp
 801498a:	691b      	ldr	r3, [r3, #16]
 801498c:	4620      	mov	r0, r4
 801498e:	4798      	blx	r3
 8014990:	b004      	add	sp, #16
 8014992:	bd10      	pop	{r4, pc}

08014994 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8014994:	2101      	movs	r1, #1
 8014996:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801499a:	490b      	ldr	r1, [pc, #44]	; (80149c8 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 801499c:	6001      	str	r1, [r0, #0]
 801499e:	2200      	movs	r2, #0
 80149a0:	21ff      	movs	r1, #255	; 0xff
 80149a2:	8082      	strh	r2, [r0, #4]
 80149a4:	80c2      	strh	r2, [r0, #6]
 80149a6:	8102      	strh	r2, [r0, #8]
 80149a8:	8142      	strh	r2, [r0, #10]
 80149aa:	8182      	strh	r2, [r0, #12]
 80149ac:	81c2      	strh	r2, [r0, #14]
 80149ae:	8202      	strh	r2, [r0, #16]
 80149b0:	8242      	strh	r2, [r0, #18]
 80149b2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80149b6:	61c2      	str	r2, [r0, #28]
 80149b8:	8402      	strh	r2, [r0, #32]
 80149ba:	8442      	strh	r2, [r0, #34]	; 0x22
 80149bc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80149c0:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 80149c4:	6282      	str	r2, [r0, #40]	; 0x28
 80149c6:	4770      	bx	lr
 80149c8:	0802e7ec 	.word	0x0802e7ec

080149cc <_ZNK8touchgfx4Line14getMinimalRectEv>:
 80149cc:	f101 0364 	add.w	r3, r1, #100	; 0x64
 80149d0:	4602      	mov	r2, r0
 80149d2:	cb03      	ldmia	r3!, {r0, r1}
 80149d4:	6010      	str	r0, [r2, #0]
 80149d6:	6051      	str	r1, [r2, #4]
 80149d8:	4610      	mov	r0, r2
 80149da:	4770      	bx	lr

080149dc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 80149dc:	b507      	push	{r0, r1, r2, lr}
 80149de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80149e2:	ab01      	add	r3, sp, #4
 80149e4:	6809      	ldr	r1, [r1, #0]
 80149e6:	6800      	ldr	r0, [r0, #0]
 80149e8:	f004 fd91 	bl	801950e <_ZN8touchgfx6muldivElllRl>
 80149ec:	b003      	add	sp, #12
 80149ee:	f85d fb04 	ldr.w	pc, [sp], #4

080149f2 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 80149f2:	6800      	ldr	r0, [r0, #0]
 80149f4:	2800      	cmp	r0, #0
 80149f6:	bfb9      	ittee	lt
 80149f8:	2320      	movlt	r3, #32
 80149fa:	fb90 f0f3 	sdivlt	r0, r0, r3
 80149fe:	301f      	addge	r0, #31
 8014a00:	1140      	asrge	r0, r0, #5
 8014a02:	4770      	bx	lr

08014a04 <_ZNK8touchgfx4Line17invalidateContentEv>:
 8014a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a08:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8014a0c:	b089      	sub	sp, #36	; 0x24
 8014a0e:	4604      	mov	r4, r0
 8014a10:	b353      	cbz	r3, 8014a68 <_ZNK8touchgfx4Line17invalidateContentEv+0x64>
 8014a12:	6803      	ldr	r3, [r0, #0]
 8014a14:	4601      	mov	r1, r0
 8014a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014a18:	a802      	add	r0, sp, #8
 8014a1a:	4798      	blx	r3
 8014a1c:	2220      	movs	r2, #32
 8014a1e:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
 8014a22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a24:	fb9a f0f2 	sdiv	r0, sl, r2
 8014a28:	fb91 f5f2 	sdiv	r5, r1, r2
 8014a2c:	1b40      	subs	r0, r0, r5
 8014a2e:	2800      	cmp	r0, #0
 8014a30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014a32:	fb93 f6f2 	sdiv	r6, r3, r2
 8014a36:	bfb8      	it	lt
 8014a38:	4240      	neglt	r0, r0
 8014a3a:	0076      	lsls	r6, r6, #1
 8014a3c:	4286      	cmp	r6, r0
 8014a3e:	f8d4 b000 	ldr.w	fp, [r4]
 8014a42:	dc0c      	bgt.n	8014a5e <_ZNK8touchgfx4Line17invalidateContentEv+0x5a>
 8014a44:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014a46:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 8014a4a:	fb95 f0f2 	sdiv	r0, r5, r2
 8014a4e:	fb98 f7f2 	sdiv	r7, r8, r2
 8014a52:	1bc0      	subs	r0, r0, r7
 8014a54:	2800      	cmp	r0, #0
 8014a56:	bfb8      	it	lt
 8014a58:	4240      	neglt	r0, r0
 8014a5a:	4286      	cmp	r6, r0
 8014a5c:	dd07      	ble.n	8014a6e <_ZNK8touchgfx4Line17invalidateContentEv+0x6a>
 8014a5e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8014a62:	a902      	add	r1, sp, #8
 8014a64:	4620      	mov	r0, r4
 8014a66:	4798      	blx	r3
 8014a68:	b009      	add	sp, #36	; 0x24
 8014a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a6e:	3301      	adds	r3, #1
 8014a70:	2002      	movs	r0, #2
 8014a72:	f10d 0920 	add.w	r9, sp, #32
 8014a76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014a7a:	4103      	asrs	r3, r0
 8014a7c:	f849 3d08 	str.w	r3, [r9, #-8]!
 8014a80:	eb01 060a 	add.w	r6, r1, sl
 8014a84:	eb08 0705 	add.w	r7, r8, r5
 8014a88:	fb96 f6f0 	sdiv	r6, r6, r0
 8014a8c:	fb97 f7f0 	sdiv	r7, r7, r0
 8014a90:	4648      	mov	r0, r9
 8014a92:	9101      	str	r1, [sp, #4]
 8014a94:	b236      	sxth	r6, r6
 8014a96:	b23f      	sxth	r7, r7
 8014a98:	fb96 f6f2 	sdiv	r6, r6, r2
 8014a9c:	fb97 f7f2 	sdiv	r7, r7, r2
 8014aa0:	f7ff ffa7 	bl	80149f2 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8014aa4:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8014aa8:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8014aac:	9901      	ldr	r1, [sp, #4]
 8014aae:	4293      	cmp	r3, r2
 8014ab0:	fa1f fe87 	uxth.w	lr, r7
 8014ab4:	fa1f fc86 	uxth.w	ip, r6
 8014ab8:	eba1 0a0a 	sub.w	sl, r1, sl
 8014abc:	b280      	uxth	r0, r0
 8014abe:	da54      	bge.n	8014b6a <_ZNK8touchgfx4Line17invalidateContentEv+0x166>
 8014ac0:	ebac 0100 	sub.w	r1, ip, r0
 8014ac4:	b289      	uxth	r1, r1
 8014ac6:	4460      	add	r0, ip
 8014ac8:	f1ba 0f00 	cmp.w	sl, #0
 8014acc:	b20e      	sxth	r6, r1
 8014ace:	b280      	uxth	r0, r0
 8014ad0:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 8014ad4:	f9bd c00a 	ldrsh.w	ip, [sp, #10]
 8014ad8:	da29      	bge.n	8014b2e <_ZNK8touchgfx4Line17invalidateContentEv+0x12a>
 8014ada:	eba8 0505 	sub.w	r5, r8, r5
 8014ade:	2d00      	cmp	r5, #0
 8014ae0:	da2a      	bge.n	8014b38 <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 8014ae2:	fa1f f88a 	uxth.w	r8, sl
 8014ae6:	eba0 0008 	sub.w	r0, r0, r8
 8014aea:	fa1f f58c 	uxth.w	r5, ip
 8014aee:	4443      	add	r3, r8
 8014af0:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014af4:	1a59      	subs	r1, r3, r1
 8014af6:	ebae 0005 	sub.w	r0, lr, r5
 8014afa:	f8ad a010 	strh.w	sl, [sp, #16]
 8014afe:	f8ad c012 	strh.w	ip, [sp, #18]
 8014b02:	f8ad 0016 	strh.w	r0, [sp, #22]
 8014b06:	f8ad 6018 	strh.w	r6, [sp, #24]
 8014b0a:	f8ad 701a 	strh.w	r7, [sp, #26]
 8014b0e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8014b12:	442a      	add	r2, r5
 8014b14:	eba2 0e0e 	sub.w	lr, r2, lr
 8014b18:	f8ad e01e 	strh.w	lr, [sp, #30]
 8014b1c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8014b20:	a904      	add	r1, sp, #16
 8014b22:	4620      	mov	r0, r4
 8014b24:	4798      	blx	r3
 8014b26:	6823      	ldr	r3, [r4, #0]
 8014b28:	4649      	mov	r1, r9
 8014b2a:	691b      	ldr	r3, [r3, #16]
 8014b2c:	e79a      	b.n	8014a64 <_ZNK8touchgfx4Line17invalidateContentEv+0x60>
 8014b2e:	d003      	beq.n	8014b38 <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 8014b30:	eba8 0505 	sub.w	r5, r8, r5
 8014b34:	2d00      	cmp	r5, #0
 8014b36:	dcd4      	bgt.n	8014ae2 <_ZNK8touchgfx4Line17invalidateContentEv+0xde>
 8014b38:	fa1f f88a 	uxth.w	r8, sl
 8014b3c:	4443      	add	r3, r8
 8014b3e:	fa1f f58c 	uxth.w	r5, ip
 8014b42:	1a59      	subs	r1, r3, r1
 8014b44:	eba0 0008 	sub.w	r0, r0, r8
 8014b48:	ebae 0305 	sub.w	r3, lr, r5
 8014b4c:	f8ad 6010 	strh.w	r6, [sp, #16]
 8014b50:	f8ad c012 	strh.w	ip, [sp, #18]
 8014b54:	f8ad 1014 	strh.w	r1, [sp, #20]
 8014b58:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014b5c:	f8ad a018 	strh.w	sl, [sp, #24]
 8014b60:	f8ad 701a 	strh.w	r7, [sp, #26]
 8014b64:	f8ad 001c 	strh.w	r0, [sp, #28]
 8014b68:	e7d3      	b.n	8014b12 <_ZNK8touchgfx4Line17invalidateContentEv+0x10e>
 8014b6a:	ebae 0100 	sub.w	r1, lr, r0
 8014b6e:	b289      	uxth	r1, r1
 8014b70:	4470      	add	r0, lr
 8014b72:	f1ba 0f00 	cmp.w	sl, #0
 8014b76:	b20f      	sxth	r7, r1
 8014b78:	b280      	uxth	r0, r0
 8014b7a:	f9bd e008 	ldrsh.w	lr, [sp, #8]
 8014b7e:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 8014b82:	da20      	bge.n	8014bc6 <_ZNK8touchgfx4Line17invalidateContentEv+0x1c2>
 8014b84:	eba8 0505 	sub.w	r5, r8, r5
 8014b88:	2d00      	cmp	r5, #0
 8014b8a:	da21      	bge.n	8014bd0 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 8014b8c:	fa1f f88e 	uxth.w	r8, lr
 8014b90:	fa1f f58a 	uxth.w	r5, sl
 8014b94:	4443      	add	r3, r8
 8014b96:	442a      	add	r2, r5
 8014b98:	f8ad e010 	strh.w	lr, [sp, #16]
 8014b9c:	1b40      	subs	r0, r0, r5
 8014b9e:	ebac 0e08 	sub.w	lr, ip, r8
 8014ba2:	1a51      	subs	r1, r2, r1
 8014ba4:	eba3 0c0c 	sub.w	ip, r3, ip
 8014ba8:	f8ad a012 	strh.w	sl, [sp, #18]
 8014bac:	f8ad e014 	strh.w	lr, [sp, #20]
 8014bb0:	f8ad 0016 	strh.w	r0, [sp, #22]
 8014bb4:	f8ad 6018 	strh.w	r6, [sp, #24]
 8014bb8:	f8ad 701a 	strh.w	r7, [sp, #26]
 8014bbc:	f8ad c01c 	strh.w	ip, [sp, #28]
 8014bc0:	f8ad 101e 	strh.w	r1, [sp, #30]
 8014bc4:	e7aa      	b.n	8014b1c <_ZNK8touchgfx4Line17invalidateContentEv+0x118>
 8014bc6:	d003      	beq.n	8014bd0 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 8014bc8:	eba8 0505 	sub.w	r5, r8, r5
 8014bcc:	2d00      	cmp	r5, #0
 8014bce:	dcdd      	bgt.n	8014b8c <_ZNK8touchgfx4Line17invalidateContentEv+0x188>
 8014bd0:	fa1f f58e 	uxth.w	r5, lr
 8014bd4:	fa1f f88a 	uxth.w	r8, sl
 8014bd8:	4442      	add	r2, r8
 8014bda:	442b      	add	r3, r5
 8014bdc:	f8ad 7012 	strh.w	r7, [sp, #18]
 8014be0:	1a51      	subs	r1, r2, r1
 8014be2:	ebac 0705 	sub.w	r7, ip, r5
 8014be6:	eba0 0008 	sub.w	r0, r0, r8
 8014bea:	eba3 0c0c 	sub.w	ip, r3, ip
 8014bee:	f8ad e010 	strh.w	lr, [sp, #16]
 8014bf2:	f8ad 7014 	strh.w	r7, [sp, #20]
 8014bf6:	f8ad 1016 	strh.w	r1, [sp, #22]
 8014bfa:	f8ad 6018 	strh.w	r6, [sp, #24]
 8014bfe:	f8ad a01a 	strh.w	sl, [sp, #26]
 8014c02:	f8ad c01c 	strh.w	ip, [sp, #28]
 8014c06:	f8ad 001e 	strh.w	r0, [sp, #30]
 8014c0a:	e787      	b.n	8014b1c <_ZNK8touchgfx4Line17invalidateContentEv+0x118>

08014c0c <_ZN8touchgfx7CWRUtil4sineEi>:
 8014c0c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8014c10:	fb90 f2f3 	sdiv	r2, r0, r3
 8014c14:	fb02 0013 	mls	r0, r2, r3, r0
 8014c18:	2800      	cmp	r0, #0
 8014c1a:	bfb8      	it	lt
 8014c1c:	18c0      	addlt	r0, r0, r3
 8014c1e:	285a      	cmp	r0, #90	; 0x5a
 8014c20:	4b09      	ldr	r3, [pc, #36]	; (8014c48 <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 8014c22:	dc02      	bgt.n	8014c2a <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 8014c24:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8014c28:	4770      	bx	lr
 8014c2a:	28b4      	cmp	r0, #180	; 0xb4
 8014c2c:	dc02      	bgt.n	8014c34 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 8014c2e:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8014c32:	e7f7      	b.n	8014c24 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 8014c34:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8014c38:	bfd4      	ite	le
 8014c3a:	38b4      	suble	r0, #180	; 0xb4
 8014c3c:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8014c40:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8014c44:	4240      	negs	r0, r0
 8014c46:	4770      	bx	lr
 8014c48:	0802e8c8 	.word	0x0802e8c8

08014c4c <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8014c4c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8014c50:	bf2c      	ite	cs
 8014c52:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 8014c56:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	1899      	adds	r1, r3, r2
 8014c5e:	4288      	cmp	r0, r1
 8014c60:	bf24      	itt	cs
 8014c62:	1853      	addcs	r3, r2, r1
 8014c64:	1a40      	subcs	r0, r0, r1
 8014c66:	0892      	lsrs	r2, r2, #2
 8014c68:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8014c6c:	d1f6      	bne.n	8014c5c <_ZN8touchgfx7CWRUtil5isqrtEm+0x10>
 8014c6e:	4618      	mov	r0, r3
 8014c70:	4770      	bx	lr

08014c72 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8014c72:	b510      	push	{r4, lr}
 8014c74:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8014c78:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8014c7c:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8014c80:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8014c84:	13a4      	asrs	r4, r4, #14
 8014c86:	139b      	asrs	r3, r3, #14
 8014c88:	429c      	cmp	r4, r3
 8014c8a:	bfb8      	it	lt
 8014c8c:	461c      	movlt	r4, r3
 8014c8e:	2c01      	cmp	r4, #1
 8014c90:	dd07      	ble.n	8014ca2 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8014c92:	fb91 f1f4 	sdiv	r1, r1, r4
 8014c96:	fb90 f0f4 	sdiv	r0, r0, r4
 8014c9a:	f7ff ffea 	bl	8014c72 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8014c9e:	4360      	muls	r0, r4
 8014ca0:	bd10      	pop	{r4, pc}
 8014ca2:	4340      	muls	r0, r0
 8014ca4:	fb01 0001 	mla	r0, r1, r1, r0
 8014ca8:	f7ff ffd0 	bl	8014c4c <_ZN8touchgfx7CWRUtil5isqrtEm>
 8014cac:	e7f8      	b.n	8014ca0 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>
	...

08014cb0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8014cb0:	2800      	cmp	r0, #0
 8014cb2:	b508      	push	{r3, lr}
 8014cb4:	da05      	bge.n	8014cc2 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 8014cb6:	4240      	negs	r0, r0
 8014cb8:	f7ff fffa 	bl	8014cb0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8014cbc:	4240      	negs	r0, r0
 8014cbe:	b240      	sxtb	r0, r0
 8014cc0:	bd08      	pop	{r3, pc}
 8014cc2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8014cc6:	dc11      	bgt.n	8014cec <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 8014cc8:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8014ccc:	dd09      	ble.n	8014ce2 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8014cce:	4340      	muls	r0, r0
 8014cd0:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8014cd4:	f7ff ffba 	bl	8014c4c <_ZN8touchgfx7CWRUtil5isqrtEm>
 8014cd8:	f7ff ffea 	bl	8014cb0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8014cdc:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8014ce0:	e7ed      	b.n	8014cbe <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8014ce2:	3003      	adds	r0, #3
 8014ce4:	10c0      	asrs	r0, r0, #3
 8014ce6:	4b02      	ldr	r3, [pc, #8]	; (8014cf0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 8014ce8:	5618      	ldrsb	r0, [r3, r0]
 8014cea:	e7e9      	b.n	8014cc0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8014cec:	2000      	movs	r0, #0
 8014cee:	e7e7      	b.n	8014cc0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8014cf0:	0802e86c 	.word	0x0802e86c

08014cf4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8014cf4:	4281      	cmp	r1, r0
 8014cf6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014cf8:	460c      	mov	r4, r1
 8014cfa:	4615      	mov	r5, r2
 8014cfc:	dd07      	ble.n	8014d0e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1a>
 8014cfe:	4601      	mov	r1, r0
 8014d00:	4620      	mov	r0, r4
 8014d02:	f7ff fff7 	bl	8014cf4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8014d06:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8014d0a:	b003      	add	sp, #12
 8014d0c:	bd30      	pop	{r4, r5, pc}
 8014d0e:	f7ff ffb0 	bl	8014c72 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8014d12:	6028      	str	r0, [r5, #0]
 8014d14:	2800      	cmp	r0, #0
 8014d16:	d0f8      	beq.n	8014d0a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>
 8014d18:	4602      	mov	r2, r0
 8014d1a:	ab01      	add	r3, sp, #4
 8014d1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014d20:	4620      	mov	r0, r4
 8014d22:	f004 fbf4 	bl	801950e <_ZN8touchgfx6muldivElllRl>
 8014d26:	f7ff ffc3 	bl	8014cb0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8014d2a:	e7ee      	b.n	8014d0a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>

08014d2c <_ZN8touchgfx4LineC1Ev>:
 8014d2c:	b510      	push	{r4, lr}
 8014d2e:	4604      	mov	r4, r0
 8014d30:	f7ff fe30 	bl	8014994 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8014d34:	4b0c      	ldr	r3, [pc, #48]	; (8014d68 <_ZN8touchgfx4LineC1Ev+0x3c>)
 8014d36:	6023      	str	r3, [r4, #0]
 8014d38:	2220      	movs	r2, #32
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	63e2      	str	r2, [r4, #60]	; 0x3c
 8014d3e:	2212      	movs	r2, #18
 8014d40:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8014d44:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8014d48:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8014d4c:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 8014d50:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8014d54:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 8014d58:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 8014d5c:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8014d60:	66e2      	str	r2, [r4, #108]	; 0x6c
 8014d62:	60a3      	str	r3, [r4, #8]
 8014d64:	4620      	mov	r0, r4
 8014d66:	bd10      	pop	{r4, pc}
 8014d68:	0802e988 	.word	0x0802e988

08014d6c <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8014d6c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8014d70:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8014d72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014d74:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8014d76:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8014d78:	1aff      	subs	r7, r7, r3
 8014d7a:	4604      	mov	r4, r0
 8014d7c:	eba5 0502 	sub.w	r5, r5, r2
 8014d80:	d142      	bne.n	8014e08 <_ZN8touchgfx4Line17updateCachedShapeEv+0x9c>
 8014d82:	b955      	cbnz	r5, 8014d9a <_ZN8touchgfx4Line17updateCachedShapeEv+0x2e>
 8014d84:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
 8014d88:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
 8014d8c:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
 8014d90:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
 8014d94:	b002      	add	sp, #8
 8014d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d9a:	ea85 78e5 	eor.w	r8, r5, r5, asr #31
 8014d9e:	eba8 78e5 	sub.w	r8, r8, r5, asr #31
 8014da2:	4629      	mov	r1, r5
 8014da4:	4642      	mov	r2, r8
 8014da6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8014da8:	f004 fbd0 	bl	801954c <_ZN8touchgfx6muldivElll>
 8014dac:	2502      	movs	r5, #2
 8014dae:	4642      	mov	r2, r8
 8014db0:	fb90 f6f5 	sdiv	r6, r0, r5
 8014db4:	4639      	mov	r1, r7
 8014db6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8014db8:	f004 fbc8 	bl	801954c <_ZN8touchgfx6muldivElll>
 8014dbc:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
 8014dc0:	fb90 f5f5 	sdiv	r5, r0, r5
 8014dc4:	f1b9 0f00 	cmp.w	r9, #0
 8014dc8:	d067      	beq.n	8014e9a <_ZN8touchgfx4Line17updateCachedShapeEv+0x12e>
 8014dca:	f1b9 0f02 	cmp.w	r9, #2
 8014dce:	d878      	bhi.n	8014ec2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x156>
 8014dd0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014dd2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014dd4:	1b93      	subs	r3, r2, r6
 8014dd6:	1b5b      	subs	r3, r3, r5
 8014dd8:	6463      	str	r3, [r4, #68]	; 0x44
 8014dda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014ddc:	18e9      	adds	r1, r5, r3
 8014dde:	1b89      	subs	r1, r1, r6
 8014de0:	6561      	str	r1, [r4, #84]	; 0x54
 8014de2:	1b81      	subs	r1, r0, r6
 8014de4:	4429      	add	r1, r5
 8014de6:	64a1      	str	r1, [r4, #72]	; 0x48
 8014de8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014dea:	4430      	add	r0, r6
 8014dec:	186f      	adds	r7, r5, r1
 8014dee:	4432      	add	r2, r6
 8014df0:	1b49      	subs	r1, r1, r5
 8014df2:	4437      	add	r7, r6
 8014df4:	4428      	add	r0, r5
 8014df6:	4431      	add	r1, r6
 8014df8:	1b52      	subs	r2, r2, r5
 8014dfa:	1b5b      	subs	r3, r3, r5
 8014dfc:	65a7      	str	r7, [r4, #88]	; 0x58
 8014dfe:	64e0      	str	r0, [r4, #76]	; 0x4c
 8014e00:	65e1      	str	r1, [r4, #92]	; 0x5c
 8014e02:	6522      	str	r2, [r4, #80]	; 0x50
 8014e04:	1b9b      	subs	r3, r3, r6
 8014e06:	e05b      	b.n	8014ec0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x154>
 8014e08:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 8014e0c:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 8014e10:	2d00      	cmp	r5, #0
 8014e12:	d0c6      	beq.n	8014da2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8014e14:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8014e18:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8014e1c:	fb93 f2f8 	sdiv	r2, r3, r8
 8014e20:	fb08 3312 	mls	r3, r8, r2, r3
 8014e24:	b353      	cbz	r3, 8014e7c <_ZN8touchgfx4Line17updateCachedShapeEv+0x110>
 8014e26:	fb98 f2f3 	sdiv	r2, r8, r3
 8014e2a:	fb03 8812 	mls	r8, r3, r2, r8
 8014e2e:	f1b8 0f00 	cmp.w	r8, #0
 8014e32:	d1f3      	bne.n	8014e1c <_ZN8touchgfx4Line17updateCachedShapeEv+0xb0>
 8014e34:	2b01      	cmp	r3, #1
 8014e36:	bf1c      	itt	ne
 8014e38:	fb95 f5f3 	sdivne	r5, r5, r3
 8014e3c:	fb97 f7f3 	sdivne	r7, r7, r3
 8014e40:	ea87 73e7 	eor.w	r3, r7, r7, asr #31
 8014e44:	f24b 5104 	movw	r1, #46340	; 0xb504
 8014e48:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
 8014e4c:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 8014e50:	428b      	cmp	r3, r1
 8014e52:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 8014e56:	4608      	mov	r0, r1
 8014e58:	dd01      	ble.n	8014e5e <_ZN8touchgfx4Line17updateCachedShapeEv+0xf2>
 8014e5a:	428a      	cmp	r2, r1
 8014e5c:	dc10      	bgt.n	8014e80 <_ZN8touchgfx4Line17updateCachedShapeEv+0x114>
 8014e5e:	fb90 f3f3 	sdiv	r3, r0, r3
 8014e62:	fb90 f2f2 	sdiv	r2, r0, r2
 8014e66:	4293      	cmp	r3, r2
 8014e68:	bfa8      	it	ge
 8014e6a:	4613      	movge	r3, r2
 8014e6c:	435f      	muls	r7, r3
 8014e6e:	435d      	muls	r5, r3
 8014e70:	4629      	mov	r1, r5
 8014e72:	4638      	mov	r0, r7
 8014e74:	f7ff fefd 	bl	8014c72 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8014e78:	4680      	mov	r8, r0
 8014e7a:	e792      	b.n	8014da2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8014e7c:	4643      	mov	r3, r8
 8014e7e:	e7d9      	b.n	8014e34 <_ZN8touchgfx4Line17updateCachedShapeEv+0xc8>
 8014e80:	fb93 f3f1 	sdiv	r3, r3, r1
 8014e84:	fb92 f2f1 	sdiv	r2, r2, r1
 8014e88:	4293      	cmp	r3, r2
 8014e8a:	bfcc      	ite	gt
 8014e8c:	3301      	addgt	r3, #1
 8014e8e:	1c53      	addle	r3, r2, #1
 8014e90:	fb97 f7f3 	sdiv	r7, r7, r3
 8014e94:	fb95 f5f3 	sdiv	r5, r5, r3
 8014e98:	e7ea      	b.n	8014e70 <_ZN8touchgfx4Line17updateCachedShapeEv+0x104>
 8014e9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014e9c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014e9e:	1b93      	subs	r3, r2, r6
 8014ea0:	6463      	str	r3, [r4, #68]	; 0x44
 8014ea2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014ea4:	18e9      	adds	r1, r5, r3
 8014ea6:	6561      	str	r1, [r4, #84]	; 0x54
 8014ea8:	1b81      	subs	r1, r0, r6
 8014eaa:	64a1      	str	r1, [r4, #72]	; 0x48
 8014eac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014eae:	4430      	add	r0, r6
 8014eb0:	186f      	adds	r7, r5, r1
 8014eb2:	4432      	add	r2, r6
 8014eb4:	1b49      	subs	r1, r1, r5
 8014eb6:	65a7      	str	r7, [r4, #88]	; 0x58
 8014eb8:	64e0      	str	r0, [r4, #76]	; 0x4c
 8014eba:	65e1      	str	r1, [r4, #92]	; 0x5c
 8014ebc:	6522      	str	r2, [r4, #80]	; 0x50
 8014ebe:	1b5b      	subs	r3, r3, r5
 8014ec0:	6623      	str	r3, [r4, #96]	; 0x60
 8014ec2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8014ec4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8014ec6:	9200      	str	r2, [sp, #0]
 8014ec8:	9301      	str	r3, [sp, #4]
 8014eca:	f104 0148 	add.w	r1, r4, #72	; 0x48
 8014ece:	f104 0c54 	add.w	ip, r4, #84	; 0x54
 8014ed2:	680f      	ldr	r7, [r1, #0]
 8014ed4:	9800      	ldr	r0, [sp, #0]
 8014ed6:	42ba      	cmp	r2, r7
 8014ed8:	bfa8      	it	ge
 8014eda:	463a      	movge	r2, r7
 8014edc:	4287      	cmp	r7, r0
 8014ede:	bfc8      	it	gt
 8014ee0:	9700      	strgt	r7, [sp, #0]
 8014ee2:	690f      	ldr	r7, [r1, #16]
 8014ee4:	9801      	ldr	r0, [sp, #4]
 8014ee6:	42bb      	cmp	r3, r7
 8014ee8:	bfa8      	it	ge
 8014eea:	463b      	movge	r3, r7
 8014eec:	3104      	adds	r1, #4
 8014eee:	4287      	cmp	r7, r0
 8014ef0:	bfc8      	it	gt
 8014ef2:	9701      	strgt	r7, [sp, #4]
 8014ef4:	458c      	cmp	ip, r1
 8014ef6:	d1ec      	bne.n	8014ed2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8014ef8:	4668      	mov	r0, sp
 8014efa:	2720      	movs	r7, #32
 8014efc:	fb92 f8f7 	sdiv	r8, r2, r7
 8014f00:	fb93 f7f7 	sdiv	r7, r3, r7
 8014f04:	f7ff fd75 	bl	80149f2 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8014f08:	4682      	mov	sl, r0
 8014f0a:	a801      	add	r0, sp, #4
 8014f0c:	f7ff fd71 	bl	80149f2 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8014f10:	ebaa 0208 	sub.w	r2, sl, r8
 8014f14:	1bc0      	subs	r0, r0, r7
 8014f16:	f1b9 0f01 	cmp.w	r9, #1
 8014f1a:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
 8014f1e:	f8a4 7066 	strh.w	r7, [r4, #102]	; 0x66
 8014f22:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
 8014f26:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
 8014f2a:	f47f af33 	bne.w	8014d94 <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>
 8014f2e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014f32:	1b83      	subs	r3, r0, r6
 8014f34:	6463      	str	r3, [r4, #68]	; 0x44
 8014f36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014f38:	18ea      	adds	r2, r5, r3
 8014f3a:	6562      	str	r2, [r4, #84]	; 0x54
 8014f3c:	1b8a      	subs	r2, r1, r6
 8014f3e:	64a2      	str	r2, [r4, #72]	; 0x48
 8014f40:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8014f42:	4431      	add	r1, r6
 8014f44:	18af      	adds	r7, r5, r2
 8014f46:	4406      	add	r6, r0
 8014f48:	1b52      	subs	r2, r2, r5
 8014f4a:	1b5d      	subs	r5, r3, r5
 8014f4c:	65a7      	str	r7, [r4, #88]	; 0x58
 8014f4e:	64e1      	str	r1, [r4, #76]	; 0x4c
 8014f50:	65e2      	str	r2, [r4, #92]	; 0x5c
 8014f52:	6526      	str	r6, [r4, #80]	; 0x50
 8014f54:	6625      	str	r5, [r4, #96]	; 0x60
 8014f56:	e71d      	b.n	8014d94 <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>

08014f58 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8014f58:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014f5a:	428b      	cmp	r3, r1
 8014f5c:	d102      	bne.n	8014f64 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8014f5e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014f60:	4293      	cmp	r3, r2
 8014f62:	d003      	beq.n	8014f6c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8014f64:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
 8014f68:	f7ff bf00 	b.w	8014d6c <_ZN8touchgfx4Line17updateCachedShapeEv>
 8014f6c:	4770      	bx	lr

08014f6e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 8014f6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014f70:	428b      	cmp	r3, r1
 8014f72:	d102      	bne.n	8014f7a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8014f74:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8014f76:	4293      	cmp	r3, r2
 8014f78:	d003      	beq.n	8014f82 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8014f7a:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 8014f7e:	f7ff bef5 	b.w	8014d6c <_ZN8touchgfx4Line17updateCachedShapeEv>
 8014f82:	4770      	bx	lr

08014f84 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8014f84:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
 8014f88:	f7ff bef0 	b.w	8014d6c <_ZN8touchgfx4Line17updateCachedShapeEv>

08014f8c <_ZN8touchgfx6CanvasD1Ev>:
 8014f8c:	b510      	push	{r4, lr}
 8014f8e:	4b04      	ldr	r3, [pc, #16]	; (8014fa0 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8014f90:	4604      	mov	r4, r0
 8014f92:	f840 3b20 	str.w	r3, [r0], #32
 8014f96:	f000 fdb9 	bl	8015b0c <_ZN8touchgfx7OutlineD1Ev>
 8014f9a:	4620      	mov	r0, r4
 8014f9c:	bd10      	pop	{r4, pc}
 8014f9e:	bf00      	nop
 8014fa0:	0802e864 	.word	0x0802e864

08014fa4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8014fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fa8:	b0a0      	sub	sp, #128	; 0x80
 8014faa:	4604      	mov	r4, r0
 8014fac:	460a      	mov	r2, r1
 8014fae:	4601      	mov	r1, r0
 8014fb0:	a804      	add	r0, sp, #16
 8014fb2:	f012 fac9 	bl	8027548 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	9301      	str	r3, [sp, #4]
 8014fba:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8014fbe:	2b01      	cmp	r3, #1
 8014fc0:	d17c      	bne.n	80150bc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x118>
 8014fc2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8014fc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014fc6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8014fc8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014fca:	1ac0      	subs	r0, r0, r3
 8014fcc:	eba1 0102 	sub.w	r1, r1, r2
 8014fd0:	d437      	bmi.n	8015042 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x9e>
 8014fd2:	2900      	cmp	r1, #0
 8014fd4:	aa01      	add	r2, sp, #4
 8014fd6:	db2e      	blt.n	8015036 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x92>
 8014fd8:	f7ff fe8c 	bl	8014cf4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8014fdc:	f100 065a 	add.w	r6, r0, #90	; 0x5a
 8014fe0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8014fe2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8014fe4:	a804      	add	r0, sp, #16
 8014fe6:	f012 fc87 	bl	80278f8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8014fea:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8014fec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014fee:	a804      	add	r0, sp, #16
 8014ff0:	f012 fb58 	bl	80276a4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8014ff4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8014ff6:	2db3      	cmp	r5, #179	; 0xb3
 8014ff8:	dc33      	bgt.n	8015062 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xbe>
 8014ffa:	eba6 0805 	sub.w	r8, r6, r5
 8014ffe:	4640      	mov	r0, r8
 8015000:	f7ff fe04 	bl	8014c0c <_ZN8touchgfx7CWRUtil4sineEi>
 8015004:	a902      	add	r1, sp, #8
 8015006:	9002      	str	r0, [sp, #8]
 8015008:	a801      	add	r0, sp, #4
 801500a:	f7ff fce7 	bl	80149dc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801500e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015010:	1847      	adds	r7, r0, r1
 8015012:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 8015016:	f7ff fdf9 	bl	8014c0c <_ZN8touchgfx7CWRUtil4sineEi>
 801501a:	a903      	add	r1, sp, #12
 801501c:	9003      	str	r0, [sp, #12]
 801501e:	a801      	add	r0, sp, #4
 8015020:	f7ff fcdc 	bl	80149dc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015024:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8015026:	4639      	mov	r1, r7
 8015028:	1a12      	subs	r2, r2, r0
 801502a:	a804      	add	r0, sp, #16
 801502c:	f012 fb3a 	bl	80276a4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015030:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8015032:	441d      	add	r5, r3
 8015034:	e7df      	b.n	8014ff6 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x52>
 8015036:	4249      	negs	r1, r1
 8015038:	f7ff fe5c 	bl	8014cf4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801503c:	f1c0 065a 	rsb	r6, r0, #90	; 0x5a
 8015040:	e7ce      	b.n	8014fe0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8015042:	2900      	cmp	r1, #0
 8015044:	f1c0 0000 	rsb	r0, r0, #0
 8015048:	aa01      	add	r2, sp, #4
 801504a:	db04      	blt.n	8015056 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb2>
 801504c:	f7ff fe52 	bl	8014cf4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8015050:	f5c0 7687 	rsb	r6, r0, #270	; 0x10e
 8015054:	e7c4      	b.n	8014fe0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8015056:	4249      	negs	r1, r1
 8015058:	f7ff fe4c 	bl	8014cf4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801505c:	f500 7687 	add.w	r6, r0, #270	; 0x10e
 8015060:	e7be      	b.n	8014fe0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8015062:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8015064:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8015066:	a804      	add	r0, sp, #16
 8015068:	f012 fb1c 	bl	80276a4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801506c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801506e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8015070:	a804      	add	r0, sp, #16
 8015072:	f012 fb17 	bl	80276a4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015076:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8015078:	f1c5 05b4 	rsb	r5, r5, #180	; 0xb4
 801507c:	2d00      	cmp	r5, #0
 801507e:	dd31      	ble.n	80150e4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x140>
 8015080:	eb05 0806 	add.w	r8, r5, r6
 8015084:	4640      	mov	r0, r8
 8015086:	f7ff fdc1 	bl	8014c0c <_ZN8touchgfx7CWRUtil4sineEi>
 801508a:	a902      	add	r1, sp, #8
 801508c:	9002      	str	r0, [sp, #8]
 801508e:	a801      	add	r0, sp, #4
 8015090:	f7ff fca4 	bl	80149dc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015094:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8015096:	1847      	adds	r7, r0, r1
 8015098:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 801509c:	f7ff fdb6 	bl	8014c0c <_ZN8touchgfx7CWRUtil4sineEi>
 80150a0:	a903      	add	r1, sp, #12
 80150a2:	9003      	str	r0, [sp, #12]
 80150a4:	a801      	add	r0, sp, #4
 80150a6:	f7ff fc99 	bl	80149dc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80150aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80150ac:	4639      	mov	r1, r7
 80150ae:	1a12      	subs	r2, r2, r0
 80150b0:	a804      	add	r0, sp, #16
 80150b2:	f012 faf7 	bl	80276a4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80150b6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80150b8:	1aed      	subs	r5, r5, r3
 80150ba:	e7df      	b.n	801507c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xd8>
 80150bc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80150be:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80150c0:	a804      	add	r0, sp, #16
 80150c2:	f012 fc19 	bl	80278f8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80150c6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80150c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80150ca:	a804      	add	r0, sp, #16
 80150cc:	f012 faea 	bl	80276a4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80150d0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80150d2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80150d4:	a804      	add	r0, sp, #16
 80150d6:	f012 fae5 	bl	80276a4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80150da:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80150dc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80150de:	a804      	add	r0, sp, #16
 80150e0:	f012 fae0 	bl	80276a4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80150e4:	21ff      	movs	r1, #255	; 0xff
 80150e6:	a804      	add	r0, sp, #16
 80150e8:	f012 fb58 	bl	802779c <_ZN8touchgfx6Canvas6renderEh>
 80150ec:	4604      	mov	r4, r0
 80150ee:	a804      	add	r0, sp, #16
 80150f0:	f7ff ff4c 	bl	8014f8c <_ZN8touchgfx6CanvasD1Ev>
 80150f4:	4620      	mov	r0, r4
 80150f6:	b020      	add	sp, #128	; 0x80
 80150f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080150fc <_ZN8touchgfx6CanvasD0Ev>:
 80150fc:	b510      	push	{r4, lr}
 80150fe:	4604      	mov	r4, r0
 8015100:	f7ff ff44 	bl	8014f8c <_ZN8touchgfx6CanvasD1Ev>
 8015104:	4620      	mov	r0, r4
 8015106:	2170      	movs	r1, #112	; 0x70
 8015108:	f012 fc48 	bl	802799c <_ZdlPvj>
 801510c:	4620      	mov	r0, r4
 801510e:	bd10      	pop	{r4, pc}

08015110 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8015110:	2000      	movs	r0, #0
 8015112:	4770      	bx	lr

08015114 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8015114:	4b07      	ldr	r3, [pc, #28]	; (8015134 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8015116:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8015118:	881b      	ldrh	r3, [r3, #0]
 801511a:	4293      	cmp	r3, r2
 801511c:	bf81      	itttt	hi
 801511e:	4b06      	ldrhi	r3, [pc, #24]	; (8015138 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8015120:	681b      	ldrhi	r3, [r3, #0]
 8015122:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8015126:	7858      	ldrbhi	r0, [r3, #1]
 8015128:	bf8c      	ite	hi
 801512a:	f000 0003 	andhi.w	r0, r0, #3
 801512e:	2000      	movls	r0, #0
 8015130:	4770      	bx	lr
 8015132:	bf00      	nop
 8015134:	2000c498 	.word	0x2000c498
 8015138:	2000c494 	.word	0x2000c494

0801513c <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 801513c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015140:	4b10      	ldr	r3, [pc, #64]	; (8015184 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8015142:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015144:	881b      	ldrh	r3, [r3, #0]
 8015146:	428b      	cmp	r3, r1
 8015148:	4604      	mov	r4, r0
 801514a:	d918      	bls.n	801517e <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 801514c:	6803      	ldr	r3, [r0, #0]
 801514e:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8015150:	4b0d      	ldr	r3, [pc, #52]	; (8015188 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8015152:	6818      	ldr	r0, [r3, #0]
 8015154:	f7fb f87e 	bl	8010254 <_ZNK8touchgfx5Texts7getTextEt>
 8015158:	6823      	ldr	r3, [r4, #0]
 801515a:	4606      	mov	r6, r0
 801515c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801515e:	4620      	mov	r0, r4
 8015160:	4798      	blx	r3
 8015162:	6823      	ldr	r3, [r4, #0]
 8015164:	4607      	mov	r7, r0
 8015166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801516a:	4620      	mov	r0, r4
 801516c:	4798      	blx	r3
 801516e:	463a      	mov	r2, r7
 8015170:	4603      	mov	r3, r0
 8015172:	4631      	mov	r1, r6
 8015174:	4620      	mov	r0, r4
 8015176:	46ac      	mov	ip, r5
 8015178:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801517c:	4760      	bx	ip
 801517e:	2000      	movs	r0, #0
 8015180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015184:	2000c498 	.word	0x2000c498
 8015188:	2000c4a0 	.word	0x2000c4a0

0801518c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801518c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015190:	4b17      	ldr	r3, [pc, #92]	; (80151f0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8015192:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015194:	881b      	ldrh	r3, [r3, #0]
 8015196:	428b      	cmp	r3, r1
 8015198:	4604      	mov	r4, r0
 801519a:	d926      	bls.n	80151ea <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 801519c:	4b15      	ldr	r3, [pc, #84]	; (80151f4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80151a4:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80151a8:	4b13      	ldr	r3, [pc, #76]	; (80151f8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80151aa:	7855      	ldrb	r5, [r2, #1]
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80151b2:	6833      	ldr	r3, [r6, #0]
 80151b4:	69df      	ldr	r7, [r3, #28]
 80151b6:	4b11      	ldr	r3, [pc, #68]	; (80151fc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80151b8:	6818      	ldr	r0, [r3, #0]
 80151ba:	f7fb f84b 	bl	8010254 <_ZNK8touchgfx5Texts7getTextEt>
 80151be:	6823      	ldr	r3, [r4, #0]
 80151c0:	4680      	mov	r8, r0
 80151c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80151c4:	4620      	mov	r0, r4
 80151c6:	4798      	blx	r3
 80151c8:	6823      	ldr	r3, [r4, #0]
 80151ca:	4681      	mov	r9, r0
 80151cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80151d0:	4620      	mov	r0, r4
 80151d2:	4798      	blx	r3
 80151d4:	f3c5 0581 	ubfx	r5, r5, #2, #2
 80151d8:	9000      	str	r0, [sp, #0]
 80151da:	464b      	mov	r3, r9
 80151dc:	4642      	mov	r2, r8
 80151de:	4629      	mov	r1, r5
 80151e0:	4630      	mov	r0, r6
 80151e2:	47b8      	blx	r7
 80151e4:	b003      	add	sp, #12
 80151e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151ea:	2000      	movs	r0, #0
 80151ec:	e7fa      	b.n	80151e4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 80151ee:	bf00      	nop
 80151f0:	2000c498 	.word	0x2000c498
 80151f4:	2000c494 	.word	0x2000c494
 80151f8:	2000c49c 	.word	0x2000c49c
 80151fc:	2000c4a0 	.word	0x2000c4a0

08015200 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8015200:	b40e      	push	{r1, r2, r3}
 8015202:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015206:	4b2f      	ldr	r3, [pc, #188]	; (80152c4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8015208:	881a      	ldrh	r2, [r3, #0]
 801520a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801520c:	429a      	cmp	r2, r3
 801520e:	b09d      	sub	sp, #116	; 0x74
 8015210:	4604      	mov	r4, r0
 8015212:	d954      	bls.n	80152be <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8015214:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80152c8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8015218:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80152cc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 801521c:	aa26      	add	r2, sp, #152	; 0x98
 801521e:	9202      	str	r2, [sp, #8]
 8015220:	f8d9 2000 	ldr.w	r2, [r9]
 8015224:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8015228:	f8d8 3000 	ldr.w	r3, [r8]
 801522c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8015230:	682b      	ldr	r3, [r5, #0]
 8015232:	4628      	mov	r0, r5
 8015234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015236:	4798      	blx	r3
 8015238:	b207      	sxth	r7, r0
 801523a:	4606      	mov	r6, r0
 801523c:	a803      	add	r0, sp, #12
 801523e:	f004 fd06 	bl	8019c4e <_ZN8touchgfx12TextProviderC1Ev>
 8015242:	682b      	ldr	r3, [r5, #0]
 8015244:	4628      	mov	r0, r5
 8015246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015248:	4798      	blx	r3
 801524a:	682b      	ldr	r3, [r5, #0]
 801524c:	4682      	mov	sl, r0
 801524e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015250:	4628      	mov	r0, r5
 8015252:	4798      	blx	r3
 8015254:	4653      	mov	r3, sl
 8015256:	9000      	str	r0, [sp, #0]
 8015258:	9a02      	ldr	r2, [sp, #8]
 801525a:	9925      	ldr	r1, [sp, #148]	; 0x94
 801525c:	a803      	add	r0, sp, #12
 801525e:	f004 fd51 	bl	8019d04 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015262:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8015264:	f8d9 3000 	ldr.w	r3, [r9]
 8015268:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 801526c:	8925      	ldrh	r5, [r4, #8]
 801526e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8015272:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8015276:	eba5 050c 	sub.w	r5, r5, ip
 801527a:	784a      	ldrb	r2, [r1, #1]
 801527c:	f8d8 3000 	ldr.w	r3, [r8]
 8015280:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8015284:	b22d      	sxth	r5, r5
 8015286:	9500      	str	r5, [sp, #0]
 8015288:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801528c:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8015290:	a803      	add	r0, sp, #12
 8015292:	f002 fae1 	bl	8017858 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8015296:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801529a:	18b9      	adds	r1, r7, r2
 801529c:	2900      	cmp	r1, #0
 801529e:	b203      	sxth	r3, r0
 80152a0:	dd0b      	ble.n	80152ba <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 80152a2:	3b01      	subs	r3, #1
 80152a4:	fb13 f302 	smulbb	r3, r3, r2
 80152a8:	fb16 3300 	smlabb	r3, r6, r0, r3
 80152ac:	b21f      	sxth	r7, r3
 80152ae:	4638      	mov	r0, r7
 80152b0:	b01d      	add	sp, #116	; 0x74
 80152b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152b6:	b003      	add	sp, #12
 80152b8:	4770      	bx	lr
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	dcf7      	bgt.n	80152ae <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80152be:	2700      	movs	r7, #0
 80152c0:	e7f5      	b.n	80152ae <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80152c2:	bf00      	nop
 80152c4:	2000c498 	.word	0x2000c498
 80152c8:	2000c494 	.word	0x2000c494
 80152cc:	2000c49c 	.word	0x2000c49c

080152d0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 80152d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152d4:	4bbb      	ldr	r3, [pc, #748]	; (80155c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f4>)
 80152d6:	460c      	mov	r4, r1
 80152d8:	881b      	ldrh	r3, [r3, #0]
 80152da:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 80152dc:	428b      	cmp	r3, r1
 80152de:	b0a9      	sub	sp, #164	; 0xa4
 80152e0:	4681      	mov	r9, r0
 80152e2:	d809      	bhi.n	80152f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 80152e4:	2300      	movs	r3, #0
 80152e6:	f04f 32ff 	mov.w	r2, #4294967295
 80152ea:	e9c0 3200 	strd	r3, r2, [r0]
 80152ee:	6083      	str	r3, [r0, #8]
 80152f0:	4648      	mov	r0, r9
 80152f2:	b029      	add	sp, #164	; 0xa4
 80152f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152f8:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 80155cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 80152fc:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 80155d0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>
 8015300:	f8db 3000 	ldr.w	r3, [fp]
 8015304:	f8d8 0000 	ldr.w	r0, [r8]
 8015308:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 801530c:	4bae      	ldr	r3, [pc, #696]	; (80155c8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8015314:	f7fa ff9e 	bl	8010254 <_ZNK8touchgfx5Texts7getTextEt>
 8015318:	682b      	ldr	r3, [r5, #0]
 801531a:	4607      	mov	r7, r0
 801531c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801531e:	4628      	mov	r0, r5
 8015320:	4798      	blx	r3
 8015322:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 8015324:	f8cd 800c 	str.w	r8, [sp, #12]
 8015328:	4430      	add	r0, r6
 801532a:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
 801532e:	b283      	uxth	r3, r0
 8015330:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8015334:	9302      	str	r3, [sp, #8]
 8015336:	4650      	mov	r0, sl
 8015338:	2e00      	cmp	r6, #0
 801533a:	f040 8091 	bne.w	8015460 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 801533e:	f004 fc86 	bl	8019c4e <_ZN8touchgfx12TextProviderC1Ev>
 8015342:	682b      	ldr	r3, [r5, #0]
 8015344:	4628      	mov	r0, r5
 8015346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015348:	4798      	blx	r3
 801534a:	682b      	ldr	r3, [r5, #0]
 801534c:	9005      	str	r0, [sp, #20]
 801534e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015350:	4628      	mov	r0, r5
 8015352:	4798      	blx	r3
 8015354:	6823      	ldr	r3, [r4, #0]
 8015356:	4680      	mov	r8, r0
 8015358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801535a:	4620      	mov	r0, r4
 801535c:	4798      	blx	r3
 801535e:	6822      	ldr	r2, [r4, #0]
 8015360:	9004      	str	r0, [sp, #16]
 8015362:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8015366:	4620      	mov	r0, r4
 8015368:	4790      	blx	r2
 801536a:	9905      	ldr	r1, [sp, #20]
 801536c:	9b04      	ldr	r3, [sp, #16]
 801536e:	9001      	str	r0, [sp, #4]
 8015370:	9300      	str	r3, [sp, #0]
 8015372:	460a      	mov	r2, r1
 8015374:	4643      	mov	r3, r8
 8015376:	4639      	mov	r1, r7
 8015378:	4650      	mov	r0, sl
 801537a:	f004 fcd8 	bl	8019d2e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801537e:	4637      	mov	r7, r6
 8015380:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8015382:	f8db 3000 	ldr.w	r3, [fp]
 8015386:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801538a:	4629      	mov	r1, r5
 801538c:	785b      	ldrb	r3, [r3, #1]
 801538e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015392:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8015396:	4650      	mov	r0, sl
 8015398:	f001 ffb0 	bl	80172fc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801539c:	4287      	cmp	r7, r0
 801539e:	bfb8      	it	lt
 80153a0:	b207      	sxthlt	r7, r0
 80153a2:	3601      	adds	r6, #1
 80153a4:	4650      	mov	r0, sl
 80153a6:	b2b6      	uxth	r6, r6
 80153a8:	f004 fc78 	bl	8019c9c <_ZN8touchgfx12TextProvider11endOfStringEv>
 80153ac:	2800      	cmp	r0, #0
 80153ae:	d0e7      	beq.n	8015380 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb0>
 80153b0:	9b02      	ldr	r3, [sp, #8]
 80153b2:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 80153b6:	fb13 f606 	smulbb	r6, r3, r6
 80153ba:	eba6 0608 	sub.w	r6, r6, r8
 80153be:	b2b6      	uxth	r6, r6
 80153c0:	fa0f f886 	sxth.w	r8, r6
 80153c4:	f1b8 0f00 	cmp.w	r8, #0
 80153c8:	dd06      	ble.n	80153d8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x108>
 80153ca:	682b      	ldr	r3, [r5, #0]
 80153cc:	4628      	mov	r0, r5
 80153ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153d0:	4798      	blx	r3
 80153d2:	4430      	add	r0, r6
 80153d4:	fa0f f880 	sxth.w	r8, r0
 80153d8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80153dc:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80153e0:	6823      	ldr	r3, [r4, #0]
 80153e2:	bf08      	it	eq
 80153e4:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 80153e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153ea:	bf18      	it	ne
 80153ec:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 80153f0:	4620      	mov	r0, r4
 80153f2:	4798      	blx	r3
 80153f4:	2801      	cmp	r0, #1
 80153f6:	b2ba      	uxth	r2, r7
 80153f8:	f000 80d1 	beq.w	801559e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ce>
 80153fc:	2802      	cmp	r0, #2
 80153fe:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8015402:	f000 80d2 	beq.w	80155aa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2da>
 8015406:	b21e      	sxth	r6, r3
 8015408:	7a29      	ldrb	r1, [r5, #8]
 801540a:	7a6d      	ldrb	r5, [r5, #9]
 801540c:	1a76      	subs	r6, r6, r1
 801540e:	4429      	add	r1, r5
 8015410:	440a      	add	r2, r1
 8015412:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8015416:	b2b3      	uxth	r3, r6
 8015418:	b292      	uxth	r2, r2
 801541a:	2902      	cmp	r1, #2
 801541c:	b21f      	sxth	r7, r3
 801541e:	b216      	sxth	r6, r2
 8015420:	f000 80c6 	beq.w	80155b0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e0>
 8015424:	2903      	cmp	r1, #3
 8015426:	f000 80d5 	beq.w	80155d4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>
 801542a:	2901      	cmp	r1, #1
 801542c:	f040 80db 	bne.w	80155e6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x316>
 8015430:	8923      	ldrh	r3, [r4, #8]
 8015432:	4632      	mov	r2, r6
 8015434:	eba3 0308 	sub.w	r3, r3, r8
 8015438:	4646      	mov	r6, r8
 801543a:	463d      	mov	r5, r7
 801543c:	4690      	mov	r8, r2
 801543e:	b21f      	sxth	r7, r3
 8015440:	9b03      	ldr	r3, [sp, #12]
 8015442:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8015444:	6818      	ldr	r0, [r3, #0]
 8015446:	f7fa ff05 	bl	8010254 <_ZNK8touchgfx5Texts7getTextEt>
 801544a:	f8a9 7000 	strh.w	r7, [r9]
 801544e:	f8a9 5002 	strh.w	r5, [r9, #2]
 8015452:	f8a9 6004 	strh.w	r6, [r9, #4]
 8015456:	f8a9 8006 	strh.w	r8, [r9, #6]
 801545a:	f8c9 0008 	str.w	r0, [r9, #8]
 801545e:	e747      	b.n	80152f0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8015460:	f004 fbf5 	bl	8019c4e <_ZN8touchgfx12TextProviderC1Ev>
 8015464:	682b      	ldr	r3, [r5, #0]
 8015466:	4628      	mov	r0, r5
 8015468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801546a:	4798      	blx	r3
 801546c:	682b      	ldr	r3, [r5, #0]
 801546e:	4606      	mov	r6, r0
 8015470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015472:	4628      	mov	r0, r5
 8015474:	4798      	blx	r3
 8015476:	6823      	ldr	r3, [r4, #0]
 8015478:	4680      	mov	r8, r0
 801547a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801547c:	4620      	mov	r0, r4
 801547e:	4798      	blx	r3
 8015480:	6822      	ldr	r2, [r4, #0]
 8015482:	9004      	str	r0, [sp, #16]
 8015484:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8015488:	4620      	mov	r0, r4
 801548a:	4790      	blx	r2
 801548c:	9b04      	ldr	r3, [sp, #16]
 801548e:	9001      	str	r0, [sp, #4]
 8015490:	4632      	mov	r2, r6
 8015492:	9300      	str	r3, [sp, #0]
 8015494:	4639      	mov	r1, r7
 8015496:	4643      	mov	r3, r8
 8015498:	4650      	mov	r0, sl
 801549a:	f004 fc48 	bl	8019d2e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801549e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80154a2:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 80154a6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80154a8:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 80154ac:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80154b0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80154b4:	bf0a      	itet	eq
 80154b6:	4642      	moveq	r2, r8
 80154b8:	461a      	movne	r2, r3
 80154ba:	4698      	moveq	r8, r3
 80154bc:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80154c0:	1ad2      	subs	r2, r2, r3
 80154c2:	f8db 3000 	ldr.w	r3, [fp]
 80154c6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80154ca:	7859      	ldrb	r1, [r3, #1]
 80154cc:	f8cd a020 	str.w	sl, [sp, #32]
 80154d0:	2300      	movs	r3, #0
 80154d2:	f3c1 0181 	ubfx	r1, r1, #2, #2
 80154d6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80154da:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80154de:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80154e2:	950a      	str	r5, [sp, #40]	; 0x28
 80154e4:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80154e8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80154ec:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 80154f0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80154f4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80154f8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80154fc:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8015500:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8015504:	b350      	cbz	r0, 801555c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28c>
 8015506:	682b      	ldr	r3, [r5, #0]
 8015508:	4628      	mov	r0, r5
 801550a:	695b      	ldr	r3, [r3, #20]
 801550c:	4798      	blx	r3
 801550e:	4607      	mov	r7, r0
 8015510:	b320      	cbz	r0, 801555c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28c>
 8015512:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015514:	6803      	ldr	r3, [r0, #0]
 8015516:	4639      	mov	r1, r7
 8015518:	68db      	ldr	r3, [r3, #12]
 801551a:	4798      	blx	r3
 801551c:	4606      	mov	r6, r0
 801551e:	b1e8      	cbz	r0, 801555c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28c>
 8015520:	7b43      	ldrb	r3, [r0, #13]
 8015522:	7a82      	ldrb	r2, [r0, #10]
 8015524:	005b      	lsls	r3, r3, #1
 8015526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801552a:	4313      	orrs	r3, r2
 801552c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8015530:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8015534:	2b04      	cmp	r3, #4
 8015536:	d111      	bne.n	801555c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28c>
 8015538:	980a      	ldr	r0, [sp, #40]	; 0x28
 801553a:	6803      	ldr	r3, [r0, #0]
 801553c:	4632      	mov	r2, r6
 801553e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015540:	4639      	mov	r1, r7
 8015542:	4798      	blx	r3
 8015544:	7b73      	ldrb	r3, [r6, #13]
 8015546:	005b      	lsls	r3, r3, #1
 8015548:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801554c:	7ab3      	ldrb	r3, [r6, #10]
 801554e:	4313      	orrs	r3, r2
 8015550:	4418      	add	r0, r3
 8015552:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015556:	4418      	add	r0, r3
 8015558:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 801555c:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 8015560:	2600      	movs	r6, #0
 8015562:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 8015566:	4637      	mov	r7, r6
 8015568:	45c3      	cmp	fp, r8
 801556a:	bfd4      	ite	le
 801556c:	2100      	movle	r1, #0
 801556e:	2101      	movgt	r1, #1
 8015570:	a807      	add	r0, sp, #28
 8015572:	f002 f8a2 	bl	80176ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8015576:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801557a:	429f      	cmp	r7, r3
 801557c:	bfb8      	it	lt
 801557e:	b21f      	sxthlt	r7, r3
 8015580:	9b02      	ldr	r3, [sp, #8]
 8015582:	eba8 0803 	sub.w	r8, r8, r3
 8015586:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801558a:	3601      	adds	r6, #1
 801558c:	b2b6      	uxth	r6, r6
 801558e:	fa0f f888 	sxth.w	r8, r8
 8015592:	2b00      	cmp	r3, #0
 8015594:	f43f af0c 	beq.w	80153b0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 8015598:	45c2      	cmp	sl, r8
 801559a:	dbe5      	blt.n	8015568 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x298>
 801559c:	e708      	b.n	80153b0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 801559e:	1bf6      	subs	r6, r6, r7
 80155a0:	2702      	movs	r7, #2
 80155a2:	fb96 f6f7 	sdiv	r6, r6, r7
 80155a6:	b236      	sxth	r6, r6
 80155a8:	e72e      	b.n	8015408 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x138>
 80155aa:	4413      	add	r3, r2
 80155ac:	1af6      	subs	r6, r6, r3
 80155ae:	e7fa      	b.n	80155a6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2d6>
 80155b0:	8925      	ldrh	r5, [r4, #8]
 80155b2:	1aad      	subs	r5, r5, r2
 80155b4:	1aed      	subs	r5, r5, r3
 80155b6:	b22f      	sxth	r7, r5
 80155b8:	8965      	ldrh	r5, [r4, #10]
 80155ba:	eba5 0508 	sub.w	r5, r5, r8
 80155be:	b22d      	sxth	r5, r5
 80155c0:	e73e      	b.n	8015440 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x170>
 80155c2:	bf00      	nop
 80155c4:	2000c498 	.word	0x2000c498
 80155c8:	2000c49c 	.word	0x2000c49c
 80155cc:	2000c494 	.word	0x2000c494
 80155d0:	2000c4a0 	.word	0x2000c4a0
 80155d4:	8965      	ldrh	r5, [r4, #10]
 80155d6:	1aad      	subs	r5, r5, r2
 80155d8:	1aed      	subs	r5, r5, r3
 80155da:	4633      	mov	r3, r6
 80155dc:	b22d      	sxth	r5, r5
 80155de:	4646      	mov	r6, r8
 80155e0:	2700      	movs	r7, #0
 80155e2:	4698      	mov	r8, r3
 80155e4:	e72c      	b.n	8015440 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x170>
 80155e6:	2500      	movs	r5, #0
 80155e8:	e72a      	b.n	8015440 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x170>
 80155ea:	bf00      	nop

080155ec <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 80155ec:	b513      	push	{r0, r1, r4, lr}
 80155ee:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80155f2:	4604      	mov	r4, r0
 80155f4:	b1fb      	cbz	r3, 8015636 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80155f6:	4b16      	ldr	r3, [pc, #88]	; (8015650 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 80155f8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80155fa:	881b      	ldrh	r3, [r3, #0]
 80155fc:	428b      	cmp	r3, r1
 80155fe:	d91a      	bls.n	8015636 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015600:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8015604:	2b00      	cmp	r3, #0
 8015606:	dd16      	ble.n	8015636 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015608:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801560c:	2b00      	cmp	r3, #0
 801560e:	dd12      	ble.n	8015636 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015610:	4b10      	ldr	r3, [pc, #64]	; (8015654 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8015612:	6818      	ldr	r0, [r3, #0]
 8015614:	f7fa fe1e 	bl	8010254 <_ZNK8touchgfx5Texts7getTextEt>
 8015618:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 801561c:	6822      	ldr	r2, [r4, #0]
 801561e:	2b00      	cmp	r3, #0
 8015620:	db06      	blt.n	8015630 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8015622:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8015626:	2b00      	cmp	r3, #0
 8015628:	db02      	blt.n	8015630 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801562a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801562c:	4298      	cmp	r0, r3
 801562e:	d004      	beq.n	801563a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8015630:	6953      	ldr	r3, [r2, #20]
 8015632:	4620      	mov	r0, r4
 8015634:	4798      	blx	r3
 8015636:	b002      	add	sp, #8
 8015638:	bd10      	pop	{r4, pc}
 801563a:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 801563e:	c903      	ldmia	r1, {r0, r1}
 8015640:	466b      	mov	r3, sp
 8015642:	e883 0003 	stmia.w	r3, {r0, r1}
 8015646:	6912      	ldr	r2, [r2, #16]
 8015648:	4619      	mov	r1, r3
 801564a:	4620      	mov	r0, r4
 801564c:	4790      	blx	r2
 801564e:	e7f2      	b.n	8015636 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015650:	2000c498 	.word	0x2000c498
 8015654:	2000c4a0 	.word	0x2000c4a0

08015658 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8015658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801565c:	4b44      	ldr	r3, [pc, #272]	; (8015770 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 801565e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8015660:	881b      	ldrh	r3, [r3, #0]
 8015662:	4293      	cmp	r3, r2
 8015664:	b08e      	sub	sp, #56	; 0x38
 8015666:	4604      	mov	r4, r0
 8015668:	d97e      	bls.n	8015768 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801566a:	6808      	ldr	r0, [r1, #0]
 801566c:	4d41      	ldr	r5, [pc, #260]	; (8015774 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 801566e:	6849      	ldr	r1, [r1, #4]
 8015670:	ab05      	add	r3, sp, #20
 8015672:	c303      	stmia	r3!, {r0, r1}
 8015674:	4611      	mov	r1, r2
 8015676:	6828      	ldr	r0, [r5, #0]
 8015678:	f7fa fdec 	bl	8010254 <_ZNK8touchgfx5Texts7getTextEt>
 801567c:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8015680:	2b00      	cmp	r3, #0
 8015682:	db11      	blt.n	80156a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8015684:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8015688:	2b00      	cmp	r3, #0
 801568a:	db0d      	blt.n	80156a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801568c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801568e:	4298      	cmp	r0, r3
 8015690:	d10a      	bne.n	80156a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8015692:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8015696:	e892 0003 	ldmia.w	r2, {r0, r1}
 801569a:	ab09      	add	r3, sp, #36	; 0x24
 801569c:	e883 0003 	stmia.w	r3, {r0, r1}
 80156a0:	4619      	mov	r1, r3
 80156a2:	a805      	add	r0, sp, #20
 80156a4:	f7fe f89c 	bl	80137e0 <_ZN8touchgfx4RectaNERKS0_>
 80156a8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	dd5b      	ble.n	8015768 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80156b0:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	dd57      	ble.n	8015768 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80156b8:	4f2f      	ldr	r7, [pc, #188]	; (8015778 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 80156ba:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80156bc:	683b      	ldr	r3, [r7, #0]
 80156be:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80156c2:	4b2e      	ldr	r3, [pc, #184]	; (801577c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80156ca:	2e00      	cmp	r6, #0
 80156cc:	d04c      	beq.n	8015768 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80156ce:	6823      	ldr	r3, [r4, #0]
 80156d0:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 80156d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156d6:	4620      	mov	r0, r4
 80156d8:	4798      	blx	r3
 80156da:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80156dc:	683b      	ldr	r3, [r7, #0]
 80156de:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 80156e2:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 80156e6:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 80156ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80156ec:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80156f0:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80156f4:	785b      	ldrb	r3, [r3, #1]
 80156f6:	9609      	str	r6, [sp, #36]	; 0x24
 80156f8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80156fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015700:	4b1f      	ldr	r3, [pc, #124]	; (8015780 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8015702:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 801570c:	910b      	str	r1, [sp, #44]	; 0x2c
 801570e:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 8015712:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8015716:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 801571a:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 801571e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015722:	b10a      	cbz	r2, 8015728 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8015724:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8015726:	b906      	cbnz	r6, 801572a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8015728:	689e      	ldr	r6, [r3, #8]
 801572a:	af07      	add	r7, sp, #28
 801572c:	4621      	mov	r1, r4
 801572e:	4638      	mov	r0, r7
 8015730:	f003 fde6 	bl	8019300 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015734:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8015736:	6828      	ldr	r0, [r5, #0]
 8015738:	f7fa fd8c 	bl	8010254 <_ZNK8touchgfx5Texts7getTextEt>
 801573c:	6823      	ldr	r3, [r4, #0]
 801573e:	4605      	mov	r5, r0
 8015740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015742:	4620      	mov	r0, r4
 8015744:	4798      	blx	r3
 8015746:	6823      	ldr	r3, [r4, #0]
 8015748:	4680      	mov	r8, r0
 801574a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801574e:	4620      	mov	r0, r4
 8015750:	4798      	blx	r3
 8015752:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8015756:	ab09      	add	r3, sp, #36	; 0x24
 8015758:	9300      	str	r3, [sp, #0]
 801575a:	9501      	str	r5, [sp, #4]
 801575c:	ab05      	add	r3, sp, #20
 801575e:	e897 0006 	ldmia.w	r7, {r1, r2}
 8015762:	4630      	mov	r0, r6
 8015764:	f7fa fd07 	bl	8010176 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015768:	b00e      	add	sp, #56	; 0x38
 801576a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801576e:	bf00      	nop
 8015770:	2000c498 	.word	0x2000c498
 8015774:	2000c4a0 	.word	0x2000c4a0
 8015778:	2000c494 	.word	0x2000c494
 801577c:	2000c49c 	.word	0x2000c49c
 8015780:	2000c43c 	.word	0x2000c43c

08015784 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8015784:	b538      	push	{r3, r4, r5, lr}
 8015786:	4b0e      	ldr	r3, [pc, #56]	; (80157c0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8015788:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801578a:	881b      	ldrh	r3, [r3, #0]
 801578c:	429a      	cmp	r2, r3
 801578e:	4604      	mov	r4, r0
 8015790:	d214      	bcs.n	80157bc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8015792:	6803      	ldr	r3, [r0, #0]
 8015794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015796:	4798      	blx	r3
 8015798:	6823      	ldr	r3, [r4, #0]
 801579a:	4605      	mov	r5, r0
 801579c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801579e:	4620      	mov	r0, r4
 80157a0:	4798      	blx	r3
 80157a2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80157a6:	b22d      	sxth	r5, r5
 80157a8:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80157ac:	4601      	mov	r1, r0
 80157ae:	bf06      	itte	eq
 80157b0:	4602      	moveq	r2, r0
 80157b2:	4629      	moveq	r1, r5
 80157b4:	462a      	movne	r2, r5
 80157b6:	4620      	mov	r0, r4
 80157b8:	f7f7 fd4b 	bl	800d252 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80157bc:	bd38      	pop	{r3, r4, r5, pc}
 80157be:	bf00      	nop
 80157c0:	2000c498 	.word	0x2000c498

080157c4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 80157c4:	b530      	push	{r4, r5, lr}
 80157c6:	888b      	ldrh	r3, [r1, #4]
 80157c8:	8583      	strh	r3, [r0, #44]	; 0x2c
 80157ca:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80157ce:	b085      	sub	sp, #20
 80157d0:	4604      	mov	r4, r0
 80157d2:	b923      	cbnz	r3, 80157de <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 80157d4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80157d8:	b90b      	cbnz	r3, 80157de <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 80157da:	f7ff ffd3 	bl	8015784 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80157de:	6823      	ldr	r3, [r4, #0]
 80157e0:	466d      	mov	r5, sp
 80157e2:	4621      	mov	r1, r4
 80157e4:	4628      	mov	r0, r5
 80157e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80157ea:	4798      	blx	r3
 80157ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80157f0:	343c      	adds	r4, #60	; 0x3c
 80157f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80157f6:	b005      	add	sp, #20
 80157f8:	bd30      	pop	{r4, r5, pc}

080157fa <_ZNK8touchgfx3Box12getSolidRectEv>:
 80157fa:	2300      	movs	r3, #0
 80157fc:	8083      	strh	r3, [r0, #4]
 80157fe:	80c3      	strh	r3, [r0, #6]
 8015800:	8003      	strh	r3, [r0, #0]
 8015802:	8043      	strh	r3, [r0, #2]
 8015804:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8015808:	2bff      	cmp	r3, #255	; 0xff
 801580a:	bf01      	itttt	eq
 801580c:	890b      	ldrheq	r3, [r1, #8]
 801580e:	8083      	strheq	r3, [r0, #4]
 8015810:	894b      	ldrheq	r3, [r1, #10]
 8015812:	80c3      	strheq	r3, [r0, #6]
 8015814:	4770      	bx	lr
	...

08015818 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8015818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801581a:	4604      	mov	r4, r0
 801581c:	6808      	ldr	r0, [r1, #0]
 801581e:	6849      	ldr	r1, [r1, #4]
 8015820:	466b      	mov	r3, sp
 8015822:	c303      	stmia	r3!, {r0, r1}
 8015824:	6823      	ldr	r3, [r4, #0]
 8015826:	4669      	mov	r1, sp
 8015828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801582a:	4620      	mov	r0, r4
 801582c:	4798      	blx	r3
 801582e:	4b08      	ldr	r3, [pc, #32]	; (8015850 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015836:	b10a      	cbz	r2, 801583c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8015838:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801583a:	b900      	cbnz	r0, 801583e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801583c:	6898      	ldr	r0, [r3, #8]
 801583e:	6803      	ldr	r3, [r0, #0]
 8015840:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8015842:	6a1d      	ldr	r5, [r3, #32]
 8015844:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8015848:	4669      	mov	r1, sp
 801584a:	47a8      	blx	r5
 801584c:	b003      	add	sp, #12
 801584e:	bd30      	pop	{r4, r5, pc}
 8015850:	2000c43c 	.word	0x2000c43c

08015854 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8015854:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8015858:	b12a      	cbz	r2, 8015866 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801585a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801585e:	b112      	cbz	r2, 8015866 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8015860:	6803      	ldr	r3, [r0, #0]
 8015862:	695b      	ldr	r3, [r3, #20]
 8015864:	4718      	bx	r3
 8015866:	4770      	bx	lr

08015868 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8015868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801586c:	4b2f      	ldr	r3, [pc, #188]	; (801592c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 801586e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8015870:	881b      	ldrh	r3, [r3, #0]
 8015872:	4293      	cmp	r3, r2
 8015874:	b08d      	sub	sp, #52	; 0x34
 8015876:	4604      	mov	r4, r0
 8015878:	460f      	mov	r7, r1
 801587a:	d954      	bls.n	8015926 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 801587c:	4b2c      	ldr	r3, [pc, #176]	; (8015930 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 801587e:	6819      	ldr	r1, [r3, #0]
 8015880:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8015884:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8015888:	4a2a      	ldr	r2, [pc, #168]	; (8015934 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 801588a:	6812      	ldr	r2, [r2, #0]
 801588c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8015890:	2900      	cmp	r1, #0
 8015892:	d048      	beq.n	8015926 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8015894:	785a      	ldrb	r2, [r3, #1]
 8015896:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 801589a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801589e:	4b26      	ldr	r3, [pc, #152]	; (8015938 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 80158a0:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 80158a4:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 80158a8:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 80158ac:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80158ae:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 80158b2:	9107      	str	r1, [sp, #28]
 80158b4:	f3c2 0801 	ubfx	r8, r2, #0, #2
 80158b8:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80158bc:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 80158c0:	681a      	ldr	r2, [r3, #0]
 80158c2:	f88d 8020 	strb.w	r8, [sp, #32]
 80158c6:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 80158ca:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 80158ce:	9609      	str	r6, [sp, #36]	; 0x24
 80158d0:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 80158d4:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 80158d8:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 80158dc:	b10b      	cbz	r3, 80158e2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 80158de:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 80158e0:	b905      	cbnz	r5, 80158e4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 80158e2:	6895      	ldr	r5, [r2, #8]
 80158e4:	ae05      	add	r6, sp, #20
 80158e6:	4621      	mov	r1, r4
 80158e8:	4630      	mov	r0, r6
 80158ea:	f003 fd09 	bl	8019300 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80158ee:	4b13      	ldr	r3, [pc, #76]	; (801593c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 80158f0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80158f2:	6818      	ldr	r0, [r3, #0]
 80158f4:	f7fa fcae 	bl	8010254 <_ZNK8touchgfx5Texts7getTextEt>
 80158f8:	6823      	ldr	r3, [r4, #0]
 80158fa:	4680      	mov	r8, r0
 80158fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80158fe:	4620      	mov	r0, r4
 8015900:	4798      	blx	r3
 8015902:	6823      	ldr	r3, [r4, #0]
 8015904:	4681      	mov	r9, r0
 8015906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801590a:	4620      	mov	r0, r4
 801590c:	4798      	blx	r3
 801590e:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8015912:	ab07      	add	r3, sp, #28
 8015914:	9300      	str	r3, [sp, #0]
 8015916:	f8cd 8004 	str.w	r8, [sp, #4]
 801591a:	463b      	mov	r3, r7
 801591c:	e896 0006 	ldmia.w	r6, {r1, r2}
 8015920:	4628      	mov	r0, r5
 8015922:	f7fa fc28 	bl	8010176 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015926:	b00d      	add	sp, #52	; 0x34
 8015928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801592c:	2000c498 	.word	0x2000c498
 8015930:	2000c494 	.word	0x2000c494
 8015934:	2000c49c 	.word	0x2000c49c
 8015938:	2000c43c 	.word	0x2000c43c
 801593c:	2000c4a0 	.word	0x2000c4a0

08015940 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
 8015940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015944:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8015948:	b0a0      	sub	sp, #128	; 0x80
 801594a:	4604      	mov	r4, r0
 801594c:	b193      	cbz	r3, 8015974 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801594e:	4b30      	ldr	r3, [pc, #192]	; (8015a10 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd0>)
 8015950:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015952:	881b      	ldrh	r3, [r3, #0]
 8015954:	428b      	cmp	r3, r1
 8015956:	d90d      	bls.n	8015974 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8015958:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801595c:	2b00      	cmp	r3, #0
 801595e:	dd09      	ble.n	8015974 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8015960:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015964:	2b00      	cmp	r3, #0
 8015966:	dd05      	ble.n	8015974 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8015968:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 801596c:	b12b      	cbz	r3, 801597a <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x3a>
 801596e:	6803      	ldr	r3, [r0, #0]
 8015970:	695b      	ldr	r3, [r3, #20]
 8015972:	4798      	blx	r3
 8015974:	b020      	add	sp, #128	; 0x80
 8015976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801597a:	4b26      	ldr	r3, [pc, #152]	; (8015a14 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd4>)
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8015982:	4b25      	ldr	r3, [pc, #148]	; (8015a18 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd8>)
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801598a:	4b24      	ldr	r3, [pc, #144]	; (8015a1c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xdc>)
 801598c:	6818      	ldr	r0, [r3, #0]
 801598e:	f7fa fc61 	bl	8010254 <_ZNK8touchgfx5Texts7getTextEt>
 8015992:	4606      	mov	r6, r0
 8015994:	a807      	add	r0, sp, #28
 8015996:	f004 f95a 	bl	8019c4e <_ZN8touchgfx12TextProviderC1Ev>
 801599a:	682b      	ldr	r3, [r5, #0]
 801599c:	4628      	mov	r0, r5
 801599e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80159a0:	4798      	blx	r3
 80159a2:	682b      	ldr	r3, [r5, #0]
 80159a4:	4607      	mov	r7, r0
 80159a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80159a8:	4628      	mov	r0, r5
 80159aa:	4798      	blx	r3
 80159ac:	6823      	ldr	r3, [r4, #0]
 80159ae:	4605      	mov	r5, r0
 80159b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80159b2:	4620      	mov	r0, r4
 80159b4:	4798      	blx	r3
 80159b6:	6823      	ldr	r3, [r4, #0]
 80159b8:	4680      	mov	r8, r0
 80159ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80159be:	4620      	mov	r0, r4
 80159c0:	4798      	blx	r3
 80159c2:	462b      	mov	r3, r5
 80159c4:	e9cd 8000 	strd	r8, r0, [sp]
 80159c8:	463a      	mov	r2, r7
 80159ca:	a807      	add	r0, sp, #28
 80159cc:	4631      	mov	r1, r6
 80159ce:	f004 f9ae 	bl	8019d2e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80159d2:	a807      	add	r0, sp, #28
 80159d4:	f004 fd66 	bl	801a4a4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80159d8:	280a      	cmp	r0, #10
 80159da:	d103      	bne.n	80159e4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xa4>
 80159dc:	6823      	ldr	r3, [r4, #0]
 80159de:	4620      	mov	r0, r4
 80159e0:	695b      	ldr	r3, [r3, #20]
 80159e2:	e7c6      	b.n	8015972 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x32>
 80159e4:	a807      	add	r0, sp, #28
 80159e6:	f004 fd5d 	bl	801a4a4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80159ea:	2800      	cmp	r0, #0
 80159ec:	d1f4      	bne.n	80159d8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x98>
 80159ee:	ad04      	add	r5, sp, #16
 80159f0:	4621      	mov	r1, r4
 80159f2:	4628      	mov	r0, r5
 80159f4:	f7ff fc6c 	bl	80152d0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80159f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80159fc:	6822      	ldr	r2, [r4, #0]
 80159fe:	ab02      	add	r3, sp, #8
 8015a00:	e883 0003 	stmia.w	r3, {r0, r1}
 8015a04:	6912      	ldr	r2, [r2, #16]
 8015a06:	4619      	mov	r1, r3
 8015a08:	4620      	mov	r0, r4
 8015a0a:	4790      	blx	r2
 8015a0c:	e7b2      	b.n	8015974 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8015a0e:	bf00      	nop
 8015a10:	2000c498 	.word	0x2000c498
 8015a14:	2000c494 	.word	0x2000c494
 8015a18:	2000c49c 	.word	0x2000c49c
 8015a1c:	2000c4a0 	.word	0x2000c4a0

08015a20 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8015a20:	b570      	push	{r4, r5, r6, lr}
 8015a22:	880b      	ldrh	r3, [r1, #0]
 8015a24:	84c3      	strh	r3, [r0, #38]	; 0x26
 8015a26:	4604      	mov	r4, r0
 8015a28:	4608      	mov	r0, r1
 8015a2a:	460d      	mov	r5, r1
 8015a2c:	f005 fed4 	bl	801b7d8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015a30:	4606      	mov	r6, r0
 8015a32:	4628      	mov	r0, r5
 8015a34:	f005 ff04 	bl	801b840 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015a38:	6823      	ldr	r3, [r4, #0]
 8015a3a:	4605      	mov	r5, r0
 8015a3c:	4631      	mov	r1, r6
 8015a3e:	4620      	mov	r0, r4
 8015a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a42:	4798      	blx	r3
 8015a44:	6823      	ldr	r3, [r4, #0]
 8015a46:	4629      	mov	r1, r5
 8015a48:	4620      	mov	r0, r4
 8015a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015a4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a50:	4718      	bx	r3

08015a52 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8015a52:	b510      	push	{r4, lr}
 8015a54:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8015a58:	2bff      	cmp	r3, #255	; 0xff
 8015a5a:	4604      	mov	r4, r0
 8015a5c:	d006      	beq.n	8015a6c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8015a5e:	2300      	movs	r3, #0
 8015a60:	8003      	strh	r3, [r0, #0]
 8015a62:	8043      	strh	r3, [r0, #2]
 8015a64:	8083      	strh	r3, [r0, #4]
 8015a66:	80c3      	strh	r3, [r0, #6]
 8015a68:	4620      	mov	r0, r4
 8015a6a:	bd10      	pop	{r4, pc}
 8015a6c:	3126      	adds	r1, #38	; 0x26
 8015a6e:	f005 ff1b 	bl	801b8a8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8015a72:	e7f9      	b.n	8015a68 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08015a74 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8015a74:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8015a78:	b12a      	cbz	r2, 8015a86 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8015a7a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8015a7e:	b112      	cbz	r2, 8015a86 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8015a80:	6803      	ldr	r3, [r0, #0]
 8015a82:	695b      	ldr	r3, [r3, #20]
 8015a84:	4718      	bx	r3
 8015a86:	4770      	bx	lr

08015a88 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8015a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a8c:	4604      	mov	r4, r0
 8015a8e:	b088      	sub	sp, #32
 8015a90:	f854 3b26 	ldr.w	r3, [r4], #38
 8015a94:	2500      	movs	r5, #0
 8015a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a98:	460f      	mov	r7, r1
 8015a9a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015a9e:	a904      	add	r1, sp, #16
 8015aa0:	4606      	mov	r6, r0
 8015aa2:	4798      	blx	r3
 8015aa4:	4620      	mov	r0, r4
 8015aa6:	f005 fe97 	bl	801b7d8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015aaa:	4680      	mov	r8, r0
 8015aac:	4620      	mov	r0, r4
 8015aae:	f005 fec7 	bl	801b840 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015ab2:	9506      	str	r5, [sp, #24]
 8015ab4:	ad06      	add	r5, sp, #24
 8015ab6:	f8ad 001e 	strh.w	r0, [sp, #30]
 8015aba:	4639      	mov	r1, r7
 8015abc:	4628      	mov	r0, r5
 8015abe:	f8ad 801c 	strh.w	r8, [sp, #28]
 8015ac2:	f7fd fe8d 	bl	80137e0 <_ZN8touchgfx4RectaNERKS0_>
 8015ac6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	dd19      	ble.n	8015b02 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8015ace:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	dd15      	ble.n	8015b02 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8015ad6:	4b0c      	ldr	r3, [pc, #48]	; (8015b08 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015ade:	b10a      	cbz	r2, 8015ae4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8015ae0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015ae2:	b900      	cbnz	r0, 8015ae6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8015ae4:	6898      	ldr	r0, [r3, #8]
 8015ae6:	6801      	ldr	r1, [r0, #0]
 8015ae8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8015aec:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8015af0:	2701      	movs	r7, #1
 8015af2:	9702      	str	r7, [sp, #8]
 8015af4:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8015af8:	e9cd 5600 	strd	r5, r6, [sp]
 8015afc:	688d      	ldr	r5, [r1, #8]
 8015afe:	4621      	mov	r1, r4
 8015b00:	47a8      	blx	r5
 8015b02:	b008      	add	sp, #32
 8015b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b08:	2000c43c 	.word	0x2000c43c

08015b0c <_ZN8touchgfx7OutlineD1Ev>:
 8015b0c:	4770      	bx	lr

08015b0e <_ZN8touchgfx7OutlineD0Ev>:
 8015b0e:	b510      	push	{r4, lr}
 8015b10:	2130      	movs	r1, #48	; 0x30
 8015b12:	4604      	mov	r4, r0
 8015b14:	f011 ff42 	bl	802799c <_ZdlPvj>
 8015b18:	4620      	mov	r0, r4
 8015b1a:	bd10      	pop	{r4, pc}

08015b1c <_ZN8touchgfx7Outline5resetEv>:
 8015b1c:	b510      	push	{r4, lr}
 8015b1e:	4604      	mov	r4, r0
 8015b20:	f000 fe8c 	bl	801683c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8015b24:	60e0      	str	r0, [r4, #12]
 8015b26:	f000 fe8f 	bl	8016848 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8015b2a:	68e3      	ldr	r3, [r4, #12]
 8015b2c:	6123      	str	r3, [r4, #16]
 8015b2e:	08c0      	lsrs	r0, r0, #3
 8015b30:	2200      	movs	r2, #0
 8015b32:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8015b36:	3801      	subs	r0, #1
 8015b38:	6060      	str	r0, [r4, #4]
 8015b3a:	60a2      	str	r2, [r4, #8]
 8015b3c:	8019      	strh	r1, [r3, #0]
 8015b3e:	8059      	strh	r1, [r3, #2]
 8015b40:	809a      	strh	r2, [r3, #4]
 8015b42:	80da      	strh	r2, [r3, #6]
 8015b44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015b46:	f023 0301 	bic.w	r3, r3, #1
 8015b4a:	f043 0302 	orr.w	r3, r3, #2
 8015b4e:	6263      	str	r3, [r4, #36]	; 0x24
 8015b50:	bd10      	pop	{r4, pc}
	...

08015b54 <_ZN8touchgfx7OutlineC1Ev>:
 8015b54:	b510      	push	{r4, lr}
 8015b56:	4b0a      	ldr	r3, [pc, #40]	; (8015b80 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8015b58:	6003      	str	r3, [r0, #0]
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8015b60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015b64:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8015b68:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8015b6c:	6243      	str	r3, [r0, #36]	; 0x24
 8015b6e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015b72:	4604      	mov	r4, r0
 8015b74:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8015b78:	f7ff ffd0 	bl	8015b1c <_ZN8touchgfx7Outline5resetEv>
 8015b7c:	4620      	mov	r0, r4
 8015b7e:	bd10      	pop	{r4, pc}
 8015b80:	0802ebf4 	.word	0x0802ebf4

08015b84 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8015b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b88:	b093      	sub	sp, #76	; 0x4c
 8015b8a:	1156      	asrs	r6, r2, #5
 8015b8c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8015b8e:	9305      	str	r3, [sp, #20]
 8015b90:	f004 051f 	and.w	r5, r4, #31
 8015b94:	1153      	asrs	r3, r2, #5
 8015b96:	9504      	str	r5, [sp, #16]
 8015b98:	1165      	asrs	r5, r4, #5
 8015b9a:	9303      	str	r3, [sp, #12]
 8015b9c:	42ae      	cmp	r6, r5
 8015b9e:	ea4f 1364 	mov.w	r3, r4, asr #5
 8015ba2:	9306      	str	r3, [sp, #24]
 8015ba4:	f002 031f 	and.w	r3, r2, #31
 8015ba8:	f040 80f8 	bne.w	8015d9c <_ZN8touchgfx7Outline10renderLineEiiii+0x218>
 8015bac:	9c04      	ldr	r4, [sp, #16]
 8015bae:	9a05      	ldr	r2, [sp, #20]
 8015bb0:	42a3      	cmp	r3, r4
 8015bb2:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8015bb6:	6902      	ldr	r2, [r0, #16]
 8015bb8:	d125      	bne.n	8015c06 <_ZN8touchgfx7Outline10renderLineEiiii+0x82>
 8015bba:	f9b2 3000 	ldrsh.w	r3, [r2]
 8015bbe:	459e      	cmp	lr, r3
 8015bc0:	d103      	bne.n	8015bca <_ZN8touchgfx7Outline10renderLineEiiii+0x46>
 8015bc2:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8015bc6:	429e      	cmp	r6, r3
 8015bc8:	d035      	beq.n	8015c36 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8015bca:	88d1      	ldrh	r1, [r2, #6]
 8015bcc:	8893      	ldrh	r3, [r2, #4]
 8015bce:	430b      	orrs	r3, r1
 8015bd0:	d010      	beq.n	8015bf4 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8015bd2:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	db0c      	blt.n	8015bf4 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8015bda:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8015bdc:	428b      	cmp	r3, r1
 8015bde:	da09      	bge.n	8015bf4 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8015be0:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8015be4:	428b      	cmp	r3, r1
 8015be6:	bf38      	it	cc
 8015be8:	3208      	addcc	r2, #8
 8015bea:	f103 0301 	add.w	r3, r3, #1
 8015bee:	bf38      	it	cc
 8015bf0:	6102      	strcc	r2, [r0, #16]
 8015bf2:	6083      	str	r3, [r0, #8]
 8015bf4:	6903      	ldr	r3, [r0, #16]
 8015bf6:	9a03      	ldr	r2, [sp, #12]
 8015bf8:	f8a3 e000 	strh.w	lr, [r3]
 8015bfc:	805a      	strh	r2, [r3, #2]
 8015bfe:	2200      	movs	r2, #0
 8015c00:	809a      	strh	r2, [r3, #4]
 8015c02:	80da      	strh	r2, [r3, #6]
 8015c04:	e017      	b.n	8015c36 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8015c06:	9c05      	ldr	r4, [sp, #20]
 8015c08:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8015c0c:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8015c10:	f004 041f 	and.w	r4, r4, #31
 8015c14:	114e      	asrs	r6, r1, #5
 8015c16:	9402      	str	r4, [sp, #8]
 8015c18:	9c04      	ldr	r4, [sp, #16]
 8015c1a:	4576      	cmp	r6, lr
 8015c1c:	f001 0c1f 	and.w	ip, r1, #31
 8015c20:	eba4 0403 	sub.w	r4, r4, r3
 8015c24:	d10a      	bne.n	8015c3c <_ZN8touchgfx7Outline10renderLineEiiii+0xb8>
 8015c26:	9b02      	ldr	r3, [sp, #8]
 8015c28:	449c      	add	ip, r3
 8015c2a:	44a0      	add	r8, r4
 8015c2c:	fb04 a40c 	mla	r4, r4, ip, sl
 8015c30:	f8a2 8004 	strh.w	r8, [r2, #4]
 8015c34:	80d4      	strh	r4, [r2, #6]
 8015c36:	b013      	add	sp, #76	; 0x4c
 8015c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c3c:	9d05      	ldr	r5, [sp, #20]
 8015c3e:	1a69      	subs	r1, r5, r1
 8015c40:	bf5b      	ittet	pl
 8015c42:	f1cc 0520 	rsbpl	r5, ip, #32
 8015c46:	436c      	mulpl	r4, r5
 8015c48:	2500      	movmi	r5, #0
 8015c4a:	2520      	movpl	r5, #32
 8015c4c:	bf44      	itt	mi
 8015c4e:	fb04 f40c 	mulmi.w	r4, r4, ip
 8015c52:	4249      	negmi	r1, r1
 8015c54:	9501      	str	r5, [sp, #4]
 8015c56:	9f01      	ldr	r7, [sp, #4]
 8015c58:	fb94 f5f1 	sdiv	r5, r4, r1
 8015c5c:	fb01 4415 	mls	r4, r1, r5, r4
 8015c60:	bf54      	ite	pl
 8015c62:	f04f 0901 	movpl.w	r9, #1
 8015c66:	f04f 39ff 	movmi.w	r9, #4294967295
 8015c6a:	2c00      	cmp	r4, #0
 8015c6c:	bfb8      	it	lt
 8015c6e:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8015c72:	44bc      	add	ip, r7
 8015c74:	44a8      	add	r8, r5
 8015c76:	fb05 ac0c 	mla	ip, r5, ip, sl
 8015c7a:	f8a2 8004 	strh.w	r8, [r2, #4]
 8015c7e:	f8a2 c006 	strh.w	ip, [r2, #6]
 8015c82:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015c86:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8015c8a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8015c8e:	bfb8      	it	lt
 8015c90:	1864      	addlt	r4, r4, r1
 8015c92:	ea58 0202 	orrs.w	r2, r8, r2
 8015c96:	444e      	add	r6, r9
 8015c98:	d011      	beq.n	8015cbe <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8015c9a:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8015c9e:	f1b8 0f00 	cmp.w	r8, #0
 8015ca2:	db0c      	blt.n	8015cbe <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8015ca4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8015ca6:	4590      	cmp	r8, r2
 8015ca8:	da09      	bge.n	8015cbe <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8015caa:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8015cae:	4590      	cmp	r8, r2
 8015cb0:	bf3c      	itt	cc
 8015cb2:	f10c 0208 	addcc.w	r2, ip, #8
 8015cb6:	6102      	strcc	r2, [r0, #16]
 8015cb8:	f108 0201 	add.w	r2, r8, #1
 8015cbc:	6082      	str	r2, [r0, #8]
 8015cbe:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015cc2:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8015cc6:	f8ac 6000 	strh.w	r6, [ip]
 8015cca:	2700      	movs	r7, #0
 8015ccc:	45b6      	cmp	lr, r6
 8015cce:	f8ac 2002 	strh.w	r2, [ip, #2]
 8015cd2:	f8ac 7004 	strh.w	r7, [ip, #4]
 8015cd6:	f8ac 7006 	strh.w	r7, [ip, #6]
 8015cda:	442b      	add	r3, r5
 8015cdc:	d04d      	beq.n	8015d7a <_ZN8touchgfx7Outline10renderLineEiiii+0x1f6>
 8015cde:	9f04      	ldr	r7, [sp, #16]
 8015ce0:	1aff      	subs	r7, r7, r3
 8015ce2:	443d      	add	r5, r7
 8015ce4:	016d      	lsls	r5, r5, #5
 8015ce6:	fb95 f8f1 	sdiv	r8, r5, r1
 8015cea:	fb01 5518 	mls	r5, r1, r8, r5
 8015cee:	2d00      	cmp	r5, #0
 8015cf0:	bfb8      	it	lt
 8015cf2:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8015cf6:	f108 0701 	add.w	r7, r8, #1
 8015cfa:	bfb8      	it	lt
 8015cfc:	186d      	addlt	r5, r5, r1
 8015cfe:	1a64      	subs	r4, r4, r1
 8015d00:	9703      	str	r7, [sp, #12]
 8015d02:	f04f 0a00 	mov.w	sl, #0
 8015d06:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015d0a:	1964      	adds	r4, r4, r5
 8015d0c:	bf58      	it	pl
 8015d0e:	9f03      	ldrpl	r7, [sp, #12]
 8015d10:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8015d14:	bf48      	it	mi
 8015d16:	4647      	movmi	r7, r8
 8015d18:	44bb      	add	fp, r7
 8015d1a:	f8ac b004 	strh.w	fp, [ip, #4]
 8015d1e:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8015d22:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8015d26:	f8ac b006 	strh.w	fp, [ip, #6]
 8015d2a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015d2e:	443b      	add	r3, r7
 8015d30:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8015d34:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8015d38:	bf58      	it	pl
 8015d3a:	1a64      	subpl	r4, r4, r1
 8015d3c:	ea5b 0707 	orrs.w	r7, fp, r7
 8015d40:	444e      	add	r6, r9
 8015d42:	d011      	beq.n	8015d68 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8015d44:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8015d48:	f1bb 0f00 	cmp.w	fp, #0
 8015d4c:	db0c      	blt.n	8015d68 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8015d4e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8015d50:	45bb      	cmp	fp, r7
 8015d52:	da09      	bge.n	8015d68 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8015d54:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8015d58:	45bb      	cmp	fp, r7
 8015d5a:	bf3c      	itt	cc
 8015d5c:	f10c 0708 	addcc.w	r7, ip, #8
 8015d60:	6107      	strcc	r7, [r0, #16]
 8015d62:	f10b 0701 	add.w	r7, fp, #1
 8015d66:	6087      	str	r7, [r0, #8]
 8015d68:	6907      	ldr	r7, [r0, #16]
 8015d6a:	45b6      	cmp	lr, r6
 8015d6c:	803e      	strh	r6, [r7, #0]
 8015d6e:	807a      	strh	r2, [r7, #2]
 8015d70:	f8a7 a004 	strh.w	sl, [r7, #4]
 8015d74:	f8a7 a006 	strh.w	sl, [r7, #6]
 8015d78:	d1c5      	bne.n	8015d06 <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 8015d7a:	9a04      	ldr	r2, [sp, #16]
 8015d7c:	1ad3      	subs	r3, r2, r3
 8015d7e:	6902      	ldr	r2, [r0, #16]
 8015d80:	8891      	ldrh	r1, [r2, #4]
 8015d82:	88d6      	ldrh	r6, [r2, #6]
 8015d84:	4419      	add	r1, r3
 8015d86:	8091      	strh	r1, [r2, #4]
 8015d88:	9902      	ldr	r1, [sp, #8]
 8015d8a:	f101 0c20 	add.w	ip, r1, #32
 8015d8e:	9901      	ldr	r1, [sp, #4]
 8015d90:	ebac 0c01 	sub.w	ip, ip, r1
 8015d94:	fb03 630c 	mla	r3, r3, ip, r6
 8015d98:	80d3      	strh	r3, [r2, #6]
 8015d9a:	e74c      	b.n	8015c36 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8015d9c:	9d05      	ldr	r5, [sp, #20]
 8015d9e:	1aa2      	subs	r2, r4, r2
 8015da0:	eba5 0501 	sub.w	r5, r5, r1
 8015da4:	9508      	str	r5, [sp, #32]
 8015da6:	9202      	str	r2, [sp, #8]
 8015da8:	f140 8128 	bpl.w	8015ffc <_ZN8touchgfx7Outline10renderLineEiiii+0x478>
 8015dac:	9a03      	ldr	r2, [sp, #12]
 8015dae:	2a00      	cmp	r2, #0
 8015db0:	f6ff af41 	blt.w	8015c36 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8015db4:	9a02      	ldr	r2, [sp, #8]
 8015db6:	4252      	negs	r2, r2
 8015db8:	9202      	str	r2, [sp, #8]
 8015dba:	9a06      	ldr	r2, [sp, #24]
 8015dbc:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8015dc0:	f04f 34ff 	mov.w	r4, #4294967295
 8015dc4:	9206      	str	r2, [sp, #24]
 8015dc6:	462a      	mov	r2, r5
 8015dc8:	940b      	str	r4, [sp, #44]	; 0x2c
 8015dca:	435a      	muls	r2, r3
 8015dcc:	2400      	movs	r4, #0
 8015dce:	9d02      	ldr	r5, [sp, #8]
 8015dd0:	9401      	str	r4, [sp, #4]
 8015dd2:	9c02      	ldr	r4, [sp, #8]
 8015dd4:	fb92 f4f4 	sdiv	r4, r2, r4
 8015dd8:	fb05 2214 	mls	r2, r5, r4, r2
 8015ddc:	2a00      	cmp	r2, #0
 8015dde:	9207      	str	r2, [sp, #28]
 8015de0:	bfbc      	itt	lt
 8015de2:	1952      	addlt	r2, r2, r5
 8015de4:	9207      	strlt	r2, [sp, #28]
 8015de6:	9a01      	ldr	r2, [sp, #4]
 8015de8:	6905      	ldr	r5, [r0, #16]
 8015dea:	bfb8      	it	lt
 8015dec:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8015df0:	eb04 0901 	add.w	r9, r4, r1
 8015df4:	429a      	cmp	r2, r3
 8015df6:	ea4f 1669 	mov.w	r6, r9, asr #5
 8015dfa:	f040 8112 	bne.w	8016022 <_ZN8touchgfx7Outline10renderLineEiiii+0x49e>
 8015dfe:	f9b5 3000 	ldrsh.w	r3, [r5]
 8015e02:	429e      	cmp	r6, r3
 8015e04:	d104      	bne.n	8015e10 <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 8015e06:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8015e0a:	9a03      	ldr	r2, [sp, #12]
 8015e0c:	429a      	cmp	r2, r3
 8015e0e:	d01b      	beq.n	8015e48 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8015e10:	88ea      	ldrh	r2, [r5, #6]
 8015e12:	88ab      	ldrh	r3, [r5, #4]
 8015e14:	4313      	orrs	r3, r2
 8015e16:	d010      	beq.n	8015e3a <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8015e18:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015e1c:	2a00      	cmp	r2, #0
 8015e1e:	db0c      	blt.n	8015e3a <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8015e20:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015e22:	429a      	cmp	r2, r3
 8015e24:	da09      	bge.n	8015e3a <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8015e26:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8015e2a:	429a      	cmp	r2, r3
 8015e2c:	bf38      	it	cc
 8015e2e:	3508      	addcc	r5, #8
 8015e30:	f102 0201 	add.w	r2, r2, #1
 8015e34:	bf38      	it	cc
 8015e36:	6105      	strcc	r5, [r0, #16]
 8015e38:	6082      	str	r2, [r0, #8]
 8015e3a:	6903      	ldr	r3, [r0, #16]
 8015e3c:	9a03      	ldr	r2, [sp, #12]
 8015e3e:	805a      	strh	r2, [r3, #2]
 8015e40:	2200      	movs	r2, #0
 8015e42:	801e      	strh	r6, [r3, #0]
 8015e44:	809a      	strh	r2, [r3, #4]
 8015e46:	80da      	strh	r2, [r3, #6]
 8015e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e4a:	9a03      	ldr	r2, [sp, #12]
 8015e4c:	6901      	ldr	r1, [r0, #16]
 8015e4e:	441a      	add	r2, r3
 8015e50:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015e54:	42b3      	cmp	r3, r6
 8015e56:	d103      	bne.n	8015e60 <_ZN8touchgfx7Outline10renderLineEiiii+0x2dc>
 8015e58:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8015e5c:	429a      	cmp	r2, r3
 8015e5e:	d01a      	beq.n	8015e96 <_ZN8touchgfx7Outline10renderLineEiiii+0x312>
 8015e60:	88cc      	ldrh	r4, [r1, #6]
 8015e62:	888b      	ldrh	r3, [r1, #4]
 8015e64:	4323      	orrs	r3, r4
 8015e66:	d010      	beq.n	8015e8a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8015e68:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8015e6c:	2c00      	cmp	r4, #0
 8015e6e:	db0c      	blt.n	8015e8a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8015e70:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015e72:	429c      	cmp	r4, r3
 8015e74:	da09      	bge.n	8015e8a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8015e76:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8015e7a:	429c      	cmp	r4, r3
 8015e7c:	bf38      	it	cc
 8015e7e:	3108      	addcc	r1, #8
 8015e80:	f104 0401 	add.w	r4, r4, #1
 8015e84:	bf38      	it	cc
 8015e86:	6101      	strcc	r1, [r0, #16]
 8015e88:	6084      	str	r4, [r0, #8]
 8015e8a:	6903      	ldr	r3, [r0, #16]
 8015e8c:	2100      	movs	r1, #0
 8015e8e:	801e      	strh	r6, [r3, #0]
 8015e90:	805a      	strh	r2, [r3, #2]
 8015e92:	8099      	strh	r1, [r3, #4]
 8015e94:	80d9      	strh	r1, [r3, #6]
 8015e96:	9b06      	ldr	r3, [sp, #24]
 8015e98:	4293      	cmp	r3, r2
 8015e9a:	f000 8082 	beq.w	8015fa2 <_ZN8touchgfx7Outline10renderLineEiiii+0x41e>
 8015e9e:	9b08      	ldr	r3, [sp, #32]
 8015ea0:	9c02      	ldr	r4, [sp, #8]
 8015ea2:	9902      	ldr	r1, [sp, #8]
 8015ea4:	015b      	lsls	r3, r3, #5
 8015ea6:	fb93 f1f1 	sdiv	r1, r3, r1
 8015eaa:	fb04 3311 	mls	r3, r4, r1, r3
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	9103      	str	r1, [sp, #12]
 8015eb2:	9308      	str	r3, [sp, #32]
 8015eb4:	da04      	bge.n	8015ec0 <_ZN8touchgfx7Outline10renderLineEiiii+0x33c>
 8015eb6:	1e4b      	subs	r3, r1, #1
 8015eb8:	9303      	str	r3, [sp, #12]
 8015eba:	9b08      	ldr	r3, [sp, #32]
 8015ebc:	4423      	add	r3, r4
 8015ebe:	9308      	str	r3, [sp, #32]
 8015ec0:	9b07      	ldr	r3, [sp, #28]
 8015ec2:	9902      	ldr	r1, [sp, #8]
 8015ec4:	1a5b      	subs	r3, r3, r1
 8015ec6:	9307      	str	r3, [sp, #28]
 8015ec8:	9b01      	ldr	r3, [sp, #4]
 8015eca:	f1c3 0320 	rsb	r3, r3, #32
 8015ece:	930e      	str	r3, [sp, #56]	; 0x38
 8015ed0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015ed2:	9b01      	ldr	r3, [sp, #4]
 8015ed4:	1a5b      	subs	r3, r3, r1
 8015ed6:	464f      	mov	r7, r9
 8015ed8:	930a      	str	r3, [sp, #40]	; 0x28
 8015eda:	2600      	movs	r6, #0
 8015edc:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8015ee0:	185b      	adds	r3, r3, r1
 8015ee2:	bf58      	it	pl
 8015ee4:	9902      	ldrpl	r1, [sp, #8]
 8015ee6:	9307      	str	r3, [sp, #28]
 8015ee8:	bf5d      	ittte	pl
 8015eea:	1a5b      	subpl	r3, r3, r1
 8015eec:	9307      	strpl	r3, [sp, #28]
 8015eee:	9b03      	ldrpl	r3, [sp, #12]
 8015ef0:	9903      	ldrmi	r1, [sp, #12]
 8015ef2:	bf58      	it	pl
 8015ef4:	1c59      	addpl	r1, r3, #1
 8015ef6:	4489      	add	r9, r1
 8015ef8:	2a00      	cmp	r2, #0
 8015efa:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8015efe:	db2e      	blt.n	8015f5e <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8015f00:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015f02:	4293      	cmp	r3, r2
 8015f04:	dd2b      	ble.n	8015f5e <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8015f06:	9c01      	ldr	r4, [sp, #4]
 8015f08:	6905      	ldr	r5, [r0, #16]
 8015f0a:	46a0      	mov	r8, r4
 8015f0c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015f0e:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8015f12:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8015f16:	45a0      	cmp	r8, r4
 8015f18:	f040 814f 	bne.w	80161ba <_ZN8touchgfx7Outline10renderLineEiiii+0x636>
 8015f1c:	f9b5 1000 	ldrsh.w	r1, [r5]
 8015f20:	4551      	cmp	r1, sl
 8015f22:	d103      	bne.n	8015f2c <_ZN8touchgfx7Outline10renderLineEiiii+0x3a8>
 8015f24:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8015f28:	4291      	cmp	r1, r2
 8015f2a:	d018      	beq.n	8015f5e <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8015f2c:	ea5c 010e 	orrs.w	r1, ip, lr
 8015f30:	d00f      	beq.n	8015f52 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8015f32:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8015f36:	2900      	cmp	r1, #0
 8015f38:	db0b      	blt.n	8015f52 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8015f3a:	428b      	cmp	r3, r1
 8015f3c:	dd09      	ble.n	8015f52 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8015f3e:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8015f42:	4299      	cmp	r1, r3
 8015f44:	bf38      	it	cc
 8015f46:	3508      	addcc	r5, #8
 8015f48:	f101 0101 	add.w	r1, r1, #1
 8015f4c:	bf38      	it	cc
 8015f4e:	6105      	strcc	r5, [r0, #16]
 8015f50:	6081      	str	r1, [r0, #8]
 8015f52:	6903      	ldr	r3, [r0, #16]
 8015f54:	f8a3 a000 	strh.w	sl, [r3]
 8015f58:	805a      	strh	r2, [r3, #2]
 8015f5a:	809e      	strh	r6, [r3, #4]
 8015f5c:	80de      	strh	r6, [r3, #6]
 8015f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f60:	6901      	ldr	r1, [r0, #16]
 8015f62:	441a      	add	r2, r3
 8015f64:	88cc      	ldrh	r4, [r1, #6]
 8015f66:	888b      	ldrh	r3, [r1, #4]
 8015f68:	4323      	orrs	r3, r4
 8015f6a:	d010      	beq.n	8015f8e <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8015f6c:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8015f70:	2c00      	cmp	r4, #0
 8015f72:	db0c      	blt.n	8015f8e <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8015f74:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015f76:	429c      	cmp	r4, r3
 8015f78:	da09      	bge.n	8015f8e <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8015f7a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8015f7e:	429c      	cmp	r4, r3
 8015f80:	bf38      	it	cc
 8015f82:	3108      	addcc	r1, #8
 8015f84:	f104 0401 	add.w	r4, r4, #1
 8015f88:	bf38      	it	cc
 8015f8a:	6101      	strcc	r1, [r0, #16]
 8015f8c:	6084      	str	r4, [r0, #8]
 8015f8e:	6903      	ldr	r3, [r0, #16]
 8015f90:	f8a3 a000 	strh.w	sl, [r3]
 8015f94:	805a      	strh	r2, [r3, #2]
 8015f96:	809e      	strh	r6, [r3, #4]
 8015f98:	80de      	strh	r6, [r3, #6]
 8015f9a:	9b06      	ldr	r3, [sp, #24]
 8015f9c:	4293      	cmp	r3, r2
 8015f9e:	464f      	mov	r7, r9
 8015fa0:	d19c      	bne.n	8015edc <_ZN8touchgfx7Outline10renderLineEiiii+0x358>
 8015fa2:	9b01      	ldr	r3, [sp, #4]
 8015fa4:	6907      	ldr	r7, [r0, #16]
 8015fa6:	f1c3 0620 	rsb	r6, r3, #32
 8015faa:	9b05      	ldr	r3, [sp, #20]
 8015fac:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8015fb0:	9b04      	ldr	r3, [sp, #16]
 8015fb2:	429e      	cmp	r6, r3
 8015fb4:	f040 81cc 	bne.w	8016350 <_ZN8touchgfx7Outline10renderLineEiiii+0x7cc>
 8015fb8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015fbc:	459e      	cmp	lr, r3
 8015fbe:	d104      	bne.n	8015fca <_ZN8touchgfx7Outline10renderLineEiiii+0x446>
 8015fc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015fc4:	429a      	cmp	r2, r3
 8015fc6:	f43f ae36 	beq.w	8015c36 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8015fca:	88f9      	ldrh	r1, [r7, #6]
 8015fcc:	88bb      	ldrh	r3, [r7, #4]
 8015fce:	430b      	orrs	r3, r1
 8015fd0:	d010      	beq.n	8015ff4 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8015fd2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	db0c      	blt.n	8015ff4 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8015fda:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8015fdc:	428b      	cmp	r3, r1
 8015fde:	da09      	bge.n	8015ff4 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8015fe0:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8015fe4:	428b      	cmp	r3, r1
 8015fe6:	bf38      	it	cc
 8015fe8:	3708      	addcc	r7, #8
 8015fea:	f103 0301 	add.w	r3, r3, #1
 8015fee:	bf38      	it	cc
 8015ff0:	6107      	strcc	r7, [r0, #16]
 8015ff2:	6083      	str	r3, [r0, #8]
 8015ff4:	6903      	ldr	r3, [r0, #16]
 8015ff6:	f8a3 e000 	strh.w	lr, [r3]
 8015ffa:	e5ff      	b.n	8015bfc <_ZN8touchgfx7Outline10renderLineEiiii+0x78>
 8015ffc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8015ffe:	9c03      	ldr	r4, [sp, #12]
 8016000:	42a2      	cmp	r2, r4
 8016002:	f6ff ae18 	blt.w	8015c36 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8016006:	9c06      	ldr	r4, [sp, #24]
 8016008:	42a2      	cmp	r2, r4
 801600a:	bfb8      	it	lt
 801600c:	3201      	addlt	r2, #1
 801600e:	9c08      	ldr	r4, [sp, #32]
 8016010:	bfb8      	it	lt
 8016012:	9206      	strlt	r2, [sp, #24]
 8016014:	f1c3 0220 	rsb	r2, r3, #32
 8016018:	4362      	muls	r2, r4
 801601a:	2401      	movs	r4, #1
 801601c:	940b      	str	r4, [sp, #44]	; 0x2c
 801601e:	2420      	movs	r4, #32
 8016020:	e6d5      	b.n	8015dce <_ZN8touchgfx7Outline10renderLineEiiii+0x24a>
 8016022:	f009 021f 	and.w	r2, r9, #31
 8016026:	ea4f 1861 	mov.w	r8, r1, asr #5
 801602a:	920c      	str	r2, [sp, #48]	; 0x30
 801602c:	9a01      	ldr	r2, [sp, #4]
 801602e:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8016032:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8016036:	45b0      	cmp	r8, r6
 8016038:	f001 011f 	and.w	r1, r1, #31
 801603c:	eba2 0203 	sub.w	r2, r2, r3
 8016040:	d108      	bne.n	8016054 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d0>
 8016042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016044:	4419      	add	r1, r3
 8016046:	4496      	add	lr, r2
 8016048:	fb02 a101 	mla	r1, r2, r1, sl
 801604c:	f8a5 e004 	strh.w	lr, [r5, #4]
 8016050:	80e9      	strh	r1, [r5, #6]
 8016052:	e6f9      	b.n	8015e48 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8016054:	2c00      	cmp	r4, #0
 8016056:	f2c0 80a9 	blt.w	80161ac <_ZN8touchgfx7Outline10renderLineEiiii+0x628>
 801605a:	2701      	movs	r7, #1
 801605c:	f1c1 0c20 	rsb	ip, r1, #32
 8016060:	970a      	str	r7, [sp, #40]	; 0x28
 8016062:	fb02 f20c 	mul.w	r2, r2, ip
 8016066:	2720      	movs	r7, #32
 8016068:	9709      	str	r7, [sp, #36]	; 0x24
 801606a:	fb92 fcf4 	sdiv	ip, r2, r4
 801606e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016070:	fb04 221c 	mls	r2, r4, ip, r2
 8016074:	2a00      	cmp	r2, #0
 8016076:	bfb8      	it	lt
 8016078:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801607c:	4439      	add	r1, r7
 801607e:	fb0c a101 	mla	r1, ip, r1, sl
 8016082:	80e9      	strh	r1, [r5, #6]
 8016084:	44e6      	add	lr, ip
 8016086:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016088:	f8a5 e004 	strh.w	lr, [r5, #4]
 801608c:	eb08 0501 	add.w	r5, r8, r1
 8016090:	6901      	ldr	r1, [r0, #16]
 8016092:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8016096:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 801609a:	bfb8      	it	lt
 801609c:	1912      	addlt	r2, r2, r4
 801609e:	ea58 070e 	orrs.w	r7, r8, lr
 80160a2:	d010      	beq.n	80160c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 80160a4:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 80160a8:	f1be 0f00 	cmp.w	lr, #0
 80160ac:	db0b      	blt.n	80160c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 80160ae:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80160b0:	45be      	cmp	lr, r7
 80160b2:	da08      	bge.n	80160c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 80160b4:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80160b8:	45be      	cmp	lr, r7
 80160ba:	bf3c      	itt	cc
 80160bc:	3108      	addcc	r1, #8
 80160be:	6101      	strcc	r1, [r0, #16]
 80160c0:	f10e 0101 	add.w	r1, lr, #1
 80160c4:	6081      	str	r1, [r0, #8]
 80160c6:	6901      	ldr	r1, [r0, #16]
 80160c8:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 80160cc:	800d      	strh	r5, [r1, #0]
 80160ce:	f04f 0e00 	mov.w	lr, #0
 80160d2:	42ae      	cmp	r6, r5
 80160d4:	f8a1 8002 	strh.w	r8, [r1, #2]
 80160d8:	f8a1 e004 	strh.w	lr, [r1, #4]
 80160dc:	f8a1 e006 	strh.w	lr, [r1, #6]
 80160e0:	4463      	add	r3, ip
 80160e2:	d054      	beq.n	801618e <_ZN8touchgfx7Outline10renderLineEiiii+0x60a>
 80160e4:	9901      	ldr	r1, [sp, #4]
 80160e6:	1ac9      	subs	r1, r1, r3
 80160e8:	4461      	add	r1, ip
 80160ea:	0149      	lsls	r1, r1, #5
 80160ec:	fb91 fef4 	sdiv	lr, r1, r4
 80160f0:	fb04 111e 	mls	r1, r4, lr, r1
 80160f4:	2900      	cmp	r1, #0
 80160f6:	bfb8      	it	lt
 80160f8:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80160fc:	f10e 0701 	add.w	r7, lr, #1
 8016100:	bfb8      	it	lt
 8016102:	1909      	addlt	r1, r1, r4
 8016104:	1b12      	subs	r2, r2, r4
 8016106:	970d      	str	r7, [sp, #52]	; 0x34
 8016108:	f8d0 a010 	ldr.w	sl, [r0, #16]
 801610c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801610e:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8016112:	1852      	adds	r2, r2, r1
 8016114:	bf54      	ite	pl
 8016116:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 801611a:	46f4      	movmi	ip, lr
 801611c:	44e3      	add	fp, ip
 801611e:	f8aa b004 	strh.w	fp, [sl, #4]
 8016122:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8016126:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 801612a:	f8aa b006 	strh.w	fp, [sl, #6]
 801612e:	4463      	add	r3, ip
 8016130:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016134:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8016138:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801613c:	bf58      	it	pl
 801613e:	1b12      	subpl	r2, r2, r4
 8016140:	443d      	add	r5, r7
 8016142:	ea5b 070a 	orrs.w	r7, fp, sl
 8016146:	d014      	beq.n	8016172 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ee>
 8016148:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 801614c:	f1ba 0f00 	cmp.w	sl, #0
 8016150:	db0f      	blt.n	8016172 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ee>
 8016152:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8016154:	45ba      	cmp	sl, r7
 8016156:	da0c      	bge.n	8016172 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ee>
 8016158:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 801615c:	45ba      	cmp	sl, r7
 801615e:	bf38      	it	cc
 8016160:	f10c 0c08 	addcc.w	ip, ip, #8
 8016164:	f10a 0a01 	add.w	sl, sl, #1
 8016168:	bf38      	it	cc
 801616a:	f8c0 c010 	strcc.w	ip, [r0, #16]
 801616e:	f8c0 a008 	str.w	sl, [r0, #8]
 8016172:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016176:	f04f 0700 	mov.w	r7, #0
 801617a:	42ae      	cmp	r6, r5
 801617c:	f8ac 5000 	strh.w	r5, [ip]
 8016180:	f8ac 8002 	strh.w	r8, [ip, #2]
 8016184:	f8ac 7004 	strh.w	r7, [ip, #4]
 8016188:	f8ac 7006 	strh.w	r7, [ip, #6]
 801618c:	d1bc      	bne.n	8016108 <_ZN8touchgfx7Outline10renderLineEiiii+0x584>
 801618e:	6904      	ldr	r4, [r0, #16]
 8016190:	9a01      	ldr	r2, [sp, #4]
 8016192:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016194:	1ad3      	subs	r3, r2, r3
 8016196:	88a2      	ldrh	r2, [r4, #4]
 8016198:	441a      	add	r2, r3
 801619a:	80a2      	strh	r2, [r4, #4]
 801619c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801619e:	3120      	adds	r1, #32
 80161a0:	1a89      	subs	r1, r1, r2
 80161a2:	88e2      	ldrh	r2, [r4, #6]
 80161a4:	fb03 2301 	mla	r3, r3, r1, r2
 80161a8:	80e3      	strh	r3, [r4, #6]
 80161aa:	e64d      	b.n	8015e48 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 80161ac:	f04f 37ff 	mov.w	r7, #4294967295
 80161b0:	970a      	str	r7, [sp, #40]	; 0x28
 80161b2:	434a      	muls	r2, r1
 80161b4:	4264      	negs	r4, r4
 80161b6:	2700      	movs	r7, #0
 80161b8:	e756      	b.n	8016068 <_ZN8touchgfx7Outline10renderLineEiiii+0x4e4>
 80161ba:	ea4f 1867 	mov.w	r8, r7, asr #5
 80161be:	f009 031f 	and.w	r3, r9, #31
 80161c2:	45d0      	cmp	r8, sl
 80161c4:	f007 071f 	and.w	r7, r7, #31
 80161c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80161ca:	fa1f fc8c 	uxth.w	ip, ip
 80161ce:	fa1f fe8e 	uxth.w	lr, lr
 80161d2:	d10a      	bne.n	80161ea <_ZN8touchgfx7Outline10renderLineEiiii+0x666>
 80161d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161d6:	449c      	add	ip, r3
 80161d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80161da:	f8a5 c004 	strh.w	ip, [r5, #4]
 80161de:	441f      	add	r7, r3
 80161e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161e2:	fb03 e707 	mla	r7, r3, r7, lr
 80161e6:	80ef      	strh	r7, [r5, #6]
 80161e8:	e6b9      	b.n	8015f5e <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80161ea:	2900      	cmp	r1, #0
 80161ec:	f2c0 80a8 	blt.w	8016340 <_ZN8touchgfx7Outline10renderLineEiiii+0x7bc>
 80161f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80161f2:	f1c7 0320 	rsb	r3, r7, #32
 80161f6:	4363      	muls	r3, r4
 80161f8:	2401      	movs	r4, #1
 80161fa:	940d      	str	r4, [sp, #52]	; 0x34
 80161fc:	2420      	movs	r4, #32
 80161fe:	940c      	str	r4, [sp, #48]	; 0x30
 8016200:	fb93 f4f1 	sdiv	r4, r3, r1
 8016204:	fb01 3b14 	mls	fp, r1, r4, r3
 8016208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801620a:	f1bb 0f00 	cmp.w	fp, #0
 801620e:	bfb8      	it	lt
 8016210:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8016214:	441f      	add	r7, r3
 8016216:	fb04 e707 	mla	r7, r4, r7, lr
 801621a:	44a4      	add	ip, r4
 801621c:	f8a5 c004 	strh.w	ip, [r5, #4]
 8016220:	80ef      	strh	r7, [r5, #6]
 8016222:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016228:	f8bc e006 	ldrh.w	lr, [ip, #6]
 801622c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8016230:	bfb8      	it	lt
 8016232:	448b      	addlt	fp, r1
 8016234:	eb08 0503 	add.w	r5, r8, r3
 8016238:	ea5e 0307 	orrs.w	r3, lr, r7
 801623c:	d011      	beq.n	8016262 <_ZN8touchgfx7Outline10renderLineEiiii+0x6de>
 801623e:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8016242:	f1be 0f00 	cmp.w	lr, #0
 8016246:	db0c      	blt.n	8016262 <_ZN8touchgfx7Outline10renderLineEiiii+0x6de>
 8016248:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801624a:	45be      	cmp	lr, r7
 801624c:	da09      	bge.n	8016262 <_ZN8touchgfx7Outline10renderLineEiiii+0x6de>
 801624e:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8016252:	45be      	cmp	lr, r7
 8016254:	bf3c      	itt	cc
 8016256:	f10c 0708 	addcc.w	r7, ip, #8
 801625a:	6107      	strcc	r7, [r0, #16]
 801625c:	f10e 0701 	add.w	r7, lr, #1
 8016260:	6087      	str	r7, [r0, #8]
 8016262:	6907      	ldr	r7, [r0, #16]
 8016264:	b213      	sxth	r3, r2
 8016266:	9310      	str	r3, [sp, #64]	; 0x40
 8016268:	807b      	strh	r3, [r7, #2]
 801626a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801626c:	803d      	strh	r5, [r7, #0]
 801626e:	4555      	cmp	r5, sl
 8016270:	80be      	strh	r6, [r7, #4]
 8016272:	80fe      	strh	r6, [r7, #6]
 8016274:	eb04 0c03 	add.w	ip, r4, r3
 8016278:	d051      	beq.n	801631e <_ZN8touchgfx7Outline10renderLineEiiii+0x79a>
 801627a:	9b01      	ldr	r3, [sp, #4]
 801627c:	eba3 070c 	sub.w	r7, r3, ip
 8016280:	443c      	add	r4, r7
 8016282:	0164      	lsls	r4, r4, #5
 8016284:	fb94 f8f1 	sdiv	r8, r4, r1
 8016288:	fb01 4418 	mls	r4, r1, r8, r4
 801628c:	2c00      	cmp	r4, #0
 801628e:	bfb8      	it	lt
 8016290:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8016294:	ebab 0301 	sub.w	r3, fp, r1
 8016298:	f108 0701 	add.w	r7, r8, #1
 801629c:	bfb8      	it	lt
 801629e:	1864      	addlt	r4, r4, r1
 80162a0:	9309      	str	r3, [sp, #36]	; 0x24
 80162a2:	9711      	str	r7, [sp, #68]	; 0x44
 80162a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162a6:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80162aa:	191b      	adds	r3, r3, r4
 80162ac:	bf58      	it	pl
 80162ae:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 80162b0:	f8be b004 	ldrh.w	fp, [lr, #4]
 80162b4:	9309      	str	r3, [sp, #36]	; 0x24
 80162b6:	bf48      	it	mi
 80162b8:	4647      	movmi	r7, r8
 80162ba:	44bb      	add	fp, r7
 80162bc:	f8ae b004 	strh.w	fp, [lr, #4]
 80162c0:	f8be b006 	ldrh.w	fp, [lr, #6]
 80162c4:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80162c8:	f8ae b006 	strh.w	fp, [lr, #6]
 80162cc:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80162d0:	44bc      	add	ip, r7
 80162d2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80162d4:	f8be b006 	ldrh.w	fp, [lr, #6]
 80162d8:	443d      	add	r5, r7
 80162da:	f8be 7004 	ldrh.w	r7, [lr, #4]
 80162de:	bf5c      	itt	pl
 80162e0:	1a5b      	subpl	r3, r3, r1
 80162e2:	9309      	strpl	r3, [sp, #36]	; 0x24
 80162e4:	ea5b 0307 	orrs.w	r3, fp, r7
 80162e8:	d011      	beq.n	801630e <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 80162ea:	f9be b002 	ldrsh.w	fp, [lr, #2]
 80162ee:	f1bb 0f00 	cmp.w	fp, #0
 80162f2:	db0c      	blt.n	801630e <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 80162f4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80162f6:	45bb      	cmp	fp, r7
 80162f8:	da09      	bge.n	801630e <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 80162fa:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80162fe:	45bb      	cmp	fp, r7
 8016300:	bf3c      	itt	cc
 8016302:	f10e 0708 	addcc.w	r7, lr, #8
 8016306:	6107      	strcc	r7, [r0, #16]
 8016308:	f10b 0701 	add.w	r7, fp, #1
 801630c:	6087      	str	r7, [r0, #8]
 801630e:	6907      	ldr	r7, [r0, #16]
 8016310:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016312:	803d      	strh	r5, [r7, #0]
 8016314:	4555      	cmp	r5, sl
 8016316:	807b      	strh	r3, [r7, #2]
 8016318:	80be      	strh	r6, [r7, #4]
 801631a:	80fe      	strh	r6, [r7, #6]
 801631c:	d1c2      	bne.n	80162a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x720>
 801631e:	9b01      	ldr	r3, [sp, #4]
 8016320:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8016322:	eba3 0c0c 	sub.w	ip, r3, ip
 8016326:	6903      	ldr	r3, [r0, #16]
 8016328:	8899      	ldrh	r1, [r3, #4]
 801632a:	4461      	add	r1, ip
 801632c:	8099      	strh	r1, [r3, #4]
 801632e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016330:	3720      	adds	r7, #32
 8016332:	1a7f      	subs	r7, r7, r1
 8016334:	88d9      	ldrh	r1, [r3, #6]
 8016336:	fb0c 1c07 	mla	ip, ip, r7, r1
 801633a:	f8a3 c006 	strh.w	ip, [r3, #6]
 801633e:	e60e      	b.n	8015f5e <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8016340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016342:	f04f 34ff 	mov.w	r4, #4294967295
 8016346:	940d      	str	r4, [sp, #52]	; 0x34
 8016348:	437b      	muls	r3, r7
 801634a:	4249      	negs	r1, r1
 801634c:	2400      	movs	r4, #0
 801634e:	e756      	b.n	80161fe <_ZN8touchgfx7Outline10renderLineEiiii+0x67a>
 8016350:	9905      	ldr	r1, [sp, #20]
 8016352:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8016356:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 801635a:	f001 011f 	and.w	r1, r1, #31
 801635e:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8016362:	9102      	str	r1, [sp, #8]
 8016364:	9904      	ldr	r1, [sp, #16]
 8016366:	45f3      	cmp	fp, lr
 8016368:	f009 0c1f 	and.w	ip, r9, #31
 801636c:	eba1 0406 	sub.w	r4, r1, r6
 8016370:	d108      	bne.n	8016384 <_ZN8touchgfx7Outline10renderLineEiiii+0x800>
 8016372:	9b02      	ldr	r3, [sp, #8]
 8016374:	449c      	add	ip, r3
 8016376:	44a0      	add	r8, r4
 8016378:	fb04 a40c 	mla	r4, r4, ip, sl
 801637c:	f8a7 8004 	strh.w	r8, [r7, #4]
 8016380:	80fc      	strh	r4, [r7, #6]
 8016382:	e458      	b.n	8015c36 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8016384:	9905      	ldr	r1, [sp, #20]
 8016386:	ebb1 0109 	subs.w	r1, r1, r9
 801638a:	bf5b      	ittet	pl
 801638c:	f1cc 0520 	rsbpl	r5, ip, #32
 8016390:	436c      	mulpl	r4, r5
 8016392:	2500      	movmi	r5, #0
 8016394:	2520      	movpl	r5, #32
 8016396:	bf44      	itt	mi
 8016398:	fb04 f40c 	mulmi.w	r4, r4, ip
 801639c:	4249      	negmi	r1, r1
 801639e:	9501      	str	r5, [sp, #4]
 80163a0:	9b01      	ldr	r3, [sp, #4]
 80163a2:	fb94 f5f1 	sdiv	r5, r4, r1
 80163a6:	fb01 4415 	mls	r4, r1, r5, r4
 80163aa:	bf54      	ite	pl
 80163ac:	f04f 0901 	movpl.w	r9, #1
 80163b0:	f04f 39ff 	movmi.w	r9, #4294967295
 80163b4:	2c00      	cmp	r4, #0
 80163b6:	bfb8      	it	lt
 80163b8:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80163bc:	449c      	add	ip, r3
 80163be:	44a8      	add	r8, r5
 80163c0:	fb05 ac0c 	mla	ip, r5, ip, sl
 80163c4:	f8a7 8004 	strh.w	r8, [r7, #4]
 80163c8:	f8a7 c006 	strh.w	ip, [r7, #6]
 80163cc:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80163d0:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80163d4:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80163d8:	bfb8      	it	lt
 80163da:	1864      	addlt	r4, r4, r1
 80163dc:	ea58 0707 	orrs.w	r7, r8, r7
 80163e0:	eb0b 0309 	add.w	r3, fp, r9
 80163e4:	d011      	beq.n	801640a <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 80163e6:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80163ea:	f1b8 0f00 	cmp.w	r8, #0
 80163ee:	db0c      	blt.n	801640a <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 80163f0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80163f2:	45b8      	cmp	r8, r7
 80163f4:	da09      	bge.n	801640a <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 80163f6:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 80163fa:	45b8      	cmp	r8, r7
 80163fc:	bf3c      	itt	cc
 80163fe:	f10c 0708 	addcc.w	r7, ip, #8
 8016402:	6107      	strcc	r7, [r0, #16]
 8016404:	f108 0701 	add.w	r7, r8, #1
 8016408:	6087      	str	r7, [r0, #8]
 801640a:	6907      	ldr	r7, [r0, #16]
 801640c:	f04f 0c00 	mov.w	ip, #0
 8016410:	b212      	sxth	r2, r2
 8016412:	459e      	cmp	lr, r3
 8016414:	803b      	strh	r3, [r7, #0]
 8016416:	807a      	strh	r2, [r7, #2]
 8016418:	f8a7 c004 	strh.w	ip, [r7, #4]
 801641c:	f8a7 c006 	strh.w	ip, [r7, #6]
 8016420:	442e      	add	r6, r5
 8016422:	d04d      	beq.n	80164c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x93c>
 8016424:	9f04      	ldr	r7, [sp, #16]
 8016426:	1bbf      	subs	r7, r7, r6
 8016428:	443d      	add	r5, r7
 801642a:	016d      	lsls	r5, r5, #5
 801642c:	fb95 f8f1 	sdiv	r8, r5, r1
 8016430:	fb01 5518 	mls	r5, r1, r8, r5
 8016434:	4565      	cmp	r5, ip
 8016436:	bfb8      	it	lt
 8016438:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801643c:	f108 0701 	add.w	r7, r8, #1
 8016440:	bfb8      	it	lt
 8016442:	186d      	addlt	r5, r5, r1
 8016444:	1a64      	subs	r4, r4, r1
 8016446:	9703      	str	r7, [sp, #12]
 8016448:	f04f 0a00 	mov.w	sl, #0
 801644c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016450:	1964      	adds	r4, r4, r5
 8016452:	bf58      	it	pl
 8016454:	9f03      	ldrpl	r7, [sp, #12]
 8016456:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801645a:	bf48      	it	mi
 801645c:	4647      	movmi	r7, r8
 801645e:	44bb      	add	fp, r7
 8016460:	f8ac b004 	strh.w	fp, [ip, #4]
 8016464:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8016468:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801646c:	f8ac b006 	strh.w	fp, [ip, #6]
 8016470:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016474:	443e      	add	r6, r7
 8016476:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801647a:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801647e:	bf58      	it	pl
 8016480:	1a64      	subpl	r4, r4, r1
 8016482:	ea5b 0707 	orrs.w	r7, fp, r7
 8016486:	444b      	add	r3, r9
 8016488:	d011      	beq.n	80164ae <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 801648a:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801648e:	f1bb 0f00 	cmp.w	fp, #0
 8016492:	db0c      	blt.n	80164ae <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8016494:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8016496:	45bb      	cmp	fp, r7
 8016498:	da09      	bge.n	80164ae <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 801649a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801649e:	45bb      	cmp	fp, r7
 80164a0:	bf3c      	itt	cc
 80164a2:	f10c 0708 	addcc.w	r7, ip, #8
 80164a6:	6107      	strcc	r7, [r0, #16]
 80164a8:	f10b 0701 	add.w	r7, fp, #1
 80164ac:	6087      	str	r7, [r0, #8]
 80164ae:	6907      	ldr	r7, [r0, #16]
 80164b0:	459e      	cmp	lr, r3
 80164b2:	803b      	strh	r3, [r7, #0]
 80164b4:	807a      	strh	r2, [r7, #2]
 80164b6:	f8a7 a004 	strh.w	sl, [r7, #4]
 80164ba:	f8a7 a006 	strh.w	sl, [r7, #6]
 80164be:	d1c5      	bne.n	801644c <_ZN8touchgfx7Outline10renderLineEiiii+0x8c8>
 80164c0:	9b04      	ldr	r3, [sp, #16]
 80164c2:	1b9e      	subs	r6, r3, r6
 80164c4:	6903      	ldr	r3, [r0, #16]
 80164c6:	889a      	ldrh	r2, [r3, #4]
 80164c8:	4432      	add	r2, r6
 80164ca:	809a      	strh	r2, [r3, #4]
 80164cc:	9a02      	ldr	r2, [sp, #8]
 80164ce:	f102 0c20 	add.w	ip, r2, #32
 80164d2:	9a01      	ldr	r2, [sp, #4]
 80164d4:	ebac 0c02 	sub.w	ip, ip, r2
 80164d8:	88da      	ldrh	r2, [r3, #6]
 80164da:	fb06 260c 	mla	r6, r6, ip, r2
 80164de:	80de      	strh	r6, [r3, #6]
 80164e0:	f7ff bba9 	b.w	8015c36 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>

080164e4 <_ZN8touchgfx7Outline6lineToEii>:
 80164e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80164e6:	079b      	lsls	r3, r3, #30
 80164e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80164ea:	460e      	mov	r6, r1
 80164ec:	4615      	mov	r5, r2
 80164ee:	d511      	bpl.n	8016514 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80164f0:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 80164f4:	ea86 0701 	eor.w	r7, r6, r1
 80164f8:	ea85 0302 	eor.w	r3, r5, r2
 80164fc:	433b      	orrs	r3, r7
 80164fe:	d009      	beq.n	8016514 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8016500:	4633      	mov	r3, r6
 8016502:	9500      	str	r5, [sp, #0]
 8016504:	f7ff fb3e 	bl	8015b84 <_ZN8touchgfx7Outline10renderLineEiiii>
 8016508:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801650a:	e9c0 6505 	strd	r6, r5, [r0, #20]
 801650e:	f043 0301 	orr.w	r3, r3, #1
 8016512:	6243      	str	r3, [r0, #36]	; 0x24
 8016514:	b003      	add	sp, #12
 8016516:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016518 <_ZN8touchgfx7Outline6moveToEii>:
 8016518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801651a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801651c:	4615      	mov	r5, r2
 801651e:	079a      	lsls	r2, r3, #30
 8016520:	4604      	mov	r4, r0
 8016522:	460e      	mov	r6, r1
 8016524:	d401      	bmi.n	801652a <_ZN8touchgfx7Outline6moveToEii+0x12>
 8016526:	f7ff faf9 	bl	8015b1c <_ZN8touchgfx7Outline5resetEv>
 801652a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801652c:	07db      	lsls	r3, r3, #31
 801652e:	d504      	bpl.n	801653a <_ZN8touchgfx7Outline6moveToEii+0x22>
 8016530:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8016534:	4620      	mov	r0, r4
 8016536:	f7ff ffd5 	bl	80164e4 <_ZN8touchgfx7Outline6lineToEii>
 801653a:	6923      	ldr	r3, [r4, #16]
 801653c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016540:	1170      	asrs	r0, r6, #5
 8016542:	4290      	cmp	r0, r2
 8016544:	ea4f 1165 	mov.w	r1, r5, asr #5
 8016548:	d103      	bne.n	8016552 <_ZN8touchgfx7Outline6moveToEii+0x3a>
 801654a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801654e:	4291      	cmp	r1, r2
 8016550:	d01a      	beq.n	8016588 <_ZN8touchgfx7Outline6moveToEii+0x70>
 8016552:	88df      	ldrh	r7, [r3, #6]
 8016554:	889a      	ldrh	r2, [r3, #4]
 8016556:	433a      	orrs	r2, r7
 8016558:	d010      	beq.n	801657c <_ZN8touchgfx7Outline6moveToEii+0x64>
 801655a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801655e:	2a00      	cmp	r2, #0
 8016560:	db0c      	blt.n	801657c <_ZN8touchgfx7Outline6moveToEii+0x64>
 8016562:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8016564:	42ba      	cmp	r2, r7
 8016566:	da09      	bge.n	801657c <_ZN8touchgfx7Outline6moveToEii+0x64>
 8016568:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801656c:	42ba      	cmp	r2, r7
 801656e:	bf38      	it	cc
 8016570:	3308      	addcc	r3, #8
 8016572:	f102 0201 	add.w	r2, r2, #1
 8016576:	bf38      	it	cc
 8016578:	6123      	strcc	r3, [r4, #16]
 801657a:	60a2      	str	r2, [r4, #8]
 801657c:	6923      	ldr	r3, [r4, #16]
 801657e:	2200      	movs	r2, #0
 8016580:	8018      	strh	r0, [r3, #0]
 8016582:	8059      	strh	r1, [r3, #2]
 8016584:	809a      	strh	r2, [r3, #4]
 8016586:	80da      	strh	r2, [r3, #6]
 8016588:	6166      	str	r6, [r4, #20]
 801658a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801658e:	6225      	str	r5, [r4, #32]
 8016590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016592 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8016592:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016596:	b0d0      	sub	sp, #320	; 0x140
 8016598:	466c      	mov	r4, sp
 801659a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801659e:	4627      	mov	r7, r4
 80165a0:	1a0d      	subs	r5, r1, r0
 80165a2:	2d48      	cmp	r5, #72	; 0x48
 80165a4:	f100 0308 	add.w	r3, r0, #8
 80165a8:	f340 80d5 	ble.w	8016756 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80165ac:	112d      	asrs	r5, r5, #4
 80165ae:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 80165b2:	f9b0 9000 	ldrsh.w	r9, [r0]
 80165b6:	6816      	ldr	r6, [r2, #0]
 80165b8:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 80165bc:	6006      	str	r6, [r0, #0]
 80165be:	6856      	ldr	r6, [r2, #4]
 80165c0:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80165c4:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80165c8:	6046      	str	r6, [r0, #4]
 80165ca:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80165ce:	f8a2 8002 	strh.w	r8, [r2, #2]
 80165d2:	f8a2 e004 	strh.w	lr, [r2, #4]
 80165d6:	f8a2 c006 	strh.w	ip, [r2, #6]
 80165da:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80165de:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80165e2:	4565      	cmp	r5, ip
 80165e4:	f1a1 0208 	sub.w	r2, r1, #8
 80165e8:	db06      	blt.n	80165f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 80165ea:	d119      	bne.n	8016620 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80165ec:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80165f0:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80165f4:	42ae      	cmp	r6, r5
 80165f6:	dd13      	ble.n	8016620 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80165f8:	460e      	mov	r6, r1
 80165fa:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 80165fe:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8016602:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8016606:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801660a:	601d      	str	r5, [r3, #0]
 801660c:	6875      	ldr	r5, [r6, #4]
 801660e:	605d      	str	r5, [r3, #4]
 8016610:	f821 9c08 	strh.w	r9, [r1, #-8]
 8016614:	f821 cc06 	strh.w	ip, [r1, #-6]
 8016618:	f821 8c04 	strh.w	r8, [r1, #-4]
 801661c:	f821 ec02 	strh.w	lr, [r1, #-2]
 8016620:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8016624:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8016628:	42ae      	cmp	r6, r5
 801662a:	db06      	blt.n	801663a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 801662c:	d116      	bne.n	801665c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801662e:	f9b0 c000 	ldrsh.w	ip, [r0]
 8016632:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8016636:	45ac      	cmp	ip, r5
 8016638:	da10      	bge.n	801665c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801663a:	681d      	ldr	r5, [r3, #0]
 801663c:	f9b0 8000 	ldrsh.w	r8, [r0]
 8016640:	6005      	str	r5, [r0, #0]
 8016642:	685d      	ldr	r5, [r3, #4]
 8016644:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8016648:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801664c:	f8a0 8008 	strh.w	r8, [r0, #8]
 8016650:	6045      	str	r5, [r0, #4]
 8016652:	8146      	strh	r6, [r0, #10]
 8016654:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8016658:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801665c:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8016660:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8016664:	4565      	cmp	r5, ip
 8016666:	db06      	blt.n	8016676 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8016668:	d119      	bne.n	801669e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801666a:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 801666e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8016672:	42ae      	cmp	r6, r5
 8016674:	da13      	bge.n	801669e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016676:	460e      	mov	r6, r1
 8016678:	f9b0 9000 	ldrsh.w	r9, [r0]
 801667c:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8016680:	6005      	str	r5, [r0, #0]
 8016682:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8016686:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801668a:	6875      	ldr	r5, [r6, #4]
 801668c:	6045      	str	r5, [r0, #4]
 801668e:	f821 9c08 	strh.w	r9, [r1, #-8]
 8016692:	f821 cc06 	strh.w	ip, [r1, #-6]
 8016696:	f821 8c04 	strh.w	r8, [r1, #-4]
 801669a:	f821 ec02 	strh.w	lr, [r1, #-2]
 801669e:	3308      	adds	r3, #8
 80166a0:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80166a4:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 80166a8:	45e6      	cmp	lr, ip
 80166aa:	dbf8      	blt.n	801669e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80166ac:	d105      	bne.n	80166ba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80166ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80166b2:	f9b0 5000 	ldrsh.w	r5, [r0]
 80166b6:	42ae      	cmp	r6, r5
 80166b8:	dbf1      	blt.n	801669e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80166ba:	4615      	mov	r5, r2
 80166bc:	3a08      	subs	r2, #8
 80166be:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 80166c2:	45b4      	cmp	ip, r6
 80166c4:	dbf9      	blt.n	80166ba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80166c6:	d105      	bne.n	80166d4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 80166c8:	f9b0 8000 	ldrsh.w	r8, [r0]
 80166cc:	f9b2 6000 	ldrsh.w	r6, [r2]
 80166d0:	45b0      	cmp	r8, r6
 80166d2:	dbf2      	blt.n	80166ba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80166d4:	4293      	cmp	r3, r2
 80166d6:	f1a5 0608 	sub.w	r6, r5, #8
 80166da:	d816      	bhi.n	801670a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 80166dc:	f8d6 c000 	ldr.w	ip, [r6]
 80166e0:	f9b3 a000 	ldrsh.w	sl, [r3]
 80166e4:	f8c3 c000 	str.w	ip, [r3]
 80166e8:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 80166ec:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 80166f0:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80166f4:	f8c3 c004 	str.w	ip, [r3, #4]
 80166f8:	f825 ac08 	strh.w	sl, [r5, #-8]
 80166fc:	f825 ec06 	strh.w	lr, [r5, #-6]
 8016700:	f825 9c04 	strh.w	r9, [r5, #-4]
 8016704:	f825 8c02 	strh.w	r8, [r5, #-2]
 8016708:	e7c9      	b.n	801669e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801670a:	f8d6 e000 	ldr.w	lr, [r6]
 801670e:	f9b0 a000 	ldrsh.w	sl, [r0]
 8016712:	f8c0 e000 	str.w	lr, [r0]
 8016716:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 801671a:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 801671e:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8016722:	f8c0 e004 	str.w	lr, [r0, #4]
 8016726:	f825 ac08 	strh.w	sl, [r5, #-8]
 801672a:	f825 cc06 	strh.w	ip, [r5, #-6]
 801672e:	f825 9c04 	strh.w	r9, [r5, #-4]
 8016732:	f825 8c02 	strh.w	r8, [r5, #-2]
 8016736:	1acd      	subs	r5, r1, r3
 8016738:	1a16      	subs	r6, r2, r0
 801673a:	10ed      	asrs	r5, r5, #3
 801673c:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8016740:	bfb5      	itete	lt
 8016742:	e9c4 0200 	strdlt	r0, r2, [r4]
 8016746:	e9c4 3100 	strdge	r3, r1, [r4]
 801674a:	460a      	movlt	r2, r1
 801674c:	4603      	movge	r3, r0
 801674e:	3408      	adds	r4, #8
 8016750:	4618      	mov	r0, r3
 8016752:	4611      	mov	r1, r2
 8016754:	e724      	b.n	80165a0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8016756:	4299      	cmp	r1, r3
 8016758:	d928      	bls.n	80167ac <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x21a>
 801675a:	f1a3 0210 	sub.w	r2, r3, #16
 801675e:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8016762:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8016766:	45ac      	cmp	ip, r5
 8016768:	db06      	blt.n	8016778 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 801676a:	d11d      	bne.n	80167a8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 801676c:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8016770:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8016774:	42ae      	cmp	r6, r5
 8016776:	da17      	bge.n	80167a8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 8016778:	4615      	mov	r5, r2
 801677a:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 801677e:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8016782:	6116      	str	r6, [r2, #16]
 8016784:	686e      	ldr	r6, [r5, #4]
 8016786:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 801678a:	f9b2 e016 	ldrsh.w	lr, [r2, #22]
 801678e:	f8a2 9008 	strh.w	r9, [r2, #8]
 8016792:	42a8      	cmp	r0, r5
 8016794:	6156      	str	r6, [r2, #20]
 8016796:	f8a2 c00a 	strh.w	ip, [r2, #10]
 801679a:	f8a2 800c 	strh.w	r8, [r2, #12]
 801679e:	f8a2 e00e 	strh.w	lr, [r2, #14]
 80167a2:	f1a2 0208 	sub.w	r2, r2, #8
 80167a6:	d1da      	bne.n	801675e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 80167a8:	3308      	adds	r3, #8
 80167aa:	e7d4      	b.n	8016756 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80167ac:	42bc      	cmp	r4, r7
 80167ae:	d903      	bls.n	80167b8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x226>
 80167b0:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80167b4:	3c08      	subs	r4, #8
 80167b6:	e6f3      	b.n	80165a0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80167b8:	b050      	add	sp, #320	; 0x140
 80167ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080167be <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 80167be:	b510      	push	{r4, lr}
 80167c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80167c2:	07da      	lsls	r2, r3, #31
 80167c4:	4604      	mov	r4, r0
 80167c6:	d507      	bpl.n	80167d8 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 80167c8:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80167cc:	f7ff fe8a 	bl	80164e4 <_ZN8touchgfx7Outline6lineToEii>
 80167d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80167d2:	f023 0301 	bic.w	r3, r3, #1
 80167d6:	6243      	str	r3, [r0, #36]	; 0x24
 80167d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80167da:	079b      	lsls	r3, r3, #30
 80167dc:	d521      	bpl.n	8016822 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 80167de:	6923      	ldr	r3, [r4, #16]
 80167e0:	88d9      	ldrh	r1, [r3, #6]
 80167e2:	889a      	ldrh	r2, [r3, #4]
 80167e4:	430a      	orrs	r2, r1
 80167e6:	d010      	beq.n	801680a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80167e8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80167ec:	2a00      	cmp	r2, #0
 80167ee:	db0c      	blt.n	801680a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80167f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80167f2:	428a      	cmp	r2, r1
 80167f4:	da09      	bge.n	801680a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80167f6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80167fa:	4291      	cmp	r1, r2
 80167fc:	bf88      	it	hi
 80167fe:	3308      	addhi	r3, #8
 8016800:	f102 0201 	add.w	r2, r2, #1
 8016804:	bf88      	it	hi
 8016806:	6123      	strhi	r3, [r4, #16]
 8016808:	60a2      	str	r2, [r4, #8]
 801680a:	68a1      	ldr	r1, [r4, #8]
 801680c:	b129      	cbz	r1, 801681a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801680e:	6863      	ldr	r3, [r4, #4]
 8016810:	4299      	cmp	r1, r3
 8016812:	d802      	bhi.n	801681a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8016814:	68e0      	ldr	r0, [r4, #12]
 8016816:	f7ff febc 	bl	8016592 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801681a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801681c:	f023 0302 	bic.w	r3, r3, #2
 8016820:	6263      	str	r3, [r4, #36]	; 0x24
 8016822:	68e0      	ldr	r0, [r4, #12]
 8016824:	bd10      	pop	{r4, pc}
	...

08016828 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8016828:	4b02      	ldr	r3, [pc, #8]	; (8016834 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801682a:	6018      	str	r0, [r3, #0]
 801682c:	4b02      	ldr	r3, [pc, #8]	; (8016838 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801682e:	6019      	str	r1, [r3, #0]
 8016830:	4770      	bx	lr
 8016832:	bf00      	nop
 8016834:	2000c444 	.word	0x2000c444
 8016838:	2000c448 	.word	0x2000c448

0801683c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801683c:	4b01      	ldr	r3, [pc, #4]	; (8016844 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801683e:	6818      	ldr	r0, [r3, #0]
 8016840:	4770      	bx	lr
 8016842:	bf00      	nop
 8016844:	2000c444 	.word	0x2000c444

08016848 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8016848:	4b01      	ldr	r3, [pc, #4]	; (8016850 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801684a:	6818      	ldr	r0, [r3, #0]
 801684c:	4770      	bx	lr
 801684e:	bf00      	nop
 8016850:	2000c448 	.word	0x2000c448

08016854 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8016854:	b510      	push	{r4, lr}
 8016856:	6803      	ldr	r3, [r0, #0]
 8016858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801685a:	460c      	mov	r4, r1
 801685c:	4798      	blx	r3
 801685e:	1b03      	subs	r3, r0, r4
 8016860:	4258      	negs	r0, r3
 8016862:	4158      	adcs	r0, r3
 8016864:	bd10      	pop	{r4, pc}
	...

08016868 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8016868:	4b01      	ldr	r3, [pc, #4]	; (8016870 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801686a:	6019      	str	r1, [r3, #0]
 801686c:	4770      	bx	lr
 801686e:	bf00      	nop
 8016870:	2000c44c 	.word	0x2000c44c

08016874 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016878:	4696      	mov	lr, r2
 801687a:	4605      	mov	r5, r0
 801687c:	4614      	mov	r4, r2
 801687e:	460e      	mov	r6, r1
 8016880:	461f      	mov	r7, r3
 8016882:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016886:	b097      	sub	sp, #92	; 0x5c
 8016888:	f10d 0c1c 	add.w	ip, sp, #28
 801688c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016890:	f8de 3000 	ldr.w	r3, [lr]
 8016894:	f8cc 3000 	str.w	r3, [ip]
 8016898:	f104 0e14 	add.w	lr, r4, #20
 801689c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80168a0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80168a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80168a8:	f8de 3000 	ldr.w	r3, [lr]
 80168ac:	f8cc 3000 	str.w	r3, [ip]
 80168b0:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80168b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80168b8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80168bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80168c0:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 80168c4:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 80168c8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80168cc:	f8de 3000 	ldr.w	r3, [lr]
 80168d0:	f8cc 3000 	str.w	r3, [ip]
 80168d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80168d6:	682b      	ldr	r3, [r5, #0]
 80168d8:	9201      	str	r2, [sp, #4]
 80168da:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80168de:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80168e0:	9200      	str	r2, [sp, #0]
 80168e2:	f8cd 8008 	str.w	r8, [sp, #8]
 80168e6:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 80168ea:	aa07      	add	r2, sp, #28
 80168ec:	463b      	mov	r3, r7
 80168ee:	4631      	mov	r1, r6
 80168f0:	4628      	mov	r0, r5
 80168f2:	47d8      	blx	fp
 80168f4:	46a6      	mov	lr, r4
 80168f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80168fa:	f10d 0c1c 	add.w	ip, sp, #28
 80168fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016902:	f8de 3000 	ldr.w	r3, [lr]
 8016906:	f8cc 3000 	str.w	r3, [ip]
 801690a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801690e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016912:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016916:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801691a:	343c      	adds	r4, #60	; 0x3c
 801691c:	f8de 3000 	ldr.w	r3, [lr]
 8016920:	f8cc 3000 	str.w	r3, [ip]
 8016924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016926:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801692a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801692e:	6823      	ldr	r3, [r4, #0]
 8016930:	f8cc 3000 	str.w	r3, [ip]
 8016934:	682b      	ldr	r3, [r5, #0]
 8016936:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801693a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801693c:	9201      	str	r2, [sp, #4]
 801693e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016940:	9200      	str	r2, [sp, #0]
 8016942:	f8cd 8008 	str.w	r8, [sp, #8]
 8016946:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8016948:	aa07      	add	r2, sp, #28
 801694a:	463b      	mov	r3, r7
 801694c:	4631      	mov	r1, r6
 801694e:	4628      	mov	r0, r5
 8016950:	47a0      	blx	r4
 8016952:	b017      	add	sp, #92	; 0x5c
 8016954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016958 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8016958:	2000      	movs	r0, #0
 801695a:	4770      	bx	lr

0801695c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801695c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016960:	b08d      	sub	sp, #52	; 0x34
 8016962:	4688      	mov	r8, r1
 8016964:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016966:	f8d3 c000 	ldr.w	ip, [r3]
 801696a:	680f      	ldr	r7, [r1, #0]
 801696c:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8016970:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8016974:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8016978:	edd3 6a07 	vldr	s13, [r3, #28]
 801697c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801697e:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8016982:	f9b1 9000 	ldrsh.w	r9, [r1]
 8016986:	f9ba 1000 	ldrsh.w	r1, [sl]
 801698a:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801698e:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8016992:	eba7 070c 	sub.w	r7, r7, ip
 8016996:	42bc      	cmp	r4, r7
 8016998:	bfa8      	it	ge
 801699a:	463c      	movge	r4, r7
 801699c:	ee07 4a90 	vmov	s15, r4
 80169a0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80169a4:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80169a8:	ee25 4a04 	vmul.f32	s8, s10, s8
 80169ac:	ee65 4a24 	vmul.f32	s9, s10, s9
 80169b0:	ee25 5a27 	vmul.f32	s10, s10, s15
 80169b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80169b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80169bc:	eb09 0e0c 	add.w	lr, r9, ip
 80169c0:	4571      	cmp	r1, lr
 80169c2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80169c6:	ee32 1a05 	vadd.f32	s2, s4, s10
 80169ca:	ee36 0a84 	vadd.f32	s0, s13, s8
 80169ce:	ee61 1a87 	vmul.f32	s3, s3, s14
 80169d2:	ee22 2a07 	vmul.f32	s4, s4, s14
 80169d6:	f340 808d 	ble.w	8016af4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 80169da:	eba1 060e 	sub.w	r6, r1, lr
 80169de:	fb96 f5f4 	sdiv	r5, r6, r4
 80169e2:	ee07 5a10 	vmov	s14, r5
 80169e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80169ea:	2d00      	cmp	r5, #0
 80169ec:	fb04 6615 	mls	r6, r4, r5, r6
 80169f0:	eea7 0a04 	vfma.f32	s0, s14, s8
 80169f4:	eee7 0a24 	vfma.f32	s1, s14, s9
 80169f8:	eea7 1a05 	vfma.f32	s2, s14, s10
 80169fc:	dd13      	ble.n	8016a26 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 80169fe:	ee70 6a44 	vsub.f32	s13, s0, s8
 8016a02:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8016a06:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a0e:	bf18      	it	ne
 8016a10:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8016a14:	ee31 2a45 	vsub.f32	s4, s2, s10
 8016a18:	bf08      	it	eq
 8016a1a:	eeb0 7a67 	vmoveq.f32	s14, s15
 8016a1e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016a22:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016a26:	fb05 f204 	mul.w	r2, r5, r4
 8016a2a:	1abf      	subs	r7, r7, r2
 8016a2c:	4494      	add	ip, r2
 8016a2e:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8016a32:	4411      	add	r1, r2
 8016a34:	eb09 020c 	add.w	r2, r9, ip
 8016a38:	443a      	add	r2, r7
 8016a3a:	b209      	sxth	r1, r1
 8016a3c:	428a      	cmp	r2, r1
 8016a3e:	bfc4      	itt	gt
 8016a40:	eba1 0209 	subgt.w	r2, r1, r9
 8016a44:	eba2 070c 	subgt.w	r7, r2, ip
 8016a48:	2f00      	cmp	r7, #0
 8016a4a:	dd50      	ble.n	8016aee <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 8016a4c:	fb97 f1f4 	sdiv	r1, r7, r4
 8016a50:	fb04 7211 	mls	r2, r4, r1, r7
 8016a54:	b90a      	cbnz	r2, 8016a5a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 8016a56:	3901      	subs	r1, #1
 8016a58:	4622      	mov	r2, r4
 8016a5a:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8016a5e:	6840      	ldr	r0, [r0, #4]
 8016a60:	900b      	str	r0, [sp, #44]	; 0x2c
 8016a62:	f8d0 a000 	ldr.w	sl, [r0]
 8016a66:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016a68:	9008      	str	r0, [sp, #32]
 8016a6a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8016a6e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8016a70:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8016a74:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8016a78:	695b      	ldr	r3, [r3, #20]
 8016a7a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016a7c:	445b      	add	r3, fp
 8016a7e:	eef0 6a42 	vmov.f32	s13, s4
 8016a82:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8016a86:	ee21 3a23 	vmul.f32	s6, s2, s7
 8016a8a:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8016a8e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016a92:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016a96:	9307      	str	r3, [sp, #28]
 8016a98:	ee17 7a90 	vmov	r7, s15
 8016a9c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8016aa0:	eeb0 7a61 	vmov.f32	s14, s3
 8016aa4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016aa8:	ee16 3a90 	vmov	r3, s13
 8016aac:	fb97 f7f4 	sdiv	r7, r7, r4
 8016ab0:	ee17 ca90 	vmov	ip, s15
 8016ab4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8016ab8:	fb9c fcf4 	sdiv	ip, ip, r4
 8016abc:	fb0c 3306 	mla	r3, ip, r6, r3
 8016ac0:	9302      	str	r3, [sp, #8]
 8016ac2:	ee17 3a10 	vmov	r3, s14
 8016ac6:	44b6      	add	lr, r6
 8016ac8:	fb04 e505 	mla	r5, r4, r5, lr
 8016acc:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8016ad0:	fb07 3706 	mla	r7, r7, r6, r3
 8016ad4:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8016ad8:	e9cd 4700 	strd	r4, r7, [sp]
 8016adc:	2900      	cmp	r1, #0
 8016ade:	bfcc      	ite	gt
 8016ae0:	46a1      	movgt	r9, r4
 8016ae2:	4691      	movle	r9, r2
 8016ae4:	eba9 0306 	sub.w	r3, r9, r6
 8016ae8:	f8da 4008 	ldr.w	r4, [sl, #8]
 8016aec:	47a0      	blx	r4
 8016aee:	b00d      	add	sp, #52	; 0x34
 8016af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016af4:	2500      	movs	r5, #0
 8016af6:	462e      	mov	r6, r5
 8016af8:	e799      	b.n	8016a2e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

08016afc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b00:	b0db      	sub	sp, #364	; 0x16c
 8016b02:	461d      	mov	r5, r3
 8016b04:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8016b08:	930a      	str	r3, [sp, #40]	; 0x28
 8016b0a:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8016b0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016b10:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8016b14:	9310      	str	r3, [sp, #64]	; 0x40
 8016b16:	6803      	ldr	r3, [r0, #0]
 8016b18:	910f      	str	r1, [sp, #60]	; 0x3c
 8016b1a:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8016b1c:	9009      	str	r0, [sp, #36]	; 0x24
 8016b1e:	4614      	mov	r4, r2
 8016b20:	4629      	mov	r1, r5
 8016b22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016b26:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8016b2a:	47b8      	blx	r7
 8016b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b2e:	6058      	str	r0, [r3, #4]
 8016b30:	2800      	cmp	r0, #0
 8016b32:	f000 83a1 	beq.w	8017278 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016b36:	682b      	ldr	r3, [r5, #0]
 8016b38:	9314      	str	r3, [sp, #80]	; 0x50
 8016b3a:	686b      	ldr	r3, [r5, #4]
 8016b3c:	9315      	str	r3, [sp, #84]	; 0x54
 8016b3e:	4bc4      	ldr	r3, [pc, #784]	; (8016e50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8016b40:	ed94 7a02 	vldr	s14, [r4, #8]
 8016b44:	7819      	ldrb	r1, [r3, #0]
 8016b46:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8016b4a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8016b4e:	2900      	cmp	r1, #0
 8016b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016b54:	bf16      	itet	ne
 8016b56:	4619      	movne	r1, r3
 8016b58:	4611      	moveq	r1, r2
 8016b5a:	4613      	movne	r3, r2
 8016b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b60:	9116      	str	r1, [sp, #88]	; 0x58
 8016b62:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8016b66:	f240 8387 	bls.w	8017278 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016b6a:	ed94 7a07 	vldr	s14, [r4, #28]
 8016b6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b76:	f240 837f 	bls.w	8017278 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016b7a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8016b7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b86:	f240 8377 	bls.w	8017278 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016b8a:	6822      	ldr	r2, [r4, #0]
 8016b8c:	4bb1      	ldr	r3, [pc, #708]	; (8016e54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8016b8e:	429a      	cmp	r2, r3
 8016b90:	f2c0 8372 	blt.w	8017278 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016b94:	49b0      	ldr	r1, [pc, #704]	; (8016e58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8016b96:	6963      	ldr	r3, [r4, #20]
 8016b98:	428a      	cmp	r2, r1
 8016b9a:	f300 836d 	bgt.w	8017278 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016b9e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016ba2:	48ae      	ldr	r0, [pc, #696]	; (8016e5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8016ba4:	33ff      	adds	r3, #255	; 0xff
 8016ba6:	4283      	cmp	r3, r0
 8016ba8:	f200 8366 	bhi.w	8017278 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016bac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016bae:	4dac      	ldr	r5, [pc, #688]	; (8016e60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8016bb0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016bb4:	33ff      	adds	r3, #255	; 0xff
 8016bb6:	42ab      	cmp	r3, r5
 8016bb8:	f200 835e 	bhi.w	8017278 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016bbc:	6862      	ldr	r2, [r4, #4]
 8016bbe:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8016bc2:	33ff      	adds	r3, #255	; 0xff
 8016bc4:	4283      	cmp	r3, r0
 8016bc6:	f200 8357 	bhi.w	8017278 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016bca:	69a1      	ldr	r1, [r4, #24]
 8016bcc:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8016bd0:	33ff      	adds	r3, #255	; 0xff
 8016bd2:	4283      	cmp	r3, r0
 8016bd4:	f200 8350 	bhi.w	8017278 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016bd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016bda:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8016bde:	30ff      	adds	r0, #255	; 0xff
 8016be0:	42a8      	cmp	r0, r5
 8016be2:	f200 8349 	bhi.w	8017278 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016be6:	428a      	cmp	r2, r1
 8016be8:	f280 8110 	bge.w	8016e0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8016bec:	429a      	cmp	r2, r3
 8016bee:	f300 8119 	bgt.w	8016e24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8016bf2:	4299      	cmp	r1, r3
 8016bf4:	f280 811d 	bge.w	8016e32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8016bf8:	2502      	movs	r5, #2
 8016bfa:	2701      	movs	r7, #1
 8016bfc:	46a9      	mov	r9, r5
 8016bfe:	46b8      	mov	r8, r7
 8016c00:	f04f 0a00 	mov.w	sl, #0
 8016c04:	4621      	mov	r1, r4
 8016c06:	a849      	add	r0, sp, #292	; 0x124
 8016c08:	f003 fd68 	bl	801a6dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8016c0c:	4622      	mov	r2, r4
 8016c0e:	4653      	mov	r3, sl
 8016c10:	a949      	add	r1, sp, #292	; 0x124
 8016c12:	f8cd 9000 	str.w	r9, [sp]
 8016c16:	a819      	add	r0, sp, #100	; 0x64
 8016c18:	f003 fe90 	bl	801a93c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016c1c:	4622      	mov	r2, r4
 8016c1e:	4653      	mov	r3, sl
 8016c20:	a949      	add	r1, sp, #292	; 0x124
 8016c22:	f8cd 8000 	str.w	r8, [sp]
 8016c26:	a829      	add	r0, sp, #164	; 0xa4
 8016c28:	f003 fe88 	bl	801a93c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016c2c:	4643      	mov	r3, r8
 8016c2e:	4622      	mov	r2, r4
 8016c30:	a949      	add	r1, sp, #292	; 0x124
 8016c32:	f8cd 9000 	str.w	r9, [sp]
 8016c36:	a839      	add	r0, sp, #228	; 0xe4
 8016c38:	f003 fe80 	bl	801a93c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016c3c:	42af      	cmp	r7, r5
 8016c3e:	bfb5      	itete	lt
 8016c40:	2300      	movlt	r3, #0
 8016c42:	2301      	movge	r3, #1
 8016c44:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016c46:	930e      	strge	r3, [sp, #56]	; 0x38
 8016c48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016c4e:	af12      	add	r7, sp, #72	; 0x48
 8016c50:	bfb9      	ittee	lt
 8016c52:	ad29      	addlt	r5, sp, #164	; 0xa4
 8016c54:	ac19      	addlt	r4, sp, #100	; 0x64
 8016c56:	ad19      	addge	r5, sp, #100	; 0x64
 8016c58:	ac29      	addge	r4, sp, #164	; 0xa4
 8016c5a:	e887 0003 	stmia.w	r7, {r0, r1}
 8016c5e:	b928      	cbnz	r0, 8016c6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8016c60:	4b80      	ldr	r3, [pc, #512]	; (8016e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8016c62:	6818      	ldr	r0, [r3, #0]
 8016c64:	6803      	ldr	r3, [r0, #0]
 8016c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c68:	4798      	blx	r3
 8016c6a:	6038      	str	r0, [r7, #0]
 8016c6c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016c6e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8016c72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016c76:	930c      	str	r3, [sp, #48]	; 0x30
 8016c78:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016c7a:	6963      	ldr	r3, [r4, #20]
 8016c7c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8016c7e:	440b      	add	r3, r1
 8016c80:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016c84:	4408      	add	r0, r1
 8016c86:	b200      	sxth	r0, r0
 8016c88:	4283      	cmp	r3, r0
 8016c8a:	900d      	str	r0, [sp, #52]	; 0x34
 8016c8c:	f280 80dd 	bge.w	8016e4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8016c90:	428b      	cmp	r3, r1
 8016c92:	da08      	bge.n	8016ca6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016c94:	2a00      	cmp	r2, #0
 8016c96:	dd06      	ble.n	8016ca6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016c98:	1acb      	subs	r3, r1, r3
 8016c9a:	429a      	cmp	r2, r3
 8016c9c:	f2c0 80e4 	blt.w	8016e68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	f300 80e2 	bgt.w	8016e6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8016ca6:	6967      	ldr	r7, [r4, #20]
 8016ca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016caa:	443b      	add	r3, r7
 8016cac:	461f      	mov	r7, r3
 8016cae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016cb0:	1bdf      	subs	r7, r3, r7
 8016cb2:	4297      	cmp	r7, r2
 8016cb4:	bfa8      	it	ge
 8016cb6:	4617      	movge	r7, r2
 8016cb8:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8016cbc:	2f00      	cmp	r7, #0
 8016cbe:	f340 8166 	ble.w	8016f8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8016cc2:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016cc4:	6829      	ldr	r1, [r5, #0]
 8016cc6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016cca:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016cce:	6820      	ldr	r0, [r4, #0]
 8016cd0:	4411      	add	r1, r2
 8016cd2:	4299      	cmp	r1, r3
 8016cd4:	dd1a      	ble.n	8016d0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016cd6:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016cda:	440b      	add	r3, r1
 8016cdc:	4402      	add	r2, r0
 8016cde:	b21b      	sxth	r3, r3
 8016ce0:	429a      	cmp	r2, r3
 8016ce2:	dc13      	bgt.n	8016d0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ce6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	9206      	str	r2, [sp, #24]
 8016cec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016cee:	9205      	str	r2, [sp, #20]
 8016cf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016cf2:	9500      	str	r5, [sp, #0]
 8016cf4:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016cf8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016cfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016cfc:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016d00:	a912      	add	r1, sp, #72	; 0x48
 8016d02:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8016d06:	aa49      	add	r2, sp, #292	; 0x124
 8016d08:	4623      	mov	r3, r4
 8016d0a:	47c8      	blx	r9
 8016d0c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016d10:	441a      	add	r2, r3
 8016d12:	6963      	ldr	r3, [r4, #20]
 8016d14:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8016d18:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016d1c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016d20:	68a1      	ldr	r1, [r4, #8]
 8016d22:	ed94 6a08 	vldr	s12, [r4, #32]
 8016d26:	6022      	str	r2, [r4, #0]
 8016d28:	3301      	adds	r3, #1
 8016d2a:	6163      	str	r3, [r4, #20]
 8016d2c:	69a3      	ldr	r3, [r4, #24]
 8016d2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016d32:	3b01      	subs	r3, #1
 8016d34:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8016d38:	61a3      	str	r3, [r4, #24]
 8016d3a:	6923      	ldr	r3, [r4, #16]
 8016d3c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016d40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016d44:	edd4 6a07 	vldr	s13, [r4, #28]
 8016d48:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016d4c:	440b      	add	r3, r1
 8016d4e:	68e1      	ldr	r1, [r4, #12]
 8016d50:	6123      	str	r3, [r4, #16]
 8016d52:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016d56:	428b      	cmp	r3, r1
 8016d58:	edc4 6a07 	vstr	s13, [r4, #28]
 8016d5c:	db15      	blt.n	8016d8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8016d5e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8016d62:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016d66:	3201      	adds	r2, #1
 8016d68:	edc4 6a07 	vstr	s13, [r4, #28]
 8016d6c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016d70:	6022      	str	r2, [r4, #0]
 8016d72:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016d76:	1a5b      	subs	r3, r3, r1
 8016d78:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016d7c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016d80:	6123      	str	r3, [r4, #16]
 8016d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016d86:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016d8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016d8e:	441a      	add	r2, r3
 8016d90:	696b      	ldr	r3, [r5, #20]
 8016d92:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8016d96:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8016d9a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8016d9e:	68a9      	ldr	r1, [r5, #8]
 8016da0:	ed95 6a08 	vldr	s12, [r5, #32]
 8016da4:	602a      	str	r2, [r5, #0]
 8016da6:	3301      	adds	r3, #1
 8016da8:	616b      	str	r3, [r5, #20]
 8016daa:	69ab      	ldr	r3, [r5, #24]
 8016dac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016db0:	3b01      	subs	r3, #1
 8016db2:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8016db6:	61ab      	str	r3, [r5, #24]
 8016db8:	692b      	ldr	r3, [r5, #16]
 8016dba:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016dc2:	edd5 6a07 	vldr	s13, [r5, #28]
 8016dc6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016dca:	440b      	add	r3, r1
 8016dcc:	68e9      	ldr	r1, [r5, #12]
 8016dce:	612b      	str	r3, [r5, #16]
 8016dd0:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016dd4:	428b      	cmp	r3, r1
 8016dd6:	edc5 6a07 	vstr	s13, [r5, #28]
 8016dda:	db15      	blt.n	8016e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8016ddc:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016de0:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016de4:	3201      	adds	r2, #1
 8016de6:	edc5 6a07 	vstr	s13, [r5, #28]
 8016dea:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016dee:	602a      	str	r2, [r5, #0]
 8016df0:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016df4:	1a5b      	subs	r3, r3, r1
 8016df6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016dfa:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016dfe:	612b      	str	r3, [r5, #16]
 8016e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e04:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016e08:	3f01      	subs	r7, #1
 8016e0a:	e757      	b.n	8016cbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8016e0c:	4299      	cmp	r1, r3
 8016e0e:	dc13      	bgt.n	8016e38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8016e10:	429a      	cmp	r2, r3
 8016e12:	da14      	bge.n	8016e3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8016e14:	2502      	movs	r5, #2
 8016e16:	2703      	movs	r7, #3
 8016e18:	46a9      	mov	r9, r5
 8016e1a:	f04f 0800 	mov.w	r8, #0
 8016e1e:	f04f 0a01 	mov.w	sl, #1
 8016e22:	e6ef      	b.n	8016c04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016e24:	2501      	movs	r5, #1
 8016e26:	2700      	movs	r7, #0
 8016e28:	46a9      	mov	r9, r5
 8016e2a:	46b8      	mov	r8, r7
 8016e2c:	f04f 0a02 	mov.w	sl, #2
 8016e30:	e6e8      	b.n	8016c04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016e32:	2501      	movs	r5, #1
 8016e34:	2702      	movs	r7, #2
 8016e36:	e6e1      	b.n	8016bfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8016e38:	2500      	movs	r5, #0
 8016e3a:	2701      	movs	r7, #1
 8016e3c:	e7f4      	b.n	8016e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8016e3e:	2702      	movs	r7, #2
 8016e40:	2503      	movs	r5, #3
 8016e42:	f04f 0900 	mov.w	r9, #0
 8016e46:	46b8      	mov	r8, r7
 8016e48:	e7e9      	b.n	8016e1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8016e4a:	4613      	mov	r3, r2
 8016e4c:	e728      	b.n	8016ca0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8016e4e:	bf00      	nop
 8016e50:	2000c434 	.word	0x2000c434
 8016e54:	fffd8f01 	.word	0xfffd8f01
 8016e58:	00027100 	.word	0x00027100
 8016e5c:	0004e1ff 	.word	0x0004e1ff
 8016e60:	0004e1fe 	.word	0x0004e1fe
 8016e64:	2000c43c 	.word	0x2000c43c
 8016e68:	4613      	mov	r3, r2
 8016e6a:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016e6c:	9111      	str	r1, [sp, #68]	; 0x44
 8016e6e:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8016e72:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8016e76:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8016e78:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8016e7c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8016e80:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8016e84:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8016e88:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8016e8c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8016e90:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8016e94:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8016e98:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8016e9c:	469e      	mov	lr, r3
 8016e9e:	469c      	mov	ip, r3
 8016ea0:	f04f 0900 	mov.w	r9, #0
 8016ea4:	f1bc 0f00 	cmp.w	ip, #0
 8016ea8:	d147      	bne.n	8016f3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8016eaa:	eb03 0c07 	add.w	ip, r3, r7
 8016eae:	1ad7      	subs	r7, r2, r3
 8016eb0:	f1b9 0f00 	cmp.w	r9, #0
 8016eb4:	d009      	beq.n	8016eca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8016eb6:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8016eba:	9029      	str	r0, [sp, #164]	; 0xa4
 8016ebc:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8016ec0:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8016ec4:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8016ec8:	912d      	str	r1, [sp, #180]	; 0xb4
 8016eca:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016ecc:	9111      	str	r1, [sp, #68]	; 0x44
 8016ece:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8016ed2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8016ed6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8016eda:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8016ede:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8016ee2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8016ee6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8016eea:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8016eee:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8016ef2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8016ef6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8016efa:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8016efe:	f04f 0800 	mov.w	r8, #0
 8016f02:	f1be 0f00 	cmp.w	lr, #0
 8016f06:	d031      	beq.n	8016f6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8016f08:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016f0a:	4431      	add	r1, r6
 8016f0c:	4549      	cmp	r1, r9
 8016f0e:	4450      	add	r0, sl
 8016f10:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016f14:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016f18:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016f1c:	db08      	blt.n	8016f30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8016f1e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016f22:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016f26:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016f2a:	3001      	adds	r0, #1
 8016f2c:	eba1 0109 	sub.w	r1, r1, r9
 8016f30:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016f34:	f04f 0801 	mov.w	r8, #1
 8016f38:	e7e3      	b.n	8016f02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8016f3a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016f3c:	4431      	add	r1, r6
 8016f3e:	4541      	cmp	r1, r8
 8016f40:	4450      	add	r0, sl
 8016f42:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016f46:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016f4a:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016f4e:	db08      	blt.n	8016f62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8016f50:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016f54:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016f58:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016f5c:	3001      	adds	r0, #1
 8016f5e:	eba1 0108 	sub.w	r1, r1, r8
 8016f62:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016f66:	f04f 0901 	mov.w	r9, #1
 8016f6a:	e79b      	b.n	8016ea4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8016f6c:	449c      	add	ip, r3
 8016f6e:	1aff      	subs	r7, r7, r3
 8016f70:	f1b8 0f00 	cmp.w	r8, #0
 8016f74:	d009      	beq.n	8016f8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8016f76:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8016f7a:	9019      	str	r0, [sp, #100]	; 0x64
 8016f7c:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8016f80:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8016f84:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8016f88:	911d      	str	r1, [sp, #116]	; 0x74
 8016f8a:	1ad2      	subs	r2, r2, r3
 8016f8c:	e68b      	b.n	8016ca6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016f8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f90:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	f000 80d1 	beq.w	801713a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8016f98:	ad19      	add	r5, sp, #100	; 0x64
 8016f9a:	ac39      	add	r4, sp, #228	; 0xe4
 8016f9c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016f9e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8016fa2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016fa6:	930c      	str	r3, [sp, #48]	; 0x30
 8016fa8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016faa:	6963      	ldr	r3, [r4, #20]
 8016fac:	440b      	add	r3, r1
 8016fae:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016fb2:	4408      	add	r0, r1
 8016fb4:	b200      	sxth	r0, r0
 8016fb6:	4283      	cmp	r3, r0
 8016fb8:	900d      	str	r0, [sp, #52]	; 0x34
 8016fba:	f280 80c1 	bge.w	8017140 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8016fbe:	428b      	cmp	r3, r1
 8016fc0:	da08      	bge.n	8016fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016fc2:	2a00      	cmp	r2, #0
 8016fc4:	dd06      	ble.n	8016fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016fc6:	1acb      	subs	r3, r1, r3
 8016fc8:	429a      	cmp	r2, r3
 8016fca:	f2c0 80bb 	blt.w	8017144 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	f300 80b9 	bgt.w	8017146 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8016fd4:	6967      	ldr	r7, [r4, #20]
 8016fd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016fd8:	443b      	add	r3, r7
 8016fda:	461f      	mov	r7, r3
 8016fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016fde:	1bdf      	subs	r7, r3, r7
 8016fe0:	4297      	cmp	r7, r2
 8016fe2:	bfa8      	it	ge
 8016fe4:	4617      	movge	r7, r2
 8016fe6:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8016fea:	2f00      	cmp	r7, #0
 8016fec:	f340 813c 	ble.w	8017268 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8016ff0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016ff2:	6829      	ldr	r1, [r5, #0]
 8016ff4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016ff8:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016ffc:	6820      	ldr	r0, [r4, #0]
 8016ffe:	4411      	add	r1, r2
 8017000:	4299      	cmp	r1, r3
 8017002:	dd1a      	ble.n	801703a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8017004:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017008:	440b      	add	r3, r1
 801700a:	4402      	add	r2, r0
 801700c:	b21b      	sxth	r3, r3
 801700e:	429a      	cmp	r2, r3
 8017010:	dc13      	bgt.n	801703a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8017012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017014:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	9206      	str	r2, [sp, #24]
 801701a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801701c:	9205      	str	r2, [sp, #20]
 801701e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017020:	9500      	str	r5, [sp, #0]
 8017022:	e9cd b203 	strd	fp, r2, [sp, #12]
 8017026:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8017028:	9809      	ldr	r0, [sp, #36]	; 0x24
 801702a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801702e:	a912      	add	r1, sp, #72	; 0x48
 8017030:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8017034:	aa49      	add	r2, sp, #292	; 0x124
 8017036:	4623      	mov	r3, r4
 8017038:	47c8      	blx	r9
 801703a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801703e:	441a      	add	r2, r3
 8017040:	6963      	ldr	r3, [r4, #20]
 8017042:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8017046:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801704a:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801704e:	68a1      	ldr	r1, [r4, #8]
 8017050:	ed94 6a08 	vldr	s12, [r4, #32]
 8017054:	6022      	str	r2, [r4, #0]
 8017056:	3301      	adds	r3, #1
 8017058:	6163      	str	r3, [r4, #20]
 801705a:	69a3      	ldr	r3, [r4, #24]
 801705c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017060:	3b01      	subs	r3, #1
 8017062:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8017066:	61a3      	str	r3, [r4, #24]
 8017068:	6923      	ldr	r3, [r4, #16]
 801706a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801706e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017072:	edd4 6a07 	vldr	s13, [r4, #28]
 8017076:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801707a:	440b      	add	r3, r1
 801707c:	68e1      	ldr	r1, [r4, #12]
 801707e:	6123      	str	r3, [r4, #16]
 8017080:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017084:	428b      	cmp	r3, r1
 8017086:	edc4 6a07 	vstr	s13, [r4, #28]
 801708a:	db15      	blt.n	80170b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801708c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8017090:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017094:	3201      	adds	r2, #1
 8017096:	edc4 6a07 	vstr	s13, [r4, #28]
 801709a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801709e:	6022      	str	r2, [r4, #0]
 80170a0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80170a4:	1a5b      	subs	r3, r3, r1
 80170a6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80170aa:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80170ae:	6123      	str	r3, [r4, #16]
 80170b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80170b4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80170b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80170bc:	441a      	add	r2, r3
 80170be:	696b      	ldr	r3, [r5, #20]
 80170c0:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80170c4:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80170c8:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80170cc:	68a9      	ldr	r1, [r5, #8]
 80170ce:	ed95 6a08 	vldr	s12, [r5, #32]
 80170d2:	602a      	str	r2, [r5, #0]
 80170d4:	3301      	adds	r3, #1
 80170d6:	616b      	str	r3, [r5, #20]
 80170d8:	69ab      	ldr	r3, [r5, #24]
 80170da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80170de:	3b01      	subs	r3, #1
 80170e0:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80170e4:	61ab      	str	r3, [r5, #24]
 80170e6:	692b      	ldr	r3, [r5, #16]
 80170e8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80170ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80170f0:	edd5 6a07 	vldr	s13, [r5, #28]
 80170f4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80170f8:	440b      	add	r3, r1
 80170fa:	68e9      	ldr	r1, [r5, #12]
 80170fc:	612b      	str	r3, [r5, #16]
 80170fe:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017102:	428b      	cmp	r3, r1
 8017104:	edc5 6a07 	vstr	s13, [r5, #28]
 8017108:	db15      	blt.n	8017136 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801710a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801710e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017112:	3201      	adds	r2, #1
 8017114:	edc5 6a07 	vstr	s13, [r5, #28]
 8017118:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801711c:	602a      	str	r2, [r5, #0]
 801711e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017122:	1a5b      	subs	r3, r3, r1
 8017124:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017128:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801712c:	612b      	str	r3, [r5, #16]
 801712e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017132:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017136:	3f01      	subs	r7, #1
 8017138:	e757      	b.n	8016fea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801713a:	ad39      	add	r5, sp, #228	; 0xe4
 801713c:	ac19      	add	r4, sp, #100	; 0x64
 801713e:	e72d      	b.n	8016f9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8017140:	4613      	mov	r3, r2
 8017142:	e744      	b.n	8016fce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8017144:	4613      	mov	r3, r2
 8017146:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801714a:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801714c:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8017150:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8017154:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8017158:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801715c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8017160:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8017164:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8017168:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801716a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801716e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8017172:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8017176:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801717a:	960e      	str	r6, [sp, #56]	; 0x38
 801717c:	469e      	mov	lr, r3
 801717e:	461f      	mov	r7, r3
 8017180:	f04f 0900 	mov.w	r9, #0
 8017184:	2f00      	cmp	r7, #0
 8017186:	d146      	bne.n	8017216 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8017188:	449c      	add	ip, r3
 801718a:	1ad7      	subs	r7, r2, r3
 801718c:	f1b9 0f00 	cmp.w	r9, #0
 8017190:	d009      	beq.n	80171a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8017192:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8017196:	9039      	str	r0, [sp, #228]	; 0xe4
 8017198:	913d      	str	r1, [sp, #244]	; 0xf4
 801719a:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801719e:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 80171a2:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80171a6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80171a8:	910e      	str	r1, [sp, #56]	; 0x38
 80171aa:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80171ae:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80171b2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80171b6:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80171ba:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80171be:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80171c2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80171c6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80171ca:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80171ce:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80171d2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80171d6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80171da:	f04f 0800 	mov.w	r8, #0
 80171de:	f1be 0f00 	cmp.w	lr, #0
 80171e2:	d030      	beq.n	8017246 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80171e4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80171e6:	4431      	add	r1, r6
 80171e8:	4549      	cmp	r1, r9
 80171ea:	4450      	add	r0, sl
 80171ec:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80171f0:	ee37 7a04 	vadd.f32	s14, s14, s8
 80171f4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80171f8:	db08      	blt.n	801720c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80171fa:	ee77 7a85 	vadd.f32	s15, s15, s10
 80171fe:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017202:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017206:	3001      	adds	r0, #1
 8017208:	eba1 0109 	sub.w	r1, r1, r9
 801720c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017210:	f04f 0801 	mov.w	r8, #1
 8017214:	e7e3      	b.n	80171de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8017216:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017218:	4431      	add	r1, r6
 801721a:	4541      	cmp	r1, r8
 801721c:	4450      	add	r0, sl
 801721e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8017222:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017226:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801722a:	db08      	blt.n	801723e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801722c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017230:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017234:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017238:	3001      	adds	r0, #1
 801723a:	eba1 0108 	sub.w	r1, r1, r8
 801723e:	3f01      	subs	r7, #1
 8017240:	f04f 0901 	mov.w	r9, #1
 8017244:	e79e      	b.n	8017184 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8017246:	449c      	add	ip, r3
 8017248:	1aff      	subs	r7, r7, r3
 801724a:	f1b8 0f00 	cmp.w	r8, #0
 801724e:	d009      	beq.n	8017264 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8017250:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8017254:	9019      	str	r0, [sp, #100]	; 0x64
 8017256:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801725a:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801725e:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8017262:	911d      	str	r1, [sp, #116]	; 0x74
 8017264:	1ad2      	subs	r2, r2, r3
 8017266:	e6b5      	b.n	8016fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017268:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	b923      	cbnz	r3, 8017278 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801726e:	4b04      	ldr	r3, [pc, #16]	; (8017280 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8017270:	6818      	ldr	r0, [r3, #0]
 8017272:	6803      	ldr	r3, [r0, #0]
 8017274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017276:	4798      	blx	r3
 8017278:	b05b      	add	sp, #364	; 0x16c
 801727a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801727e:	bf00      	nop
 8017280:	2000c43c 	.word	0x2000c43c

08017284 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8017284:	b570      	push	{r4, r5, r6, lr}
 8017286:	4604      	mov	r4, r0
 8017288:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801728c:	9804      	ldr	r0, [sp, #16]
 801728e:	6061      	str	r1, [r4, #4]
 8017290:	2500      	movs	r5, #0
 8017292:	8025      	strh	r5, [r4, #0]
 8017294:	7223      	strb	r3, [r4, #8]
 8017296:	7266      	strb	r6, [r4, #9]
 8017298:	60e0      	str	r0, [r4, #12]
 801729a:	8222      	strh	r2, [r4, #16]
 801729c:	8265      	strh	r5, [r4, #18]
 801729e:	82a5      	strh	r5, [r4, #20]
 80172a0:	82e5      	strh	r5, [r4, #22]
 80172a2:	8325      	strh	r5, [r4, #24]
 80172a4:	8365      	strh	r5, [r4, #26]
 80172a6:	83a5      	strh	r5, [r4, #28]
 80172a8:	77a5      	strb	r5, [r4, #30]
 80172aa:	b32e      	cbz	r6, 80172f8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 80172ac:	6803      	ldr	r3, [r0, #0]
 80172ae:	695b      	ldr	r3, [r3, #20]
 80172b0:	4798      	blx	r3
 80172b2:	4606      	mov	r6, r0
 80172b4:	b300      	cbz	r0, 80172f8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 80172b6:	68e0      	ldr	r0, [r4, #12]
 80172b8:	6803      	ldr	r3, [r0, #0]
 80172ba:	4631      	mov	r1, r6
 80172bc:	68db      	ldr	r3, [r3, #12]
 80172be:	4798      	blx	r3
 80172c0:	4605      	mov	r5, r0
 80172c2:	b1c8      	cbz	r0, 80172f8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 80172c4:	7b43      	ldrb	r3, [r0, #13]
 80172c6:	7a82      	ldrb	r2, [r0, #10]
 80172c8:	005b      	lsls	r3, r3, #1
 80172ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80172ce:	4313      	orrs	r3, r2
 80172d0:	83a3      	strh	r3, [r4, #28]
 80172d2:	7a63      	ldrb	r3, [r4, #9]
 80172d4:	2b04      	cmp	r3, #4
 80172d6:	d10f      	bne.n	80172f8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 80172d8:	68e0      	ldr	r0, [r4, #12]
 80172da:	6803      	ldr	r3, [r0, #0]
 80172dc:	462a      	mov	r2, r5
 80172de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80172e0:	4631      	mov	r1, r6
 80172e2:	4798      	blx	r3
 80172e4:	7b6b      	ldrb	r3, [r5, #13]
 80172e6:	005b      	lsls	r3, r3, #1
 80172e8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80172ec:	7aab      	ldrb	r3, [r5, #10]
 80172ee:	4313      	orrs	r3, r2
 80172f0:	4418      	add	r0, r3
 80172f2:	8ba3      	ldrh	r3, [r4, #28]
 80172f4:	4418      	add	r0, r3
 80172f6:	83a0      	strh	r0, [r4, #28]
 80172f8:	4620      	mov	r0, r4
 80172fa:	bd70      	pop	{r4, r5, r6, pc}

080172fc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80172fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017300:	2400      	movs	r4, #0
 8017302:	b085      	sub	sp, #20
 8017304:	4681      	mov	r9, r0
 8017306:	4688      	mov	r8, r1
 8017308:	4692      	mov	sl, r2
 801730a:	469b      	mov	fp, r3
 801730c:	4627      	mov	r7, r4
 801730e:	4625      	mov	r5, r4
 8017310:	4626      	mov	r6, r4
 8017312:	4554      	cmp	r4, sl
 8017314:	da2a      	bge.n	801736c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017316:	2300      	movs	r3, #0
 8017318:	9303      	str	r3, [sp, #12]
 801731a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801731e:	429d      	cmp	r5, r3
 8017320:	d004      	beq.n	801732c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8017322:	f242 030b 	movw	r3, #8203	; 0x200b
 8017326:	429d      	cmp	r5, r3
 8017328:	bf18      	it	ne
 801732a:	462f      	movne	r7, r5
 801732c:	ab03      	add	r3, sp, #12
 801732e:	4642      	mov	r2, r8
 8017330:	4659      	mov	r1, fp
 8017332:	4648      	mov	r0, r9
 8017334:	f002 ffe8 	bl	801a308 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017338:	4605      	mov	r5, r0
 801733a:	b1b8      	cbz	r0, 801736c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801733c:	280a      	cmp	r0, #10
 801733e:	d015      	beq.n	801736c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017340:	9a03      	ldr	r2, [sp, #12]
 8017342:	b18a      	cbz	r2, 8017368 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8017344:	7b50      	ldrb	r0, [r2, #13]
 8017346:	7a93      	ldrb	r3, [r2, #10]
 8017348:	8895      	ldrh	r5, [r2, #4]
 801734a:	0040      	lsls	r0, r0, #1
 801734c:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017350:	4303      	orrs	r3, r0
 8017352:	9301      	str	r3, [sp, #4]
 8017354:	f8d8 3000 	ldr.w	r3, [r8]
 8017358:	4639      	mov	r1, r7
 801735a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801735c:	4640      	mov	r0, r8
 801735e:	4798      	blx	r3
 8017360:	9b01      	ldr	r3, [sp, #4]
 8017362:	4418      	add	r0, r3
 8017364:	4406      	add	r6, r0
 8017366:	b2b6      	uxth	r6, r6
 8017368:	3401      	adds	r4, #1
 801736a:	e7d2      	b.n	8017312 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801736c:	4630      	mov	r0, r6
 801736e:	b005      	add	sp, #20
 8017370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017374 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8017374:	2a02      	cmp	r2, #2
 8017376:	b530      	push	{r4, r5, lr}
 8017378:	d011      	beq.n	801739e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801737a:	2a03      	cmp	r2, #3
 801737c:	d01c      	beq.n	80173b8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801737e:	2a01      	cmp	r2, #1
 8017380:	d10c      	bne.n	801739c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017382:	888b      	ldrh	r3, [r1, #4]
 8017384:	8801      	ldrh	r1, [r0, #0]
 8017386:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801738a:	8844      	ldrh	r4, [r0, #2]
 801738c:	8004      	strh	r4, [r0, #0]
 801738e:	1a5b      	subs	r3, r3, r1
 8017390:	1a9b      	subs	r3, r3, r2
 8017392:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017396:	8043      	strh	r3, [r0, #2]
 8017398:	8081      	strh	r1, [r0, #4]
 801739a:	80c2      	strh	r2, [r0, #6]
 801739c:	bd30      	pop	{r4, r5, pc}
 801739e:	88cb      	ldrh	r3, [r1, #6]
 80173a0:	8842      	ldrh	r2, [r0, #2]
 80173a2:	1a9b      	subs	r3, r3, r2
 80173a4:	88c2      	ldrh	r2, [r0, #6]
 80173a6:	1a9b      	subs	r3, r3, r2
 80173a8:	888a      	ldrh	r2, [r1, #4]
 80173aa:	8801      	ldrh	r1, [r0, #0]
 80173ac:	8043      	strh	r3, [r0, #2]
 80173ae:	1a52      	subs	r2, r2, r1
 80173b0:	8881      	ldrh	r1, [r0, #4]
 80173b2:	1a52      	subs	r2, r2, r1
 80173b4:	8002      	strh	r2, [r0, #0]
 80173b6:	e7f1      	b.n	801739c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80173b8:	88cb      	ldrh	r3, [r1, #6]
 80173ba:	8841      	ldrh	r1, [r0, #2]
 80173bc:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80173c0:	f9b0 5000 	ldrsh.w	r5, [r0]
 80173c4:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80173c8:	8045      	strh	r5, [r0, #2]
 80173ca:	1a5b      	subs	r3, r3, r1
 80173cc:	1a9b      	subs	r3, r3, r2
 80173ce:	8003      	strh	r3, [r0, #0]
 80173d0:	8082      	strh	r2, [r0, #4]
 80173d2:	80c4      	strh	r4, [r0, #6]
 80173d4:	e7e2      	b.n	801739c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

080173d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80173d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173da:	b09f      	sub	sp, #124	; 0x7c
 80173dc:	9116      	str	r1, [sp, #88]	; 0x58
 80173de:	9317      	str	r3, [sp, #92]	; 0x5c
 80173e0:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80173e2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80173e4:	8809      	ldrh	r1, [r1, #0]
 80173e6:	889b      	ldrh	r3, [r3, #4]
 80173e8:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 80173ec:	9212      	str	r2, [sp, #72]	; 0x48
 80173ee:	440b      	add	r3, r1
 80173f0:	b21b      	sxth	r3, r3
 80173f2:	9310      	str	r3, [sp, #64]	; 0x40
 80173f4:	f8d8 3000 	ldr.w	r3, [r8]
 80173f8:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 80173fc:	7a59      	ldrb	r1, [r3, #9]
 80173fe:	7a1b      	ldrb	r3, [r3, #8]
 8017400:	9011      	str	r0, [sp, #68]	; 0x44
 8017402:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8017406:	9114      	str	r1, [sp, #80]	; 0x50
 8017408:	9315      	str	r3, [sp, #84]	; 0x54
 801740a:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 801740e:	2a00      	cmp	r2, #0
 8017410:	d06a      	beq.n	80174e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8017412:	f898 3010 	ldrb.w	r3, [r8, #16]
 8017416:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017418:	2b04      	cmp	r3, #4
 801741a:	bf14      	ite	ne
 801741c:	2301      	movne	r3, #1
 801741e:	2302      	moveq	r3, #2
 8017420:	4413      	add	r3, r2
 8017422:	f04f 0900 	mov.w	r9, #0
 8017426:	930f      	str	r3, [sp, #60]	; 0x3c
 8017428:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801742c:	464c      	mov	r4, r9
 801742e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8017432:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8017436:	4293      	cmp	r3, r2
 8017438:	f280 808f 	bge.w	801755a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801743c:	2300      	movs	r3, #0
 801743e:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8017442:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8017446:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801744a:	429c      	cmp	r4, r3
 801744c:	d006      	beq.n	801745c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801744e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017450:	f242 020b 	movw	r2, #8203	; 0x200b
 8017454:	4294      	cmp	r4, r2
 8017456:	bf18      	it	ne
 8017458:	4623      	movne	r3, r4
 801745a:	930d      	str	r3, [sp, #52]	; 0x34
 801745c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801745e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8017460:	f8d8 2000 	ldr.w	r2, [r8]
 8017464:	428b      	cmp	r3, r1
 8017466:	db41      	blt.n	80174ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8017468:	6813      	ldr	r3, [r2, #0]
 801746a:	4610      	mov	r0, r2
 801746c:	695b      	ldr	r3, [r3, #20]
 801746e:	4798      	blx	r3
 8017470:	4604      	mov	r4, r0
 8017472:	f8d8 0000 	ldr.w	r0, [r8]
 8017476:	6803      	ldr	r3, [r0, #0]
 8017478:	aa1d      	add	r2, sp, #116	; 0x74
 801747a:	689e      	ldr	r6, [r3, #8]
 801747c:	4621      	mov	r1, r4
 801747e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8017482:	47b0      	blx	r6
 8017484:	901c      	str	r0, [sp, #112]	; 0x70
 8017486:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801748a:	429c      	cmp	r4, r3
 801748c:	f000 80e9 	beq.w	8017662 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 8017490:	f242 030b 	movw	r3, #8203	; 0x200b
 8017494:	429c      	cmp	r4, r3
 8017496:	f000 80e4 	beq.w	8017662 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801749a:	2c00      	cmp	r4, #0
 801749c:	f000 80f6 	beq.w	801768c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 80174a0:	2c0a      	cmp	r4, #10
 80174a2:	d060      	beq.n	8017566 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 80174a4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80174a6:	b36a      	cbz	r2, 8017504 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 80174a8:	8894      	ldrh	r4, [r2, #4]
 80174aa:	f1bb 0f00 	cmp.w	fp, #0
 80174ae:	d03b      	beq.n	8017528 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 80174b0:	f892 900d 	ldrb.w	r9, [r2, #13]
 80174b4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80174b8:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80174bc:	f892 900a 	ldrb.w	r9, [r2, #10]
 80174c0:	f1bb 0f01 	cmp.w	fp, #1
 80174c4:	ea49 0903 	orr.w	r9, r9, r3
 80174c8:	d134      	bne.n	8017534 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 80174ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80174cc:	eba5 0509 	sub.w	r5, r5, r9
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d14f      	bne.n	8017574 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80174d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80174d6:	eb09 0305 	add.w	r3, r9, r5
 80174da:	4413      	add	r3, r2
 80174dc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80174de:	f9b2 2000 	ldrsh.w	r2, [r2]
 80174e2:	4293      	cmp	r3, r2
 80174e4:	da51      	bge.n	801758a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80174e6:	e038      	b.n	801755a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80174e8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80174ea:	e79a      	b.n	8017422 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 80174ec:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80174f0:	9301      	str	r3, [sp, #4]
 80174f2:	ab1d      	add	r3, sp, #116	; 0x74
 80174f4:	9300      	str	r3, [sp, #0]
 80174f6:	4659      	mov	r1, fp
 80174f8:	ab1c      	add	r3, sp, #112	; 0x70
 80174fa:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80174fc:	f002 ff4d 	bl	801a39a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8017500:	4604      	mov	r4, r0
 8017502:	e7c0      	b.n	8017486 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8017504:	f8d8 0000 	ldr.w	r0, [r8]
 8017508:	6803      	ldr	r3, [r0, #0]
 801750a:	691b      	ldr	r3, [r3, #16]
 801750c:	4798      	blx	r3
 801750e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017512:	4298      	cmp	r0, r3
 8017514:	f000 80a5 	beq.w	8017662 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 8017518:	f242 030b 	movw	r3, #8203	; 0x200b
 801751c:	4298      	cmp	r0, r3
 801751e:	f000 80a0 	beq.w	8017662 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 8017522:	f1bb 0f00 	cmp.w	fp, #0
 8017526:	d100      	bne.n	801752a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8017528:	444d      	add	r5, r9
 801752a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801752c:	2a00      	cmp	r2, #0
 801752e:	d1bf      	bne.n	80174b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8017530:	4691      	mov	r9, r2
 8017532:	e096      	b.n	8017662 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 8017534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017536:	2b00      	cmp	r3, #0
 8017538:	f000 80aa 	beq.w	8017690 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 801753c:	f1bb 0f00 	cmp.w	fp, #0
 8017540:	d118      	bne.n	8017574 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8017542:	f8d8 0000 	ldr.w	r0, [r8]
 8017546:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017548:	6803      	ldr	r3, [r0, #0]
 801754a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801754c:	4798      	blx	r3
 801754e:	4405      	add	r5, r0
 8017550:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017552:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017554:	1aeb      	subs	r3, r5, r3
 8017556:	4293      	cmp	r3, r2
 8017558:	dd17      	ble.n	801758a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801755a:	2c00      	cmp	r4, #0
 801755c:	f000 8096 	beq.w	801768c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 8017560:	2c0a      	cmp	r4, #10
 8017562:	f040 8084 	bne.w	801766e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8017566:	240a      	movs	r4, #10
 8017568:	fab4 f084 	clz	r0, r4
 801756c:	0940      	lsrs	r0, r0, #5
 801756e:	b01f      	add	sp, #124	; 0x7c
 8017570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017574:	f8d8 0000 	ldr.w	r0, [r8]
 8017578:	990d      	ldr	r1, [sp, #52]	; 0x34
 801757a:	6803      	ldr	r3, [r0, #0]
 801757c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801757e:	4798      	blx	r3
 8017580:	f1bb 0f01 	cmp.w	fp, #1
 8017584:	eba5 0500 	sub.w	r5, r5, r0
 8017588:	d0a4      	beq.n	80174d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801758a:	981c      	ldr	r0, [sp, #112]	; 0x70
 801758c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801758e:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8017592:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017596:	7b43      	ldrb	r3, [r0, #13]
 8017598:	015b      	lsls	r3, r3, #5
 801759a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801759e:	7983      	ldrb	r3, [r0, #6]
 80175a0:	4429      	add	r1, r5
 80175a2:	4313      	orrs	r3, r2
 80175a4:	440b      	add	r3, r1
 80175a6:	42b3      	cmp	r3, r6
 80175a8:	db5b      	blt.n	8017662 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 80175aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80175ac:	4299      	cmp	r1, r3
 80175ae:	da58      	bge.n	8017662 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 80175b0:	f8d8 0000 	ldr.w	r0, [r8]
 80175b4:	6803      	ldr	r3, [r0, #0]
 80175b6:	42ae      	cmp	r6, r5
 80175b8:	bfc8      	it	gt
 80175ba:	1b76      	subgt	r6, r6, r5
 80175bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175be:	bfcc      	ite	gt
 80175c0:	b2b6      	uxthgt	r6, r6
 80175c2:	2600      	movle	r6, #0
 80175c4:	4798      	blx	r3
 80175c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80175c8:	7b5a      	ldrb	r2, [r3, #13]
 80175ca:	00d1      	lsls	r1, r2, #3
 80175cc:	f401 7780 	and.w	r7, r1, #256	; 0x100
 80175d0:	7a19      	ldrb	r1, [r3, #8]
 80175d2:	4339      	orrs	r1, r7
 80175d4:	0657      	lsls	r7, r2, #25
 80175d6:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80175d8:	bf44      	itt	mi
 80175da:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 80175de:	b209      	sxthmi	r1, r1
 80175e0:	19c7      	adds	r7, r0, r7
 80175e2:	1a7f      	subs	r7, r7, r1
 80175e4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80175e6:	b2bf      	uxth	r7, r7
 80175e8:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80175ec:	fa0f fa87 	sxth.w	sl, r7
 80175f0:	4551      	cmp	r1, sl
 80175f2:	dd3a      	ble.n	801766a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 80175f4:	0112      	lsls	r2, r2, #4
 80175f6:	79d8      	ldrb	r0, [r3, #7]
 80175f8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80175fc:	4302      	orrs	r2, r0
 80175fe:	4492      	add	sl, r2
 8017600:	4551      	cmp	r1, sl
 8017602:	dc2e      	bgt.n	8017662 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 8017604:	1bcf      	subs	r7, r1, r7
 8017606:	b2bf      	uxth	r7, r7
 8017608:	468a      	mov	sl, r1
 801760a:	9319      	str	r3, [sp, #100]	; 0x64
 801760c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801760e:	f8d8 0000 	ldr.w	r0, [r8]
 8017612:	681a      	ldr	r2, [r3, #0]
 8017614:	6801      	ldr	r1, [r0, #0]
 8017616:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8017618:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801761a:	9313      	str	r3, [sp, #76]	; 0x4c
 801761c:	9218      	str	r2, [sp, #96]	; 0x60
 801761e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8017620:	4788      	blx	r1
 8017622:	f898 1006 	ldrb.w	r1, [r8, #6]
 8017626:	910b      	str	r1, [sp, #44]	; 0x2c
 8017628:	f898 100e 	ldrb.w	r1, [r8, #14]
 801762c:	910a      	str	r1, [sp, #40]	; 0x28
 801762e:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8017632:	9109      	str	r1, [sp, #36]	; 0x24
 8017634:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017636:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801763a:	9305      	str	r3, [sp, #20]
 801763c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801763e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017640:	9206      	str	r2, [sp, #24]
 8017642:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8017646:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801764a:	e9cd a601 	strd	sl, r6, [sp, #4]
 801764e:	442e      	add	r6, r5
 8017650:	b236      	sxth	r6, r6
 8017652:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017654:	9600      	str	r6, [sp, #0]
 8017656:	681a      	ldr	r2, [r3, #0]
 8017658:	9916      	ldr	r1, [sp, #88]	; 0x58
 801765a:	685b      	ldr	r3, [r3, #4]
 801765c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801765e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8017660:	47b0      	blx	r6
 8017662:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017664:	3301      	adds	r3, #1
 8017666:	930e      	str	r3, [sp, #56]	; 0x38
 8017668:	e6e3      	b.n	8017432 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801766a:	2700      	movs	r7, #0
 801766c:	e7cd      	b.n	801760a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 801766e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8017670:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017672:	3501      	adds	r5, #1
 8017674:	429d      	cmp	r5, r3
 8017676:	f6bf af77 	bge.w	8017568 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801767a:	4659      	mov	r1, fp
 801767c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801767e:	f7f8 fcc9 	bl	8010014 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017682:	4604      	mov	r4, r0
 8017684:	b110      	cbz	r0, 801768c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 8017686:	280a      	cmp	r0, #10
 8017688:	d1f2      	bne.n	8017670 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 801768a:	e76c      	b.n	8017566 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801768c:	2400      	movs	r4, #0
 801768e:	e76b      	b.n	8017568 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8017690:	f1bb 0f00 	cmp.w	fp, #0
 8017694:	f43f af5c 	beq.w	8017550 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8017698:	e777      	b.n	801758a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0801769a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801769a:	b530      	push	{r4, r5, lr}
 801769c:	8a44      	ldrh	r4, [r0, #18]
 801769e:	8ac5      	ldrh	r5, [r0, #22]
 80176a0:	82c3      	strh	r3, [r0, #22]
 80176a2:	442c      	add	r4, r5
 80176a4:	1ae4      	subs	r4, r4, r3
 80176a6:	8244      	strh	r4, [r0, #18]
 80176a8:	8b03      	ldrh	r3, [r0, #24]
 80176aa:	8a84      	ldrh	r4, [r0, #20]
 80176ac:	4422      	add	r2, r4
 80176ae:	440c      	add	r4, r1
 80176b0:	1a59      	subs	r1, r3, r1
 80176b2:	8342      	strh	r2, [r0, #26]
 80176b4:	8284      	strh	r4, [r0, #20]
 80176b6:	8301      	strh	r1, [r0, #24]
 80176b8:	bd30      	pop	{r4, r5, pc}

080176ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 80176ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176be:	7a43      	ldrb	r3, [r0, #9]
 80176c0:	1eda      	subs	r2, r3, #3
 80176c2:	b087      	sub	sp, #28
 80176c4:	4604      	mov	r4, r0
 80176c6:	b2d2      	uxtb	r2, r2
 80176c8:	460f      	mov	r7, r1
 80176ca:	2900      	cmp	r1, #0
 80176cc:	d036      	beq.n	801773c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 80176ce:	2a01      	cmp	r2, #1
 80176d0:	d932      	bls.n	8017738 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 80176d2:	1e58      	subs	r0, r3, #1
 80176d4:	f1d0 0b00 	rsbs	fp, r0, #0
 80176d8:	eb4b 0b00 	adc.w	fp, fp, r0
 80176dc:	1e99      	subs	r1, r3, #2
 80176de:	424b      	negs	r3, r1
 80176e0:	414b      	adcs	r3, r1
 80176e2:	9303      	str	r3, [sp, #12]
 80176e4:	2300      	movs	r3, #0
 80176e6:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80176ea:	2500      	movs	r5, #0
 80176ec:	8265      	strh	r5, [r4, #18]
 80176ee:	82a5      	strh	r5, [r4, #20]
 80176f0:	46a9      	mov	r9, r5
 80176f2:	f242 0a0b 	movw	sl, #8203	; 0x200b
 80176f6:	2300      	movs	r3, #0
 80176f8:	9305      	str	r3, [sp, #20]
 80176fa:	8823      	ldrh	r3, [r4, #0]
 80176fc:	2b20      	cmp	r3, #32
 80176fe:	d02b      	beq.n	8017758 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8017700:	eba3 020a 	sub.w	r2, r3, sl
 8017704:	4256      	negs	r6, r2
 8017706:	4156      	adcs	r6, r2
 8017708:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801770c:	4293      	cmp	r3, r2
 801770e:	d004      	beq.n	801771a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8017710:	4553      	cmp	r3, sl
 8017712:	bf16      	itet	ne
 8017714:	4699      	movne	r9, r3
 8017716:	2601      	moveq	r6, #1
 8017718:	2600      	movne	r6, #0
 801771a:	ab05      	add	r3, sp, #20
 801771c:	68e2      	ldr	r2, [r4, #12]
 801771e:	7a21      	ldrb	r1, [r4, #8]
 8017720:	6860      	ldr	r0, [r4, #4]
 8017722:	f002 fdf1 	bl	801a308 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017726:	8020      	strh	r0, [r4, #0]
 8017728:	b9c8      	cbnz	r0, 801775e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801772a:	8b22      	ldrh	r2, [r4, #24]
 801772c:	2300      	movs	r3, #0
 801772e:	4611      	mov	r1, r2
 8017730:	4620      	mov	r0, r4
 8017732:	f7ff ffb2 	bl	801769a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8017736:	e066      	b.n	8017806 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8017738:	468b      	mov	fp, r1
 801773a:	e7cf      	b.n	80176dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801773c:	3b01      	subs	r3, #1
 801773e:	2a01      	cmp	r2, #1
 8017740:	bf8c      	ite	hi
 8017742:	2200      	movhi	r2, #0
 8017744:	2201      	movls	r2, #1
 8017746:	2b01      	cmp	r3, #1
 8017748:	bf8c      	ite	hi
 801774a:	2300      	movhi	r3, #0
 801774c:	2301      	movls	r3, #1
 801774e:	9202      	str	r2, [sp, #8]
 8017750:	9301      	str	r3, [sp, #4]
 8017752:	9103      	str	r1, [sp, #12]
 8017754:	468b      	mov	fp, r1
 8017756:	e7c8      	b.n	80176ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8017758:	4699      	mov	r9, r3
 801775a:	2601      	movs	r6, #1
 801775c:	e7dd      	b.n	801771a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801775e:	8ae3      	ldrh	r3, [r4, #22]
 8017760:	280a      	cmp	r0, #10
 8017762:	f103 0301 	add.w	r3, r3, #1
 8017766:	82e3      	strh	r3, [r4, #22]
 8017768:	d0df      	beq.n	801772a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801776a:	9a05      	ldr	r2, [sp, #20]
 801776c:	bb42      	cbnz	r2, 80177c0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801776e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017772:	4298      	cmp	r0, r3
 8017774:	d001      	beq.n	801777a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8017776:	4550      	cmp	r0, sl
 8017778:	d1bd      	bne.n	80176f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801777a:	8823      	ldrh	r3, [r4, #0]
 801777c:	8b21      	ldrh	r1, [r4, #24]
 801777e:	2b20      	cmp	r3, #32
 8017780:	d001      	beq.n	8017786 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8017782:	4553      	cmp	r3, sl
 8017784:	d131      	bne.n	80177ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8017786:	2e00      	cmp	r6, #0
 8017788:	bf0a      	itet	eq
 801778a:	460d      	moveq	r5, r1
 801778c:	4630      	movne	r0, r6
 801778e:	2001      	moveq	r0, #1
 8017790:	440a      	add	r2, r1
 8017792:	8aa3      	ldrh	r3, [r4, #20]
 8017794:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8017798:	b292      	uxth	r2, r2
 801779a:	8322      	strh	r2, [r4, #24]
 801779c:	4413      	add	r3, r2
 801779e:	2f00      	cmp	r7, #0
 80177a0:	d03a      	beq.n	8017818 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 80177a2:	f1bb 0f00 	cmp.w	fp, #0
 80177a6:	d102      	bne.n	80177ae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 80177a8:	9903      	ldr	r1, [sp, #12]
 80177aa:	b301      	cbz	r1, 80177ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80177ac:	b1f8      	cbz	r0, 80177ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80177ae:	8ba1      	ldrh	r1, [r4, #28]
 80177b0:	4419      	add	r1, r3
 80177b2:	458c      	cmp	ip, r1
 80177b4:	da2a      	bge.n	801780c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80177b6:	8a61      	ldrh	r1, [r4, #18]
 80177b8:	b341      	cbz	r1, 801780c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80177ba:	4563      	cmp	r3, ip
 80177bc:	dd9b      	ble.n	80176f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80177be:	e01c      	b.n	80177fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 80177c0:	8893      	ldrh	r3, [r2, #4]
 80177c2:	8023      	strh	r3, [r4, #0]
 80177c4:	f892 800d 	ldrb.w	r8, [r2, #13]
 80177c8:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80177cc:	f408 7080 	and.w	r0, r8, #256	; 0x100
 80177d0:	f892 800a 	ldrb.w	r8, [r2, #10]
 80177d4:	ea48 0800 	orr.w	r8, r8, r0
 80177d8:	68e0      	ldr	r0, [r4, #12]
 80177da:	6803      	ldr	r3, [r0, #0]
 80177dc:	4649      	mov	r1, r9
 80177de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80177e0:	4798      	blx	r3
 80177e2:	eb08 0200 	add.w	r2, r8, r0
 80177e6:	b292      	uxth	r2, r2
 80177e8:	e7c7      	b.n	801777a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 80177ea:	2000      	movs	r0, #0
 80177ec:	e7d0      	b.n	8017790 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 80177ee:	4563      	cmp	r3, ip
 80177f0:	dd81      	ble.n	80176f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80177f2:	8a63      	ldrh	r3, [r4, #18]
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	f43f af7e 	beq.w	80176f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80177fa:	2301      	movs	r3, #1
 80177fc:	77a3      	strb	r3, [r4, #30]
 80177fe:	8ba2      	ldrh	r2, [r4, #28]
 8017800:	8b63      	ldrh	r3, [r4, #26]
 8017802:	4413      	add	r3, r2
 8017804:	8363      	strh	r3, [r4, #26]
 8017806:	b007      	add	sp, #28
 8017808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801780c:	2300      	movs	r3, #0
 801780e:	4611      	mov	r1, r2
 8017810:	4620      	mov	r0, r4
 8017812:	f7ff ff42 	bl	801769a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8017816:	e76e      	b.n	80176f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017818:	4563      	cmp	r3, ip
 801781a:	dd14      	ble.n	8017846 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801781c:	9b02      	ldr	r3, [sp, #8]
 801781e:	b113      	cbz	r3, 8017826 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8017820:	2301      	movs	r3, #1
 8017822:	460a      	mov	r2, r1
 8017824:	e783      	b.n	801772e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8017826:	9b01      	ldr	r3, [sp, #4]
 8017828:	2b00      	cmp	r3, #0
 801782a:	f43f af64 	beq.w	80176f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801782e:	2800      	cmp	r0, #0
 8017830:	f47f af61 	bne.w	80176f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017834:	b116      	cbz	r6, 801783c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8017836:	2301      	movs	r3, #1
 8017838:	462a      	mov	r2, r5
 801783a:	e779      	b.n	8017730 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801783c:	8a63      	ldrh	r3, [r4, #18]
 801783e:	2b00      	cmp	r3, #0
 8017840:	f43f af59 	beq.w	80176f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017844:	e7df      	b.n	8017806 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8017846:	2800      	cmp	r0, #0
 8017848:	f47f af55 	bne.w	80176f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801784c:	2e00      	cmp	r6, #0
 801784e:	f43f af52 	beq.w	80176f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017852:	2301      	movs	r3, #1
 8017854:	462a      	mov	r2, r5
 8017856:	e7db      	b.n	8017810 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08017858 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8017858:	b530      	push	{r4, r5, lr}
 801785a:	4605      	mov	r5, r0
 801785c:	b08b      	sub	sp, #44	; 0x2c
 801785e:	b191      	cbz	r1, 8017886 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8017860:	e9cd 3100 	strd	r3, r1, [sp]
 8017864:	4613      	mov	r3, r2
 8017866:	4601      	mov	r1, r0
 8017868:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801786c:	a802      	add	r0, sp, #8
 801786e:	f7ff fd09 	bl	8017284 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8017872:	2401      	movs	r4, #1
 8017874:	2100      	movs	r1, #0
 8017876:	a802      	add	r0, sp, #8
 8017878:	f7ff ff1f 	bl	80176ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801787c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017880:	b163      	cbz	r3, 801789c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8017882:	3401      	adds	r4, #1
 8017884:	e7f6      	b.n	8017874 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8017886:	f002 fe0d 	bl	801a4a4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801788a:	2401      	movs	r4, #1
 801788c:	280a      	cmp	r0, #10
 801788e:	4628      	mov	r0, r5
 8017890:	bf08      	it	eq
 8017892:	3401      	addeq	r4, #1
 8017894:	f002 fe06 	bl	801a4a4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017898:	2800      	cmp	r0, #0
 801789a:	d1f7      	bne.n	801788c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801789c:	b2a0      	uxth	r0, r4
 801789e:	b00b      	add	sp, #44	; 0x2c
 80178a0:	bd30      	pop	{r4, r5, pc}

080178a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80178a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178a6:	b0e5      	sub	sp, #404	; 0x194
 80178a8:	4689      	mov	r9, r1
 80178aa:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 80178ae:	900a      	str	r0, [sp, #40]	; 0x28
 80178b0:	461c      	mov	r4, r3
 80178b2:	f1ba 0f00 	cmp.w	sl, #0
 80178b6:	f000 80b4 	beq.w	8017a22 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	f000 80b0 	beq.w	8017a22 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80178c2:	7ba3      	ldrb	r3, [r4, #14]
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	f000 80ac 	beq.w	8017a22 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80178ca:	6810      	ldr	r0, [r2, #0]
 80178cc:	6851      	ldr	r1, [r2, #4]
 80178ce:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 80178d2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80178d6:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 80178da:	4643      	mov	r3, r8
 80178dc:	c303      	stmia	r3!, {r0, r1}
 80178de:	2500      	movs	r5, #0
 80178e0:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 80178e4:	79a2      	ldrb	r2, [r4, #6]
 80178e6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80178ea:	a90f      	add	r1, sp, #60	; 0x3c
 80178ec:	4640      	mov	r0, r8
 80178ee:	950f      	str	r5, [sp, #60]	; 0x3c
 80178f0:	f7ff fd40 	bl	8017374 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80178f4:	a90f      	add	r1, sp, #60	; 0x3c
 80178f6:	4608      	mov	r0, r1
 80178f8:	79a2      	ldrb	r2, [r4, #6]
 80178fa:	af19      	add	r7, sp, #100	; 0x64
 80178fc:	f7ff fd3a 	bl	8017374 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8017900:	4638      	mov	r0, r7
 8017902:	f002 f9a4 	bl	8019c4e <_ZN8touchgfx12TextProviderC1Ev>
 8017906:	6820      	ldr	r0, [r4, #0]
 8017908:	6803      	ldr	r3, [r0, #0]
 801790a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801790c:	4798      	blx	r3
 801790e:	4606      	mov	r6, r0
 8017910:	6820      	ldr	r0, [r4, #0]
 8017912:	6803      	ldr	r3, [r0, #0]
 8017914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017916:	4798      	blx	r3
 8017918:	4633      	mov	r3, r6
 801791a:	9000      	str	r0, [sp, #0]
 801791c:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801791e:	4651      	mov	r1, sl
 8017920:	4638      	mov	r0, r7
 8017922:	f002 f9ef 	bl	8019d04 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017926:	6820      	ldr	r0, [r4, #0]
 8017928:	7923      	ldrb	r3, [r4, #4]
 801792a:	9308      	str	r3, [sp, #32]
 801792c:	6803      	ldr	r3, [r0, #0]
 801792e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017930:	4798      	blx	r3
 8017932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017936:	181e      	adds	r6, r3, r0
 8017938:	42ae      	cmp	r6, r5
 801793a:	dd06      	ble.n	801794a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801793c:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8017940:	4282      	cmp	r2, r0
 8017942:	bfa4      	itt	ge
 8017944:	189d      	addge	r5, r3, r2
 8017946:	fb95 f5f6 	sdivge	r5, r5, r6
 801794a:	a832      	add	r0, sp, #200	; 0xc8
 801794c:	f002 f97f 	bl	8019c4e <_ZN8touchgfx12TextProviderC1Ev>
 8017950:	7c23      	ldrb	r3, [r4, #16]
 8017952:	b17b      	cbz	r3, 8017974 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 8017954:	6820      	ldr	r0, [r4, #0]
 8017956:	6803      	ldr	r3, [r0, #0]
 8017958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801795a:	4798      	blx	r3
 801795c:	4683      	mov	fp, r0
 801795e:	6820      	ldr	r0, [r4, #0]
 8017960:	6803      	ldr	r3, [r0, #0]
 8017962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017964:	4798      	blx	r3
 8017966:	465b      	mov	r3, fp
 8017968:	9000      	str	r0, [sp, #0]
 801796a:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801796c:	4651      	mov	r1, sl
 801796e:	a832      	add	r0, sp, #200	; 0xc8
 8017970:	f002 f9c8 	bl	8019d04 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017974:	7be1      	ldrb	r1, [r4, #15]
 8017976:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801797a:	7963      	ldrb	r3, [r4, #5]
 801797c:	1a52      	subs	r2, r2, r1
 801797e:	7c21      	ldrb	r1, [r4, #16]
 8017980:	9101      	str	r1, [sp, #4]
 8017982:	6821      	ldr	r1, [r4, #0]
 8017984:	9100      	str	r1, [sp, #0]
 8017986:	b292      	uxth	r2, r2
 8017988:	a932      	add	r1, sp, #200	; 0xc8
 801798a:	a811      	add	r0, sp, #68	; 0x44
 801798c:	f7ff fc7a 	bl	8017284 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8017990:	7c23      	ldrb	r3, [r4, #16]
 8017992:	b9bb      	cbnz	r3, 80179c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 8017994:	fa1f fa86 	uxth.w	sl, r6
 8017998:	2d00      	cmp	r5, #0
 801799a:	dd45      	ble.n	8017a28 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801799c:	4638      	mov	r0, r7
 801799e:	f002 fd81 	bl	801a4a4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80179a2:	2800      	cmp	r0, #0
 80179a4:	d03d      	beq.n	8017a22 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80179a6:	280a      	cmp	r0, #10
 80179a8:	d1f6      	bne.n	8017998 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 80179aa:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80179ae:	4453      	add	r3, sl
 80179b0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80179b4:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 80179b8:	eba3 030a 	sub.w	r3, r3, sl
 80179bc:	3d01      	subs	r5, #1
 80179be:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80179c2:	e7e9      	b.n	8017998 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 80179c4:	0073      	lsls	r3, r6, #1
 80179c6:	9309      	str	r3, [sp, #36]	; 0x24
 80179c8:	f64f 7bff 	movw	fp, #65535	; 0xffff
 80179cc:	fa1f fa86 	uxth.w	sl, r6
 80179d0:	2d00      	cmp	r5, #0
 80179d2:	dd29      	ble.n	8017a28 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 80179d4:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80179d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179da:	428b      	cmp	r3, r1
 80179dc:	bfd4      	ite	le
 80179de:	2100      	movle	r1, #0
 80179e0:	2101      	movgt	r1, #1
 80179e2:	a811      	add	r0, sp, #68	; 0x44
 80179e4:	f7ff fe69 	bl	80176ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80179e8:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 80179ec:	3b01      	subs	r3, #1
 80179ee:	b29b      	uxth	r3, r3
 80179f0:	455b      	cmp	r3, fp
 80179f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80179f4:	d005      	beq.n	8017a02 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 80179f6:	7961      	ldrb	r1, [r4, #5]
 80179f8:	4638      	mov	r0, r7
 80179fa:	f7f8 fb0b 	bl	8010014 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80179fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a00:	e7f4      	b.n	80179ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 8017a02:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8017a06:	4453      	add	r3, sl
 8017a08:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017a0c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8017a10:	eba3 030a 	sub.w	r3, r3, sl
 8017a14:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8017a18:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017a1c:	3d01      	subs	r5, #1
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d1d6      	bne.n	80179d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 8017a22:	b065      	add	sp, #404	; 0x194
 8017a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a28:	0075      	lsls	r5, r6, #1
 8017a2a:	f04f 0a00 	mov.w	sl, #0
 8017a2e:	7c23      	ldrb	r3, [r4, #16]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d066      	beq.n	8017b02 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 8017a34:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8017a38:	428d      	cmp	r5, r1
 8017a3a:	bfd4      	ite	le
 8017a3c:	2100      	movle	r1, #0
 8017a3e:	2101      	movgt	r1, #1
 8017a40:	a811      	add	r0, sp, #68	; 0x44
 8017a42:	f7ff fe3a 	bl	80176ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8017a46:	9b08      	ldr	r3, [sp, #32]
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d055      	beq.n	8017af8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8017a4c:	f894 b010 	ldrb.w	fp, [r4, #16]
 8017a50:	2264      	movs	r2, #100	; 0x64
 8017a52:	4639      	mov	r1, r7
 8017a54:	a84b      	add	r0, sp, #300	; 0x12c
 8017a56:	f010 f947 	bl	8027ce8 <memcpy>
 8017a5a:	f1bb 0f00 	cmp.w	fp, #0
 8017a5e:	d058      	beq.n	8017b12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 8017a60:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8017a64:	7922      	ldrb	r2, [r4, #4]
 8017a66:	2a01      	cmp	r2, #1
 8017a68:	d13c      	bne.n	8017ae4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8017a6a:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 8017a6e:	1ac0      	subs	r0, r0, r3
 8017a70:	2302      	movs	r3, #2
 8017a72:	fb90 f0f3 	sdiv	r0, r0, r3
 8017a76:	b200      	sxth	r0, r0
 8017a78:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8017a7c:	4418      	add	r0, r3
 8017a7e:	7c23      	ldrb	r3, [r4, #16]
 8017a80:	b200      	sxth	r0, r0
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d03a      	beq.n	8017afc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 8017a86:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 8017a8a:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 8017a8e:	9000      	str	r0, [sp, #0]
 8017a90:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8017a94:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8017a98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017a9a:	e9cd a703 	strd	sl, r7, [sp, #12]
 8017a9e:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8017aa2:	464a      	mov	r2, r9
 8017aa4:	2100      	movs	r1, #0
 8017aa6:	f7ff fc96 	bl	80173d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8017aaa:	2800      	cmp	r0, #0
 8017aac:	d1b9      	bne.n	8017a22 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8017aae:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8017ab2:	b2b2      	uxth	r2, r6
 8017ab4:	4611      	mov	r1, r2
 8017ab6:	4413      	add	r3, r2
 8017ab8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8017abc:	1a52      	subs	r2, r2, r1
 8017abe:	7c21      	ldrb	r1, [r4, #16]
 8017ac0:	b21b      	sxth	r3, r3
 8017ac2:	b212      	sxth	r2, r2
 8017ac4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017ac8:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8017acc:	b109      	cbz	r1, 8017ad2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 8017ace:	42b2      	cmp	r2, r6
 8017ad0:	dba7      	blt.n	8017a22 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8017ad2:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8017ad6:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8017ada:	440a      	add	r2, r1
 8017adc:	b212      	sxth	r2, r2
 8017ade:	4293      	cmp	r3, r2
 8017ae0:	dda5      	ble.n	8017a2e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 8017ae2:	e79e      	b.n	8017a22 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8017ae4:	2a02      	cmp	r2, #2
 8017ae6:	d105      	bne.n	8017af4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8017ae8:	7be2      	ldrb	r2, [r4, #15]
 8017aea:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8017aee:	1a80      	subs	r0, r0, r2
 8017af0:	1ac0      	subs	r0, r0, r3
 8017af2:	e7c0      	b.n	8017a76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8017af4:	2000      	movs	r0, #0
 8017af6:	e7bf      	b.n	8017a78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 8017af8:	7be0      	ldrb	r0, [r4, #15]
 8017afa:	e7bd      	b.n	8017a78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 8017afc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017b00:	e7c3      	b.n	8017a8a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 8017b02:	9b08      	ldr	r3, [sp, #32]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d0f7      	beq.n	8017af8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8017b08:	2264      	movs	r2, #100	; 0x64
 8017b0a:	4639      	mov	r1, r7
 8017b0c:	a84b      	add	r0, sp, #300	; 0x12c
 8017b0e:	f010 f8eb 	bl	8027ce8 <memcpy>
 8017b12:	2300      	movs	r3, #0
 8017b14:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017b18:	6821      	ldr	r1, [r4, #0]
 8017b1a:	a84b      	add	r0, sp, #300	; 0x12c
 8017b1c:	f7ff fbee 	bl	80172fc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8017b20:	b203      	sxth	r3, r0
 8017b22:	e79f      	b.n	8017a64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

08017b24 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8017b24:	2b03      	cmp	r3, #3
 8017b26:	d818      	bhi.n	8017b5a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8017b28:	e8df f003 	tbb	[pc, r3]
 8017b2c:	130d0602 	.word	0x130d0602
 8017b30:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017b34:	1850      	adds	r0, r2, r1
 8017b36:	4770      	bx	lr
 8017b38:	8803      	ldrh	r3, [r0, #0]
 8017b3a:	8880      	ldrh	r0, [r0, #4]
 8017b3c:	4418      	add	r0, r3
 8017b3e:	b200      	sxth	r0, r0
 8017b40:	1a80      	subs	r0, r0, r2
 8017b42:	3801      	subs	r0, #1
 8017b44:	4770      	bx	lr
 8017b46:	8803      	ldrh	r3, [r0, #0]
 8017b48:	8880      	ldrh	r0, [r0, #4]
 8017b4a:	4418      	add	r0, r3
 8017b4c:	b200      	sxth	r0, r0
 8017b4e:	1a40      	subs	r0, r0, r1
 8017b50:	e7f7      	b.n	8017b42 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8017b52:	f9b0 0000 	ldrsh.w	r0, [r0]
 8017b56:	4410      	add	r0, r2
 8017b58:	4770      	bx	lr
 8017b5a:	2000      	movs	r0, #0
 8017b5c:	4770      	bx	lr

08017b5e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8017b5e:	2b03      	cmp	r3, #3
 8017b60:	d817      	bhi.n	8017b92 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8017b62:	e8df f003 	tbb	[pc, r3]
 8017b66:	0602      	.short	0x0602
 8017b68:	1009      	.short	0x1009
 8017b6a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8017b6e:	1850      	adds	r0, r2, r1
 8017b70:	4770      	bx	lr
 8017b72:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017b76:	e7fa      	b.n	8017b6e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8017b78:	8843      	ldrh	r3, [r0, #2]
 8017b7a:	88c0      	ldrh	r0, [r0, #6]
 8017b7c:	4418      	add	r0, r3
 8017b7e:	b200      	sxth	r0, r0
 8017b80:	1a80      	subs	r0, r0, r2
 8017b82:	3801      	subs	r0, #1
 8017b84:	4770      	bx	lr
 8017b86:	8843      	ldrh	r3, [r0, #2]
 8017b88:	88c0      	ldrh	r0, [r0, #6]
 8017b8a:	4418      	add	r0, r3
 8017b8c:	b200      	sxth	r0, r0
 8017b8e:	1a40      	subs	r0, r0, r1
 8017b90:	e7f7      	b.n	8017b82 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8017b92:	2000      	movs	r0, #0
 8017b94:	4770      	bx	lr
	...

08017b98 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8017b98:	4b01      	ldr	r3, [pc, #4]	; (8017ba0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8017b9a:	2200      	movs	r2, #0
 8017b9c:	601a      	str	r2, [r3, #0]
 8017b9e:	4770      	bx	lr
 8017ba0:	2000c44c 	.word	0x2000c44c

08017ba4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8017ba4:	4603      	mov	r3, r0
 8017ba6:	b1c8      	cbz	r0, 8017bdc <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8017ba8:	0c02      	lsrs	r2, r0, #16
 8017baa:	0412      	lsls	r2, r2, #16
 8017bac:	b9a2      	cbnz	r2, 8017bd8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8017bae:	0403      	lsls	r3, r0, #16
 8017bb0:	2010      	movs	r0, #16
 8017bb2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017bb6:	bf04      	itt	eq
 8017bb8:	021b      	lsleq	r3, r3, #8
 8017bba:	3008      	addeq	r0, #8
 8017bbc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017bc0:	bf04      	itt	eq
 8017bc2:	011b      	lsleq	r3, r3, #4
 8017bc4:	3004      	addeq	r0, #4
 8017bc6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017bca:	bf04      	itt	eq
 8017bcc:	009b      	lsleq	r3, r3, #2
 8017bce:	3002      	addeq	r0, #2
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	db04      	blt.n	8017bde <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8017bd4:	3001      	adds	r0, #1
 8017bd6:	4770      	bx	lr
 8017bd8:	2000      	movs	r0, #0
 8017bda:	e7ea      	b.n	8017bb2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8017bdc:	2020      	movs	r0, #32
 8017bde:	4770      	bx	lr

08017be0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8017be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017be4:	b087      	sub	sp, #28
 8017be6:	4681      	mov	r9, r0
 8017be8:	4698      	mov	r8, r3
 8017bea:	4610      	mov	r0, r2
 8017bec:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8017bf0:	460d      	mov	r5, r1
 8017bf2:	b981      	cbnz	r1, 8017c16 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8017bf4:	b14b      	cbz	r3, 8017c0a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8017bf6:	460b      	mov	r3, r1
 8017bf8:	e9cd 4700 	strd	r4, r7, [sp]
 8017bfc:	464a      	mov	r2, r9
 8017bfe:	4641      	mov	r1, r8
 8017c00:	f7ff ffee 	bl	8017be0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017c04:	b007      	add	sp, #28
 8017c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8017c0e:	603b      	str	r3, [r7, #0]
 8017c10:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017c14:	e7f6      	b.n	8017c04 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8017c16:	fa32 fa01 	lsrs.w	sl, r2, r1
 8017c1a:	d107      	bne.n	8017c2c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8017c1c:	fb09 f602 	mul.w	r6, r9, r2
 8017c20:	fbb6 f0f4 	udiv	r0, r6, r4
 8017c24:	fb04 6610 	mls	r6, r4, r0, r6
 8017c28:	603e      	str	r6, [r7, #0]
 8017c2a:	e7eb      	b.n	8017c04 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8017c2c:	2601      	movs	r6, #1
 8017c2e:	408e      	lsls	r6, r1
 8017c30:	3e01      	subs	r6, #1
 8017c32:	4016      	ands	r6, r2
 8017c34:	fa09 fb01 	lsl.w	fp, r9, r1
 8017c38:	4630      	mov	r0, r6
 8017c3a:	fbbb f3f4 	udiv	r3, fp, r4
 8017c3e:	9302      	str	r3, [sp, #8]
 8017c40:	fb0a f303 	mul.w	r3, sl, r3
 8017c44:	9303      	str	r3, [sp, #12]
 8017c46:	f7ff ffad 	bl	8017ba4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017c4a:	464a      	mov	r2, r9
 8017c4c:	460b      	mov	r3, r1
 8017c4e:	e9cd 4700 	strd	r4, r7, [sp]
 8017c52:	4601      	mov	r1, r0
 8017c54:	4630      	mov	r0, r6
 8017c56:	f7ff ffc3 	bl	8017be0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017c5a:	9b02      	ldr	r3, [sp, #8]
 8017c5c:	fb04 bb13 	mls	fp, r4, r3, fp
 8017c60:	4606      	mov	r6, r0
 8017c62:	4658      	mov	r0, fp
 8017c64:	eb05 0108 	add.w	r1, r5, r8
 8017c68:	f7ff ff9c 	bl	8017ba4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017c6c:	ab05      	add	r3, sp, #20
 8017c6e:	e9cd 4300 	strd	r4, r3, [sp]
 8017c72:	465a      	mov	r2, fp
 8017c74:	4603      	mov	r3, r0
 8017c76:	4650      	mov	r0, sl
 8017c78:	f7ff ffb2 	bl	8017be0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017c7c:	6839      	ldr	r1, [r7, #0]
 8017c7e:	9a05      	ldr	r2, [sp, #20]
 8017c80:	9b03      	ldr	r3, [sp, #12]
 8017c82:	4411      	add	r1, r2
 8017c84:	fbb1 f2f4 	udiv	r2, r1, r4
 8017c88:	18d3      	adds	r3, r2, r3
 8017c8a:	441e      	add	r6, r3
 8017c8c:	fb04 1412 	mls	r4, r4, r2, r1
 8017c90:	4430      	add	r0, r6
 8017c92:	603c      	str	r4, [r7, #0]
 8017c94:	e7b6      	b.n	8017c04 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08017c96 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8017c96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017c9a:	b085      	sub	sp, #20
 8017c9c:	f1b0 0900 	subs.w	r9, r0, #0
 8017ca0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017ca2:	461d      	mov	r5, r3
 8017ca4:	bfbf      	itttt	lt
 8017ca6:	6823      	ldrlt	r3, [r4, #0]
 8017ca8:	425b      	neglt	r3, r3
 8017caa:	f1c9 0900 	rsblt	r9, r9, #0
 8017cae:	6023      	strlt	r3, [r4, #0]
 8017cb0:	bfb4      	ite	lt
 8017cb2:	f04f 36ff 	movlt.w	r6, #4294967295
 8017cb6:	2601      	movge	r6, #1
 8017cb8:	2a00      	cmp	r2, #0
 8017cba:	4617      	mov	r7, r2
 8017cbc:	da04      	bge.n	8017cc8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8017cbe:	6823      	ldr	r3, [r4, #0]
 8017cc0:	425b      	negs	r3, r3
 8017cc2:	4257      	negs	r7, r2
 8017cc4:	4276      	negs	r6, r6
 8017cc6:	6023      	str	r3, [r4, #0]
 8017cc8:	2d00      	cmp	r5, #0
 8017cca:	4638      	mov	r0, r7
 8017ccc:	bfba      	itte	lt
 8017cce:	426d      	neglt	r5, r5
 8017cd0:	f04f 38ff 	movlt.w	r8, #4294967295
 8017cd4:	f04f 0801 	movge.w	r8, #1
 8017cd8:	f7ff ff64 	bl	8017ba4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017cdc:	ab03      	add	r3, sp, #12
 8017cde:	e9cd 5300 	strd	r5, r3, [sp]
 8017ce2:	463a      	mov	r2, r7
 8017ce4:	4603      	mov	r3, r0
 8017ce6:	4648      	mov	r0, r9
 8017ce8:	f7ff ff7a 	bl	8017be0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017cec:	6823      	ldr	r3, [r4, #0]
 8017cee:	9a03      	ldr	r2, [sp, #12]
 8017cf0:	4546      	cmp	r6, r8
 8017cf2:	441a      	add	r2, r3
 8017cf4:	fb92 f3f5 	sdiv	r3, r2, r5
 8017cf8:	4418      	add	r0, r3
 8017cfa:	bf18      	it	ne
 8017cfc:	4240      	negne	r0, r0
 8017cfe:	fb05 2313 	mls	r3, r5, r3, r2
 8017d02:	1c72      	adds	r2, r6, #1
 8017d04:	6023      	str	r3, [r4, #0]
 8017d06:	d105      	bne.n	8017d14 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	f1c3 0200 	rsb	r2, r3, #0
 8017d0e:	db0b      	blt.n	8017d28 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8017d10:	6022      	str	r2, [r4, #0]
 8017d12:	e006      	b.n	8017d22 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017d14:	2e01      	cmp	r6, #1
 8017d16:	d104      	bne.n	8017d22 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	da02      	bge.n	8017d22 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017d1c:	442b      	add	r3, r5
 8017d1e:	3801      	subs	r0, #1
 8017d20:	6023      	str	r3, [r4, #0]
 8017d22:	b005      	add	sp, #20
 8017d24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017d28:	3801      	subs	r0, #1
 8017d2a:	1b52      	subs	r2, r2, r5
 8017d2c:	e7f0      	b.n	8017d10 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08017d30 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8017d30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8017d34:	4c1c      	ldr	r4, [pc, #112]	; (8017da8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8017d36:	6807      	ldr	r7, [r0, #0]
 8017d38:	69a3      	ldr	r3, [r4, #24]
 8017d3a:	4605      	mov	r5, r0
 8017d3c:	b92b      	cbnz	r3, 8017d4a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8017d3e:	6840      	ldr	r0, [r0, #4]
 8017d40:	e9c5 7000 	strd	r7, r0, [r5]
 8017d44:	b004      	add	sp, #16
 8017d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d4a:	68a2      	ldr	r2, [r4, #8]
 8017d4c:	6820      	ldr	r0, [r4, #0]
 8017d4e:	ae04      	add	r6, sp, #16
 8017d50:	f04f 0802 	mov.w	r8, #2
 8017d54:	fb93 f1f8 	sdiv	r1, r3, r8
 8017d58:	440a      	add	r2, r1
 8017d5a:	f846 2d04 	str.w	r2, [r6, #-4]!
 8017d5e:	69e1      	ldr	r1, [r4, #28]
 8017d60:	9600      	str	r6, [sp, #0]
 8017d62:	463a      	mov	r2, r7
 8017d64:	f7ff ff97 	bl	8017c96 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017d68:	69a3      	ldr	r3, [r4, #24]
 8017d6a:	686a      	ldr	r2, [r5, #4]
 8017d6c:	6a21      	ldr	r1, [r4, #32]
 8017d6e:	9600      	str	r6, [sp, #0]
 8017d70:	4607      	mov	r7, r0
 8017d72:	6860      	ldr	r0, [r4, #4]
 8017d74:	f7ff ff8f 	bl	8017c96 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017d78:	6962      	ldr	r2, [r4, #20]
 8017d7a:	69a3      	ldr	r3, [r4, #24]
 8017d7c:	fb93 f8f8 	sdiv	r8, r3, r8
 8017d80:	4442      	add	r2, r8
 8017d82:	9203      	str	r2, [sp, #12]
 8017d84:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017d86:	682a      	ldr	r2, [r5, #0]
 8017d88:	9600      	str	r6, [sp, #0]
 8017d8a:	4407      	add	r7, r0
 8017d8c:	68e0      	ldr	r0, [r4, #12]
 8017d8e:	f7ff ff82 	bl	8017c96 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017d92:	9600      	str	r6, [sp, #0]
 8017d94:	4680      	mov	r8, r0
 8017d96:	69a3      	ldr	r3, [r4, #24]
 8017d98:	686a      	ldr	r2, [r5, #4]
 8017d9a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8017d9c:	6920      	ldr	r0, [r4, #16]
 8017d9e:	f7ff ff7a 	bl	8017c96 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017da2:	4440      	add	r0, r8
 8017da4:	e7cc      	b.n	8017d40 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8017da6:	bf00      	nop
 8017da8:	2000c450 	.word	0x2000c450

08017dac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8017dac:	4b07      	ldr	r3, [pc, #28]	; (8017dcc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8017dae:	781b      	ldrb	r3, [r3, #0]
 8017db0:	2b01      	cmp	r3, #1
 8017db2:	d109      	bne.n	8017dc8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8017db4:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017db8:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017dbc:	8003      	strh	r3, [r0, #0]
 8017dbe:	4b04      	ldr	r3, [pc, #16]	; (8017dd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8017dc0:	881b      	ldrh	r3, [r3, #0]
 8017dc2:	3b01      	subs	r3, #1
 8017dc4:	1a9b      	subs	r3, r3, r2
 8017dc6:	800b      	strh	r3, [r1, #0]
 8017dc8:	4770      	bx	lr
 8017dca:	bf00      	nop
 8017dcc:	2000c434 	.word	0x2000c434
 8017dd0:	2000c430 	.word	0x2000c430

08017dd4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8017dd4:	b510      	push	{r4, lr}
 8017dd6:	4b07      	ldr	r3, [pc, #28]	; (8017df4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8017dd8:	781b      	ldrb	r3, [r3, #0]
 8017dda:	2b01      	cmp	r3, #1
 8017ddc:	d108      	bne.n	8017df0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8017dde:	4b06      	ldr	r3, [pc, #24]	; (8017df8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8017de0:	880c      	ldrh	r4, [r1, #0]
 8017de2:	881b      	ldrh	r3, [r3, #0]
 8017de4:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017de8:	3b01      	subs	r3, #1
 8017dea:	1b1b      	subs	r3, r3, r4
 8017dec:	8003      	strh	r3, [r0, #0]
 8017dee:	800a      	strh	r2, [r1, #0]
 8017df0:	bd10      	pop	{r4, pc}
 8017df2:	bf00      	nop
 8017df4:	2000c434 	.word	0x2000c434
 8017df8:	2000c430 	.word	0x2000c430

08017dfc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8017dfc:	b510      	push	{r4, lr}
 8017dfe:	4b0a      	ldr	r3, [pc, #40]	; (8017e28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8017e00:	781b      	ldrb	r3, [r3, #0]
 8017e02:	2b01      	cmp	r3, #1
 8017e04:	d10e      	bne.n	8017e24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8017e06:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017e0a:	8843      	ldrh	r3, [r0, #2]
 8017e0c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017e10:	8044      	strh	r4, [r0, #2]
 8017e12:	18ca      	adds	r2, r1, r3
 8017e14:	4b05      	ldr	r3, [pc, #20]	; (8017e2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8017e16:	881b      	ldrh	r3, [r3, #0]
 8017e18:	1a9b      	subs	r3, r3, r2
 8017e1a:	8003      	strh	r3, [r0, #0]
 8017e1c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017e20:	80c3      	strh	r3, [r0, #6]
 8017e22:	8081      	strh	r1, [r0, #4]
 8017e24:	bd10      	pop	{r4, pc}
 8017e26:	bf00      	nop
 8017e28:	2000c434 	.word	0x2000c434
 8017e2c:	2000c430 	.word	0x2000c430

08017e30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8017e30:	4b08      	ldr	r3, [pc, #32]	; (8017e54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8017e32:	781b      	ldrb	r3, [r3, #0]
 8017e34:	2b01      	cmp	r3, #1
 8017e36:	d10c      	bne.n	8017e52 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8017e38:	8803      	ldrh	r3, [r0, #0]
 8017e3a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8017e3e:	8842      	ldrh	r2, [r0, #2]
 8017e40:	8002      	strh	r2, [r0, #0]
 8017e42:	185a      	adds	r2, r3, r1
 8017e44:	4b04      	ldr	r3, [pc, #16]	; (8017e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8017e46:	881b      	ldrh	r3, [r3, #0]
 8017e48:	1a9b      	subs	r3, r3, r2
 8017e4a:	8043      	strh	r3, [r0, #2]
 8017e4c:	88c3      	ldrh	r3, [r0, #6]
 8017e4e:	8083      	strh	r3, [r0, #4]
 8017e50:	80c1      	strh	r1, [r0, #6]
 8017e52:	4770      	bx	lr
 8017e54:	2000c434 	.word	0x2000c434
 8017e58:	2000c430 	.word	0x2000c430

08017e5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8017e5c:	b510      	push	{r4, lr}
 8017e5e:	4b07      	ldr	r3, [pc, #28]	; (8017e7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8017e60:	781b      	ldrb	r3, [r3, #0]
 8017e62:	2b01      	cmp	r3, #1
 8017e64:	d108      	bne.n	8017e78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8017e66:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017e6a:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017e6e:	8003      	strh	r3, [r0, #0]
 8017e70:	8893      	ldrh	r3, [r2, #4]
 8017e72:	3b01      	subs	r3, #1
 8017e74:	1b1b      	subs	r3, r3, r4
 8017e76:	800b      	strh	r3, [r1, #0]
 8017e78:	bd10      	pop	{r4, pc}
 8017e7a:	bf00      	nop
 8017e7c:	2000c434 	.word	0x2000c434

08017e80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8017e80:	b510      	push	{r4, lr}
 8017e82:	4b0a      	ldr	r3, [pc, #40]	; (8017eac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8017e84:	781b      	ldrb	r3, [r3, #0]
 8017e86:	2b01      	cmp	r3, #1
 8017e88:	460a      	mov	r2, r1
 8017e8a:	d10d      	bne.n	8017ea8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8017e8c:	8881      	ldrh	r1, [r0, #4]
 8017e8e:	8803      	ldrh	r3, [r0, #0]
 8017e90:	440b      	add	r3, r1
 8017e92:	4601      	mov	r1, r0
 8017e94:	3b01      	subs	r3, #1
 8017e96:	f821 3b02 	strh.w	r3, [r1], #2
 8017e9a:	f7ff ffdf 	bl	8017e5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8017e9e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017ea2:	88c2      	ldrh	r2, [r0, #6]
 8017ea4:	8082      	strh	r2, [r0, #4]
 8017ea6:	80c3      	strh	r3, [r0, #6]
 8017ea8:	bd10      	pop	{r4, pc}
 8017eaa:	bf00      	nop
 8017eac:	2000c434 	.word	0x2000c434

08017eb0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8017eb0:	b570      	push	{r4, r5, r6, lr}
 8017eb2:	4c0b      	ldr	r4, [pc, #44]	; (8017ee0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8017eb4:	2300      	movs	r3, #0
 8017eb6:	4605      	mov	r5, r0
 8017eb8:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8017ebc:	6820      	ldr	r0, [r4, #0]
 8017ebe:	460e      	mov	r6, r1
 8017ec0:	b110      	cbz	r0, 8017ec8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 8017ec2:	6803      	ldr	r3, [r0, #0]
 8017ec4:	695b      	ldr	r3, [r3, #20]
 8017ec6:	4798      	blx	r3
 8017ec8:	6026      	str	r6, [r4, #0]
 8017eca:	6833      	ldr	r3, [r6, #0]
 8017ecc:	4630      	mov	r0, r6
 8017ece:	68db      	ldr	r3, [r3, #12]
 8017ed0:	4798      	blx	r3
 8017ed2:	682b      	ldr	r3, [r5, #0]
 8017ed4:	4628      	mov	r0, r5
 8017ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017edc:	4718      	bx	r3
 8017ede:	bf00      	nop
 8017ee0:	2000c480 	.word	0x2000c480

08017ee4 <_ZN8touchgfx11Application13requestRedrawEv>:
 8017ee4:	4b06      	ldr	r3, [pc, #24]	; (8017f00 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8017ee6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017eea:	4b06      	ldr	r3, [pc, #24]	; (8017f04 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8017eec:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8017ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ef4:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8017ef8:	2100      	movs	r1, #0
 8017efa:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8017efe:	4770      	bx	lr
 8017f00:	2000c430 	.word	0x2000c430
 8017f04:	2000c432 	.word	0x2000c432

08017f08 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8017f08:	4b03      	ldr	r3, [pc, #12]	; (8017f18 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8017f0a:	6818      	ldr	r0, [r3, #0]
 8017f0c:	b110      	cbz	r0, 8017f14 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8017f0e:	6803      	ldr	r3, [r0, #0]
 8017f10:	699b      	ldr	r3, [r3, #24]
 8017f12:	4718      	bx	r3
 8017f14:	4770      	bx	lr
 8017f16:	bf00      	nop
 8017f18:	2000c480 	.word	0x2000c480

08017f1c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8017f1c:	4770      	bx	lr
	...

08017f20 <_ZN8touchgfx11Application4drawEv>:
 8017f20:	b507      	push	{r0, r1, r2, lr}
 8017f22:	4b09      	ldr	r3, [pc, #36]	; (8017f48 <_ZN8touchgfx11Application4drawEv+0x28>)
 8017f24:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017f28:	4b08      	ldr	r3, [pc, #32]	; (8017f4c <_ZN8touchgfx11Application4drawEv+0x2c>)
 8017f2a:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017f32:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017f36:	6803      	ldr	r3, [r0, #0]
 8017f38:	2100      	movs	r1, #0
 8017f3a:	9100      	str	r1, [sp, #0]
 8017f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f3e:	4669      	mov	r1, sp
 8017f40:	4798      	blx	r3
 8017f42:	b003      	add	sp, #12
 8017f44:	f85d fb04 	ldr.w	pc, [sp], #4
 8017f48:	2000c430 	.word	0x2000c430
 8017f4c:	2000c432 	.word	0x2000c432

08017f50 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8017f50:	4b03      	ldr	r3, [pc, #12]	; (8017f60 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8017f52:	6818      	ldr	r0, [r3, #0]
 8017f54:	b110      	cbz	r0, 8017f5c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8017f56:	6803      	ldr	r3, [r0, #0]
 8017f58:	69db      	ldr	r3, [r3, #28]
 8017f5a:	4718      	bx	r3
 8017f5c:	4770      	bx	lr
 8017f5e:	bf00      	nop
 8017f60:	2000c480 	.word	0x2000c480

08017f64 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8017f64:	4b03      	ldr	r3, [pc, #12]	; (8017f74 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8017f66:	6818      	ldr	r0, [r3, #0]
 8017f68:	b110      	cbz	r0, 8017f70 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8017f6a:	6803      	ldr	r3, [r0, #0]
 8017f6c:	6a1b      	ldr	r3, [r3, #32]
 8017f6e:	4718      	bx	r3
 8017f70:	4770      	bx	lr
 8017f72:	bf00      	nop
 8017f74:	2000c480 	.word	0x2000c480

08017f78 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8017f78:	2300      	movs	r3, #0
 8017f7a:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8017f7e:	4770      	bx	lr

08017f80 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8017f80:	4b03      	ldr	r3, [pc, #12]	; (8017f90 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8017f82:	6818      	ldr	r0, [r3, #0]
 8017f84:	b110      	cbz	r0, 8017f8c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8017f86:	6803      	ldr	r3, [r0, #0]
 8017f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f8a:	4718      	bx	r3
 8017f8c:	4770      	bx	lr
 8017f8e:	bf00      	nop
 8017f90:	2000c480 	.word	0x2000c480

08017f94 <_ZN8touchgfx11Application15handleTickEventEv>:
 8017f94:	b570      	push	{r4, r5, r6, lr}
 8017f96:	4d32      	ldr	r5, [pc, #200]	; (8018060 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 8017f98:	4604      	mov	r4, r0
 8017f9a:	6828      	ldr	r0, [r5, #0]
 8017f9c:	b140      	cbz	r0, 8017fb0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017f9e:	7a03      	ldrb	r3, [r0, #8]
 8017fa0:	b933      	cbnz	r3, 8017fb0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017fa2:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8017fa6:	6803      	ldr	r3, [r0, #0]
 8017fa8:	689b      	ldr	r3, [r3, #8]
 8017faa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017fae:	4718      	bx	r3
 8017fb0:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8017fb4:	b97b      	cbnz	r3, 8017fd6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017fb6:	b170      	cbz	r0, 8017fd6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017fb8:	7a03      	ldrb	r3, [r0, #8]
 8017fba:	b163      	cbz	r3, 8017fd6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017fbc:	4b29      	ldr	r3, [pc, #164]	; (8018064 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8017fbe:	6818      	ldr	r0, [r3, #0]
 8017fc0:	b110      	cbz	r0, 8017fc8 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8017fc2:	6803      	ldr	r3, [r0, #0]
 8017fc4:	691b      	ldr	r3, [r3, #16]
 8017fc6:	4798      	blx	r3
 8017fc8:	6828      	ldr	r0, [r5, #0]
 8017fca:	6803      	ldr	r3, [r0, #0]
 8017fcc:	68db      	ldr	r3, [r3, #12]
 8017fce:	4798      	blx	r3
 8017fd0:	2301      	movs	r3, #1
 8017fd2:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8017fd6:	2500      	movs	r5, #0
 8017fd8:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8017fdc:	42a8      	cmp	r0, r5
 8017fde:	dd0c      	ble.n	8017ffa <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8017fe0:	1963      	adds	r3, r4, r5
 8017fe2:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8017fe6:	b132      	cbz	r2, 8017ff6 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8017fe8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8017fec:	4413      	add	r3, r2
 8017fee:	6858      	ldr	r0, [r3, #4]
 8017ff0:	6803      	ldr	r3, [r0, #0]
 8017ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017ff4:	4798      	blx	r3
 8017ff6:	3501      	adds	r5, #1
 8017ff8:	e7ee      	b.n	8017fd8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8017ffa:	2300      	movs	r3, #0
 8017ffc:	461a      	mov	r2, r3
 8017ffe:	4298      	cmp	r0, r3
 8018000:	d015      	beq.n	801802e <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8018002:	18e1      	adds	r1, r4, r3
 8018004:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8018008:	b16d      	cbz	r5, 8018026 <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 801800a:	429a      	cmp	r2, r3
 801800c:	d00a      	beq.n	8018024 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 801800e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8018012:	4431      	add	r1, r6
 8018014:	684e      	ldr	r6, [r1, #4]
 8018016:	b291      	uxth	r1, r2
 8018018:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801801c:	604e      	str	r6, [r1, #4]
 801801e:	18a1      	adds	r1, r4, r2
 8018020:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8018024:	3201      	adds	r2, #1
 8018026:	3301      	adds	r3, #1
 8018028:	e7e9      	b.n	8017ffe <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801802a:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801802e:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 8018032:	4295      	cmp	r5, r2
 8018034:	dd0d      	ble.n	8018052 <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 8018036:	1e6b      	subs	r3, r5, #1
 8018038:	b29b      	uxth	r3, r3
 801803a:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 801803e:	4618      	mov	r0, r3
 8018040:	3104      	adds	r1, #4
 8018042:	4285      	cmp	r5, r0
 8018044:	ddf1      	ble.n	801802a <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 8018046:	f851 6f04 	ldr.w	r6, [r1, #4]!
 801804a:	f841 6c04 	str.w	r6, [r1, #-4]
 801804e:	3001      	adds	r0, #1
 8018050:	e7f7      	b.n	8018042 <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 8018052:	4b04      	ldr	r3, [pc, #16]	; (8018064 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8018054:	6818      	ldr	r0, [r3, #0]
 8018056:	b110      	cbz	r0, 801805e <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8018058:	6803      	ldr	r3, [r0, #0]
 801805a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801805c:	e7a5      	b.n	8017faa <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801805e:	bd70      	pop	{r4, r5, r6, pc}
 8018060:	2000c484 	.word	0x2000c484
 8018064:	2000c480 	.word	0x2000c480

08018068 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8018068:	b510      	push	{r4, lr}
 801806a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801806e:	888a      	ldrh	r2, [r1, #4]
 8018070:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018074:	4422      	add	r2, r4
 8018076:	b212      	sxth	r2, r2
 8018078:	4293      	cmp	r3, r2
 801807a:	da15      	bge.n	80180a8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801807c:	8882      	ldrh	r2, [r0, #4]
 801807e:	4413      	add	r3, r2
 8018080:	b21b      	sxth	r3, r3
 8018082:	429c      	cmp	r4, r3
 8018084:	da10      	bge.n	80180a8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018086:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801808a:	88c9      	ldrh	r1, [r1, #6]
 801808c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018090:	4419      	add	r1, r3
 8018092:	b209      	sxth	r1, r1
 8018094:	428a      	cmp	r2, r1
 8018096:	da07      	bge.n	80180a8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018098:	88c0      	ldrh	r0, [r0, #6]
 801809a:	4410      	add	r0, r2
 801809c:	b200      	sxth	r0, r0
 801809e:	4283      	cmp	r3, r0
 80180a0:	bfac      	ite	ge
 80180a2:	2000      	movge	r0, #0
 80180a4:	2001      	movlt	r0, #1
 80180a6:	bd10      	pop	{r4, pc}
 80180a8:	2000      	movs	r0, #0
 80180aa:	e7fc      	b.n	80180a6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080180ac <_ZN8touchgfx4Rect10restrictToEss>:
 80180ac:	f9b0 3000 	ldrsh.w	r3, [r0]
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	b510      	push	{r4, lr}
 80180b4:	da04      	bge.n	80180c0 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80180b6:	8884      	ldrh	r4, [r0, #4]
 80180b8:	4423      	add	r3, r4
 80180ba:	8083      	strh	r3, [r0, #4]
 80180bc:	2300      	movs	r3, #0
 80180be:	8003      	strh	r3, [r0, #0]
 80180c0:	f9b0 4000 	ldrsh.w	r4, [r0]
 80180c4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80180c8:	1b09      	subs	r1, r1, r4
 80180ca:	428b      	cmp	r3, r1
 80180cc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80180d0:	bfc8      	it	gt
 80180d2:	8081      	strhgt	r1, [r0, #4]
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	da04      	bge.n	80180e2 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80180d8:	88c1      	ldrh	r1, [r0, #6]
 80180da:	440b      	add	r3, r1
 80180dc:	80c3      	strh	r3, [r0, #6]
 80180de:	2300      	movs	r3, #0
 80180e0:	8043      	strh	r3, [r0, #2]
 80180e2:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80180e6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80180ea:	1a52      	subs	r2, r2, r1
 80180ec:	4293      	cmp	r3, r2
 80180ee:	bfc8      	it	gt
 80180f0:	80c2      	strhgt	r2, [r0, #6]
 80180f2:	bd10      	pop	{r4, pc}

080180f4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80180f4:	b510      	push	{r4, lr}
 80180f6:	4b10      	ldr	r3, [pc, #64]	; (8018138 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80180f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80180fc:	4b0f      	ldr	r3, [pc, #60]	; (801813c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80180fe:	460c      	mov	r4, r1
 8018100:	4620      	mov	r0, r4
 8018102:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018106:	f7ff ffd1 	bl	80180ac <_ZN8touchgfx4Rect10restrictToEss>
 801810a:	4b0d      	ldr	r3, [pc, #52]	; (8018140 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801810c:	6818      	ldr	r0, [r3, #0]
 801810e:	b190      	cbz	r0, 8018136 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8018110:	6803      	ldr	r3, [r0, #0]
 8018112:	4621      	mov	r1, r4
 8018114:	689b      	ldr	r3, [r3, #8]
 8018116:	4798      	blx	r3
 8018118:	4b0a      	ldr	r3, [pc, #40]	; (8018144 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801811a:	6818      	ldr	r0, [r3, #0]
 801811c:	b118      	cbz	r0, 8018126 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801811e:	6803      	ldr	r3, [r0, #0]
 8018120:	4621      	mov	r1, r4
 8018122:	689b      	ldr	r3, [r3, #8]
 8018124:	4798      	blx	r3
 8018126:	4b08      	ldr	r3, [pc, #32]	; (8018148 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8018128:	6818      	ldr	r0, [r3, #0]
 801812a:	6803      	ldr	r3, [r0, #0]
 801812c:	4621      	mov	r1, r4
 801812e:	69db      	ldr	r3, [r3, #28]
 8018130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018134:	4718      	bx	r3
 8018136:	bd10      	pop	{r4, pc}
 8018138:	2000c432 	.word	0x2000c432
 801813c:	2000c430 	.word	0x2000c430
 8018140:	2000c480 	.word	0x2000c480
 8018144:	2000c47c 	.word	0x2000c47c
 8018148:	2000c43c 	.word	0x2000c43c

0801814c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801814e:	4606      	mov	r6, r0
 8018150:	4608      	mov	r0, r1
 8018152:	460f      	mov	r7, r1
 8018154:	f7fb fb87 	bl	8013866 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018158:	b9e8      	cbnz	r0, 8018196 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801815a:	f9b7 5000 	ldrsh.w	r5, [r7]
 801815e:	f9b6 4000 	ldrsh.w	r4, [r6]
 8018162:	42a5      	cmp	r5, r4
 8018164:	db17      	blt.n	8018196 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8018166:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801816a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801816e:	429a      	cmp	r2, r3
 8018170:	db11      	blt.n	8018196 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8018172:	88b9      	ldrh	r1, [r7, #4]
 8018174:	440d      	add	r5, r1
 8018176:	88b1      	ldrh	r1, [r6, #4]
 8018178:	440c      	add	r4, r1
 801817a:	b22d      	sxth	r5, r5
 801817c:	b224      	sxth	r4, r4
 801817e:	42a5      	cmp	r5, r4
 8018180:	dc09      	bgt.n	8018196 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8018182:	88f8      	ldrh	r0, [r7, #6]
 8018184:	4410      	add	r0, r2
 8018186:	88f2      	ldrh	r2, [r6, #6]
 8018188:	4413      	add	r3, r2
 801818a:	b200      	sxth	r0, r0
 801818c:	b21b      	sxth	r3, r3
 801818e:	4298      	cmp	r0, r3
 8018190:	bfcc      	ite	gt
 8018192:	2000      	movgt	r0, #0
 8018194:	2001      	movle	r0, #1
 8018196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018198 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8018198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801819a:	4604      	mov	r4, r0
 801819c:	4608      	mov	r0, r1
 801819e:	460d      	mov	r5, r1
 80181a0:	f7fb fb61 	bl	8013866 <_ZNK8touchgfx4Rect7isEmptyEv>
 80181a4:	b978      	cbnz	r0, 80181c6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80181a6:	4620      	mov	r0, r4
 80181a8:	f7fb fb5d 	bl	8013866 <_ZNK8touchgfx4Rect7isEmptyEv>
 80181ac:	f9b5 6000 	ldrsh.w	r6, [r5]
 80181b0:	b150      	cbz	r0, 80181c8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80181b2:	8026      	strh	r6, [r4, #0]
 80181b4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80181b8:	8063      	strh	r3, [r4, #2]
 80181ba:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80181be:	80a3      	strh	r3, [r4, #4]
 80181c0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80181c4:	80e3      	strh	r3, [r4, #6]
 80181c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181c8:	f9b4 1000 	ldrsh.w	r1, [r4]
 80181cc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80181d0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80181d4:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80181d8:	88ed      	ldrh	r5, [r5, #6]
 80181da:	42b1      	cmp	r1, r6
 80181dc:	460f      	mov	r7, r1
 80181de:	bfa8      	it	ge
 80181e0:	4637      	movge	r7, r6
 80181e2:	4293      	cmp	r3, r2
 80181e4:	4618      	mov	r0, r3
 80181e6:	4466      	add	r6, ip
 80181e8:	bfa8      	it	ge
 80181ea:	4610      	movge	r0, r2
 80181ec:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80181f0:	8027      	strh	r7, [r4, #0]
 80181f2:	442a      	add	r2, r5
 80181f4:	88e5      	ldrh	r5, [r4, #6]
 80181f6:	8060      	strh	r0, [r4, #2]
 80181f8:	4461      	add	r1, ip
 80181fa:	442b      	add	r3, r5
 80181fc:	b236      	sxth	r6, r6
 80181fe:	b209      	sxth	r1, r1
 8018200:	b212      	sxth	r2, r2
 8018202:	b21b      	sxth	r3, r3
 8018204:	428e      	cmp	r6, r1
 8018206:	bfac      	ite	ge
 8018208:	ebc7 0106 	rsbge	r1, r7, r6
 801820c:	ebc7 0101 	rsblt	r1, r7, r1
 8018210:	429a      	cmp	r2, r3
 8018212:	bfac      	ite	ge
 8018214:	ebc0 0202 	rsbge	r2, r0, r2
 8018218:	ebc0 0203 	rsblt	r2, r0, r3
 801821c:	80a1      	strh	r1, [r4, #4]
 801821e:	80e2      	strh	r2, [r4, #6]
 8018220:	e7d1      	b.n	80181c6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08018224 <_ZN8touchgfx11Application11getInstanceEv>:
 8018224:	4b01      	ldr	r3, [pc, #4]	; (801822c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8018226:	6818      	ldr	r0, [r3, #0]
 8018228:	4770      	bx	lr
 801822a:	bf00      	nop
 801822c:	2000c490 	.word	0x2000c490

08018230 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 8018230:	b570      	push	{r4, r5, r6, lr}
 8018232:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8018236:	1d04      	adds	r4, r0, #4
 8018238:	2200      	movs	r2, #0
 801823a:	b295      	uxth	r5, r2
 801823c:	429d      	cmp	r5, r3
 801823e:	d20f      	bcs.n	8018260 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x30>
 8018240:	f854 6b04 	ldr.w	r6, [r4], #4
 8018244:	428e      	cmp	r6, r1
 8018246:	4615      	mov	r5, r2
 8018248:	f102 0201 	add.w	r2, r2, #1
 801824c:	d1f5      	bne.n	801823a <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801824e:	4428      	add	r0, r5
 8018250:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 8018254:	2bff      	cmp	r3, #255	; 0xff
 8018256:	d002      	beq.n	801825e <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 8018258:	3301      	adds	r3, #1
 801825a:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801825e:	bd70      	pop	{r4, r5, r6, pc}
 8018260:	18c2      	adds	r2, r0, r3
 8018262:	2b20      	cmp	r3, #32
 8018264:	f04f 0401 	mov.w	r4, #1
 8018268:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801826c:	bf1f      	itttt	ne
 801826e:	191a      	addne	r2, r3, r4
 8018270:	f8a0 2084 	strhne.w	r2, [r0, #132]	; 0x84
 8018274:	eb00 0083 	addne.w	r0, r0, r3, lsl #2
 8018278:	6041      	strne	r1, [r0, #4]
 801827a:	e7f0      	b.n	801825e <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>

0801827c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801827c:	b570      	push	{r4, r5, r6, lr}
 801827e:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 8018282:	1d04      	adds	r4, r0, #4
 8018284:	2300      	movs	r3, #0
 8018286:	b29a      	uxth	r2, r3
 8018288:	4296      	cmp	r6, r2
 801828a:	d90a      	bls.n	80182a2 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801828c:	f854 2b04 	ldr.w	r2, [r4], #4
 8018290:	428a      	cmp	r2, r1
 8018292:	d107      	bne.n	80182a4 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8018294:	18c5      	adds	r5, r0, r3
 8018296:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801829a:	b11a      	cbz	r2, 80182a4 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801829c:	3a01      	subs	r2, #1
 801829e:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 80182a2:	bd70      	pop	{r4, r5, r6, pc}
 80182a4:	3301      	adds	r3, #1
 80182a6:	e7ee      	b.n	8018286 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

080182a8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 80182a8:	2300      	movs	r3, #0
 80182aa:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80182ae:	f100 0288 	add.w	r2, r0, #136	; 0x88
 80182b2:	30a8      	adds	r0, #168	; 0xa8
 80182b4:	f802 3b01 	strb.w	r3, [r2], #1
 80182b8:	4282      	cmp	r2, r0
 80182ba:	d1fb      	bne.n	80182b4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 80182bc:	4770      	bx	lr

080182be <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80182be:	4603      	mov	r3, r0
 80182c0:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80182c4:	2200      	movs	r2, #0
 80182c6:	801a      	strh	r2, [r3, #0]
 80182c8:	805a      	strh	r2, [r3, #2]
 80182ca:	809a      	strh	r2, [r3, #4]
 80182cc:	80da      	strh	r2, [r3, #6]
 80182ce:	3308      	adds	r3, #8
 80182d0:	428b      	cmp	r3, r1
 80182d2:	d1f8      	bne.n	80182c6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80182d4:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80182d8:	4770      	bx	lr
	...

080182dc <_ZN8touchgfx11ApplicationC1Ev>:
 80182dc:	b570      	push	{r4, r5, r6, lr}
 80182de:	4b19      	ldr	r3, [pc, #100]	; (8018344 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 80182e0:	6003      	str	r3, [r0, #0]
 80182e2:	2500      	movs	r5, #0
 80182e4:	4604      	mov	r4, r0
 80182e6:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 80182ea:	30a8      	adds	r0, #168	; 0xa8
 80182ec:	f7ff ffe7 	bl	80182be <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80182f0:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80182f4:	f7ff ffe3 	bl	80182be <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80182f8:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 80182fc:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8018300:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8018304:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8018308:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801830c:	490e      	ldr	r1, [pc, #56]	; (8018348 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801830e:	480f      	ldr	r0, [pc, #60]	; (801834c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8018310:	4e0f      	ldr	r6, [pc, #60]	; (8018350 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8018312:	f00e ff27 	bl	8027164 <CRC_Lock>
 8018316:	4b0f      	ldr	r3, [pc, #60]	; (8018354 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8018318:	b158      	cbz	r0, 8018332 <_ZN8touchgfx11ApplicationC1Ev+0x56>
 801831a:	801d      	strh	r5, [r3, #0]
 801831c:	4a0e      	ldr	r2, [pc, #56]	; (8018358 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801831e:	2300      	movs	r3, #0
 8018320:	6013      	str	r3, [r2, #0]
 8018322:	4a0e      	ldr	r2, [pc, #56]	; (801835c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8018324:	6033      	str	r3, [r6, #0]
 8018326:	4620      	mov	r0, r4
 8018328:	6013      	str	r3, [r2, #0]
 801832a:	f7ff ffbd 	bl	80182a8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801832e:	4620      	mov	r0, r4
 8018330:	bd70      	pop	{r4, r5, r6, pc}
 8018332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018336:	2002      	movs	r0, #2
 8018338:	801a      	strh	r2, [r3, #0]
 801833a:	6030      	str	r0, [r6, #0]
 801833c:	f001 fae0 	bl	8019900 <_ZN8touchgfx6Screen4drawEv>
 8018340:	e7ec      	b.n	801831c <_ZN8touchgfx11ApplicationC1Ev+0x40>
 8018342:	bf00      	nop
 8018344:	0802ec5c 	.word	0x0802ec5c
 8018348:	b5e8b5cd 	.word	0xb5e8b5cd
 801834c:	f407a5c2 	.word	0xf407a5c2
 8018350:	2000c480 	.word	0x2000c480
 8018354:	2000001c 	.word	0x2000001c
 8018358:	2000c490 	.word	0x2000c490
 801835c:	2000c484 	.word	0x2000c484

08018360 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8018360:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8018364:	3b01      	subs	r3, #1
 8018366:	b29b      	uxth	r3, r3
 8018368:	428b      	cmp	r3, r1
 801836a:	b510      	push	{r4, lr}
 801836c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8018370:	d908      	bls.n	8018384 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8018372:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8018376:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801837a:	681a      	ldr	r2, [r3, #0]
 801837c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8018380:	685a      	ldr	r2, [r3, #4]
 8018382:	6062      	str	r2, [r4, #4]
 8018384:	bd10      	pop	{r4, pc}
	...

08018388 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8018388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801838c:	4b94      	ldr	r3, [pc, #592]	; (80185e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 801838e:	b08f      	sub	sp, #60	; 0x3c
 8018390:	ac0a      	add	r4, sp, #40	; 0x28
 8018392:	e884 0006 	stmia.w	r4, {r1, r2}
 8018396:	f9b3 2000 	ldrsh.w	r2, [r3]
 801839a:	4b92      	ldr	r3, [pc, #584]	; (80185e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 801839c:	4683      	mov	fp, r0
 801839e:	f9b3 1000 	ldrsh.w	r1, [r3]
 80183a2:	4620      	mov	r0, r4
 80183a4:	f7ff fe82 	bl	80180ac <_ZN8touchgfx4Rect10restrictToEss>
 80183a8:	4620      	mov	r0, r4
 80183aa:	f7fb fa5c 	bl	8013866 <_ZNK8touchgfx4Rect7isEmptyEv>
 80183ae:	2800      	cmp	r0, #0
 80183b0:	d16a      	bne.n	8018488 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80183b2:	9403      	str	r4, [sp, #12]
 80183b4:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 80183b8:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80183bc:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 80183c0:	2400      	movs	r4, #0
 80183c2:	9301      	str	r3, [sp, #4]
 80183c4:	36a0      	adds	r6, #160	; 0xa0
 80183c6:	42a5      	cmp	r5, r4
 80183c8:	d00d      	beq.n	80183e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 80183ca:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 80183ce:	9803      	ldr	r0, [sp, #12]
 80183d0:	f7ff febc 	bl	801814c <_ZNK8touchgfx4Rect8includesERKS0_>
 80183d4:	b128      	cbz	r0, 80183e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 80183d6:	1e69      	subs	r1, r5, #1
 80183d8:	1b09      	subs	r1, r1, r4
 80183da:	b289      	uxth	r1, r1
 80183dc:	9801      	ldr	r0, [sp, #4]
 80183de:	f7ff ffbf 	bl	8018360 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80183e2:	3401      	adds	r4, #1
 80183e4:	e7ef      	b.n	80183c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 80183e6:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 80183ea:	9704      	str	r7, [sp, #16]
 80183ec:	1e7b      	subs	r3, r7, #1
 80183ee:	9302      	str	r3, [sp, #8]
 80183f0:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 80183f4:	2400      	movs	r4, #0
 80183f6:	4655      	mov	r5, sl
 80183f8:	9705      	str	r7, [sp, #20]
 80183fa:	4626      	mov	r6, r4
 80183fc:	9b05      	ldr	r3, [sp, #20]
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d078      	beq.n	80184f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 8018402:	9903      	ldr	r1, [sp, #12]
 8018404:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8018408:	f7ff fe2e 	bl	8018068 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801840c:	b360      	cbz	r0, 8018468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801840e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8018412:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8018416:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 801841a:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801841e:	45e6      	cmp	lr, ip
 8018420:	db35      	blt.n	801848e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8018422:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8018426:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801842a:	4472      	add	r2, lr
 801842c:	4463      	add	r3, ip
 801842e:	b212      	sxth	r2, r2
 8018430:	b21b      	sxth	r3, r3
 8018432:	429a      	cmp	r2, r3
 8018434:	dc2b      	bgt.n	801848e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8018436:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801843a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801843e:	fa1f f288 	uxth.w	r2, r8
 8018442:	4413      	add	r3, r2
 8018444:	b29b      	uxth	r3, r3
 8018446:	45c1      	cmp	r9, r8
 8018448:	fa0f fe83 	sxth.w	lr, r3
 801844c:	fa1f fc89 	uxth.w	ip, r9
 8018450:	db0f      	blt.n	8018472 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8018452:	eba3 030c 	sub.w	r3, r3, ip
 8018456:	1ac9      	subs	r1, r1, r3
 8018458:	b209      	sxth	r1, r1
 801845a:	2900      	cmp	r1, #0
 801845c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8018460:	dd12      	ble.n	8018488 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8018462:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8018466:	4604      	mov	r4, r0
 8018468:	9b05      	ldr	r3, [sp, #20]
 801846a:	3b01      	subs	r3, #1
 801846c:	9305      	str	r3, [sp, #20]
 801846e:	3d08      	subs	r5, #8
 8018470:	e7c4      	b.n	80183fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 8018472:	4461      	add	r1, ip
 8018474:	b209      	sxth	r1, r1
 8018476:	4571      	cmp	r1, lr
 8018478:	dc3a      	bgt.n	80184f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801847a:	eba2 020c 	sub.w	r2, r2, ip
 801847e:	b212      	sxth	r2, r2
 8018480:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8018484:	2a00      	cmp	r2, #0
 8018486:	dcee      	bgt.n	8018466 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8018488:	b00f      	add	sp, #60	; 0x3c
 801848a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801848e:	45c1      	cmp	r9, r8
 8018490:	db2e      	blt.n	80184f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8018492:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8018496:	4499      	add	r9, r3
 8018498:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801849c:	4498      	add	r8, r3
 801849e:	fa0f f989 	sxth.w	r9, r9
 80184a2:	fa0f f888 	sxth.w	r8, r8
 80184a6:	45c1      	cmp	r9, r8
 80184a8:	dc22      	bgt.n	80184f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80184aa:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80184ae:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80184b2:	fa1f f28c 	uxth.w	r2, ip
 80184b6:	4413      	add	r3, r2
 80184b8:	b29b      	uxth	r3, r3
 80184ba:	45e6      	cmp	lr, ip
 80184bc:	fa1f f88e 	uxth.w	r8, lr
 80184c0:	fa0f f983 	sxth.w	r9, r3
 80184c4:	db0a      	blt.n	80184dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 80184c6:	eba3 0308 	sub.w	r3, r3, r8
 80184ca:	1ac9      	subs	r1, r1, r3
 80184cc:	b209      	sxth	r1, r1
 80184ce:	2900      	cmp	r1, #0
 80184d0:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80184d4:	ddd8      	ble.n	8018488 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80184d6:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 80184da:	e7c4      	b.n	8018466 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80184dc:	4441      	add	r1, r8
 80184de:	b209      	sxth	r1, r1
 80184e0:	4549      	cmp	r1, r9
 80184e2:	dc05      	bgt.n	80184f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80184e4:	eba2 0208 	sub.w	r2, r2, r8
 80184e8:	b212      	sxth	r2, r2
 80184ea:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80184ee:	e7c9      	b.n	8018484 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80184f0:	4606      	mov	r6, r0
 80184f2:	e7b9      	b.n	8018468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80184f4:	2c00      	cmp	r4, #0
 80184f6:	f47f af7d 	bne.w	80183f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 80184fa:	2e00      	cmp	r6, #0
 80184fc:	f000 81e1 	beq.w	80188c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8018500:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8018504:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8018508:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801850c:	b2b9      	uxth	r1, r7
 801850e:	9105      	str	r1, [sp, #20]
 8018510:	9805      	ldr	r0, [sp, #20]
 8018512:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8018516:	4401      	add	r1, r0
 8018518:	b2b3      	uxth	r3, r6
 801851a:	b289      	uxth	r1, r1
 801851c:	441a      	add	r2, r3
 801851e:	9106      	str	r1, [sp, #24]
 8018520:	b292      	uxth	r2, r2
 8018522:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 8018526:	fa0f f882 	sxth.w	r8, r2
 801852a:	4655      	mov	r5, sl
 801852c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8018530:	9b04      	ldr	r3, [sp, #16]
 8018532:	2b00      	cmp	r3, #0
 8018534:	d058      	beq.n	80185e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 8018536:	9903      	ldr	r1, [sp, #12]
 8018538:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801853c:	f7ff fd94 	bl	8018068 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018540:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018544:	b1d8      	cbz	r0, 801857e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8018546:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801854a:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801854e:	4576      	cmp	r6, lr
 8018550:	dc26      	bgt.n	80185a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8018552:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8018556:	44f4      	add	ip, lr
 8018558:	fa0f fc8c 	sxth.w	ip, ip
 801855c:	45e0      	cmp	r8, ip
 801855e:	db1f      	blt.n	80185a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8018560:	428f      	cmp	r7, r1
 8018562:	fa1f fc81 	uxth.w	ip, r1
 8018566:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801856a:	dc0f      	bgt.n	801858c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 801856c:	9806      	ldr	r0, [sp, #24]
 801856e:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8018572:	eba0 0c0c 	sub.w	ip, r0, ip
 8018576:	eba1 010c 	sub.w	r1, r1, ip
 801857a:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801857e:	4620      	mov	r0, r4
 8018580:	9904      	ldr	r1, [sp, #16]
 8018582:	3901      	subs	r1, #1
 8018584:	9104      	str	r1, [sp, #16]
 8018586:	3d08      	subs	r5, #8
 8018588:	4604      	mov	r4, r0
 801858a:	e7cf      	b.n	801852c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 801858c:	4461      	add	r1, ip
 801858e:	b209      	sxth	r1, r1
 8018590:	4549      	cmp	r1, r9
 8018592:	dcf5      	bgt.n	8018580 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8018594:	9905      	ldr	r1, [sp, #20]
 8018596:	eba1 0c0c 	sub.w	ip, r1, ip
 801859a:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801859e:	e7ee      	b.n	801857e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80185a0:	428f      	cmp	r7, r1
 80185a2:	dced      	bgt.n	8018580 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80185a4:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 80185a8:	4461      	add	r1, ip
 80185aa:	b209      	sxth	r1, r1
 80185ac:	4589      	cmp	r9, r1
 80185ae:	dbe7      	blt.n	8018580 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80185b0:	4576      	cmp	r6, lr
 80185b2:	fa1f fc8e 	uxth.w	ip, lr
 80185b6:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 80185ba:	dc08      	bgt.n	80185ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 80185bc:	eba2 0c0c 	sub.w	ip, r2, ip
 80185c0:	eba1 010c 	sub.w	r1, r1, ip
 80185c4:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 80185c8:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 80185cc:	e7d7      	b.n	801857e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80185ce:	4461      	add	r1, ip
 80185d0:	b209      	sxth	r1, r1
 80185d2:	4588      	cmp	r8, r1
 80185d4:	dbd4      	blt.n	8018580 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80185d6:	eba3 0c0c 	sub.w	ip, r3, ip
 80185da:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 80185de:	e7ce      	b.n	801857e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80185e0:	2000c432 	.word	0x2000c432
 80185e4:	2000c430 	.word	0x2000c430
 80185e8:	2c00      	cmp	r4, #0
 80185ea:	f000 816a 	beq.w	80188c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 80185ee:	9b02      	ldr	r3, [sp, #8]
 80185f0:	3301      	adds	r3, #1
 80185f2:	f000 8166 	beq.w	80188c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 80185f6:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 80185fa:	4621      	mov	r1, r4
 80185fc:	9803      	ldr	r0, [sp, #12]
 80185fe:	f7ff fda5 	bl	801814c <_ZNK8touchgfx4Rect8includesERKS0_>
 8018602:	b120      	cbz	r0, 801860e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 8018604:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8018608:	9801      	ldr	r0, [sp, #4]
 801860a:	f7ff fea9 	bl	8018360 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801860e:	9903      	ldr	r1, [sp, #12]
 8018610:	4620      	mov	r0, r4
 8018612:	f7ff fd29 	bl	8018068 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018616:	2800      	cmp	r0, #0
 8018618:	f000 809b 	beq.w	8018752 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801861c:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 8018620:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 8018624:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8018628:	9309      	str	r3, [sp, #36]	; 0x24
 801862a:	b281      	uxth	r1, r0
 801862c:	eb01 0c03 	add.w	ip, r1, r3
 8018630:	fa1f f98c 	uxth.w	r9, ip
 8018634:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8018638:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801863c:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 8018640:	b2ab      	uxth	r3, r5
 8018642:	eb03 040c 	add.w	r4, r3, ip
 8018646:	b2a4      	uxth	r4, r4
 8018648:	9405      	str	r4, [sp, #20]
 801864a:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801864e:	9404      	str	r4, [sp, #16]
 8018650:	4285      	cmp	r5, r0
 8018652:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 8018656:	f340 809a 	ble.w	801878e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 801865a:	1a5b      	subs	r3, r3, r1
 801865c:	b29b      	uxth	r3, r3
 801865e:	4596      	cmp	lr, r2
 8018660:	fa0f f589 	sxth.w	r5, r9
 8018664:	b21e      	sxth	r6, r3
 8018666:	dd2e      	ble.n	80186c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 8018668:	9f02      	ldr	r7, [sp, #8]
 801866a:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801866e:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8018672:	9f04      	ldr	r7, [sp, #16]
 8018674:	1b7f      	subs	r7, r7, r5
 8018676:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 801867a:	fa1f fe8e 	uxth.w	lr, lr
 801867e:	b292      	uxth	r2, r2
 8018680:	ebae 0102 	sub.w	r1, lr, r2
 8018684:	4486      	add	lr, r0
 8018686:	442a      	add	r2, r5
 8018688:	b289      	uxth	r1, r1
 801868a:	fa0f fe8e 	sxth.w	lr, lr
 801868e:	b212      	sxth	r2, r2
 8018690:	b20c      	sxth	r4, r1
 8018692:	ebae 0202 	sub.w	r2, lr, r2
 8018696:	4367      	muls	r7, r4
 8018698:	4372      	muls	r2, r6
 801869a:	4297      	cmp	r7, r2
 801869c:	db09      	blt.n	80186b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 801869e:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 80186a2:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 80186a6:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80186aa:	449c      	add	ip, r3
 80186ac:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 80186b0:	e680      	b.n	80183b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80186b2:	4401      	add	r1, r0
 80186b4:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 80186b8:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 80186bc:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80186c0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80186c4:	e676      	b.n	80183b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80186c6:	9f04      	ldr	r7, [sp, #16]
 80186c8:	42bd      	cmp	r5, r7
 80186ca:	da27      	bge.n	801871c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 80186cc:	9902      	ldr	r1, [sp, #8]
 80186ce:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 80186d2:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 80186d6:	eb04 010e 	add.w	r1, r4, lr
 80186da:	fa1f f881 	uxth.w	r8, r1
 80186de:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 80186e2:	4411      	add	r1, r2
 80186e4:	eba1 0108 	sub.w	r1, r1, r8
 80186e8:	b289      	uxth	r1, r1
 80186ea:	fa0f f988 	sxth.w	r9, r8
 80186ee:	eba2 020e 	sub.w	r2, r2, lr
 80186f2:	fa0f f881 	sxth.w	r8, r1
 80186f6:	1b7f      	subs	r7, r7, r5
 80186f8:	4372      	muls	r2, r6
 80186fa:	fb08 f707 	mul.w	r7, r8, r7
 80186fe:	42ba      	cmp	r2, r7
 8018700:	dc06      	bgt.n	8018710 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8018702:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 8018706:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 801870a:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 801870e:	e7ca      	b.n	80186a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8018710:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 8018714:	4421      	add	r1, r4
 8018716:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801871a:	e64b      	b.n	80183b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801871c:	9d05      	ldr	r5, [sp, #20]
 801871e:	eba9 0505 	sub.w	r5, r9, r5
 8018722:	b2ad      	uxth	r5, r5
 8018724:	2c06      	cmp	r4, #6
 8018726:	fa0f fe85 	sxth.w	lr, r5
 801872a:	d818      	bhi.n	801875e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 801872c:	9b04      	ldr	r3, [sp, #16]
 801872e:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8018732:	1c63      	adds	r3, r4, #1
 8018734:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 8018738:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 801873c:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8018740:	9b01      	ldr	r3, [sp, #4]
 8018742:	9d01      	ldr	r5, [sp, #4]
 8018744:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018748:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 801874c:	805a      	strh	r2, [r3, #2]
 801874e:	809e      	strh	r6, [r3, #4]
 8018750:	80d9      	strh	r1, [r3, #6]
 8018752:	9b02      	ldr	r3, [sp, #8]
 8018754:	3b01      	subs	r3, #1
 8018756:	9302      	str	r3, [sp, #8]
 8018758:	f1aa 0a08 	sub.w	sl, sl, #8
 801875c:	e747      	b.n	80185ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 801875e:	9a02      	ldr	r2, [sp, #8]
 8018760:	45b6      	cmp	lr, r6
 8018762:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8018766:	db0d      	blt.n	8018784 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 8018768:	449c      	add	ip, r3
 801876a:	fa1f fc8c 	uxth.w	ip, ip
 801876e:	445a      	add	r2, fp
 8018770:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8018774:	448c      	add	ip, r1
 8018776:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 801877a:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 801877e:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 8018782:	e617      	b.n	80183b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018784:	445a      	add	r2, fp
 8018786:	44ac      	add	ip, r5
 8018788:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 801878c:	e78e      	b.n	80186ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801878e:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8018792:	fa1f f18e 	uxth.w	r1, lr
 8018796:	eb01 0806 	add.w	r8, r1, r6
 801879a:	b293      	uxth	r3, r2
 801879c:	fa1f f888 	uxth.w	r8, r8
 80187a0:	9306      	str	r3, [sp, #24]
 80187a2:	fa0f f388 	sxth.w	r3, r8
 80187a6:	9307      	str	r3, [sp, #28]
 80187a8:	9f06      	ldr	r7, [sp, #24]
 80187aa:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 80187ae:	443b      	add	r3, r7
 80187b0:	b29b      	uxth	r3, r3
 80187b2:	4596      	cmp	lr, r2
 80187b4:	9308      	str	r3, [sp, #32]
 80187b6:	da25      	bge.n	8018804 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 80187b8:	9905      	ldr	r1, [sp, #20]
 80187ba:	eba3 0308 	sub.w	r3, r3, r8
 80187be:	eba9 0401 	sub.w	r4, r9, r1
 80187c2:	b2a4      	uxth	r4, r4
 80187c4:	b29b      	uxth	r3, r3
 80187c6:	fa0f f984 	sxth.w	r9, r4
 80187ca:	b219      	sxth	r1, r3
 80187cc:	eba2 020e 	sub.w	r2, r2, lr
 80187d0:	1b40      	subs	r0, r0, r5
 80187d2:	fb09 f202 	mul.w	r2, r9, r2
 80187d6:	4348      	muls	r0, r1
 80187d8:	4282      	cmp	r2, r0
 80187da:	9a02      	ldr	r2, [sp, #8]
 80187dc:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80187e0:	445a      	add	r2, fp
 80187e2:	dc06      	bgt.n	80187f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 80187e4:	9b07      	ldr	r3, [sp, #28]
 80187e6:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 80187ea:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 80187ee:	44a4      	add	ip, r4
 80187f0:	e75c      	b.n	80186ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 80187f2:	9904      	ldr	r1, [sp, #16]
 80187f4:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 80187f8:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 80187fc:	4433      	add	r3, r6
 80187fe:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8018802:	e5d7      	b.n	80183b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018804:	9f06      	ldr	r7, [sp, #24]
 8018806:	9b04      	ldr	r3, [sp, #16]
 8018808:	1bc9      	subs	r1, r1, r7
 801880a:	fa0f f789 	sxth.w	r7, r9
 801880e:	b289      	uxth	r1, r1
 8018810:	429f      	cmp	r7, r3
 8018812:	fa0f fe81 	sxth.w	lr, r1
 8018816:	dd22      	ble.n	801885e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 8018818:	9a05      	ldr	r2, [sp, #20]
 801881a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801881e:	1b40      	subs	r0, r0, r5
 8018820:	eba9 0202 	sub.w	r2, r9, r2
 8018824:	9d07      	ldr	r5, [sp, #28]
 8018826:	b292      	uxth	r2, r2
 8018828:	eba5 0a03 	sub.w	sl, r5, r3
 801882c:	b214      	sxth	r4, r2
 801882e:	9b02      	ldr	r3, [sp, #8]
 8018830:	fb0e f000 	mul.w	r0, lr, r0
 8018834:	fb04 fa0a 	mul.w	sl, r4, sl
 8018838:	00db      	lsls	r3, r3, #3
 801883a:	4550      	cmp	r0, sl
 801883c:	445b      	add	r3, fp
 801883e:	db03      	blt.n	8018848 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 8018840:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 8018844:	4494      	add	ip, r2
 8018846:	e731      	b.n	80186ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8018848:	9a04      	ldr	r2, [sp, #16]
 801884a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801884e:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 8018852:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8018856:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801885a:	4431      	add	r1, r6
 801885c:	e75b      	b.n	8018716 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 801885e:	9b08      	ldr	r3, [sp, #32]
 8018860:	eba3 0308 	sub.w	r3, r3, r8
 8018864:	b29b      	uxth	r3, r3
 8018866:	2c06      	cmp	r4, #6
 8018868:	b21d      	sxth	r5, r3
 801886a:	d813      	bhi.n	8018894 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 801886c:	9b07      	ldr	r3, [sp, #28]
 801886e:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8018872:	1c63      	adds	r3, r4, #1
 8018874:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 8018878:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801887c:	9b01      	ldr	r3, [sp, #4]
 801887e:	9901      	ldr	r1, [sp, #4]
 8018880:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018884:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 8018888:	805a      	strh	r2, [r3, #2]
 801888a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801888c:	809a      	strh	r2, [r3, #4]
 801888e:	f8a3 e006 	strh.w	lr, [r3, #6]
 8018892:	e75e      	b.n	8018752 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8018894:	9802      	ldr	r0, [sp, #8]
 8018896:	4575      	cmp	r5, lr
 8018898:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801889c:	db0d      	blt.n	80188ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 801889e:	4431      	add	r1, r6
 80188a0:	9b06      	ldr	r3, [sp, #24]
 80188a2:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80188a6:	b289      	uxth	r1, r1
 80188a8:	4458      	add	r0, fp
 80188aa:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80188ae:	4419      	add	r1, r3
 80188b0:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 80188b4:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 80188b8:	e57c      	b.n	80183b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80188ba:	4458      	add	r0, fp
 80188bc:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 80188c0:	e79c      	b.n	80187fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 80188c2:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 80188c6:	2e07      	cmp	r6, #7
 80188c8:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 80188cc:	d812      	bhi.n	80188f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 80188ce:	1c75      	adds	r5, r6, #1
 80188d0:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 80188d4:	9d01      	ldr	r5, [sp, #4]
 80188d6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80188da:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80188de:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80188e2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80188e6:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80188ea:	442c      	add	r4, r5
 80188ec:	8061      	strh	r1, [r4, #2]
 80188ee:	80a2      	strh	r2, [r4, #4]
 80188f0:	80e3      	strh	r3, [r4, #6]
 80188f2:	e5c9      	b.n	8018488 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80188f4:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80188f8:	3e01      	subs	r6, #1
 80188fa:	445c      	add	r4, fp
 80188fc:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8018900:	f04f 37ff 	mov.w	r7, #4294967295
 8018904:	2500      	movs	r5, #0
 8018906:	9305      	str	r3, [sp, #20]
 8018908:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 801890c:	9302      	str	r3, [sp, #8]
 801890e:	1e72      	subs	r2, r6, #1
 8018910:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 8018914:	9304      	str	r3, [sp, #16]
 8018916:	4691      	mov	r9, r2
 8018918:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 801891c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8018920:	bf14      	ite	ne
 8018922:	9905      	ldrne	r1, [sp, #20]
 8018924:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8018928:	6818      	ldr	r0, [r3, #0]
 801892a:	9207      	str	r2, [sp, #28]
 801892c:	bf18      	it	ne
 801892e:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8018932:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8018936:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801893a:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801893e:	9306      	str	r3, [sp, #24]
 8018940:	fb18 f801 	smulbb	r8, r8, r1
 8018944:	6859      	ldr	r1, [r3, #4]
 8018946:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801894a:	4671      	mov	r1, lr
 801894c:	a80c      	add	r0, sp, #48	; 0x30
 801894e:	f7ff fc23 	bl	8018198 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018952:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8018956:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801895a:	9b04      	ldr	r3, [sp, #16]
 801895c:	9a02      	ldr	r2, [sp, #8]
 801895e:	fb10 f001 	smulbb	r0, r0, r1
 8018962:	fb02 8803 	mla	r8, r2, r3, r8
 8018966:	eba0 0108 	sub.w	r1, r0, r8
 801896a:	f04f 0c08 	mov.w	ip, #8
 801896e:	fb90 f0fc 	sdiv	r0, r0, ip
 8018972:	4288      	cmp	r0, r1
 8018974:	dc20      	bgt.n	80189b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x630>
 8018976:	4551      	cmp	r1, sl
 8018978:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801897c:	da03      	bge.n	8018986 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801897e:	b1d9      	cbz	r1, 80189b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x630>
 8018980:	468a      	mov	sl, r1
 8018982:	464f      	mov	r7, r9
 8018984:	4635      	mov	r5, r6
 8018986:	f109 39ff 	add.w	r9, r9, #4294967295
 801898a:	f119 0f02 	cmn.w	r9, #2
 801898e:	d1c5      	bne.n	801891c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8018990:	4616      	mov	r6, r2
 8018992:	3201      	adds	r2, #1
 8018994:	f1a4 0408 	sub.w	r4, r4, #8
 8018998:	d1b6      	bne.n	8018908 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 801899a:	9b01      	ldr	r3, [sp, #4]
 801899c:	b2ac      	uxth	r4, r5
 801899e:	00ed      	lsls	r5, r5, #3
 80189a0:	1958      	adds	r0, r3, r5
 80189a2:	1c7b      	adds	r3, r7, #1
 80189a4:	d10b      	bne.n	80189be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x636>
 80189a6:	4601      	mov	r1, r0
 80189a8:	9803      	ldr	r0, [sp, #12]
 80189aa:	f7ff fbf5 	bl	8018198 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80189ae:	4621      	mov	r1, r4
 80189b0:	9801      	ldr	r0, [sp, #4]
 80189b2:	f7ff fcd5 	bl	8018360 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80189b6:	e4fd      	b.n	80183b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80189b8:	464f      	mov	r7, r9
 80189ba:	4635      	mov	r5, r6
 80189bc:	e7ed      	b.n	801899a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x612>
 80189be:	9b01      	ldr	r3, [sp, #4]
 80189c0:	00ff      	lsls	r7, r7, #3
 80189c2:	19d9      	adds	r1, r3, r7
 80189c4:	f7ff fbe8 	bl	8018198 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80189c8:	9b03      	ldr	r3, [sp, #12]
 80189ca:	cb03      	ldmia	r3!, {r0, r1}
 80189cc:	445f      	add	r7, fp
 80189ce:	445d      	add	r5, fp
 80189d0:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 80189d4:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 80189d8:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 80189dc:	9b03      	ldr	r3, [sp, #12]
 80189de:	6869      	ldr	r1, [r5, #4]
 80189e0:	c303      	stmia	r3!, {r0, r1}
 80189e2:	e7e4      	b.n	80189ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>

080189e4 <_ZN8touchgfx11Application10invalidateEv>:
 80189e4:	4b09      	ldr	r3, [pc, #36]	; (8018a0c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80189e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80189ea:	4b09      	ldr	r3, [pc, #36]	; (8018a10 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80189ec:	b082      	sub	sp, #8
 80189ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80189f2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80189f6:	2100      	movs	r1, #0
 80189f8:	9100      	str	r1, [sp, #0]
 80189fa:	f8ad 2004 	strh.w	r2, [sp, #4]
 80189fe:	ab02      	add	r3, sp, #8
 8018a00:	e913 0006 	ldmdb	r3, {r1, r2}
 8018a04:	b002      	add	sp, #8
 8018a06:	f7ff bcbf 	b.w	8018388 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018a0a:	bf00      	nop
 8018a0c:	2000c430 	.word	0x2000c430
 8018a10:	2000c432 	.word	0x2000c432

08018a14 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8018a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a18:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8018a1c:	b09b      	sub	sp, #108	; 0x6c
 8018a1e:	4604      	mov	r4, r0
 8018a20:	4630      	mov	r0, r6
 8018a22:	f7fa ff20 	bl	8013866 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018a26:	4605      	mov	r5, r0
 8018a28:	b940      	cbnz	r0, 8018a3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8018a2a:	e896 0006 	ldmia.w	r6, {r1, r2}
 8018a2e:	4620      	mov	r0, r4
 8018a30:	f7ff fcaa 	bl	8018388 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018a34:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8018a38:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8018a3c:	4bc9      	ldr	r3, [pc, #804]	; (8018d64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d03e      	beq.n	8018ac2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8018a44:	4dc8      	ldr	r5, [pc, #800]	; (8018d68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8018a46:	4628      	mov	r0, r5
 8018a48:	f7fa ff0d 	bl	8013866 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018a4c:	4606      	mov	r6, r0
 8018a4e:	2800      	cmp	r0, #0
 8018a50:	d137      	bne.n	8018ac2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8018a52:	4628      	mov	r0, r5
 8018a54:	f7ff f9d2 	bl	8017dfc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018a58:	6829      	ldr	r1, [r5, #0]
 8018a5a:	686a      	ldr	r2, [r5, #4]
 8018a5c:	4620      	mov	r0, r4
 8018a5e:	f7ff fc93 	bl	8018388 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018a62:	802e      	strh	r6, [r5, #0]
 8018a64:	806e      	strh	r6, [r5, #2]
 8018a66:	80ae      	strh	r6, [r5, #4]
 8018a68:	80ee      	strh	r6, [r5, #6]
 8018a6a:	ae09      	add	r6, sp, #36	; 0x24
 8018a6c:	4630      	mov	r0, r6
 8018a6e:	f7ff fc26 	bl	80182be <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018a72:	4abe      	ldr	r2, [pc, #760]	; (8018d6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8018a74:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8018a78:	8815      	ldrh	r5, [r2, #0]
 8018a7a:	9202      	str	r2, [sp, #8]
 8018a7c:	462b      	mov	r3, r5
 8018a7e:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8018a82:	429f      	cmp	r7, r3
 8018a84:	d924      	bls.n	8018ad0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8018a86:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8018a8a:	2907      	cmp	r1, #7
 8018a8c:	d816      	bhi.n	8018abc <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8018a8e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8018a92:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8018a96:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8018a9a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8018a9e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8018aa2:	1c4a      	adds	r2, r1, #1
 8018aa4:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8018aa8:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8018aac:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8018ab0:	f8a2 9002 	strh.w	r9, [r2, #2]
 8018ab4:	f8a2 e004 	strh.w	lr, [r2, #4]
 8018ab8:	f8a2 c006 	strh.w	ip, [r2, #6]
 8018abc:	3301      	adds	r3, #1
 8018abe:	b29b      	uxth	r3, r3
 8018ac0:	e7df      	b.n	8018a82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8018ac2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d1cf      	bne.n	8018a6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 8018aca:	b01b      	add	sp, #108	; 0x6c
 8018acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ad0:	462f      	mov	r7, r5
 8018ad2:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8018ad6:	42bb      	cmp	r3, r7
 8018ad8:	d90b      	bls.n	8018af2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 8018ada:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8018ade:	4620      	mov	r0, r4
 8018ae0:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8018ae4:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8018ae8:	3701      	adds	r7, #1
 8018aea:	f7ff fc4d 	bl	8018388 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018aee:	b2bf      	uxth	r7, r7
 8018af0:	e7ef      	b.n	8018ad2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 8018af2:	4a9f      	ldr	r2, [pc, #636]	; (8018d70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8018af4:	6813      	ldr	r3, [r2, #0]
 8018af6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018afa:	2b01      	cmp	r3, #1
 8018afc:	4690      	mov	r8, r2
 8018afe:	f040 80e6 	bne.w	8018cce <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ba>
 8018b02:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8018b06:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8018b0a:	4629      	mov	r1, r5
 8018b0c:	33aa      	adds	r3, #170	; 0xaa
 8018b0e:	2500      	movs	r5, #0
 8018b10:	428f      	cmp	r7, r1
 8018b12:	f103 0308 	add.w	r3, r3, #8
 8018b16:	dd0a      	ble.n	8018b2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8018b18:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8018b1c:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8018b20:	4402      	add	r2, r0
 8018b22:	b212      	sxth	r2, r2
 8018b24:	4295      	cmp	r5, r2
 8018b26:	bfb8      	it	lt
 8018b28:	4615      	movlt	r5, r2
 8018b2a:	3101      	adds	r1, #1
 8018b2c:	e7f0      	b.n	8018b10 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8018b2e:	4b91      	ldr	r3, [pc, #580]	; (8018d74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8018b30:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8018d70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>
 8018b34:	881b      	ldrh	r3, [r3, #0]
 8018b36:	2b0f      	cmp	r3, #15
 8018b38:	bf88      	it	hi
 8018b3a:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8018b3e:	f04f 0300 	mov.w	r3, #0
 8018b42:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8018b46:	bf98      	it	ls
 8018b48:	f04f 0a01 	movls.w	sl, #1
 8018b4c:	46d8      	mov	r8, fp
 8018b4e:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8018b52:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8018b56:	4438      	add	r0, r7
 8018b58:	b207      	sxth	r7, r0
 8018b5a:	f8db 0000 	ldr.w	r0, [fp]
 8018b5e:	42bd      	cmp	r5, r7
 8018b60:	6803      	ldr	r3, [r0, #0]
 8018b62:	f340 8084 	ble.w	8018c6e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8018b66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018b6a:	4798      	blx	r3
 8018b6c:	eb07 030a 	add.w	r3, r7, sl
 8018b70:	4298      	cmp	r0, r3
 8018b72:	da07      	bge.n	8018b84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 8018b74:	4285      	cmp	r5, r0
 8018b76:	dd05      	ble.n	8018b84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 8018b78:	4287      	cmp	r7, r0
 8018b7a:	dd6d      	ble.n	8018c58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8018b7c:	2f00      	cmp	r7, #0
 8018b7e:	dd6b      	ble.n	8018c58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8018b80:	4628      	mov	r0, r5
 8018b82:	e004      	b.n	8018b8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 8018b84:	4287      	cmp	r7, r0
 8018b86:	dcfb      	bgt.n	8018b80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8018b88:	42a8      	cmp	r0, r5
 8018b8a:	bfa8      	it	ge
 8018b8c:	4628      	movge	r0, r5
 8018b8e:	4b7a      	ldr	r3, [pc, #488]	; (8018d78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8018b90:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018b94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b98:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018b9c:	9b02      	ldr	r3, [sp, #8]
 8018b9e:	1bc0      	subs	r0, r0, r7
 8018ba0:	2200      	movs	r2, #0
 8018ba2:	881f      	ldrh	r7, [r3, #0]
 8018ba4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018ba8:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018bac:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018bb0:	42bb      	cmp	r3, r7
 8018bb2:	d9cc      	bls.n	8018b4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8018bb4:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8018bb8:	ab07      	add	r3, sp, #28
 8018bba:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018bbe:	6851      	ldr	r1, [r2, #4]
 8018bc0:	c303      	stmia	r3!, {r0, r1}
 8018bc2:	a905      	add	r1, sp, #20
 8018bc4:	a807      	add	r0, sp, #28
 8018bc6:	f7ff fa4f 	bl	8018068 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018bca:	2800      	cmp	r0, #0
 8018bcc:	d04c      	beq.n	8018c68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 8018bce:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8018bd2:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8018bd6:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8018bda:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8018bde:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018be2:	9303      	str	r3, [sp, #12]
 8018be4:	4686      	mov	lr, r0
 8018be6:	4290      	cmp	r0, r2
 8018be8:	4448      	add	r0, r9
 8018bea:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8018bee:	bfb8      	it	lt
 8018bf0:	4696      	movlt	lr, r2
 8018bf2:	444a      	add	r2, r9
 8018bf4:	4299      	cmp	r1, r3
 8018bf6:	b280      	uxth	r0, r0
 8018bf8:	b292      	uxth	r2, r2
 8018bfa:	468c      	mov	ip, r1
 8018bfc:	fa0f f982 	sxth.w	r9, r2
 8018c00:	bfb8      	it	lt
 8018c02:	469c      	movlt	ip, r3
 8018c04:	b203      	sxth	r3, r0
 8018c06:	454b      	cmp	r3, r9
 8018c08:	bfb8      	it	lt
 8018c0a:	4602      	movlt	r2, r0
 8018c0c:	eba2 020e 	sub.w	r2, r2, lr
 8018c10:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018c14:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8018c18:	9b03      	ldr	r3, [sp, #12]
 8018c1a:	f8ad e01c 	strh.w	lr, [sp, #28]
 8018c1e:	4411      	add	r1, r2
 8018c20:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018c24:	f8ad c01e 	strh.w	ip, [sp, #30]
 8018c28:	4413      	add	r3, r2
 8018c2a:	b289      	uxth	r1, r1
 8018c2c:	b29b      	uxth	r3, r3
 8018c2e:	b208      	sxth	r0, r1
 8018c30:	b21a      	sxth	r2, r3
 8018c32:	4290      	cmp	r0, r2
 8018c34:	bfb8      	it	lt
 8018c36:	460b      	movlt	r3, r1
 8018c38:	eba3 030c 	sub.w	r3, r3, ip
 8018c3c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018c40:	a807      	add	r0, sp, #28
 8018c42:	f7fa fe10 	bl	8013866 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018c46:	b920      	cbnz	r0, 8018c52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 8018c48:	6823      	ldr	r3, [r4, #0]
 8018c4a:	a907      	add	r1, sp, #28
 8018c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c4e:	4620      	mov	r0, r4
 8018c50:	4798      	blx	r3
 8018c52:	3701      	adds	r7, #1
 8018c54:	b2bf      	uxth	r7, r7
 8018c56:	e7a9      	b.n	8018bac <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 8018c58:	f8d8 0000 	ldr.w	r0, [r8]
 8018c5c:	6803      	ldr	r3, [r0, #0]
 8018c5e:	2101      	movs	r1, #1
 8018c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018c64:	4798      	blx	r3
 8018c66:	e772      	b.n	8018b4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8018c68:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8018c6c:	e7e8      	b.n	8018c40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 8018c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c70:	4798      	blx	r3
 8018c72:	4b42      	ldr	r3, [pc, #264]	; (8018d7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8018c74:	781b      	ldrb	r3, [r3, #0]
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	f43f af27 	beq.w	8018aca <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8018c7c:	2300      	movs	r3, #0
 8018c7e:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 8018c82:	9b02      	ldr	r3, [sp, #8]
 8018c84:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8018c88:	881b      	ldrh	r3, [r3, #0]
 8018c8a:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8018c8e:	429d      	cmp	r5, r3
 8018c90:	f67f af1b 	bls.w	8018aca <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8018c94:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 8018c98:	2907      	cmp	r1, #7
 8018c9a:	d815      	bhi.n	8018cc8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b4>
 8018c9c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8018ca0:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8018ca4:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8018ca8:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8018cac:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8018cb0:	1c4a      	adds	r2, r1, #1
 8018cb2:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 8018cb6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8018cba:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8018cbe:	f8a2 e002 	strh.w	lr, [r2, #2]
 8018cc2:	f8a2 c004 	strh.w	ip, [r2, #4]
 8018cc6:	80d7      	strh	r7, [r2, #6]
 8018cc8:	3301      	adds	r3, #1
 8018cca:	b29b      	uxth	r3, r3
 8018ccc:	e7df      	b.n	8018c8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x27a>
 8018cce:	2b02      	cmp	r3, #2
 8018cd0:	f040 8136 	bne.w	8018f40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 8018cd4:	4b2a      	ldr	r3, [pc, #168]	; (8018d80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>)
 8018cd6:	781b      	ldrb	r3, [r3, #0]
 8018cd8:	2b01      	cmp	r3, #1
 8018cda:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8018cde:	f000 809c 	beq.w	8018e1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 8018ce2:	9b02      	ldr	r3, [sp, #8]
 8018ce4:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 8018ce8:	f8b3 b000 	ldrh.w	fp, [r3]
 8018cec:	f10b 0b01 	add.w	fp, fp, #1
 8018cf0:	fa1f fb8b 	uxth.w	fp, fp
 8018cf4:	2a00      	cmp	r2, #0
 8018cf6:	d0bc      	beq.n	8018c72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8018cf8:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8018cfc:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8018d00:	441d      	add	r5, r3
 8018d02:	b22d      	sxth	r5, r5
 8018d04:	4659      	mov	r1, fp
 8018d06:	f04f 0800 	mov.w	r8, #0
 8018d0a:	b28b      	uxth	r3, r1
 8018d0c:	429a      	cmp	r2, r3
 8018d0e:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8018d12:	f240 80c1 	bls.w	8018e98 <_ZN8touchgfx11Application15drawCachedAreasEv+0x484>
 8018d16:	4427      	add	r7, r4
 8018d18:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8018d1c:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 8018d20:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 8018d24:	4563      	cmp	r3, ip
 8018d26:	4608      	mov	r0, r1
 8018d28:	f340 80a3 	ble.w	8018e72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 8018d2c:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 8018d30:	4465      	add	r5, ip
 8018d32:	b22d      	sxth	r5, r5
 8018d34:	429d      	cmp	r5, r3
 8018d36:	bfa8      	it	ge
 8018d38:	461d      	movge	r5, r3
 8018d3a:	3101      	adds	r1, #1
 8018d3c:	4680      	mov	r8, r0
 8018d3e:	e7e4      	b.n	8018d0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8018d40:	d10b      	bne.n	8018d5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x346>
 8018d42:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8018d46:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8018d4a:	458c      	cmp	ip, r1
 8018d4c:	bfb4      	ite	lt
 8018d4e:	469c      	movlt	ip, r3
 8018d50:	46bc      	movge	ip, r7
 8018d52:	4572      	cmp	r2, lr
 8018d54:	bfb8      	it	lt
 8018d56:	4672      	movlt	r2, lr
 8018d58:	e088      	b.n	8018e6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8018d5a:	428a      	cmp	r2, r1
 8018d5c:	bfb8      	it	lt
 8018d5e:	460a      	movlt	r2, r1
 8018d60:	46bc      	mov	ip, r7
 8018d62:	e083      	b.n	8018e6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8018d64:	2000c47c 	.word	0x2000c47c
 8018d68:	2000c488 	.word	0x2000c488
 8018d6c:	2000001c 	.word	0x2000001c
 8018d70:	2000c43c 	.word	0x2000c43c
 8018d74:	2000c432 	.word	0x2000c432
 8018d78:	2000c430 	.word	0x2000c430
 8018d7c:	2000c43a 	.word	0x2000c43a
 8018d80:	2000c434 	.word	0x2000c434
 8018d84:	1961      	adds	r1, r4, r5
 8018d86:	ab07      	add	r3, sp, #28
 8018d88:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8018d8c:	6849      	ldr	r1, [r1, #4]
 8018d8e:	c303      	stmia	r3!, {r0, r1}
 8018d90:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8018d94:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018d98:	2b13      	cmp	r3, #19
 8018d9a:	bfd8      	it	le
 8018d9c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8018da0:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018da4:	440b      	add	r3, r1
 8018da6:	1a9b      	subs	r3, r3, r2
 8018da8:	a807      	add	r0, sp, #28
 8018daa:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018dae:	f7ff f83f 	bl	8017e30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018db2:	a807      	add	r0, sp, #28
 8018db4:	f7fa fd57 	bl	8013866 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018db8:	bb78      	cbnz	r0, 8018e1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 8018dba:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8018dbe:	f8d8 0000 	ldr.w	r0, [r8]
 8018dc2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018dc6:	f8d0 e000 	ldr.w	lr, [r0]
 8018dca:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8018dce:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018dd2:	f1bc 0f14 	cmp.w	ip, #20
 8018dd6:	bfa8      	it	ge
 8018dd8:	f04f 0c14 	movge.w	ip, #20
 8018ddc:	fa1f fc8c 	uxth.w	ip, ip
 8018de0:	f8cd c000 	str.w	ip, [sp]
 8018de4:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8018de8:	47d0      	blx	sl
 8018dea:	4682      	mov	sl, r0
 8018dec:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018df0:	a807      	add	r0, sp, #28
 8018df2:	f7ff f803 	bl	8017dfc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018df6:	6823      	ldr	r3, [r4, #0]
 8018df8:	4425      	add	r5, r4
 8018dfa:	4620      	mov	r0, r4
 8018dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018dfe:	a907      	add	r1, sp, #28
 8018e00:	4798      	blx	r3
 8018e02:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8018e06:	eba0 000a 	sub.w	r0, r0, sl
 8018e0a:	b200      	sxth	r0, r0
 8018e0c:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8018e10:	b918      	cbnz	r0, 8018e1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 8018e12:	b2b9      	uxth	r1, r7
 8018e14:	4648      	mov	r0, r9
 8018e16:	f7ff faa3 	bl	8018360 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018e1a:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8018e1e:	f1bb 0f00 	cmp.w	fp, #0
 8018e22:	f43f af26 	beq.w	8018c72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8018e26:	9b02      	ldr	r3, [sp, #8]
 8018e28:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8018e2c:	881b      	ldrh	r3, [r3, #0]
 8018e2e:	3301      	adds	r3, #1
 8018e30:	b29b      	uxth	r3, r3
 8018e32:	2700      	movs	r7, #0
 8018e34:	b299      	uxth	r1, r3
 8018e36:	458b      	cmp	fp, r1
 8018e38:	ea4f 05c7 	mov.w	r5, r7, lsl #3
 8018e3c:	d9a2      	bls.n	8018d84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x370>
 8018e3e:	4425      	add	r5, r4
 8018e40:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8018e44:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8018e48:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8018e4c:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8018e50:	4408      	add	r0, r1
 8018e52:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8018e56:	4471      	add	r1, lr
 8018e58:	b200      	sxth	r0, r0
 8018e5a:	b209      	sxth	r1, r1
 8018e5c:	4288      	cmp	r0, r1
 8018e5e:	469c      	mov	ip, r3
 8018e60:	f6bf af6e 	bge.w	8018d40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x32c>
 8018e64:	4586      	cmp	lr, r0
 8018e66:	4672      	mov	r2, lr
 8018e68:	bfb8      	it	lt
 8018e6a:	4602      	movlt	r2, r0
 8018e6c:	3301      	adds	r3, #1
 8018e6e:	4667      	mov	r7, ip
 8018e70:	e7e0      	b.n	8018e34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x420>
 8018e72:	d10c      	bne.n	8018e8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x47a>
 8018e74:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 8018e78:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 8018e7c:	4287      	cmp	r7, r0
 8018e7e:	bfb4      	ite	lt
 8018e80:	4608      	movlt	r0, r1
 8018e82:	4640      	movge	r0, r8
 8018e84:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 8018e88:	443b      	add	r3, r7
 8018e8a:	b21b      	sxth	r3, r3
 8018e8c:	e752      	b.n	8018d34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8018e8e:	4565      	cmp	r5, ip
 8018e90:	bfa8      	it	ge
 8018e92:	4665      	movge	r5, ip
 8018e94:	4640      	mov	r0, r8
 8018e96:	e750      	b.n	8018d3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x326>
 8018e98:	eb09 0007 	add.w	r0, r9, r7
 8018e9c:	4427      	add	r7, r4
 8018e9e:	9203      	str	r2, [sp, #12]
 8018ea0:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 8018ea4:	f1ba 0f13 	cmp.w	sl, #19
 8018ea8:	bfde      	ittt	le
 8018eaa:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 8018eae:	4455      	addle	r5, sl
 8018eb0:	b22d      	sxthle	r5, r5
 8018eb2:	f7fa fcd8 	bl	8013866 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018eb6:	9a03      	ldr	r2, [sp, #12]
 8018eb8:	2800      	cmp	r0, #0
 8018eba:	f47f af1b 	bne.w	8018cf4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e0>
 8018ebe:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 8018ec2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018ec6:	482a      	ldr	r0, [pc, #168]	; (8018f70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>)
 8018ec8:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 8018ecc:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8018ed0:	6800      	ldr	r0, [r0, #0]
 8018ed2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8018ed6:	1aad      	subs	r5, r5, r2
 8018ed8:	2d14      	cmp	r5, #20
 8018eda:	f8ad 201e 	strh.w	r2, [sp, #30]
 8018ede:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018ee2:	bfa8      	it	ge
 8018ee4:	2514      	movge	r5, #20
 8018ee6:	f8d0 c000 	ldr.w	ip, [r0]
 8018eea:	b2ad      	uxth	r5, r5
 8018eec:	fa1f fa8a 	uxth.w	sl, sl
 8018ef0:	4555      	cmp	r5, sl
 8018ef2:	bf94      	ite	ls
 8018ef4:	9500      	strls	r5, [sp, #0]
 8018ef6:	f8cd a000 	strhi.w	sl, [sp]
 8018efa:	b292      	uxth	r2, r2
 8018efc:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8018f00:	b29b      	uxth	r3, r3
 8018f02:	b289      	uxth	r1, r1
 8018f04:	47a8      	blx	r5
 8018f06:	6823      	ldr	r3, [r4, #0]
 8018f08:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f0e:	a907      	add	r1, sp, #28
 8018f10:	4620      	mov	r0, r4
 8018f12:	4798      	blx	r3
 8018f14:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8018f18:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8018f1c:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8018f20:	1a5b      	subs	r3, r3, r1
 8018f22:	440a      	add	r2, r1
 8018f24:	b21b      	sxth	r3, r3
 8018f26:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 8018f2a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	f47f aed7 	bne.w	8018ce2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 8018f34:	fa1f f188 	uxth.w	r1, r8
 8018f38:	4648      	mov	r0, r9
 8018f3a:	f7ff fa11 	bl	8018360 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018f3e:	e6d0      	b.n	8018ce2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 8018f40:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018f44:	42ab      	cmp	r3, r5
 8018f46:	f67f ae94 	bls.w	8018c72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8018f4a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8018f4e:	ab07      	add	r3, sp, #28
 8018f50:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018f54:	6851      	ldr	r1, [r2, #4]
 8018f56:	c303      	stmia	r3!, {r0, r1}
 8018f58:	a807      	add	r0, sp, #28
 8018f5a:	f7fa fc84 	bl	8013866 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018f5e:	b920      	cbnz	r0, 8018f6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x556>
 8018f60:	6823      	ldr	r3, [r4, #0]
 8018f62:	a907      	add	r1, sp, #28
 8018f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f66:	4620      	mov	r0, r4
 8018f68:	4798      	blx	r3
 8018f6a:	3501      	adds	r5, #1
 8018f6c:	b2ad      	uxth	r5, r5
 8018f6e:	e7e7      	b.n	8018f40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 8018f70:	2000c43c 	.word	0x2000c43c

08018f74 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8018f74:	4b03      	ldr	r3, [pc, #12]	; (8018f84 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8018f76:	2200      	movs	r2, #0
 8018f78:	801a      	strh	r2, [r3, #0]
 8018f7a:	805a      	strh	r2, [r3, #2]
 8018f7c:	809a      	strh	r2, [r3, #4]
 8018f7e:	80da      	strh	r2, [r3, #6]
 8018f80:	4770      	bx	lr
 8018f82:	bf00      	nop
 8018f84:	2000c488 	.word	0x2000c488

08018f88 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8018f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f8c:	4606      	mov	r6, r0
 8018f8e:	b09d      	sub	sp, #116	; 0x74
 8018f90:	a803      	add	r0, sp, #12
 8018f92:	4614      	mov	r4, r2
 8018f94:	468a      	mov	sl, r1
 8018f96:	461d      	mov	r5, r3
 8018f98:	f000 fe59 	bl	8019c4e <_ZN8touchgfx12TextProviderC1Ev>
 8018f9c:	6833      	ldr	r3, [r6, #0]
 8018f9e:	4630      	mov	r0, r6
 8018fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018fa2:	4798      	blx	r3
 8018fa4:	6833      	ldr	r3, [r6, #0]
 8018fa6:	4607      	mov	r7, r0
 8018fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018faa:	4630      	mov	r0, r6
 8018fac:	4798      	blx	r3
 8018fae:	462a      	mov	r2, r5
 8018fb0:	9000      	str	r0, [sp, #0]
 8018fb2:	4621      	mov	r1, r4
 8018fb4:	463b      	mov	r3, r7
 8018fb6:	a803      	add	r0, sp, #12
 8018fb8:	f000 fea4 	bl	8019d04 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018fbc:	2500      	movs	r5, #0
 8018fbe:	462c      	mov	r4, r5
 8018fc0:	46a9      	mov	r9, r5
 8018fc2:	46a8      	mov	r8, r5
 8018fc4:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8018fc8:	2300      	movs	r3, #0
 8018fca:	9302      	str	r3, [sp, #8]
 8018fcc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018fd0:	429c      	cmp	r4, r3
 8018fd2:	d002      	beq.n	8018fda <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8018fd4:	455c      	cmp	r4, fp
 8018fd6:	bf18      	it	ne
 8018fd8:	4625      	movne	r5, r4
 8018fda:	ab02      	add	r3, sp, #8
 8018fdc:	4632      	mov	r2, r6
 8018fde:	4651      	mov	r1, sl
 8018fe0:	a803      	add	r0, sp, #12
 8018fe2:	f001 f991 	bl	801a308 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018fe6:	4604      	mov	r4, r0
 8018fe8:	b108      	cbz	r0, 8018fee <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8018fea:	280a      	cmp	r0, #10
 8018fec:	d10a      	bne.n	8019004 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8018fee:	45c1      	cmp	r9, r8
 8018ff0:	bf38      	it	cc
 8018ff2:	46c1      	movcc	r9, r8
 8018ff4:	f04f 0800 	mov.w	r8, #0
 8018ff8:	2c00      	cmp	r4, #0
 8018ffa:	d1e5      	bne.n	8018fc8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018ffc:	4648      	mov	r0, r9
 8018ffe:	b01d      	add	sp, #116	; 0x74
 8019000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019004:	9a02      	ldr	r2, [sp, #8]
 8019006:	2a00      	cmp	r2, #0
 8019008:	d0de      	beq.n	8018fc8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801900a:	7b57      	ldrb	r7, [r2, #13]
 801900c:	6833      	ldr	r3, [r6, #0]
 801900e:	8894      	ldrh	r4, [r2, #4]
 8019010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019012:	007f      	lsls	r7, r7, #1
 8019014:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8019018:	7a97      	ldrb	r7, [r2, #10]
 801901a:	4629      	mov	r1, r5
 801901c:	4307      	orrs	r7, r0
 801901e:	4630      	mov	r0, r6
 8019020:	4798      	blx	r3
 8019022:	4438      	add	r0, r7
 8019024:	4480      	add	r8, r0
 8019026:	fa1f f888 	uxth.w	r8, r8
 801902a:	e7e5      	b.n	8018ff8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801902c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801902c:	b508      	push	{r3, lr}
 801902e:	6803      	ldr	r3, [r0, #0]
 8019030:	68db      	ldr	r3, [r3, #12]
 8019032:	4798      	blx	r3
 8019034:	b128      	cbz	r0, 8019042 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8019036:	7b43      	ldrb	r3, [r0, #13]
 8019038:	7a80      	ldrb	r0, [r0, #10]
 801903a:	005b      	lsls	r3, r3, #1
 801903c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019040:	4318      	orrs	r0, r3
 8019042:	bd08      	pop	{r3, pc}

08019044 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8019044:	b40e      	push	{r1, r2, r3}
 8019046:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019048:	b09e      	sub	sp, #120	; 0x78
 801904a:	ab23      	add	r3, sp, #140	; 0x8c
 801904c:	4605      	mov	r5, r0
 801904e:	f853 4b04 	ldr.w	r4, [r3], #4
 8019052:	9303      	str	r3, [sp, #12]
 8019054:	a805      	add	r0, sp, #20
 8019056:	f000 fdfa 	bl	8019c4e <_ZN8touchgfx12TextProviderC1Ev>
 801905a:	682b      	ldr	r3, [r5, #0]
 801905c:	4628      	mov	r0, r5
 801905e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019060:	4798      	blx	r3
 8019062:	682b      	ldr	r3, [r5, #0]
 8019064:	4606      	mov	r6, r0
 8019066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019068:	4628      	mov	r0, r5
 801906a:	4798      	blx	r3
 801906c:	4633      	mov	r3, r6
 801906e:	ae1e      	add	r6, sp, #120	; 0x78
 8019070:	4621      	mov	r1, r4
 8019072:	9000      	str	r0, [sp, #0]
 8019074:	9a03      	ldr	r2, [sp, #12]
 8019076:	2400      	movs	r4, #0
 8019078:	a805      	add	r0, sp, #20
 801907a:	f000 fe43 	bl	8019d04 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801907e:	f846 4d68 	str.w	r4, [r6, #-104]!
 8019082:	462a      	mov	r2, r5
 8019084:	4633      	mov	r3, r6
 8019086:	4621      	mov	r1, r4
 8019088:	a805      	add	r0, sp, #20
 801908a:	f001 f93d 	bl	801a308 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801908e:	b1f0      	cbz	r0, 80190ce <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8019090:	280a      	cmp	r0, #10
 8019092:	d018      	beq.n	80190c6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8019094:	9f04      	ldr	r7, [sp, #16]
 8019096:	b1b7      	cbz	r7, 80190c6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8019098:	7b78      	ldrb	r0, [r7, #13]
 801909a:	7a3b      	ldrb	r3, [r7, #8]
 801909c:	88aa      	ldrh	r2, [r5, #4]
 801909e:	00c1      	lsls	r1, r0, #3
 80190a0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80190a4:	4319      	orrs	r1, r3
 80190a6:	0643      	lsls	r3, r0, #25
 80190a8:	bf44      	itt	mi
 80190aa:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 80190ae:	b219      	sxthmi	r1, r3
 80190b0:	0100      	lsls	r0, r0, #4
 80190b2:	79fb      	ldrb	r3, [r7, #7]
 80190b4:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80190b8:	4303      	orrs	r3, r0
 80190ba:	4413      	add	r3, r2
 80190bc:	1a5b      	subs	r3, r3, r1
 80190be:	b29b      	uxth	r3, r3
 80190c0:	42a3      	cmp	r3, r4
 80190c2:	bfc8      	it	gt
 80190c4:	b21c      	sxthgt	r4, r3
 80190c6:	4633      	mov	r3, r6
 80190c8:	462a      	mov	r2, r5
 80190ca:	2100      	movs	r1, #0
 80190cc:	e7dc      	b.n	8019088 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80190ce:	b2a0      	uxth	r0, r4
 80190d0:	b01e      	add	sp, #120	; 0x78
 80190d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80190d6:	b003      	add	sp, #12
 80190d8:	4770      	bx	lr

080190da <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80190da:	b40e      	push	{r1, r2, r3}
 80190dc:	b570      	push	{r4, r5, r6, lr}
 80190de:	b09d      	sub	sp, #116	; 0x74
 80190e0:	ab21      	add	r3, sp, #132	; 0x84
 80190e2:	4604      	mov	r4, r0
 80190e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80190e8:	9302      	str	r3, [sp, #8]
 80190ea:	a803      	add	r0, sp, #12
 80190ec:	f000 fdaf 	bl	8019c4e <_ZN8touchgfx12TextProviderC1Ev>
 80190f0:	6823      	ldr	r3, [r4, #0]
 80190f2:	4620      	mov	r0, r4
 80190f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80190f6:	4798      	blx	r3
 80190f8:	6823      	ldr	r3, [r4, #0]
 80190fa:	4606      	mov	r6, r0
 80190fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80190fe:	4620      	mov	r0, r4
 8019100:	4798      	blx	r3
 8019102:	4633      	mov	r3, r6
 8019104:	9000      	str	r0, [sp, #0]
 8019106:	9a02      	ldr	r2, [sp, #8]
 8019108:	4629      	mov	r1, r5
 801910a:	a803      	add	r0, sp, #12
 801910c:	f000 fdfa 	bl	8019d04 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019110:	a803      	add	r0, sp, #12
 8019112:	f001 f9c7 	bl	801a4a4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019116:	2401      	movs	r4, #1
 8019118:	b2a3      	uxth	r3, r4
 801911a:	b140      	cbz	r0, 801912e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 801911c:	280a      	cmp	r0, #10
 801911e:	bf08      	it	eq
 8019120:	3301      	addeq	r3, #1
 8019122:	a803      	add	r0, sp, #12
 8019124:	bf08      	it	eq
 8019126:	b21c      	sxtheq	r4, r3
 8019128:	f001 f9bc 	bl	801a4a4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801912c:	e7f4      	b.n	8019118 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801912e:	4618      	mov	r0, r3
 8019130:	b01d      	add	sp, #116	; 0x74
 8019132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019136:	b003      	add	sp, #12
 8019138:	4770      	bx	lr

0801913a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801913a:	b40e      	push	{r1, r2, r3}
 801913c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801913e:	b09e      	sub	sp, #120	; 0x78
 8019140:	ab23      	add	r3, sp, #140	; 0x8c
 8019142:	4604      	mov	r4, r0
 8019144:	f853 5b04 	ldr.w	r5, [r3], #4
 8019148:	9303      	str	r3, [sp, #12]
 801914a:	a805      	add	r0, sp, #20
 801914c:	f000 fd7f 	bl	8019c4e <_ZN8touchgfx12TextProviderC1Ev>
 8019150:	6823      	ldr	r3, [r4, #0]
 8019152:	4620      	mov	r0, r4
 8019154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019156:	4798      	blx	r3
 8019158:	6823      	ldr	r3, [r4, #0]
 801915a:	4606      	mov	r6, r0
 801915c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801915e:	4620      	mov	r0, r4
 8019160:	4798      	blx	r3
 8019162:	4633      	mov	r3, r6
 8019164:	4629      	mov	r1, r5
 8019166:	9000      	str	r0, [sp, #0]
 8019168:	9a03      	ldr	r2, [sp, #12]
 801916a:	a805      	add	r0, sp, #20
 801916c:	ad1e      	add	r5, sp, #120	; 0x78
 801916e:	f000 fdc9 	bl	8019d04 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019172:	2100      	movs	r1, #0
 8019174:	f845 1d68 	str.w	r1, [r5, #-104]!
 8019178:	4622      	mov	r2, r4
 801917a:	462b      	mov	r3, r5
 801917c:	a805      	add	r0, sp, #20
 801917e:	f001 f8c3 	bl	801a308 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019182:	26ff      	movs	r6, #255	; 0xff
 8019184:	b1d8      	cbz	r0, 80191be <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8019186:	280a      	cmp	r0, #10
 8019188:	d012      	beq.n	80191b0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801918a:	9804      	ldr	r0, [sp, #16]
 801918c:	b180      	cbz	r0, 80191b0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801918e:	7b47      	ldrb	r7, [r0, #13]
 8019190:	7922      	ldrb	r2, [r4, #4]
 8019192:	00fb      	lsls	r3, r7, #3
 8019194:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019198:	7a03      	ldrb	r3, [r0, #8]
 801919a:	430b      	orrs	r3, r1
 801919c:	0679      	lsls	r1, r7, #25
 801919e:	bf44      	itt	mi
 80191a0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80191a4:	b21b      	sxthmi	r3, r3
 80191a6:	1ad3      	subs	r3, r2, r3
 80191a8:	b2db      	uxtb	r3, r3
 80191aa:	429e      	cmp	r6, r3
 80191ac:	bf28      	it	cs
 80191ae:	461e      	movcs	r6, r3
 80191b0:	462b      	mov	r3, r5
 80191b2:	4622      	mov	r2, r4
 80191b4:	2100      	movs	r1, #0
 80191b6:	a805      	add	r0, sp, #20
 80191b8:	f001 f8a6 	bl	801a308 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80191bc:	e7e2      	b.n	8019184 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 80191be:	4630      	mov	r0, r6
 80191c0:	b01e      	add	sp, #120	; 0x78
 80191c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80191c6:	b003      	add	sp, #12
 80191c8:	4770      	bx	lr

080191ca <_ZNK8touchgfx8Drawable10invalidateEv>:
 80191ca:	b513      	push	{r0, r1, r4, lr}
 80191cc:	6803      	ldr	r3, [r0, #0]
 80191ce:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80191d2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80191d6:	f8ad 1004 	strh.w	r1, [sp, #4]
 80191da:	2400      	movs	r4, #0
 80191dc:	9400      	str	r4, [sp, #0]
 80191de:	f8ad 2006 	strh.w	r2, [sp, #6]
 80191e2:	691b      	ldr	r3, [r3, #16]
 80191e4:	4669      	mov	r1, sp
 80191e6:	4798      	blx	r3
 80191e8:	b002      	add	sp, #8
 80191ea:	bd10      	pop	{r4, pc}

080191ec <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80191ec:	b538      	push	{r3, r4, r5, lr}
 80191ee:	680b      	ldr	r3, [r1, #0]
 80191f0:	460c      	mov	r4, r1
 80191f2:	68db      	ldr	r3, [r3, #12]
 80191f4:	4605      	mov	r5, r0
 80191f6:	4798      	blx	r3
 80191f8:	6823      	ldr	r3, [r4, #0]
 80191fa:	4620      	mov	r0, r4
 80191fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191fe:	4629      	mov	r1, r5
 8019200:	4798      	blx	r3
 8019202:	4628      	mov	r0, r5
 8019204:	bd38      	pop	{r3, r4, r5, pc}

08019206 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8019206:	b410      	push	{r4}
 8019208:	880a      	ldrh	r2, [r1, #0]
 801920a:	8884      	ldrh	r4, [r0, #4]
 801920c:	4422      	add	r2, r4
 801920e:	800a      	strh	r2, [r1, #0]
 8019210:	88c4      	ldrh	r4, [r0, #6]
 8019212:	884a      	ldrh	r2, [r1, #2]
 8019214:	4422      	add	r2, r4
 8019216:	804a      	strh	r2, [r1, #2]
 8019218:	6940      	ldr	r0, [r0, #20]
 801921a:	b120      	cbz	r0, 8019226 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801921c:	6803      	ldr	r3, [r0, #0]
 801921e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019224:	4718      	bx	r3
 8019226:	f85d 4b04 	ldr.w	r4, [sp], #4
 801922a:	4770      	bx	lr

0801922c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801922c:	b570      	push	{r4, r5, r6, lr}
 801922e:	8882      	ldrh	r2, [r0, #4]
 8019230:	880b      	ldrh	r3, [r1, #0]
 8019232:	4413      	add	r3, r2
 8019234:	800b      	strh	r3, [r1, #0]
 8019236:	88c2      	ldrh	r2, [r0, #6]
 8019238:	884b      	ldrh	r3, [r1, #2]
 801923a:	460c      	mov	r4, r1
 801923c:	4413      	add	r3, r2
 801923e:	804b      	strh	r3, [r1, #2]
 8019240:	4605      	mov	r5, r0
 8019242:	1d01      	adds	r1, r0, #4
 8019244:	4620      	mov	r0, r4
 8019246:	f7fa facb 	bl	80137e0 <_ZN8touchgfx4RectaNERKS0_>
 801924a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801924e:	2b00      	cmp	r3, #0
 8019250:	dd0b      	ble.n	801926a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019252:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019256:	2b00      	cmp	r3, #0
 8019258:	dd07      	ble.n	801926a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801925a:	6968      	ldr	r0, [r5, #20]
 801925c:	b128      	cbz	r0, 801926a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801925e:	6803      	ldr	r3, [r0, #0]
 8019260:	4621      	mov	r1, r4
 8019262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019268:	4718      	bx	r3
 801926a:	bd70      	pop	{r4, r5, r6, pc}

0801926c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801926c:	b570      	push	{r4, r5, r6, lr}
 801926e:	8882      	ldrh	r2, [r0, #4]
 8019270:	880b      	ldrh	r3, [r1, #0]
 8019272:	4413      	add	r3, r2
 8019274:	800b      	strh	r3, [r1, #0]
 8019276:	88c2      	ldrh	r2, [r0, #6]
 8019278:	884b      	ldrh	r3, [r1, #2]
 801927a:	460c      	mov	r4, r1
 801927c:	4413      	add	r3, r2
 801927e:	804b      	strh	r3, [r1, #2]
 8019280:	4605      	mov	r5, r0
 8019282:	1d01      	adds	r1, r0, #4
 8019284:	4620      	mov	r0, r4
 8019286:	f7fa faab 	bl	80137e0 <_ZN8touchgfx4RectaNERKS0_>
 801928a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801928e:	2b00      	cmp	r3, #0
 8019290:	dd18      	ble.n	80192c4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8019292:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019296:	2b00      	cmp	r3, #0
 8019298:	dd14      	ble.n	80192c4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801929a:	6968      	ldr	r0, [r5, #20]
 801929c:	b128      	cbz	r0, 80192aa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801929e:	6803      	ldr	r3, [r0, #0]
 80192a0:	4621      	mov	r1, r4
 80192a2:	691b      	ldr	r3, [r3, #16]
 80192a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80192a8:	4718      	bx	r3
 80192aa:	4b07      	ldr	r3, [pc, #28]	; (80192c8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	3304      	adds	r3, #4
 80192b0:	429d      	cmp	r5, r3
 80192b2:	d107      	bne.n	80192c4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 80192b4:	f7fe ffb6 	bl	8018224 <_ZN8touchgfx11Application11getInstanceEv>
 80192b8:	6821      	ldr	r1, [r4, #0]
 80192ba:	6862      	ldr	r2, [r4, #4]
 80192bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80192c0:	f7ff b862 	b.w	8018388 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80192c4:	bd70      	pop	{r4, r5, r6, pc}
 80192c6:	bf00      	nop
 80192c8:	2000c480 	.word	0x2000c480

080192cc <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80192cc:	b570      	push	{r4, r5, r6, lr}
 80192ce:	4604      	mov	r4, r0
 80192d0:	4616      	mov	r6, r2
 80192d2:	460d      	mov	r5, r1
 80192d4:	b901      	cbnz	r1, 80192d8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80192d6:	b192      	cbz	r2, 80192fe <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80192d8:	6823      	ldr	r3, [r4, #0]
 80192da:	4620      	mov	r0, r4
 80192dc:	699b      	ldr	r3, [r3, #24]
 80192de:	4798      	blx	r3
 80192e0:	88e2      	ldrh	r2, [r4, #6]
 80192e2:	88a1      	ldrh	r1, [r4, #4]
 80192e4:	4432      	add	r2, r6
 80192e6:	4429      	add	r1, r5
 80192e8:	4620      	mov	r0, r4
 80192ea:	b212      	sxth	r2, r2
 80192ec:	b209      	sxth	r1, r1
 80192ee:	f7f3 ff54 	bl	800d19a <_ZN8touchgfx8Drawable5setXYEss>
 80192f2:	6823      	ldr	r3, [r4, #0]
 80192f4:	4620      	mov	r0, r4
 80192f6:	699b      	ldr	r3, [r3, #24]
 80192f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80192fc:	4718      	bx	r3
 80192fe:	bd70      	pop	{r4, r5, r6, pc}

08019300 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019300:	b510      	push	{r4, lr}
 8019302:	4604      	mov	r4, r0
 8019304:	4608      	mov	r0, r1
 8019306:	2300      	movs	r3, #0
 8019308:	8023      	strh	r3, [r4, #0]
 801930a:	8063      	strh	r3, [r4, #2]
 801930c:	6803      	ldr	r3, [r0, #0]
 801930e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019312:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8019316:	80a1      	strh	r1, [r4, #4]
 8019318:	80e2      	strh	r2, [r4, #6]
 801931a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801931c:	4621      	mov	r1, r4
 801931e:	4798      	blx	r3
 8019320:	4620      	mov	r0, r4
 8019322:	bd10      	pop	{r4, pc}

08019324 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8019324:	b530      	push	{r4, r5, lr}
 8019326:	8083      	strh	r3, [r0, #4]
 8019328:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801932c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8019330:	7183      	strb	r3, [r0, #6]
 8019332:	79c3      	ldrb	r3, [r0, #7]
 8019334:	6101      	str	r1, [r0, #16]
 8019336:	f365 0306 	bfi	r3, r5, #0, #7
 801933a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801933e:	8282      	strh	r2, [r0, #20]
 8019340:	f365 13c7 	bfi	r3, r5, #7, #1
 8019344:	71c3      	strb	r3, [r0, #7]
 8019346:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801934a:	7203      	strb	r3, [r0, #8]
 801934c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019350:	7243      	strb	r3, [r0, #9]
 8019352:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019356:	8143      	strh	r3, [r0, #10]
 8019358:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801935c:	8183      	strh	r3, [r0, #12]
 801935e:	4b01      	ldr	r3, [pc, #4]	; (8019364 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8019360:	6003      	str	r3, [r0, #0]
 8019362:	bd30      	pop	{r4, r5, pc}
 8019364:	0802ed10 	.word	0x0802ed10

08019368 <_ZNK8touchgfx9ConstFont4findEt>:
 8019368:	b5f0      	push	{r4, r5, r6, r7, lr}
 801936a:	6904      	ldr	r4, [r0, #16]
 801936c:	b3bc      	cbz	r4, 80193de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801936e:	88a3      	ldrh	r3, [r4, #4]
 8019370:	8a82      	ldrh	r2, [r0, #20]
 8019372:	1acb      	subs	r3, r1, r3
 8019374:	f102 32ff 	add.w	r2, r2, #4294967295
 8019378:	d431      	bmi.n	80193de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801937a:	4293      	cmp	r3, r2
 801937c:	dd0c      	ble.n	8019398 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801937e:	230e      	movs	r3, #14
 8019380:	fb03 4302 	mla	r3, r3, r2, r4
 8019384:	889b      	ldrh	r3, [r3, #4]
 8019386:	1a5b      	subs	r3, r3, r1
 8019388:	1ad3      	subs	r3, r2, r3
 801938a:	429a      	cmp	r2, r3
 801938c:	db27      	blt.n	80193de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801938e:	2b00      	cmp	r3, #0
 8019390:	bfbc      	itt	lt
 8019392:	2302      	movlt	r3, #2
 8019394:	fb92 f3f3 	sdivlt	r3, r2, r3
 8019398:	2500      	movs	r5, #0
 801939a:	260e      	movs	r6, #14
 801939c:	4295      	cmp	r5, r2
 801939e:	dc1e      	bgt.n	80193de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80193a0:	fb06 4003 	mla	r0, r6, r3, r4
 80193a4:	8887      	ldrh	r7, [r0, #4]
 80193a6:	42b9      	cmp	r1, r7
 80193a8:	d01a      	beq.n	80193e0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80193aa:	d20d      	bcs.n	80193c8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80193ac:	1e5a      	subs	r2, r3, #1
 80193ae:	4295      	cmp	r5, r2
 80193b0:	dc15      	bgt.n	80193de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80193b2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80193b6:	1a5b      	subs	r3, r3, r1
 80193b8:	1ad3      	subs	r3, r2, r3
 80193ba:	429a      	cmp	r2, r3
 80193bc:	db0f      	blt.n	80193de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80193be:	429d      	cmp	r5, r3
 80193c0:	ddec      	ble.n	801939c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80193c2:	1953      	adds	r3, r2, r5
 80193c4:	105b      	asrs	r3, r3, #1
 80193c6:	e7e9      	b.n	801939c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80193c8:	1c5d      	adds	r5, r3, #1
 80193ca:	42aa      	cmp	r2, r5
 80193cc:	db07      	blt.n	80193de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80193ce:	8a43      	ldrh	r3, [r0, #18]
 80193d0:	1acb      	subs	r3, r1, r3
 80193d2:	442b      	add	r3, r5
 80193d4:	429d      	cmp	r5, r3
 80193d6:	dc02      	bgt.n	80193de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80193d8:	429a      	cmp	r2, r3
 80193da:	dadf      	bge.n	801939c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80193dc:	e7f1      	b.n	80193c2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80193de:	2000      	movs	r0, #0
 80193e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080193e2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80193e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193e4:	4604      	mov	r4, r0
 80193e6:	4617      	mov	r7, r2
 80193e8:	461e      	mov	r6, r3
 80193ea:	b911      	cbnz	r1, 80193f2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80193ec:	2500      	movs	r5, #0
 80193ee:	4628      	mov	r0, r5
 80193f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193f2:	290a      	cmp	r1, #10
 80193f4:	d0fa      	beq.n	80193ec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80193f6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80193fa:	4291      	cmp	r1, r2
 80193fc:	d0f6      	beq.n	80193ec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80193fe:	f242 020b 	movw	r2, #8203	; 0x200b
 8019402:	4291      	cmp	r1, r2
 8019404:	d0f2      	beq.n	80193ec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019406:	f7ff ffaf 	bl	8019368 <_ZNK8touchgfx9ConstFont4findEt>
 801940a:	4605      	mov	r5, r0
 801940c:	b950      	cbnz	r0, 8019424 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801940e:	6823      	ldr	r3, [r4, #0]
 8019410:	4620      	mov	r0, r4
 8019412:	691b      	ldr	r3, [r3, #16]
 8019414:	4798      	blx	r3
 8019416:	4601      	mov	r1, r0
 8019418:	4620      	mov	r0, r4
 801941a:	f7ff ffa5 	bl	8019368 <_ZNK8touchgfx9ConstFont4findEt>
 801941e:	4605      	mov	r5, r0
 8019420:	2800      	cmp	r0, #0
 8019422:	d0e3      	beq.n	80193ec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019424:	6823      	ldr	r3, [r4, #0]
 8019426:	4629      	mov	r1, r5
 8019428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801942a:	4620      	mov	r0, r4
 801942c:	4798      	blx	r3
 801942e:	6038      	str	r0, [r7, #0]
 8019430:	6823      	ldr	r3, [r4, #0]
 8019432:	4620      	mov	r0, r4
 8019434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019436:	4798      	blx	r3
 8019438:	7030      	strb	r0, [r6, #0]
 801943a:	e7d8      	b.n	80193ee <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801943c <_ZN8touchgfx4clzuEm>:
 801943c:	4603      	mov	r3, r0
 801943e:	b1c8      	cbz	r0, 8019474 <_ZN8touchgfx4clzuEm+0x38>
 8019440:	0c02      	lsrs	r2, r0, #16
 8019442:	0412      	lsls	r2, r2, #16
 8019444:	b9a2      	cbnz	r2, 8019470 <_ZN8touchgfx4clzuEm+0x34>
 8019446:	0403      	lsls	r3, r0, #16
 8019448:	2010      	movs	r0, #16
 801944a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801944e:	bf04      	itt	eq
 8019450:	021b      	lsleq	r3, r3, #8
 8019452:	3008      	addeq	r0, #8
 8019454:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019458:	bf04      	itt	eq
 801945a:	011b      	lsleq	r3, r3, #4
 801945c:	3004      	addeq	r0, #4
 801945e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8019462:	bf04      	itt	eq
 8019464:	009b      	lsleq	r3, r3, #2
 8019466:	3002      	addeq	r0, #2
 8019468:	2b00      	cmp	r3, #0
 801946a:	db04      	blt.n	8019476 <_ZN8touchgfx4clzuEm+0x3a>
 801946c:	3001      	adds	r0, #1
 801946e:	4770      	bx	lr
 8019470:	2000      	movs	r0, #0
 8019472:	e7ea      	b.n	801944a <_ZN8touchgfx4clzuEm+0xe>
 8019474:	2020      	movs	r0, #32
 8019476:	4770      	bx	lr

08019478 <_ZN8touchgfx7muldivuEmmmRm>:
 8019478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801947c:	4680      	mov	r8, r0
 801947e:	460f      	mov	r7, r1
 8019480:	4615      	mov	r5, r2
 8019482:	461e      	mov	r6, r3
 8019484:	f7ff ffda 	bl	801943c <_ZN8touchgfx4clzuEm>
 8019488:	b998      	cbnz	r0, 80194b2 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801948a:	4608      	mov	r0, r1
 801948c:	f7ff ffd6 	bl	801943c <_ZN8touchgfx4clzuEm>
 8019490:	2800      	cmp	r0, #0
 8019492:	dd08      	ble.n	80194a6 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 8019494:	4633      	mov	r3, r6
 8019496:	462a      	mov	r2, r5
 8019498:	4641      	mov	r1, r8
 801949a:	4638      	mov	r0, r7
 801949c:	f7ff ffec 	bl	8019478 <_ZN8touchgfx7muldivuEmmmRm>
 80194a0:	b003      	add	sp, #12
 80194a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194a6:	f04f 33ff 	mov.w	r3, #4294967295
 80194aa:	6033      	str	r3, [r6, #0]
 80194ac:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80194b0:	e7f6      	b.n	80194a0 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 80194b2:	fa31 f900 	lsrs.w	r9, r1, r0
 80194b6:	fb01 f308 	mul.w	r3, r1, r8
 80194ba:	d105      	bne.n	80194c8 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 80194bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80194c0:	fb05 3510 	mls	r5, r5, r0, r3
 80194c4:	6035      	str	r5, [r6, #0]
 80194c6:	e7eb      	b.n	80194a0 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 80194c8:	2301      	movs	r3, #1
 80194ca:	fa08 fb00 	lsl.w	fp, r8, r0
 80194ce:	fa03 f000 	lsl.w	r0, r3, r0
 80194d2:	3801      	subs	r0, #1
 80194d4:	462a      	mov	r2, r5
 80194d6:	4633      	mov	r3, r6
 80194d8:	4641      	mov	r1, r8
 80194da:	4038      	ands	r0, r7
 80194dc:	f7ff ffcc 	bl	8019478 <_ZN8touchgfx7muldivuEmmmRm>
 80194e0:	fbbb faf5 	udiv	sl, fp, r5
 80194e4:	462a      	mov	r2, r5
 80194e6:	4607      	mov	r7, r0
 80194e8:	ab01      	add	r3, sp, #4
 80194ea:	fb05 b11a 	mls	r1, r5, sl, fp
 80194ee:	4648      	mov	r0, r9
 80194f0:	f7ff ffc2 	bl	8019478 <_ZN8touchgfx7muldivuEmmmRm>
 80194f4:	9b01      	ldr	r3, [sp, #4]
 80194f6:	6832      	ldr	r2, [r6, #0]
 80194f8:	fb09 f40a 	mul.w	r4, r9, sl
 80194fc:	441a      	add	r2, r3
 80194fe:	fbb2 f3f5 	udiv	r3, r2, r5
 8019502:	441c      	add	r4, r3
 8019504:	443c      	add	r4, r7
 8019506:	4420      	add	r0, r4
 8019508:	fb05 2513 	mls	r5, r5, r3, r2
 801950c:	e7da      	b.n	80194c4 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801950e <_ZN8touchgfx6muldivElllRl>:
 801950e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019510:	2800      	cmp	r0, #0
 8019512:	bfba      	itte	lt
 8019514:	4240      	neglt	r0, r0
 8019516:	f04f 34ff 	movlt.w	r4, #4294967295
 801951a:	2401      	movge	r4, #1
 801951c:	2900      	cmp	r1, #0
 801951e:	bfbc      	itt	lt
 8019520:	4249      	neglt	r1, r1
 8019522:	4264      	neglt	r4, r4
 8019524:	2a00      	cmp	r2, #0
 8019526:	bfb6      	itet	lt
 8019528:	4265      	neglt	r5, r4
 801952a:	4625      	movge	r5, r4
 801952c:	4252      	neglt	r2, r2
 801952e:	4288      	cmp	r0, r1
 8019530:	461e      	mov	r6, r3
 8019532:	bfc2      	ittt	gt
 8019534:	4603      	movgt	r3, r0
 8019536:	4608      	movgt	r0, r1
 8019538:	4619      	movgt	r1, r3
 801953a:	ab01      	add	r3, sp, #4
 801953c:	f7ff ff9c 	bl	8019478 <_ZN8touchgfx7muldivuEmmmRm>
 8019540:	9b01      	ldr	r3, [sp, #4]
 8019542:	4368      	muls	r0, r5
 8019544:	435c      	muls	r4, r3
 8019546:	6034      	str	r4, [r6, #0]
 8019548:	b002      	add	sp, #8
 801954a:	bd70      	pop	{r4, r5, r6, pc}

0801954c <_ZN8touchgfx6muldivElll>:
 801954c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801954e:	4606      	mov	r6, r0
 8019550:	ab01      	add	r3, sp, #4
 8019552:	460d      	mov	r5, r1
 8019554:	4614      	mov	r4, r2
 8019556:	f7ff ffda 	bl	801950e <_ZN8touchgfx6muldivElllRl>
 801955a:	2e00      	cmp	r6, #0
 801955c:	db20      	blt.n	80195a0 <_ZN8touchgfx6muldivElll+0x54>
 801955e:	bf14      	ite	ne
 8019560:	2301      	movne	r3, #1
 8019562:	2300      	moveq	r3, #0
 8019564:	2d00      	cmp	r5, #0
 8019566:	db1e      	blt.n	80195a6 <_ZN8touchgfx6muldivElll+0x5a>
 8019568:	bf14      	ite	ne
 801956a:	2201      	movne	r2, #1
 801956c:	2200      	moveq	r2, #0
 801956e:	2c00      	cmp	r4, #0
 8019570:	fb03 f202 	mul.w	r2, r3, r2
 8019574:	db1a      	blt.n	80195ac <_ZN8touchgfx6muldivElll+0x60>
 8019576:	bf14      	ite	ne
 8019578:	2301      	movne	r3, #1
 801957a:	2300      	moveq	r3, #0
 801957c:	4353      	muls	r3, r2
 801957e:	2b01      	cmp	r3, #1
 8019580:	d117      	bne.n	80195b2 <_ZN8touchgfx6muldivElll+0x66>
 8019582:	9b01      	ldr	r3, [sp, #4]
 8019584:	2c00      	cmp	r4, #0
 8019586:	bfb8      	it	lt
 8019588:	4264      	neglt	r4, r4
 801958a:	2b00      	cmp	r3, #0
 801958c:	f104 0401 	add.w	r4, r4, #1
 8019590:	bfb8      	it	lt
 8019592:	425b      	neglt	r3, r3
 8019594:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8019598:	db00      	blt.n	801959c <_ZN8touchgfx6muldivElll+0x50>
 801959a:	3001      	adds	r0, #1
 801959c:	b002      	add	sp, #8
 801959e:	bd70      	pop	{r4, r5, r6, pc}
 80195a0:	f04f 33ff 	mov.w	r3, #4294967295
 80195a4:	e7de      	b.n	8019564 <_ZN8touchgfx6muldivElll+0x18>
 80195a6:	f04f 32ff 	mov.w	r2, #4294967295
 80195aa:	e7e0      	b.n	801956e <_ZN8touchgfx6muldivElll+0x22>
 80195ac:	f04f 33ff 	mov.w	r3, #4294967295
 80195b0:	e7e4      	b.n	801957c <_ZN8touchgfx6muldivElll+0x30>
 80195b2:	3301      	adds	r3, #1
 80195b4:	d1f2      	bne.n	801959c <_ZN8touchgfx6muldivElll+0x50>
 80195b6:	9b01      	ldr	r3, [sp, #4]
 80195b8:	2c00      	cmp	r4, #0
 80195ba:	bfb8      	it	lt
 80195bc:	4264      	neglt	r4, r4
 80195be:	2b00      	cmp	r3, #0
 80195c0:	bfb8      	it	lt
 80195c2:	425b      	neglt	r3, r3
 80195c4:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 80195c8:	bfc8      	it	gt
 80195ca:	f100 30ff 	addgt.w	r0, r0, #4294967295
 80195ce:	e7e5      	b.n	801959c <_ZN8touchgfx6muldivElll+0x50>

080195d0 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80195d0:	2000      	movs	r0, #0
 80195d2:	4770      	bx	lr

080195d4 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80195d4:	2001      	movs	r0, #1
 80195d6:	4770      	bx	lr

080195d8 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80195d8:	2002      	movs	r0, #2
 80195da:	4770      	bx	lr

080195dc <_ZN8touchgfx12GestureEventD1Ev>:
 80195dc:	4770      	bx	lr

080195de <_ZN8touchgfx9DragEventD1Ev>:
 80195de:	4770      	bx	lr

080195e0 <_ZN8touchgfx10ClickEventD1Ev>:
 80195e0:	4770      	bx	lr

080195e2 <_ZN8touchgfx10ClickEventD0Ev>:
 80195e2:	b510      	push	{r4, lr}
 80195e4:	210c      	movs	r1, #12
 80195e6:	4604      	mov	r4, r0
 80195e8:	f00e f9d8 	bl	802799c <_ZdlPvj>
 80195ec:	4620      	mov	r0, r4
 80195ee:	bd10      	pop	{r4, pc}

080195f0 <_ZN8touchgfx9DragEventD0Ev>:
 80195f0:	b510      	push	{r4, lr}
 80195f2:	2110      	movs	r1, #16
 80195f4:	4604      	mov	r4, r0
 80195f6:	f00e f9d1 	bl	802799c <_ZdlPvj>
 80195fa:	4620      	mov	r0, r4
 80195fc:	bd10      	pop	{r4, pc}

080195fe <_ZN8touchgfx12GestureEventD0Ev>:
 80195fe:	b510      	push	{r4, lr}
 8019600:	210c      	movs	r1, #12
 8019602:	4604      	mov	r4, r0
 8019604:	f00e f9ca 	bl	802799c <_ZdlPvj>
 8019608:	4620      	mov	r0, r4
 801960a:	bd10      	pop	{r4, pc}

0801960c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801960c:	b530      	push	{r4, r5, lr}
 801960e:	460d      	mov	r5, r1
 8019610:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019612:	b087      	sub	sp, #28
 8019614:	4604      	mov	r4, r0
 8019616:	b301      	cbz	r1, 801965a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8019618:	a801      	add	r0, sp, #4
 801961a:	f7ff fe71 	bl	8019300 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801961e:	892a      	ldrh	r2, [r5, #8]
 8019620:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019624:	7928      	ldrb	r0, [r5, #4]
 8019626:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801962a:	f88d 0010 	strb.w	r0, [sp, #16]
 801962e:	1ad2      	subs	r2, r2, r3
 8019630:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019632:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019634:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019638:	441a      	add	r2, r3
 801963a:	896b      	ldrh	r3, [r5, #10]
 801963c:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8019640:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019644:	1b5b      	subs	r3, r3, r5
 8019646:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8019648:	442b      	add	r3, r5
 801964a:	4d05      	ldr	r5, [pc, #20]	; (8019660 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801964c:	9503      	str	r5, [sp, #12]
 801964e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019652:	6803      	ldr	r3, [r0, #0]
 8019654:	a903      	add	r1, sp, #12
 8019656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019658:	4798      	blx	r3
 801965a:	b007      	add	sp, #28
 801965c:	bd30      	pop	{r4, r5, pc}
 801965e:	bf00      	nop
 8019660:	0802ed90 	.word	0x0802ed90

08019664 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8019664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019668:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801966a:	b08a      	sub	sp, #40	; 0x28
 801966c:	4604      	mov	r4, r0
 801966e:	460d      	mov	r5, r1
 8019670:	b113      	cbz	r3, 8019678 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8019672:	790b      	ldrb	r3, [r1, #4]
 8019674:	2b00      	cmp	r3, #0
 8019676:	d044      	beq.n	8019702 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019678:	f104 0804 	add.w	r8, r4, #4
 801967c:	4641      	mov	r1, r8
 801967e:	a803      	add	r0, sp, #12
 8019680:	f7ff fe3e 	bl	8019300 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019684:	792b      	ldrb	r3, [r5, #4]
 8019686:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801968a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801968e:	b983      	cbnz	r3, 80196b2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8019690:	892a      	ldrh	r2, [r5, #8]
 8019692:	88e9      	ldrh	r1, [r5, #6]
 8019694:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8019698:	1b92      	subs	r2, r2, r6
 801969a:	1bc9      	subs	r1, r1, r7
 801969c:	9301      	str	r3, [sp, #4]
 801969e:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80196a2:	9300      	str	r3, [sp, #0]
 80196a4:	b212      	sxth	r2, r2
 80196a6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80196aa:	b209      	sxth	r1, r1
 80196ac:	4640      	mov	r0, r8
 80196ae:	f7f9 ffb3 	bl	8013618 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80196b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80196b4:	b329      	cbz	r1, 8019702 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80196b6:	a805      	add	r0, sp, #20
 80196b8:	f7ff fe22 	bl	8019300 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80196bc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80196c0:	792b      	ldrb	r3, [r5, #4]
 80196c2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80196c4:	f88d 3020 	strb.w	r3, [sp, #32]
 80196c8:	1abf      	subs	r7, r7, r2
 80196ca:	88ea      	ldrh	r2, [r5, #6]
 80196cc:	4417      	add	r7, r2
 80196ce:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80196d0:	4417      	add	r7, r2
 80196d2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80196d6:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80196da:	1ab6      	subs	r6, r6, r2
 80196dc:	892a      	ldrh	r2, [r5, #8]
 80196de:	4416      	add	r6, r2
 80196e0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80196e2:	4416      	add	r6, r2
 80196e4:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80196e8:	4a07      	ldr	r2, [pc, #28]	; (8019708 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80196ea:	9207      	str	r2, [sp, #28]
 80196ec:	2600      	movs	r6, #0
 80196ee:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 80196f2:	6803      	ldr	r3, [r0, #0]
 80196f4:	a907      	add	r1, sp, #28
 80196f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80196f8:	4798      	blx	r3
 80196fa:	792b      	ldrb	r3, [r5, #4]
 80196fc:	b10b      	cbz	r3, 8019702 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80196fe:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8019702:	b00a      	add	sp, #40	; 0x28
 8019704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019708:	0802ed68 	.word	0x0802ed68

0801970c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801970c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019710:	460c      	mov	r4, r1
 8019712:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019714:	b088      	sub	sp, #32
 8019716:	4605      	mov	r5, r0
 8019718:	2900      	cmp	r1, #0
 801971a:	d06d      	beq.n	80197f8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801971c:	4668      	mov	r0, sp
 801971e:	f7ff fdef 	bl	8019300 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019722:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8019724:	88e3      	ldrh	r3, [r4, #6]
 8019726:	f9bd 8000 	ldrsh.w	r8, [sp]
 801972a:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801972e:	440b      	add	r3, r1
 8019730:	b21b      	sxth	r3, r3
 8019732:	4543      	cmp	r3, r8
 8019734:	db31      	blt.n	801979a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019736:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801973a:	44c4      	add	ip, r8
 801973c:	fa0f fc8c 	sxth.w	ip, ip
 8019740:	4563      	cmp	r3, ip
 8019742:	da2a      	bge.n	801979a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019744:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8019746:	8926      	ldrh	r6, [r4, #8]
 8019748:	4416      	add	r6, r2
 801974a:	b236      	sxth	r6, r6
 801974c:	42be      	cmp	r6, r7
 801974e:	db24      	blt.n	801979a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019750:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8019754:	4438      	add	r0, r7
 8019756:	b200      	sxth	r0, r0
 8019758:	4286      	cmp	r6, r0
 801975a:	da1e      	bge.n	801979a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801975c:	8963      	ldrh	r3, [r4, #10]
 801975e:	4419      	add	r1, r3
 8019760:	b209      	sxth	r1, r1
 8019762:	4541      	cmp	r1, r8
 8019764:	db08      	blt.n	8019778 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019766:	4561      	cmp	r1, ip
 8019768:	da06      	bge.n	8019778 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801976a:	89a3      	ldrh	r3, [r4, #12]
 801976c:	441a      	add	r2, r3
 801976e:	b212      	sxth	r2, r2
 8019770:	42ba      	cmp	r2, r7
 8019772:	db01      	blt.n	8019778 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019774:	4282      	cmp	r2, r0
 8019776:	db10      	blt.n	801979a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019778:	4b21      	ldr	r3, [pc, #132]	; (8019800 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801977a:	9304      	str	r3, [sp, #16]
 801977c:	2302      	movs	r3, #2
 801977e:	f88d 3014 	strb.w	r3, [sp, #20]
 8019782:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019784:	2300      	movs	r3, #0
 8019786:	f8ad 3016 	strh.w	r3, [sp, #22]
 801978a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801978e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019792:	6803      	ldr	r3, [r0, #0]
 8019794:	a904      	add	r1, sp, #16
 8019796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019798:	4798      	blx	r3
 801979a:	1d29      	adds	r1, r5, #4
 801979c:	a802      	add	r0, sp, #8
 801979e:	f7ff fdaf 	bl	8019300 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80197a2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80197a6:	88e0      	ldrh	r0, [r4, #6]
 80197a8:	7921      	ldrb	r1, [r4, #4]
 80197aa:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80197ae:	8922      	ldrh	r2, [r4, #8]
 80197b0:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80197b2:	f88d 1014 	strb.w	r1, [sp, #20]
 80197b6:	eba3 0808 	sub.w	r8, r3, r8
 80197ba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80197be:	1bdf      	subs	r7, r3, r7
 80197c0:	b2bb      	uxth	r3, r7
 80197c2:	fa1f f888 	uxth.w	r8, r8
 80197c6:	8967      	ldrh	r7, [r4, #10]
 80197c8:	89a4      	ldrh	r4, [r4, #12]
 80197ca:	4440      	add	r0, r8
 80197cc:	4460      	add	r0, ip
 80197ce:	441a      	add	r2, r3
 80197d0:	44b8      	add	r8, r7
 80197d2:	4423      	add	r3, r4
 80197d4:	f8ad 0016 	strh.w	r0, [sp, #22]
 80197d8:	4433      	add	r3, r6
 80197da:	4432      	add	r2, r6
 80197dc:	44e0      	add	r8, ip
 80197de:	4c09      	ldr	r4, [pc, #36]	; (8019804 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80197e0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80197e2:	9404      	str	r4, [sp, #16]
 80197e4:	f8ad 2018 	strh.w	r2, [sp, #24]
 80197e8:	f8ad 801a 	strh.w	r8, [sp, #26]
 80197ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 80197f0:	6803      	ldr	r3, [r0, #0]
 80197f2:	a904      	add	r1, sp, #16
 80197f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80197f6:	4798      	blx	r3
 80197f8:	b008      	add	sp, #32
 80197fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197fe:	bf00      	nop
 8019800:	0802ed68 	.word	0x0802ed68
 8019804:	0802ed7c 	.word	0x0802ed7c

08019808 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8019808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801980a:	4604      	mov	r4, r0
 801980c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8019810:	3201      	adds	r2, #1
 8019812:	d112      	bne.n	801983a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8019814:	6803      	ldr	r3, [r0, #0]
 8019816:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801981a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801981e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019822:	2500      	movs	r5, #0
 8019824:	9500      	str	r5, [sp, #0]
 8019826:	466d      	mov	r5, sp
 8019828:	4629      	mov	r1, r5
 801982a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801982e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019830:	4798      	blx	r3
 8019832:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019836:	e884 0003 	stmia.w	r4, {r0, r1}
 801983a:	4620      	mov	r0, r4
 801983c:	b003      	add	sp, #12
 801983e:	bd30      	pop	{r4, r5, pc}

08019840 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8019840:	b513      	push	{r0, r1, r4, lr}
 8019842:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8019846:	3301      	adds	r3, #1
 8019848:	4604      	mov	r4, r0
 801984a:	d109      	bne.n	8019860 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801984c:	4601      	mov	r1, r0
 801984e:	4668      	mov	r0, sp
 8019850:	f7ff fd56 	bl	8019300 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019854:	f8bd 3000 	ldrh.w	r3, [sp]
 8019858:	8423      	strh	r3, [r4, #32]
 801985a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801985e:	8463      	strh	r3, [r4, #34]	; 0x22
 8019860:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8019864:	b002      	add	sp, #8
 8019866:	bd10      	pop	{r4, pc}

08019868 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8019868:	b513      	push	{r0, r1, r4, lr}
 801986a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801986e:	3301      	adds	r3, #1
 8019870:	4604      	mov	r4, r0
 8019872:	d109      	bne.n	8019888 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8019874:	4601      	mov	r1, r0
 8019876:	4668      	mov	r0, sp
 8019878:	f7ff fd42 	bl	8019300 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801987c:	f8bd 3000 	ldrh.w	r3, [sp]
 8019880:	8423      	strh	r3, [r4, #32]
 8019882:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019886:	8463      	strh	r3, [r4, #34]	; 0x22
 8019888:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801988c:	b002      	add	sp, #8
 801988e:	bd10      	pop	{r4, pc}

08019890 <_ZN8touchgfx6ScreenC1Ev>:
 8019890:	b570      	push	{r4, r5, r6, lr}
 8019892:	4605      	mov	r5, r0
 8019894:	4b16      	ldr	r3, [pc, #88]	; (80198f0 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8019896:	f845 3b04 	str.w	r3, [r5], #4
 801989a:	2300      	movs	r3, #0
 801989c:	8103      	strh	r3, [r0, #8]
 801989e:	8143      	strh	r3, [r0, #10]
 80198a0:	8183      	strh	r3, [r0, #12]
 80198a2:	81c3      	strh	r3, [r0, #14]
 80198a4:	8203      	strh	r3, [r0, #16]
 80198a6:	8243      	strh	r3, [r0, #18]
 80198a8:	8283      	strh	r3, [r0, #20]
 80198aa:	82c3      	strh	r3, [r0, #22]
 80198ac:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80198b0:	6203      	str	r3, [r0, #32]
 80198b2:	8483      	strh	r3, [r0, #36]	; 0x24
 80198b4:	84c3      	strh	r3, [r0, #38]	; 0x26
 80198b6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80198ba:	4a0e      	ldr	r2, [pc, #56]	; (80198f4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80198bc:	6343      	str	r3, [r0, #52]	; 0x34
 80198be:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 80198c2:	4b0d      	ldr	r3, [pc, #52]	; (80198f8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80198c4:	6042      	str	r2, [r0, #4]
 80198c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80198ca:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80198cc:	4a0b      	ldr	r2, [pc, #44]	; (80198fc <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80198ce:	4604      	mov	r4, r0
 80198d0:	2101      	movs	r1, #1
 80198d2:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80198d6:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80198da:	f9b2 1000 	ldrsh.w	r1, [r2]
 80198de:	4628      	mov	r0, r5
 80198e0:	4798      	blx	r3
 80198e2:	6863      	ldr	r3, [r4, #4]
 80198e4:	4628      	mov	r0, r5
 80198e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80198e8:	4631      	mov	r1, r6
 80198ea:	4798      	blx	r3
 80198ec:	4620      	mov	r0, r4
 80198ee:	bd70      	pop	{r4, r5, r6, pc}
 80198f0:	0802eda4 	.word	0x0802eda4
 80198f4:	0802e5cc 	.word	0x0802e5cc
 80198f8:	2000c432 	.word	0x2000c432
 80198fc:	2000c430 	.word	0x2000c430

08019900 <_ZN8touchgfx6Screen4drawEv>:
 8019900:	b507      	push	{r0, r1, r2, lr}
 8019902:	4b09      	ldr	r3, [pc, #36]	; (8019928 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8019904:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019908:	4b08      	ldr	r3, [pc, #32]	; (801992c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801990a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801990e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019912:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019916:	6803      	ldr	r3, [r0, #0]
 8019918:	2100      	movs	r1, #0
 801991a:	9100      	str	r1, [sp, #0]
 801991c:	689b      	ldr	r3, [r3, #8]
 801991e:	4669      	mov	r1, sp
 8019920:	4798      	blx	r3
 8019922:	b003      	add	sp, #12
 8019924:	f85d fb04 	ldr.w	pc, [sp], #4
 8019928:	2000c430 	.word	0x2000c430
 801992c:	2000c432 	.word	0x2000c432

08019930 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8019930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019934:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019938:	2b00      	cmp	r3, #0
 801993a:	b089      	sub	sp, #36	; 0x24
 801993c:	4680      	mov	r8, r0
 801993e:	460c      	mov	r4, r1
 8019940:	4615      	mov	r5, r2
 8019942:	dd0e      	ble.n	8019962 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019944:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019948:	2b00      	cmp	r3, #0
 801994a:	dd0a      	ble.n	8019962 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801994c:	4628      	mov	r0, r5
 801994e:	f7ff ff5b 	bl	8019808 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019952:	4621      	mov	r1, r4
 8019954:	f7fe fb88 	bl	8018068 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019958:	69eb      	ldr	r3, [r5, #28]
 801995a:	b928      	cbnz	r0, 8019968 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801995c:	461d      	mov	r5, r3
 801995e:	2b00      	cmp	r3, #0
 8019960:	d1f4      	bne.n	801994c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8019962:	b009      	add	sp, #36	; 0x24
 8019964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019968:	ae04      	add	r6, sp, #16
 801996a:	2b00      	cmp	r3, #0
 801996c:	f000 80b5 	beq.w	8019ada <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019970:	682b      	ldr	r3, [r5, #0]
 8019972:	4629      	mov	r1, r5
 8019974:	68db      	ldr	r3, [r3, #12]
 8019976:	a802      	add	r0, sp, #8
 8019978:	4798      	blx	r3
 801997a:	4628      	mov	r0, r5
 801997c:	f7ff ff60 	bl	8019840 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019980:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8019984:	4407      	add	r7, r0
 8019986:	4628      	mov	r0, r5
 8019988:	f7ff ff6e 	bl	8019868 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801998c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019990:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8019994:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019998:	4418      	add	r0, r3
 801999a:	4621      	mov	r1, r4
 801999c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80199a0:	f8ad 0012 	strh.w	r0, [sp, #18]
 80199a4:	b23f      	sxth	r7, r7
 80199a6:	4630      	mov	r0, r6
 80199a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80199ac:	f8ad 7010 	strh.w	r7, [sp, #16]
 80199b0:	f7f9 ff16 	bl	80137e0 <_ZN8touchgfx4RectaNERKS0_>
 80199b4:	4628      	mov	r0, r5
 80199b6:	f7ff ff27 	bl	8019808 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80199ba:	4602      	mov	r2, r0
 80199bc:	e896 0003 	ldmia.w	r6, {r0, r1}
 80199c0:	ab06      	add	r3, sp, #24
 80199c2:	e883 0003 	stmia.w	r3, {r0, r1}
 80199c6:	4611      	mov	r1, r2
 80199c8:	4618      	mov	r0, r3
 80199ca:	f7f9 ff09 	bl	80137e0 <_ZN8touchgfx4RectaNERKS0_>
 80199ce:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80199d2:	f9b4 1000 	ldrsh.w	r1, [r4]
 80199d6:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80199da:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80199de:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80199e2:	4299      	cmp	r1, r3
 80199e4:	d10b      	bne.n	80199fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80199e6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80199ea:	4552      	cmp	r2, sl
 80199ec:	d107      	bne.n	80199fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80199ee:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80199f2:	455a      	cmp	r2, fp
 80199f4:	d103      	bne.n	80199fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80199f6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80199fa:	454a      	cmp	r2, r9
 80199fc:	d06d      	beq.n	8019ada <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80199fe:	f1bb 0f00 	cmp.w	fp, #0
 8019a02:	dd65      	ble.n	8019ad0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8019a04:	f1b9 0f00 	cmp.w	r9, #0
 8019a08:	dd62      	ble.n	8019ad0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8019a0a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019a0e:	fa1f f08a 	uxth.w	r0, sl
 8019a12:	4552      	cmp	r2, sl
 8019a14:	9000      	str	r0, [sp, #0]
 8019a16:	da12      	bge.n	8019a3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8019a18:	9301      	str	r3, [sp, #4]
 8019a1a:	9b00      	ldr	r3, [sp, #0]
 8019a1c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019a20:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019a24:	1a9a      	subs	r2, r3, r2
 8019a26:	f8ad 1010 	strh.w	r1, [sp, #16]
 8019a2a:	f8ad 0014 	strh.w	r0, [sp, #20]
 8019a2e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8019a32:	69ea      	ldr	r2, [r5, #28]
 8019a34:	4631      	mov	r1, r6
 8019a36:	4640      	mov	r0, r8
 8019a38:	f7ff ff7a 	bl	8019930 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019a3c:	9b01      	ldr	r3, [sp, #4]
 8019a3e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8019a42:	429a      	cmp	r2, r3
 8019a44:	b29f      	uxth	r7, r3
 8019a46:	da0d      	bge.n	8019a64 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8019a48:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019a4c:	1aba      	subs	r2, r7, r2
 8019a4e:	f8ad a012 	strh.w	sl, [sp, #18]
 8019a52:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019a56:	f8ad 9016 	strh.w	r9, [sp, #22]
 8019a5a:	69ea      	ldr	r2, [r5, #28]
 8019a5c:	4631      	mov	r1, r6
 8019a5e:	4640      	mov	r0, r8
 8019a60:	f7ff ff66 	bl	8019930 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019a64:	8822      	ldrh	r2, [r4, #0]
 8019a66:	88a3      	ldrh	r3, [r4, #4]
 8019a68:	445f      	add	r7, fp
 8019a6a:	4413      	add	r3, r2
 8019a6c:	b29b      	uxth	r3, r3
 8019a6e:	b2bf      	uxth	r7, r7
 8019a70:	b23a      	sxth	r2, r7
 8019a72:	b219      	sxth	r1, r3
 8019a74:	4291      	cmp	r1, r2
 8019a76:	dd0d      	ble.n	8019a94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8019a78:	1bdb      	subs	r3, r3, r7
 8019a7a:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019a7e:	f8ad a012 	strh.w	sl, [sp, #18]
 8019a82:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019a86:	f8ad 9016 	strh.w	r9, [sp, #22]
 8019a8a:	69ea      	ldr	r2, [r5, #28]
 8019a8c:	4631      	mov	r1, r6
 8019a8e:	4640      	mov	r0, r8
 8019a90:	f7ff ff4e 	bl	8019930 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019a94:	88e2      	ldrh	r2, [r4, #6]
 8019a96:	8863      	ldrh	r3, [r4, #2]
 8019a98:	4413      	add	r3, r2
 8019a9a:	9a00      	ldr	r2, [sp, #0]
 8019a9c:	444a      	add	r2, r9
 8019a9e:	b29b      	uxth	r3, r3
 8019aa0:	fa1f f982 	uxth.w	r9, r2
 8019aa4:	fa0f f289 	sxth.w	r2, r9
 8019aa8:	b219      	sxth	r1, r3
 8019aaa:	428a      	cmp	r2, r1
 8019aac:	da15      	bge.n	8019ada <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019aae:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019ab2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019ab6:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019aba:	eba3 0309 	sub.w	r3, r3, r9
 8019abe:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019ac2:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019ac6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019aca:	69ea      	ldr	r2, [r5, #28]
 8019acc:	4631      	mov	r1, r6
 8019ace:	e001      	b.n	8019ad4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8019ad0:	69ea      	ldr	r2, [r5, #28]
 8019ad2:	4621      	mov	r1, r4
 8019ad4:	4640      	mov	r0, r8
 8019ad6:	f7ff ff2b 	bl	8019930 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019ada:	4628      	mov	r0, r5
 8019adc:	f7ff fe94 	bl	8019808 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019ae0:	6861      	ldr	r1, [r4, #4]
 8019ae2:	4602      	mov	r2, r0
 8019ae4:	6820      	ldr	r0, [r4, #0]
 8019ae6:	4633      	mov	r3, r6
 8019ae8:	c303      	stmia	r3!, {r0, r1}
 8019aea:	4611      	mov	r1, r2
 8019aec:	4630      	mov	r0, r6
 8019aee:	f7f9 fe77 	bl	80137e0 <_ZN8touchgfx4RectaNERKS0_>
 8019af2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	f77f af33 	ble.w	8019962 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019afc:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	f77f af2e 	ble.w	8019962 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019b06:	4628      	mov	r0, r5
 8019b08:	f7ff fe9a 	bl	8019840 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019b0c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019b10:	1a18      	subs	r0, r3, r0
 8019b12:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019b16:	4628      	mov	r0, r5
 8019b18:	f7ff fea6 	bl	8019868 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019b1c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019b20:	1a18      	subs	r0, r3, r0
 8019b22:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019b26:	682b      	ldr	r3, [r5, #0]
 8019b28:	4631      	mov	r1, r6
 8019b2a:	689b      	ldr	r3, [r3, #8]
 8019b2c:	4628      	mov	r0, r5
 8019b2e:	4798      	blx	r3
 8019b30:	e717      	b.n	8019962 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08019b32 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8019b32:	b570      	push	{r4, r5, r6, lr}
 8019b34:	460c      	mov	r4, r1
 8019b36:	b086      	sub	sp, #24
 8019b38:	1d06      	adds	r6, r0, #4
 8019b3a:	2300      	movs	r3, #0
 8019b3c:	4631      	mov	r1, r6
 8019b3e:	4605      	mov	r5, r0
 8019b40:	a802      	add	r0, sp, #8
 8019b42:	9301      	str	r3, [sp, #4]
 8019b44:	f7ff fbdc 	bl	8019300 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019b48:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019b4c:	8822      	ldrh	r2, [r4, #0]
 8019b4e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8019b52:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019b56:	f8ad 0014 	strh.w	r0, [sp, #20]
 8019b5a:	1ad2      	subs	r2, r2, r3
 8019b5c:	8863      	ldrh	r3, [r4, #2]
 8019b5e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019b62:	1a5b      	subs	r3, r3, r1
 8019b64:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8019b68:	f8ad 1016 	strh.w	r1, [sp, #22]
 8019b6c:	aa01      	add	r2, sp, #4
 8019b6e:	a904      	add	r1, sp, #16
 8019b70:	4630      	mov	r0, r6
 8019b72:	f8ad 3012 	strh.w	r3, [sp, #18]
 8019b76:	f7f9 ff0b 	bl	8013990 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8019b7a:	9a01      	ldr	r2, [sp, #4]
 8019b7c:	b11a      	cbz	r2, 8019b86 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8019b7e:	4621      	mov	r1, r4
 8019b80:	4628      	mov	r0, r5
 8019b82:	f7ff fed5 	bl	8019930 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019b86:	b006      	add	sp, #24
 8019b88:	bd70      	pop	{r4, r5, r6, pc}

08019b8a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8019b8a:	b530      	push	{r4, r5, lr}
 8019b8c:	4602      	mov	r2, r0
 8019b8e:	4604      	mov	r4, r0
 8019b90:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8019b94:	b085      	sub	sp, #20
 8019b96:	460d      	mov	r5, r1
 8019b98:	6851      	ldr	r1, [r2, #4]
 8019b9a:	466b      	mov	r3, sp
 8019b9c:	c303      	stmia	r3!, {r0, r1}
 8019b9e:	4629      	mov	r1, r5
 8019ba0:	4668      	mov	r0, sp
 8019ba2:	f7f9 fe1d 	bl	80137e0 <_ZN8touchgfx4RectaNERKS0_>
 8019ba6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019baa:	b12b      	cbz	r3, 8019bb8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8019bac:	4669      	mov	r1, sp
 8019bae:	4620      	mov	r0, r4
 8019bb0:	f7ff ffbf 	bl	8019b32 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8019bb4:	b005      	add	sp, #20
 8019bb6:	bd30      	pop	{r4, r5, pc}
 8019bb8:	3404      	adds	r4, #4
 8019bba:	4621      	mov	r1, r4
 8019bbc:	a802      	add	r0, sp, #8
 8019bbe:	f7ff fb9f 	bl	8019300 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019bc2:	f8bd 3000 	ldrh.w	r3, [sp]
 8019bc6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019bca:	1a9b      	subs	r3, r3, r2
 8019bcc:	f8ad 3000 	strh.w	r3, [sp]
 8019bd0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8019bd4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019bd8:	4669      	mov	r1, sp
 8019bda:	1a9b      	subs	r3, r3, r2
 8019bdc:	4620      	mov	r0, r4
 8019bde:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019be2:	f7f9 fe9c 	bl	801391e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8019be6:	e7e5      	b.n	8019bb4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08019be8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8019be8:	680a      	ldr	r2, [r1, #0]
 8019bea:	460b      	mov	r3, r1
 8019bec:	6992      	ldr	r2, [r2, #24]
 8019bee:	1d01      	adds	r1, r0, #4
 8019bf0:	4618      	mov	r0, r3
 8019bf2:	4710      	bx	r2

08019bf4 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 8019bf4:	4298      	cmp	r0, r3
 8019bf6:	d200      	bcs.n	8019bfa <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 8019bf8:	b913      	cbnz	r3, 8019c00 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 8019bfa:	440a      	add	r2, r1
 8019bfc:	b210      	sxth	r0, r2
 8019bfe:	4770      	bx	lr
 8019c00:	ee07 2a90 	vmov	s15, r2
 8019c04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019c08:	ee07 0a90 	vmov	s15, r0
 8019c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019c14:	ee07 3a10 	vmov	s14, r3
 8019c18:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8019c1c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019c20:	ee07 1a90 	vmov	s15, r1
 8019c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c2c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019c30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c38:	bfcc      	ite	gt
 8019c3a:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8019c3e:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8019c42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019c46:	ee17 3a90 	vmov	r3, s15
 8019c4a:	b218      	sxth	r0, r3
 8019c4c:	4770      	bx	lr

08019c4e <_ZN8touchgfx12TextProviderC1Ev>:
 8019c4e:	b538      	push	{r3, r4, r5, lr}
 8019c50:	2500      	movs	r5, #0
 8019c52:	2302      	movs	r3, #2
 8019c54:	4604      	mov	r4, r0
 8019c56:	e9c0 5500 	strd	r5, r5, [r0]
 8019c5a:	7403      	strb	r3, [r0, #16]
 8019c5c:	6145      	str	r5, [r0, #20]
 8019c5e:	7605      	strb	r5, [r0, #24]
 8019c60:	83c5      	strh	r5, [r0, #30]
 8019c62:	8405      	strh	r5, [r0, #32]
 8019c64:	86c5      	strh	r5, [r0, #54]	; 0x36
 8019c66:	8705      	strh	r5, [r0, #56]	; 0x38
 8019c68:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8019c6a:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8019c6e:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8019c72:	220e      	movs	r2, #14
 8019c74:	4629      	mov	r1, r5
 8019c76:	304c      	adds	r0, #76	; 0x4c
 8019c78:	f00e f844 	bl	8027d04 <memset>
 8019c7c:	2301      	movs	r3, #1
 8019c7e:	4620      	mov	r0, r4
 8019c80:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8019c84:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8019c88:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8019c8c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8019c90:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8019c94:	f7f6 fa64 	bl	8010160 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8019c98:	4620      	mov	r0, r4
 8019c9a:	bd38      	pop	{r3, r4, r5, pc}

08019c9c <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8019c9c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019c9e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019ca2:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8019ca4:	fab0 f080 	clz	r0, r0
 8019ca8:	0940      	lsrs	r0, r0, #5
 8019caa:	4770      	bx	lr

08019cac <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8019cac:	b530      	push	{r4, r5, lr}
 8019cae:	2500      	movs	r5, #0
 8019cb0:	2401      	movs	r4, #1
 8019cb2:	6843      	ldr	r3, [r0, #4]
 8019cb4:	b913      	cbnz	r3, 8019cbc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8019cb6:	6803      	ldr	r3, [r0, #0]
 8019cb8:	b313      	cbz	r3, 8019d00 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8019cba:	6043      	str	r3, [r0, #4]
 8019cbc:	7e03      	ldrb	r3, [r0, #24]
 8019cbe:	b143      	cbz	r3, 8019cd2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8019cc0:	6943      	ldr	r3, [r0, #20]
 8019cc2:	b12b      	cbz	r3, 8019cd0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019cc4:	881a      	ldrh	r2, [r3, #0]
 8019cc6:	b11a      	cbz	r2, 8019cd0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019cc8:	1c9a      	adds	r2, r3, #2
 8019cca:	6142      	str	r2, [r0, #20]
 8019ccc:	8818      	ldrh	r0, [r3, #0]
 8019cce:	bd30      	pop	{r4, r5, pc}
 8019cd0:	7605      	strb	r5, [r0, #24]
 8019cd2:	6843      	ldr	r3, [r0, #4]
 8019cd4:	8819      	ldrh	r1, [r3, #0]
 8019cd6:	b199      	cbz	r1, 8019d00 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8019cd8:	1c9a      	adds	r2, r3, #2
 8019cda:	2902      	cmp	r1, #2
 8019cdc:	6042      	str	r2, [r0, #4]
 8019cde:	d1f5      	bne.n	8019ccc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8019ce0:	7c03      	ldrb	r3, [r0, #16]
 8019ce2:	2b01      	cmp	r3, #1
 8019ce4:	d8e5      	bhi.n	8019cb2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019ce6:	1c5a      	adds	r2, r3, #1
 8019ce8:	3302      	adds	r3, #2
 8019cea:	7402      	strb	r2, [r0, #16]
 8019cec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8019cf0:	6143      	str	r3, [r0, #20]
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d0dd      	beq.n	8019cb2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019cf6:	881b      	ldrh	r3, [r3, #0]
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d0da      	beq.n	8019cb2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019cfc:	7604      	strb	r4, [r0, #24]
 8019cfe:	e7d8      	b.n	8019cb2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019d00:	2000      	movs	r0, #0
 8019d02:	e7e4      	b.n	8019cce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08019d04 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8019d04:	b430      	push	{r4, r5}
 8019d06:	6001      	str	r1, [r0, #0]
 8019d08:	2100      	movs	r1, #0
 8019d0a:	6041      	str	r1, [r0, #4]
 8019d0c:	6815      	ldr	r5, [r2, #0]
 8019d0e:	6085      	str	r5, [r0, #8]
 8019d10:	6852      	ldr	r2, [r2, #4]
 8019d12:	6443      	str	r3, [r0, #68]	; 0x44
 8019d14:	9b02      	ldr	r3, [sp, #8]
 8019d16:	60c2      	str	r2, [r0, #12]
 8019d18:	7401      	strb	r1, [r0, #16]
 8019d1a:	6141      	str	r1, [r0, #20]
 8019d1c:	7601      	strb	r1, [r0, #24]
 8019d1e:	8701      	strh	r1, [r0, #56]	; 0x38
 8019d20:	8401      	strh	r1, [r0, #32]
 8019d22:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8019d26:	6483      	str	r3, [r0, #72]	; 0x48
 8019d28:	bc30      	pop	{r4, r5}
 8019d2a:	f7f6 ba19 	b.w	8010160 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08019d2e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8019d2e:	b408      	push	{r3}
 8019d30:	b510      	push	{r4, lr}
 8019d32:	b085      	sub	sp, #20
 8019d34:	ac07      	add	r4, sp, #28
 8019d36:	f854 3b04 	ldr.w	r3, [r4], #4
 8019d3a:	9300      	str	r3, [sp, #0]
 8019d3c:	4613      	mov	r3, r2
 8019d3e:	4622      	mov	r2, r4
 8019d40:	9403      	str	r4, [sp, #12]
 8019d42:	f7ff ffdf 	bl	8019d04 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019d46:	b005      	add	sp, #20
 8019d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d4c:	b001      	add	sp, #4
 8019d4e:	4770      	bx	lr

08019d50 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8019d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d52:	4605      	mov	r5, r0
 8019d54:	4608      	mov	r0, r1
 8019d56:	b1e9      	cbz	r1, 8019d94 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 8019d58:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8019d5c:	460b      	mov	r3, r1
 8019d5e:	f101 0708 	add.w	r7, r1, #8
 8019d62:	4622      	mov	r2, r4
 8019d64:	6818      	ldr	r0, [r3, #0]
 8019d66:	6859      	ldr	r1, [r3, #4]
 8019d68:	4626      	mov	r6, r4
 8019d6a:	c603      	stmia	r6!, {r0, r1}
 8019d6c:	3308      	adds	r3, #8
 8019d6e:	42bb      	cmp	r3, r7
 8019d70:	4634      	mov	r4, r6
 8019d72:	d1f7      	bne.n	8019d64 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8019d74:	6818      	ldr	r0, [r3, #0]
 8019d76:	6030      	str	r0, [r6, #0]
 8019d78:	889b      	ldrh	r3, [r3, #4]
 8019d7a:	80b3      	strh	r3, [r6, #4]
 8019d7c:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8019d80:	015b      	lsls	r3, r3, #5
 8019d82:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019d86:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8019d8a:	430b      	orrs	r3, r1
 8019d8c:	425b      	negs	r3, r3
 8019d8e:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8019d92:	4610      	mov	r0, r2
 8019d94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019d96 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8019d96:	b538      	push	{r3, r4, r5, lr}
 8019d98:	460c      	mov	r4, r1
 8019d9a:	6811      	ldr	r1, [r2, #0]
 8019d9c:	4610      	mov	r0, r2
 8019d9e:	68cd      	ldr	r5, [r1, #12]
 8019da0:	4619      	mov	r1, r3
 8019da2:	47a8      	blx	r5
 8019da4:	2800      	cmp	r0, #0
 8019da6:	bf08      	it	eq
 8019da8:	4620      	moveq	r0, r4
 8019daa:	bd38      	pop	{r3, r4, r5, pc}

08019dac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8019dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019dae:	4604      	mov	r4, r0
 8019db0:	4615      	mov	r5, r2
 8019db2:	4608      	mov	r0, r1
 8019db4:	b93a      	cbnz	r2, 8019dc6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8019db6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8019dba:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8019dbe:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8019dc2:	4628      	mov	r0, r5
 8019dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019dc6:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8019dca:	8893      	ldrh	r3, [r2, #4]
 8019dcc:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8019dd0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8019dd4:	79ee      	ldrb	r6, [r5, #7]
 8019dd6:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8019dda:	4316      	orrs	r6, r2
 8019ddc:	19da      	adds	r2, r3, r7
 8019dde:	b291      	uxth	r1, r2
 8019de0:	291d      	cmp	r1, #29
 8019de2:	b2b7      	uxth	r7, r6
 8019de4:	d87a      	bhi.n	8019edc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 8019de6:	2201      	movs	r2, #1
 8019de8:	408a      	lsls	r2, r1
 8019dea:	4975      	ldr	r1, [pc, #468]	; (8019fc0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8019dec:	420a      	tst	r2, r1
 8019dee:	ea4f 06e6 	mov.w	r6, r6, asr #3
 8019df2:	d12d      	bne.n	8019e50 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8019df4:	f412 7f60 	tst.w	r2, #896	; 0x380
 8019df8:	d070      	beq.n	8019edc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 8019dfa:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8019dfe:	462b      	mov	r3, r5
 8019e00:	f105 0e08 	add.w	lr, r5, #8
 8019e04:	4615      	mov	r5, r2
 8019e06:	6818      	ldr	r0, [r3, #0]
 8019e08:	6859      	ldr	r1, [r3, #4]
 8019e0a:	4694      	mov	ip, r2
 8019e0c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019e10:	3308      	adds	r3, #8
 8019e12:	4573      	cmp	r3, lr
 8019e14:	4662      	mov	r2, ip
 8019e16:	d1f6      	bne.n	8019e06 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8019e18:	6818      	ldr	r0, [r3, #0]
 8019e1a:	f8cc 0000 	str.w	r0, [ip]
 8019e1e:	889b      	ldrh	r3, [r3, #4]
 8019e20:	f8ac 3004 	strh.w	r3, [ip, #4]
 8019e24:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8019e28:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8019e2c:	b2b3      	uxth	r3, r6
 8019e2e:	1aca      	subs	r2, r1, r3
 8019e30:	b292      	uxth	r2, r2
 8019e32:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8019e36:	10d2      	asrs	r2, r2, #3
 8019e38:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8019e3c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8019e40:	4302      	orrs	r2, r0
 8019e42:	1bcf      	subs	r7, r1, r7
 8019e44:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8019e48:	1afb      	subs	r3, r7, r3
 8019e4a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8019e4e:	e7b8      	b.n	8019dc2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8019e50:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019e52:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019e56:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8019e58:	f640 6333 	movw	r3, #3635	; 0xe33
 8019e5c:	4299      	cmp	r1, r3
 8019e5e:	d110      	bne.n	8019e82 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8019e60:	6803      	ldr	r3, [r0, #0]
 8019e62:	68db      	ldr	r3, [r3, #12]
 8019e64:	4798      	blx	r3
 8019e66:	7b41      	ldrb	r1, [r0, #13]
 8019e68:	00cb      	lsls	r3, r1, #3
 8019e6a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019e6e:	7a03      	ldrb	r3, [r0, #8]
 8019e70:	0648      	lsls	r0, r1, #25
 8019e72:	ea43 0302 	orr.w	r3, r3, r2
 8019e76:	bf44      	itt	mi
 8019e78:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019e7c:	b21b      	sxthmi	r3, r3
 8019e7e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019e82:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8019e86:	443b      	add	r3, r7
 8019e88:	4433      	add	r3, r6
 8019e8a:	b29b      	uxth	r3, r3
 8019e8c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8019e90:	462a      	mov	r2, r5
 8019e92:	f105 0c08 	add.w	ip, r5, #8
 8019e96:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019e9a:	4635      	mov	r5, r6
 8019e9c:	6810      	ldr	r0, [r2, #0]
 8019e9e:	6851      	ldr	r1, [r2, #4]
 8019ea0:	4637      	mov	r7, r6
 8019ea2:	c703      	stmia	r7!, {r0, r1}
 8019ea4:	3208      	adds	r2, #8
 8019ea6:	4562      	cmp	r2, ip
 8019ea8:	463e      	mov	r6, r7
 8019eaa:	d1f7      	bne.n	8019e9c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8019eac:	6810      	ldr	r0, [r2, #0]
 8019eae:	6038      	str	r0, [r7, #0]
 8019eb0:	8892      	ldrh	r2, [r2, #4]
 8019eb2:	80ba      	strh	r2, [r7, #4]
 8019eb4:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8019eb8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8019ebc:	10db      	asrs	r3, r3, #3
 8019ebe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019ec2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019ec6:	4313      	orrs	r3, r2
 8019ec8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8019ecc:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8019ed0:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8019ed4:	1a9b      	subs	r3, r3, r2
 8019ed6:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8019eda:	e772      	b.n	8019dc2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8019edc:	f023 0204 	bic.w	r2, r3, #4
 8019ee0:	f640 611b 	movw	r1, #3611	; 0xe1b
 8019ee4:	428a      	cmp	r2, r1
 8019ee6:	d003      	beq.n	8019ef0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8019ee8:	f640 621d 	movw	r2, #3613	; 0xe1d
 8019eec:	4293      	cmp	r3, r2
 8019eee:	d120      	bne.n	8019f32 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x186>
 8019ef0:	3b01      	subs	r3, #1
 8019ef2:	4602      	mov	r2, r0
 8019ef4:	b29b      	uxth	r3, r3
 8019ef6:	4629      	mov	r1, r5
 8019ef8:	4620      	mov	r0, r4
 8019efa:	f7ff ff4c 	bl	8019d96 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019efe:	7b41      	ldrb	r1, [r0, #13]
 8019f00:	00cb      	lsls	r3, r1, #3
 8019f02:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019f06:	7a03      	ldrb	r3, [r0, #8]
 8019f08:	0649      	lsls	r1, r1, #25
 8019f0a:	ea43 0302 	orr.w	r3, r3, r2
 8019f0e:	bf44      	itt	mi
 8019f10:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019f14:	b21b      	sxthmi	r3, r3
 8019f16:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019f1a:	7b6b      	ldrb	r3, [r5, #13]
 8019f1c:	7aaa      	ldrb	r2, [r5, #10]
 8019f1e:	005b      	lsls	r3, r3, #1
 8019f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019f24:	4313      	orrs	r3, r2
 8019f26:	115a      	asrs	r2, r3, #5
 8019f28:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8019f2c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8019f30:	e036      	b.n	8019fa0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8019f32:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8019f36:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8019f3a:	7a2a      	ldrb	r2, [r5, #8]
 8019f3c:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8019f40:	ea42 0201 	orr.w	r2, r2, r1
 8019f44:	bf1c      	itt	ne
 8019f46:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8019f4a:	b212      	sxthne	r2, r2
 8019f4c:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8019f50:	f640 6109 	movw	r1, #3593	; 0xe09
 8019f54:	f023 0210 	bic.w	r2, r3, #16
 8019f58:	428a      	cmp	r2, r1
 8019f5a:	d003      	beq.n	8019f64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b8>
 8019f5c:	f640 6213 	movw	r2, #3603	; 0xe13
 8019f60:	4293      	cmp	r3, r2
 8019f62:	d12a      	bne.n	8019fba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8019f64:	7b6e      	ldrb	r6, [r5, #13]
 8019f66:	0076      	lsls	r6, r6, #1
 8019f68:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8019f6c:	7aae      	ldrb	r6, [r5, #10]
 8019f6e:	4316      	orrs	r6, r2
 8019f70:	f640 6213 	movw	r2, #3603	; 0xe13
 8019f74:	4293      	cmp	r3, r2
 8019f76:	bf18      	it	ne
 8019f78:	f103 33ff 	addne.w	r3, r3, #4294967295
 8019f7c:	4602      	mov	r2, r0
 8019f7e:	bf14      	ite	ne
 8019f80:	b29b      	uxthne	r3, r3
 8019f82:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8019f86:	4629      	mov	r1, r5
 8019f88:	4620      	mov	r0, r4
 8019f8a:	f7ff ff04 	bl	8019d96 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019f8e:	7b43      	ldrb	r3, [r0, #13]
 8019f90:	7a82      	ldrb	r2, [r0, #10]
 8019f92:	005b      	lsls	r3, r3, #1
 8019f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019f98:	4313      	orrs	r3, r2
 8019f9a:	1af6      	subs	r6, r6, r3
 8019f9c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8019fa0:	7b69      	ldrb	r1, [r5, #13]
 8019fa2:	00cb      	lsls	r3, r1, #3
 8019fa4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019fa8:	7a2b      	ldrb	r3, [r5, #8]
 8019faa:	4313      	orrs	r3, r2
 8019fac:	064a      	lsls	r2, r1, #25
 8019fae:	bf44      	itt	mi
 8019fb0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019fb4:	b21b      	sxthmi	r3, r3
 8019fb6:	1bdb      	subs	r3, r3, r7
 8019fb8:	e747      	b.n	8019e4a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8019fba:	2300      	movs	r3, #0
 8019fbc:	e7b6      	b.n	8019f2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x180>
 8019fbe:	bf00      	nop
 8019fc0:	3fc00079 	.word	0x3fc00079

08019fc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8019fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019fc8:	4604      	mov	r4, r0
 8019fca:	b942      	cbnz	r2, 8019fde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8019fcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019fd0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8019fd4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8019fd8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8019fdc:	e047      	b.n	801a06e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8019fde:	7b51      	ldrb	r1, [r2, #13]
 8019fe0:	8893      	ldrh	r3, [r2, #4]
 8019fe2:	010d      	lsls	r5, r1, #4
 8019fe4:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8019fe8:	79d5      	ldrb	r5, [r2, #7]
 8019fea:	4305      	orrs	r5, r0
 8019fec:	2d04      	cmp	r5, #4
 8019fee:	bfcc      	ite	gt
 8019ff0:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8019ff4:	f04f 0e01 	movle.w	lr, #1
 8019ff8:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8019ffc:	f200 80ab 	bhi.w	801a156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801a000:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801a004:	4283      	cmp	r3, r0
 801a006:	d216      	bcs.n	801a036 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a008:	f240 605b 	movw	r0, #1627	; 0x65b
 801a00c:	4283      	cmp	r3, r0
 801a00e:	d859      	bhi.n	801a0c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801a010:	f240 6057 	movw	r0, #1623	; 0x657
 801a014:	4283      	cmp	r3, r0
 801a016:	d20e      	bcs.n	801a036 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a018:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801a01c:	d24a      	bcs.n	801a0b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801a01e:	f240 604e 	movw	r0, #1614	; 0x64e
 801a022:	4283      	cmp	r3, r0
 801a024:	d207      	bcs.n	801a036 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a026:	f240 601a 	movw	r0, #1562	; 0x61a
 801a02a:	4283      	cmp	r3, r0
 801a02c:	d02a      	beq.n	801a084 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a02e:	d821      	bhi.n	801a074 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801a030:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801a034:	d35b      	bcc.n	801a0ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a036:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801a03a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a03e:	f040 80d0 	bne.w	801a1e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801a042:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801a046:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a04a:	f040 80ca 	bne.w	801a1e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801a04e:	00cb      	lsls	r3, r1, #3
 801a050:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a054:	7a13      	ldrb	r3, [r2, #8]
 801a056:	0649      	lsls	r1, r1, #25
 801a058:	ea43 0300 	orr.w	r3, r3, r0
 801a05c:	bf44      	itt	mi
 801a05e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a062:	b21b      	sxthmi	r3, r3
 801a064:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a068:	1b5d      	subs	r5, r3, r5
 801a06a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a06e:	4610      	mov	r0, r2
 801a070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a074:	f240 604b 	movw	r0, #1611	; 0x64b
 801a078:	4283      	cmp	r3, r0
 801a07a:	d338      	bcc.n	801a0ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a07c:	f240 604c 	movw	r0, #1612	; 0x64c
 801a080:	4283      	cmp	r3, r0
 801a082:	d9d8      	bls.n	801a036 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a084:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801a088:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801a08c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a090:	f040 80f2 	bne.w	801a278 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801a094:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a098:	f040 80ee 	bne.w	801a278 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801a09c:	00cb      	lsls	r3, r1, #3
 801a09e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a0a2:	7a13      	ldrb	r3, [r2, #8]
 801a0a4:	064e      	lsls	r6, r1, #25
 801a0a6:	ea43 0300 	orr.w	r3, r3, r0
 801a0aa:	bf44      	itt	mi
 801a0ac:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a0b0:	b21b      	sxthmi	r3, r3
 801a0b2:	e7d9      	b.n	801a068 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801a0b4:	f240 6054 	movw	r0, #1620	; 0x654
 801a0b8:	4283      	cmp	r3, r0
 801a0ba:	d8e3      	bhi.n	801a084 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a0bc:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801a0c0:	d9e0      	bls.n	801a084 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a0c2:	e7b8      	b.n	801a036 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a0c4:	f240 6074 	movw	r0, #1652	; 0x674
 801a0c8:	4283      	cmp	r3, r0
 801a0ca:	d0b4      	beq.n	801a036 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a0cc:	d82d      	bhi.n	801a12a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801a0ce:	f240 605e 	movw	r0, #1630	; 0x65e
 801a0d2:	4283      	cmp	r3, r0
 801a0d4:	d804      	bhi.n	801a0e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801a0d6:	f240 605d 	movw	r0, #1629	; 0x65d
 801a0da:	4283      	cmp	r3, r0
 801a0dc:	d3d2      	bcc.n	801a084 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a0de:	e7aa      	b.n	801a036 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a0e0:	f240 605f 	movw	r0, #1631	; 0x65f
 801a0e4:	4283      	cmp	r3, r0
 801a0e6:	d0cd      	beq.n	801a084 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a0e8:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801a0ec:	d0a3      	beq.n	801a036 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a0ee:	00cb      	lsls	r3, r1, #3
 801a0f0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a0f4:	7a13      	ldrb	r3, [r2, #8]
 801a0f6:	0649      	lsls	r1, r1, #25
 801a0f8:	ea43 0300 	orr.w	r3, r3, r0
 801a0fc:	bf44      	itt	mi
 801a0fe:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a102:	b21b      	sxthmi	r3, r3
 801a104:	1b5d      	subs	r5, r3, r5
 801a106:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a10a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a10e:	7b53      	ldrb	r3, [r2, #13]
 801a110:	015b      	lsls	r3, r3, #5
 801a112:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a116:	7993      	ldrb	r3, [r2, #6]
 801a118:	430b      	orrs	r3, r1
 801a11a:	005b      	lsls	r3, r3, #1
 801a11c:	2105      	movs	r1, #5
 801a11e:	fb93 f3f1 	sdiv	r3, r3, r1
 801a122:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801a126:	440b      	add	r3, r1
 801a128:	e756      	b.n	8019fd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801a12a:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801a12e:	4283      	cmp	r3, r0
 801a130:	d809      	bhi.n	801a146 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801a132:	f240 60df 	movw	r0, #1759	; 0x6df
 801a136:	4283      	cmp	r3, r0
 801a138:	f4bf af7d 	bcs.w	801a036 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a13c:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801a140:	2b05      	cmp	r3, #5
 801a142:	d8d4      	bhi.n	801a0ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a144:	e777      	b.n	801a036 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a146:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801a14a:	4283      	cmp	r3, r0
 801a14c:	d09a      	beq.n	801a084 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a14e:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801a152:	4283      	cmp	r3, r0
 801a154:	e7ca      	b.n	801a0ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801a156:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801a15a:	d22b      	bcs.n	801a1b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801a15c:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801a160:	4283      	cmp	r3, r0
 801a162:	d28f      	bcs.n	801a084 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a164:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a168:	4283      	cmp	r3, r0
 801a16a:	d816      	bhi.n	801a19a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801a16c:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801a170:	4283      	cmp	r3, r0
 801a172:	f4bf af60 	bcs.w	801a036 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a176:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801a17a:	4283      	cmp	r3, r0
 801a17c:	d80a      	bhi.n	801a194 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801a17e:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801a182:	4283      	cmp	r3, r0
 801a184:	f4bf af57 	bcs.w	801a036 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a188:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801a18c:	4283      	cmp	r3, r0
 801a18e:	f43f af79 	beq.w	801a084 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a192:	e7ac      	b.n	801a0ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a194:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801a198:	e7f8      	b.n	801a18c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801a19a:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801a19e:	4283      	cmp	r3, r0
 801a1a0:	d802      	bhi.n	801a1a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801a1a2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801a1a6:	e798      	b.n	801a0da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801a1a8:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801a1ac:	4283      	cmp	r3, r0
 801a1ae:	f47f af42 	bne.w	801a036 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a1b2:	e767      	b.n	801a084 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a1b4:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801a1b8:	4283      	cmp	r3, r0
 801a1ba:	f43f af63 	beq.w	801a084 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a1be:	d802      	bhi.n	801a1c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801a1c0:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801a1c4:	e7f2      	b.n	801a1ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801a1c6:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801a1ca:	4283      	cmp	r3, r0
 801a1cc:	d805      	bhi.n	801a1da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801a1ce:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801a1d2:	4283      	cmp	r3, r0
 801a1d4:	f4ff af2f 	bcc.w	801a036 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a1d8:	e754      	b.n	801a084 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a1da:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801a1de:	4283      	cmp	r3, r0
 801a1e0:	e7af      	b.n	801a142 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801a1e2:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801a1e6:	4617      	mov	r7, r2
 801a1e8:	f102 0808 	add.w	r8, r2, #8
 801a1ec:	4666      	mov	r6, ip
 801a1ee:	6838      	ldr	r0, [r7, #0]
 801a1f0:	6879      	ldr	r1, [r7, #4]
 801a1f2:	46e6      	mov	lr, ip
 801a1f4:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801a1f8:	3708      	adds	r7, #8
 801a1fa:	4547      	cmp	r7, r8
 801a1fc:	46f4      	mov	ip, lr
 801a1fe:	d1f6      	bne.n	801a1ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801a200:	6838      	ldr	r0, [r7, #0]
 801a202:	f8ce 0000 	str.w	r0, [lr]
 801a206:	88b9      	ldrh	r1, [r7, #4]
 801a208:	f8ae 1004 	strh.w	r1, [lr, #4]
 801a20c:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801a210:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a214:	d009      	beq.n	801a22a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801a216:	7b51      	ldrb	r1, [r2, #13]
 801a218:	7992      	ldrb	r2, [r2, #6]
 801a21a:	0149      	lsls	r1, r1, #5
 801a21c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a220:	4311      	orrs	r1, r2
 801a222:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801a226:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801a22a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a22e:	b2ad      	uxth	r5, r5
 801a230:	d00d      	beq.n	801a24e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 801a232:	442b      	add	r3, r5
 801a234:	b29b      	uxth	r3, r3
 801a236:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801a23a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801a23e:	10db      	asrs	r3, r3, #3
 801a240:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a244:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a248:	4313      	orrs	r3, r2
 801a24a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801a24e:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801a252:	00cb      	lsls	r3, r1, #3
 801a254:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a258:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801a25c:	064f      	lsls	r7, r1, #25
 801a25e:	ea43 0302 	orr.w	r3, r3, r2
 801a262:	bf44      	itt	mi
 801a264:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a268:	b21b      	sxthmi	r3, r3
 801a26a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a26e:	1b5b      	subs	r3, r3, r5
 801a270:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801a274:	4632      	mov	r2, r6
 801a276:	e6fa      	b.n	801a06e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801a278:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801a27c:	4617      	mov	r7, r2
 801a27e:	f102 0908 	add.w	r9, r2, #8
 801a282:	4666      	mov	r6, ip
 801a284:	6838      	ldr	r0, [r7, #0]
 801a286:	6879      	ldr	r1, [r7, #4]
 801a288:	46e0      	mov	r8, ip
 801a28a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801a28e:	3708      	adds	r7, #8
 801a290:	454f      	cmp	r7, r9
 801a292:	46c4      	mov	ip, r8
 801a294:	d1f6      	bne.n	801a284 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 801a296:	6838      	ldr	r0, [r7, #0]
 801a298:	f8c8 0000 	str.w	r0, [r8]
 801a29c:	88b9      	ldrh	r1, [r7, #4]
 801a29e:	f8a8 1004 	strh.w	r1, [r8, #4]
 801a2a2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801a2a6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a2aa:	d009      	beq.n	801a2c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 801a2ac:	7b51      	ldrb	r1, [r2, #13]
 801a2ae:	7992      	ldrb	r2, [r2, #6]
 801a2b0:	0149      	lsls	r1, r1, #5
 801a2b2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a2b6:	4311      	orrs	r1, r2
 801a2b8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801a2bc:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801a2c0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a2c4:	d00e      	beq.n	801a2e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 801a2c6:	eba3 030e 	sub.w	r3, r3, lr
 801a2ca:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801a2ce:	b29b      	uxth	r3, r3
 801a2d0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801a2d4:	10db      	asrs	r3, r3, #3
 801a2d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a2da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a2de:	4313      	orrs	r3, r2
 801a2e0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801a2e4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801a2e8:	00cb      	lsls	r3, r1, #3
 801a2ea:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a2ee:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801a2f2:	0648      	lsls	r0, r1, #25
 801a2f4:	ea43 0302 	orr.w	r3, r3, r2
 801a2f8:	bf44      	itt	mi
 801a2fa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a2fe:	b21b      	sxthmi	r3, r3
 801a300:	1b5d      	subs	r5, r3, r5
 801a302:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a306:	e7b5      	b.n	801a274 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0801a308 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801a308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a30c:	461e      	mov	r6, r3
 801a30e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801a310:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a314:	4604      	mov	r4, r0
 801a316:	4617      	mov	r7, r2
 801a318:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801a31c:	f7f5 fe7a 	bl	8010014 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a320:	4605      	mov	r5, r0
 801a322:	b918      	cbnz	r0, 801a32c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801a324:	6030      	str	r0, [r6, #0]
 801a326:	4628      	mov	r0, r5
 801a328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a32c:	683b      	ldr	r3, [r7, #0]
 801a32e:	4601      	mov	r1, r0
 801a330:	68db      	ldr	r3, [r3, #12]
 801a332:	4638      	mov	r0, r7
 801a334:	4798      	blx	r3
 801a336:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801a33a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801a33e:	4602      	mov	r2, r0
 801a340:	6030      	str	r0, [r6, #0]
 801a342:	d213      	bcs.n	801a36c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801a344:	4643      	mov	r3, r8
 801a346:	4639      	mov	r1, r7
 801a348:	4620      	mov	r0, r4
 801a34a:	f7ff fe3b 	bl	8019fc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801a34e:	6030      	str	r0, [r6, #0]
 801a350:	6833      	ldr	r3, [r6, #0]
 801a352:	b143      	cbz	r3, 801a366 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801a354:	7b5a      	ldrb	r2, [r3, #13]
 801a356:	7a9b      	ldrb	r3, [r3, #10]
 801a358:	0052      	lsls	r2, r2, #1
 801a35a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a35e:	4313      	orrs	r3, r2
 801a360:	bf0c      	ite	eq
 801a362:	2301      	moveq	r3, #1
 801a364:	2300      	movne	r3, #0
 801a366:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801a36a:	e7dc      	b.n	801a326 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801a36c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801a370:	b29b      	uxth	r3, r3
 801a372:	2b7f      	cmp	r3, #127	; 0x7f
 801a374:	d804      	bhi.n	801a380 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801a376:	4639      	mov	r1, r7
 801a378:	4620      	mov	r0, r4
 801a37a:	f7ff fd17 	bl	8019dac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a37e:	e7e6      	b.n	801a34e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801a380:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801a384:	2b00      	cmp	r3, #0
 801a386:	d0e3      	beq.n	801a350 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801a388:	f640 1302 	movw	r3, #2306	; 0x902
 801a38c:	429d      	cmp	r5, r3
 801a38e:	d1df      	bne.n	801a350 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801a390:	4601      	mov	r1, r0
 801a392:	4620      	mov	r0, r4
 801a394:	f7ff fcdc 	bl	8019d50 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a398:	e7d9      	b.n	801a34e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801a39a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801a39a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a39e:	461e      	mov	r6, r3
 801a3a0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801a3a2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a3a6:	4604      	mov	r4, r0
 801a3a8:	4617      	mov	r7, r2
 801a3aa:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801a3ae:	f7f5 fe31 	bl	8010014 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a3b2:	4605      	mov	r5, r0
 801a3b4:	b918      	cbnz	r0, 801a3be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801a3b6:	6030      	str	r0, [r6, #0]
 801a3b8:	4628      	mov	r0, r5
 801a3ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a3be:	683b      	ldr	r3, [r7, #0]
 801a3c0:	4601      	mov	r1, r0
 801a3c2:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801a3c6:	4638      	mov	r0, r7
 801a3c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a3cc:	47c8      	blx	r9
 801a3ce:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801a3d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801a3d6:	4602      	mov	r2, r0
 801a3d8:	6030      	str	r0, [r6, #0]
 801a3da:	d213      	bcs.n	801a404 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801a3dc:	4643      	mov	r3, r8
 801a3de:	4639      	mov	r1, r7
 801a3e0:	4620      	mov	r0, r4
 801a3e2:	f7ff fdef 	bl	8019fc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801a3e6:	6030      	str	r0, [r6, #0]
 801a3e8:	6833      	ldr	r3, [r6, #0]
 801a3ea:	b143      	cbz	r3, 801a3fe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801a3ec:	7b5a      	ldrb	r2, [r3, #13]
 801a3ee:	7a9b      	ldrb	r3, [r3, #10]
 801a3f0:	0052      	lsls	r2, r2, #1
 801a3f2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a3f6:	4313      	orrs	r3, r2
 801a3f8:	bf0c      	ite	eq
 801a3fa:	2301      	moveq	r3, #1
 801a3fc:	2300      	movne	r3, #0
 801a3fe:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801a402:	e7d9      	b.n	801a3b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801a404:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801a408:	b29b      	uxth	r3, r3
 801a40a:	2b7f      	cmp	r3, #127	; 0x7f
 801a40c:	d804      	bhi.n	801a418 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801a40e:	4639      	mov	r1, r7
 801a410:	4620      	mov	r0, r4
 801a412:	f7ff fccb 	bl	8019dac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a416:	e7e6      	b.n	801a3e6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801a418:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d0e3      	beq.n	801a3e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801a420:	f640 1302 	movw	r3, #2306	; 0x902
 801a424:	429d      	cmp	r5, r3
 801a426:	d1df      	bne.n	801a3e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801a428:	4601      	mov	r1, r0
 801a42a:	4620      	mov	r0, r4
 801a42c:	f7ff fc90 	bl	8019d50 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a430:	e7d9      	b.n	801a3e6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801a432 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801a432:	b510      	push	{r4, lr}
 801a434:	4604      	mov	r4, r0
 801a436:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801a43a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801a43c:	b1f1      	cbz	r1, 801a47c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801a43e:	2b0a      	cmp	r3, #10
 801a440:	d02f      	beq.n	801a4a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801a442:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801a444:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801a448:	3901      	subs	r1, #1
 801a44a:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801a44c:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801a450:	1c51      	adds	r1, r2, #1
 801a452:	b289      	uxth	r1, r1
 801a454:	2901      	cmp	r1, #1
 801a456:	bf84      	itt	hi
 801a458:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a45c:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801a45e:	f103 0201 	add.w	r2, r3, #1
 801a462:	8722      	strh	r2, [r4, #56]	; 0x38
 801a464:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801a466:	bf98      	it	ls
 801a468:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801a46a:	4413      	add	r3, r2
 801a46c:	b29b      	uxth	r3, r3
 801a46e:	2b09      	cmp	r3, #9
 801a470:	bf88      	it	hi
 801a472:	3b0a      	subhi	r3, #10
 801a474:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a478:	8458      	strh	r0, [r3, #34]	; 0x22
 801a47a:	e7dc      	b.n	801a436 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801a47c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801a47e:	2b0a      	cmp	r3, #10
 801a480:	d00f      	beq.n	801a4a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801a482:	4620      	mov	r0, r4
 801a484:	f7ff fc12 	bl	8019cac <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801a488:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801a48a:	1c5a      	adds	r2, r3, #1
 801a48c:	8722      	strh	r2, [r4, #56]	; 0x38
 801a48e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801a490:	4413      	add	r3, r2
 801a492:	b29b      	uxth	r3, r3
 801a494:	2b09      	cmp	r3, #9
 801a496:	bf88      	it	hi
 801a498:	3b0a      	subhi	r3, #10
 801a49a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a49e:	8458      	strh	r0, [r3, #34]	; 0x22
 801a4a0:	e7ec      	b.n	801a47c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801a4a2:	bd10      	pop	{r4, pc}

0801a4a4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801a4a4:	b538      	push	{r3, r4, r5, lr}
 801a4a6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801a4a8:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801a4ac:	4604      	mov	r4, r0
 801a4ae:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801a4b0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801a4b2:	3a01      	subs	r2, #1
 801a4b4:	8702      	strh	r2, [r0, #56]	; 0x38
 801a4b6:	1c5a      	adds	r2, r3, #1
 801a4b8:	b292      	uxth	r2, r2
 801a4ba:	2a09      	cmp	r2, #9
 801a4bc:	bf86      	itte	hi
 801a4be:	3b09      	subhi	r3, #9
 801a4c0:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801a4c2:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801a4c4:	f7ff ffb5 	bl	801a432 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a4c8:	8c23      	ldrh	r3, [r4, #32]
 801a4ca:	2b01      	cmp	r3, #1
 801a4cc:	bf9c      	itt	ls
 801a4ce:	3301      	addls	r3, #1
 801a4d0:	8423      	strhls	r3, [r4, #32]
 801a4d2:	8be3      	ldrh	r3, [r4, #30]
 801a4d4:	b90b      	cbnz	r3, 801a4da <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801a4d6:	2302      	movs	r3, #2
 801a4d8:	83e3      	strh	r3, [r4, #30]
 801a4da:	8be3      	ldrh	r3, [r4, #30]
 801a4dc:	3b01      	subs	r3, #1
 801a4de:	b29b      	uxth	r3, r3
 801a4e0:	83e3      	strh	r3, [r4, #30]
 801a4e2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a4e6:	4628      	mov	r0, r5
 801a4e8:	8365      	strh	r5, [r4, #26]
 801a4ea:	bd38      	pop	{r3, r4, r5, pc}

0801a4ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801a4ec:	428a      	cmp	r2, r1
 801a4ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a4f2:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801a4f4:	d931      	bls.n	801a55a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 801a4f6:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801a4f8:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801a4fc:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801a500:	19ee      	adds	r6, r5, r7
 801a502:	1a54      	subs	r4, r2, r1
 801a504:	3e01      	subs	r6, #1
 801a506:	fa1f fe84 	uxth.w	lr, r4
 801a50a:	b2b4      	uxth	r4, r6
 801a50c:	eba4 090e 	sub.w	r9, r4, lr
 801a510:	fa1f f989 	uxth.w	r9, r9
 801a514:	2c09      	cmp	r4, #9
 801a516:	4626      	mov	r6, r4
 801a518:	bf88      	it	hi
 801a51a:	f1a4 060a 	subhi.w	r6, r4, #10
 801a51e:	f1bc 0f00 	cmp.w	ip, #0
 801a522:	bf08      	it	eq
 801a524:	f04f 0c02 	moveq.w	ip, #2
 801a528:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801a52c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a530:	fa1f fc8c 	uxth.w	ip, ip
 801a534:	3c01      	subs	r4, #1
 801a536:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801a53a:	b2a4      	uxth	r4, r4
 801a53c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801a540:	454c      	cmp	r4, r9
 801a542:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801a546:	d1e5      	bne.n	801a514 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801a548:	eba5 050e 	sub.w	r5, r5, lr
 801a54c:	eb0e 0408 	add.w	r4, lr, r8
 801a550:	8705      	strh	r5, [r0, #56]	; 0x38
 801a552:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801a556:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801a55a:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801a55c:	1a64      	subs	r4, r4, r1
 801a55e:	4439      	add	r1, r7
 801a560:	b289      	uxth	r1, r1
 801a562:	2909      	cmp	r1, #9
 801a564:	bf88      	it	hi
 801a566:	390a      	subhi	r1, #10
 801a568:	8704      	strh	r4, [r0, #56]	; 0x38
 801a56a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801a56c:	250a      	movs	r5, #10
 801a56e:	b18a      	cbz	r2, 801a594 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 801a570:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801a572:	3a01      	subs	r2, #1
 801a574:	b292      	uxth	r2, r2
 801a576:	3101      	adds	r1, #1
 801a578:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801a57c:	8701      	strh	r1, [r0, #56]	; 0x38
 801a57e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801a580:	b901      	cbnz	r1, 801a584 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 801a582:	86c5      	strh	r5, [r0, #54]	; 0x36
 801a584:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801a586:	3901      	subs	r1, #1
 801a588:	b289      	uxth	r1, r1
 801a58a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801a58c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801a590:	844c      	strh	r4, [r1, #34]	; 0x22
 801a592:	e7ec      	b.n	801a56e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 801a594:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a598:	f7ff bf4b 	b.w	801a432 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801a59c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801a59c:	b570      	push	{r4, r5, r6, lr}
 801a59e:	2500      	movs	r5, #0
 801a5a0:	4295      	cmp	r5, r2
 801a5a2:	d011      	beq.n	801a5c8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801a5a4:	8bc4      	ldrh	r4, [r0, #30]
 801a5a6:	f831 6b02 	ldrh.w	r6, [r1], #2
 801a5aa:	4414      	add	r4, r2
 801a5ac:	3c01      	subs	r4, #1
 801a5ae:	1b64      	subs	r4, r4, r5
 801a5b0:	b2a4      	uxth	r4, r4
 801a5b2:	2c01      	cmp	r4, #1
 801a5b4:	bf88      	it	hi
 801a5b6:	3c02      	subhi	r4, #2
 801a5b8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801a5bc:	8b64      	ldrh	r4, [r4, #26]
 801a5be:	42b4      	cmp	r4, r6
 801a5c0:	d117      	bne.n	801a5f2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801a5c2:	3501      	adds	r5, #1
 801a5c4:	b2ad      	uxth	r5, r5
 801a5c6:	e7eb      	b.n	801a5a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801a5c8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a5cc:	2400      	movs	r4, #0
 801a5ce:	4413      	add	r3, r2
 801a5d0:	b2a2      	uxth	r2, r4
 801a5d2:	429a      	cmp	r2, r3
 801a5d4:	da0f      	bge.n	801a5f6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801a5d6:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801a5d8:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801a5dc:	4432      	add	r2, r6
 801a5de:	b292      	uxth	r2, r2
 801a5e0:	2a09      	cmp	r2, #9
 801a5e2:	bf88      	it	hi
 801a5e4:	3a0a      	subhi	r2, #10
 801a5e6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801a5ea:	3401      	adds	r4, #1
 801a5ec:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801a5ee:	42aa      	cmp	r2, r5
 801a5f0:	d0ee      	beq.n	801a5d0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801a5f2:	2000      	movs	r0, #0
 801a5f4:	bd70      	pop	{r4, r5, r6, pc}
 801a5f6:	2001      	movs	r0, #1
 801a5f8:	e7fc      	b.n	801a5f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801a5fa <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801a5fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5fe:	4605      	mov	r5, r0
 801a600:	4616      	mov	r6, r2
 801a602:	1c8c      	adds	r4, r1, #2
 801a604:	8809      	ldrh	r1, [r1, #0]
 801a606:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801a60a:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801a60e:	42b3      	cmp	r3, r6
 801a610:	d124      	bne.n	801a65c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801a612:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801a616:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801a61a:	f001 070f 	and.w	r7, r1, #15
 801a61e:	f8cd 8000 	str.w	r8, [sp]
 801a622:	464b      	mov	r3, r9
 801a624:	4652      	mov	r2, sl
 801a626:	4621      	mov	r1, r4
 801a628:	4628      	mov	r0, r5
 801a62a:	f7ff ffb7 	bl	801a59c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801a62e:	4683      	mov	fp, r0
 801a630:	b168      	cbz	r0, 801a64e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801a632:	eb0a 0109 	add.w	r1, sl, r9
 801a636:	4441      	add	r1, r8
 801a638:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801a63c:	463a      	mov	r2, r7
 801a63e:	4649      	mov	r1, r9
 801a640:	4628      	mov	r0, r5
 801a642:	f7ff ff53 	bl	801a4ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801a646:	4658      	mov	r0, fp
 801a648:	b003      	add	sp, #12
 801a64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a64e:	eb07 010a 	add.w	r1, r7, sl
 801a652:	4449      	add	r1, r9
 801a654:	4441      	add	r1, r8
 801a656:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801a65a:	e7d2      	b.n	801a602 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801a65c:	f04f 0b00 	mov.w	fp, #0
 801a660:	e7f1      	b.n	801a646 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801a662 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801a662:	b570      	push	{r4, r5, r6, lr}
 801a664:	8810      	ldrh	r0, [r2, #0]
 801a666:	4298      	cmp	r0, r3
 801a668:	d817      	bhi.n	801a69a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a66a:	1e48      	subs	r0, r1, #1
 801a66c:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801a670:	4298      	cmp	r0, r3
 801a672:	d312      	bcc.n	801a69a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a674:	2400      	movs	r4, #0
 801a676:	428c      	cmp	r4, r1
 801a678:	d20f      	bcs.n	801a69a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a67a:	1860      	adds	r0, r4, r1
 801a67c:	1040      	asrs	r0, r0, #1
 801a67e:	0085      	lsls	r5, r0, #2
 801a680:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801a684:	42b3      	cmp	r3, r6
 801a686:	d902      	bls.n	801a68e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801a688:	3001      	adds	r0, #1
 801a68a:	b284      	uxth	r4, r0
 801a68c:	e7f3      	b.n	801a676 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a68e:	d201      	bcs.n	801a694 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801a690:	b281      	uxth	r1, r0
 801a692:	e7f0      	b.n	801a676 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a694:	442a      	add	r2, r5
 801a696:	8850      	ldrh	r0, [r2, #2]
 801a698:	bd70      	pop	{r4, r5, r6, pc}
 801a69a:	2000      	movs	r0, #0
 801a69c:	e7fc      	b.n	801a698 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801a69e <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801a69e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6a2:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801a6a4:	886f      	ldrh	r7, [r5, #2]
 801a6a6:	4604      	mov	r4, r0
 801a6a8:	087f      	lsrs	r7, r7, #1
 801a6aa:	260b      	movs	r6, #11
 801a6ac:	3e01      	subs	r6, #1
 801a6ae:	d013      	beq.n	801a6d8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801a6b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a6b2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a6b6:	462a      	mov	r2, r5
 801a6b8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801a6bc:	4639      	mov	r1, r7
 801a6be:	4643      	mov	r3, r8
 801a6c0:	4620      	mov	r0, r4
 801a6c2:	f7ff ffce 	bl	801a662 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801a6c6:	b138      	cbz	r0, 801a6d8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801a6c8:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801a6cc:	4642      	mov	r2, r8
 801a6ce:	4620      	mov	r0, r4
 801a6d0:	f7ff ff93 	bl	801a5fa <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801a6d4:	2800      	cmp	r0, #0
 801a6d6:	d1e9      	bne.n	801a6ac <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801a6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a6dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801a6dc:	b570      	push	{r4, r5, r6, lr}
 801a6de:	694a      	ldr	r2, [r1, #20]
 801a6e0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801a6e2:	684b      	ldr	r3, [r1, #4]
 801a6e4:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801a6e6:	1b54      	subs	r4, r2, r5
 801a6e8:	f000 8106 	beq.w	801a8f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801a6ec:	1b9b      	subs	r3, r3, r6
 801a6ee:	d003      	beq.n	801a6f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801a6f0:	4363      	muls	r3, r4
 801a6f2:	2210      	movs	r2, #16
 801a6f4:	fb93 f3f2 	sdiv	r3, r3, r2
 801a6f8:	680c      	ldr	r4, [r1, #0]
 801a6fa:	698a      	ldr	r2, [r1, #24]
 801a6fc:	1b65      	subs	r5, r4, r5
 801a6fe:	f000 80fd 	beq.w	801a8fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801a702:	1b92      	subs	r2, r2, r6
 801a704:	d003      	beq.n	801a70e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801a706:	436a      	muls	r2, r5
 801a708:	2410      	movs	r4, #16
 801a70a:	fb92 f2f4 	sdiv	r2, r2, r4
 801a70e:	1a9b      	subs	r3, r3, r2
 801a710:	ee07 3a90 	vmov	s15, r3
 801a714:	ed9f 4a88 	vldr	s8, [pc, #544]	; 801a938 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801a718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a71c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a720:	ee67 7a84 	vmul.f32	s15, s15, s8
 801a724:	460a      	mov	r2, r1
 801a726:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801a72a:	4603      	mov	r3, r0
 801a72c:	f100 040c 	add.w	r4, r0, #12
 801a730:	eeb1 6a43 	vneg.f32	s12, s6
 801a734:	edd2 7a02 	vldr	s15, [r2, #8]
 801a738:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801a73c:	3214      	adds	r2, #20
 801a73e:	ece3 6a01 	vstmia	r3!, {s13}
 801a742:	ed52 7a02 	vldr	s15, [r2, #-8]
 801a746:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a74a:	429c      	cmp	r4, r3
 801a74c:	edc3 7a02 	vstr	s15, [r3, #8]
 801a750:	ed52 7a01 	vldr	s15, [r2, #-4]
 801a754:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a758:	edc3 7a05 	vstr	s15, [r3, #20]
 801a75c:	d1ea      	bne.n	801a734 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801a75e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a760:	698b      	ldr	r3, [r1, #24]
 801a762:	edd0 4a02 	vldr	s9, [r0, #8]
 801a766:	edd0 3a00 	vldr	s7, [r0]
 801a76a:	edd0 6a01 	vldr	s13, [r0, #4]
 801a76e:	ed90 5a05 	vldr	s10, [r0, #20]
 801a772:	ed90 2a03 	vldr	s4, [r0, #12]
 801a776:	edd0 5a04 	vldr	s11, [r0, #16]
 801a77a:	ed90 1a07 	vldr	s2, [r0, #28]
 801a77e:	edd0 2a06 	vldr	s5, [r0, #24]
 801a782:	1a9b      	subs	r3, r3, r2
 801a784:	ee07 3a90 	vmov	s15, r3
 801a788:	684b      	ldr	r3, [r1, #4]
 801a78a:	1a9b      	subs	r3, r3, r2
 801a78c:	ee07 3a10 	vmov	s14, r3
 801a790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a794:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801a798:	ee67 7a84 	vmul.f32	s15, s15, s8
 801a79c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801a7a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a7a4:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801a7a8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a7ac:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801a7b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a7b4:	ee32 5a45 	vsub.f32	s10, s4, s10
 801a7b8:	ee67 7a83 	vmul.f32	s15, s15, s6
 801a7bc:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801a7c0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a7c2:	694a      	ldr	r2, [r1, #20]
 801a7c4:	1b13      	subs	r3, r2, r4
 801a7c6:	ee07 3a10 	vmov	s14, r3
 801a7ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a7ce:	680b      	ldr	r3, [r1, #0]
 801a7d0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a7d4:	1b1b      	subs	r3, r3, r4
 801a7d6:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801a7da:	ee07 3a10 	vmov	s14, r3
 801a7de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a7e2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a7e6:	eee6 4a87 	vfma.f32	s9, s13, s14
 801a7ea:	ee64 4a86 	vmul.f32	s9, s9, s12
 801a7ee:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801a7f2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a7f4:	698b      	ldr	r3, [r1, #24]
 801a7f6:	1a9b      	subs	r3, r3, r2
 801a7f8:	ee06 3a90 	vmov	s13, r3
 801a7fc:	684b      	ldr	r3, [r1, #4]
 801a7fe:	1a9b      	subs	r3, r3, r2
 801a800:	ee07 3a10 	vmov	s14, r3
 801a804:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a808:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a80c:	ee66 6a84 	vmul.f32	s13, s13, s8
 801a810:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a814:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801a818:	eee5 6a87 	vfma.f32	s13, s11, s14
 801a81c:	ee66 6a83 	vmul.f32	s13, s13, s6
 801a820:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801a824:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a826:	694a      	ldr	r2, [r1, #20]
 801a828:	1b13      	subs	r3, r2, r4
 801a82a:	ee07 3a10 	vmov	s14, r3
 801a82e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a832:	680b      	ldr	r3, [r1, #0]
 801a834:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a838:	1b1b      	subs	r3, r3, r4
 801a83a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801a83e:	ee07 3a10 	vmov	s14, r3
 801a842:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a846:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a84a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801a84e:	edd0 5a08 	vldr	s11, [r0, #32]
 801a852:	ee25 5a06 	vmul.f32	s10, s10, s12
 801a856:	ee31 1a65 	vsub.f32	s2, s2, s11
 801a85a:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801a85e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a860:	698b      	ldr	r3, [r1, #24]
 801a862:	1a9b      	subs	r3, r3, r2
 801a864:	ee07 3a10 	vmov	s14, r3
 801a868:	684b      	ldr	r3, [r1, #4]
 801a86a:	1a9b      	subs	r3, r3, r2
 801a86c:	ee01 3a90 	vmov	s3, r3
 801a870:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a874:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801a878:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a87c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a880:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801a884:	ee61 1a84 	vmul.f32	s3, s3, s8
 801a888:	eea1 7a21 	vfma.f32	s14, s2, s3
 801a88c:	ee27 7a03 	vmul.f32	s14, s14, s6
 801a890:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801a894:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a896:	694a      	ldr	r2, [r1, #20]
 801a898:	1b13      	subs	r3, r2, r4
 801a89a:	ee03 3a10 	vmov	s6, r3
 801a89e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a8a2:	680b      	ldr	r3, [r1, #0]
 801a8a4:	ee23 3a04 	vmul.f32	s6, s6, s8
 801a8a8:	1b1b      	subs	r3, r3, r4
 801a8aa:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801a8ae:	ee03 3a10 	vmov	s6, r3
 801a8b2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a8b6:	ee23 4a04 	vmul.f32	s8, s6, s8
 801a8ba:	eee1 5a04 	vfma.f32	s11, s2, s8
 801a8be:	ee25 6a86 	vmul.f32	s12, s11, s12
 801a8c2:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801a8c6:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801a8ca:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801a8ce:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801a8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8d6:	dd13      	ble.n	801a900 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801a8d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a8dc:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801a8e0:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a8e2:	eee3 7a87 	vfma.f32	s15, s7, s14
 801a8e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8ee:	dd15      	ble.n	801a91c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801a8f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a8f4:	6403      	str	r3, [r0, #64]	; 0x40
 801a8f6:	bd70      	pop	{r4, r5, r6, pc}
 801a8f8:	4623      	mov	r3, r4
 801a8fa:	e6fd      	b.n	801a6f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801a8fc:	462a      	mov	r2, r5
 801a8fe:	e706      	b.n	801a70e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801a900:	d502      	bpl.n	801a908 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801a902:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a906:	e7e9      	b.n	801a8dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801a908:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801a90c:	eea3 2a85 	vfma.f32	s4, s7, s10
 801a910:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801a914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a918:	dade      	bge.n	801a8d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801a91a:	e7f2      	b.n	801a902 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801a91c:	d502      	bpl.n	801a924 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801a91e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a922:	e7e7      	b.n	801a8f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801a924:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801a928:	eee3 4a86 	vfma.f32	s9, s7, s12
 801a92c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801a930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a934:	dadc      	bge.n	801a8f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801a936:	e7f2      	b.n	801a91e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801a938:	3d800000 	.word	0x3d800000

0801a93c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801a93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a940:	2714      	movs	r7, #20
 801a942:	435f      	muls	r7, r3
 801a944:	eb02 0c07 	add.w	ip, r2, r7
 801a948:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801a94c:	f115 0e0f 	adds.w	lr, r5, #15
 801a950:	f100 80a2 	bmi.w	801aa98 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801a954:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801a958:	9c08      	ldr	r4, [sp, #32]
 801a95a:	f8c0 e014 	str.w	lr, [r0, #20]
 801a95e:	2614      	movs	r6, #20
 801a960:	4366      	muls	r6, r4
 801a962:	eb02 0806 	add.w	r8, r2, r6
 801a966:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801a96a:	f115 040f 	adds.w	r4, r5, #15
 801a96e:	f100 809f 	bmi.w	801aab0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801a972:	1124      	asrs	r4, r4, #4
 801a974:	eba4 040e 	sub.w	r4, r4, lr
 801a978:	6184      	str	r4, [r0, #24]
 801a97a:	2c00      	cmp	r4, #0
 801a97c:	f000 808a 	beq.w	801aa94 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801a980:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801a984:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801a988:	5995      	ldr	r5, [r2, r6]
 801a98a:	eba4 0809 	sub.w	r8, r4, r9
 801a98e:	59d4      	ldr	r4, [r2, r7]
 801a990:	eba5 0a04 	sub.w	sl, r5, r4
 801a994:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801a998:	fb0e fe05 	mul.w	lr, lr, r5
 801a99c:	fb0a ee19 	mls	lr, sl, r9, lr
 801a9a0:	fb08 e404 	mla	r4, r8, r4, lr
 801a9a4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801a9a8:	3c01      	subs	r4, #1
 801a9aa:	19a4      	adds	r4, r4, r6
 801a9ac:	f100 808c 	bmi.w	801aac8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801a9b0:	fb94 fef6 	sdiv	lr, r4, r6
 801a9b4:	f8c0 e000 	str.w	lr, [r0]
 801a9b8:	fb06 441e 	mls	r4, r6, lr, r4
 801a9bc:	6104      	str	r4, [r0, #16]
 801a9be:	2d00      	cmp	r5, #0
 801a9c0:	f2c0 8095 	blt.w	801aaee <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801a9c4:	fb95 f4f6 	sdiv	r4, r5, r6
 801a9c8:	6044      	str	r4, [r0, #4]
 801a9ca:	fb06 5514 	mls	r5, r6, r4, r5
 801a9ce:	6085      	str	r5, [r0, #8]
 801a9d0:	60c6      	str	r6, [r0, #12]
 801a9d2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801a9d6:	6945      	ldr	r5, [r0, #20]
 801a9d8:	59d2      	ldr	r2, [r2, r7]
 801a9da:	eddf 6a4d 	vldr	s13, [pc, #308]	; 801ab10 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801a9de:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801a9e2:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801a9e6:	ee07 4a10 	vmov	s14, r4
 801a9ea:	6804      	ldr	r4, [r0, #0]
 801a9ec:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801a9f0:	ee07 2a90 	vmov	s15, r2
 801a9f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a9f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a9fc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801aa00:	ee27 7a26 	vmul.f32	s14, s14, s13
 801aa04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801aa08:	edd3 6a00 	vldr	s13, [r3]
 801aa0c:	eee6 6a07 	vfma.f32	s13, s12, s14
 801aa10:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801aa14:	eee6 6a27 	vfma.f32	s13, s12, s15
 801aa18:	edc0 6a07 	vstr	s13, [r0, #28]
 801aa1c:	edd0 6a01 	vldr	s13, [r0, #4]
 801aa20:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801aa24:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801aa28:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801aa2c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801aa30:	ed80 6a08 	vstr	s12, [r0, #32]
 801aa34:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801aa36:	6242      	str	r2, [r0, #36]	; 0x24
 801aa38:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801aa3c:	ed93 6a03 	vldr	s12, [r3, #12]
 801aa40:	eea5 6a87 	vfma.f32	s12, s11, s14
 801aa44:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801aa48:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801aa4c:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801aa50:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801aa54:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801aa58:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801aa5c:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801aa60:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801aa62:	6302      	str	r2, [r0, #48]	; 0x30
 801aa64:	ed93 6a06 	vldr	s12, [r3, #24]
 801aa68:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801aa6c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801aa70:	eeb0 7a46 	vmov.f32	s14, s12
 801aa74:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801aa78:	eea6 7a27 	vfma.f32	s14, s12, s15
 801aa7c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801aa80:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801aa84:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801aa88:	eee6 7a87 	vfma.f32	s15, s13, s14
 801aa8c:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801aa90:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801aa92:	63c3      	str	r3, [r0, #60]	; 0x3c
 801aa94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa98:	f1c5 0501 	rsb	r5, r5, #1
 801aa9c:	f015 050f 	ands.w	r5, r5, #15
 801aaa0:	bf18      	it	ne
 801aaa2:	2501      	movne	r5, #1
 801aaa4:	2410      	movs	r4, #16
 801aaa6:	fb9e fef4 	sdiv	lr, lr, r4
 801aaaa:	ebae 0e05 	sub.w	lr, lr, r5
 801aaae:	e753      	b.n	801a958 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801aab0:	f1c5 0501 	rsb	r5, r5, #1
 801aab4:	f015 050f 	ands.w	r5, r5, #15
 801aab8:	bf18      	it	ne
 801aaba:	2501      	movne	r5, #1
 801aabc:	f04f 0910 	mov.w	r9, #16
 801aac0:	fb94 f4f9 	sdiv	r4, r4, r9
 801aac4:	1b64      	subs	r4, r4, r5
 801aac6:	e755      	b.n	801a974 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801aac8:	4264      	negs	r4, r4
 801aaca:	fb94 fef6 	sdiv	lr, r4, r6
 801aace:	f1ce 0800 	rsb	r8, lr, #0
 801aad2:	fb06 441e 	mls	r4, r6, lr, r4
 801aad6:	f8c0 8000 	str.w	r8, [r0]
 801aada:	6104      	str	r4, [r0, #16]
 801aadc:	2c00      	cmp	r4, #0
 801aade:	f43f af6e 	beq.w	801a9be <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801aae2:	ea6f 0e0e 	mvn.w	lr, lr
 801aae6:	f8c0 e000 	str.w	lr, [r0]
 801aaea:	1b34      	subs	r4, r6, r4
 801aaec:	e766      	b.n	801a9bc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801aaee:	426d      	negs	r5, r5
 801aaf0:	fb95 f4f6 	sdiv	r4, r5, r6
 801aaf4:	f1c4 0e00 	rsb	lr, r4, #0
 801aaf8:	fb06 5514 	mls	r5, r6, r4, r5
 801aafc:	f8c0 e004 	str.w	lr, [r0, #4]
 801ab00:	6085      	str	r5, [r0, #8]
 801ab02:	2d00      	cmp	r5, #0
 801ab04:	f43f af64 	beq.w	801a9d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801ab08:	43e4      	mvns	r4, r4
 801ab0a:	6044      	str	r4, [r0, #4]
 801ab0c:	1b75      	subs	r5, r6, r5
 801ab0e:	e75e      	b.n	801a9ce <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801ab10:	3d800000 	.word	0x3d800000

0801ab14 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801ab14:	4602      	mov	r2, r0
 801ab16:	b148      	cbz	r0, 801ab2c <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801ab18:	2300      	movs	r3, #0
 801ab1a:	b298      	uxth	r0, r3
 801ab1c:	3301      	adds	r3, #1
 801ab1e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801ab22:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801ab26:	2900      	cmp	r1, #0
 801ab28:	d1f7      	bne.n	801ab1a <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801ab2a:	4770      	bx	lr
 801ab2c:	4770      	bx	lr

0801ab2e <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801ab2e:	b530      	push	{r4, r5, lr}
 801ab30:	4604      	mov	r4, r0
 801ab32:	b159      	cbz	r1, 801ab4c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801ab34:	b148      	cbz	r0, 801ab4a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801ab36:	2300      	movs	r3, #0
 801ab38:	b298      	uxth	r0, r3
 801ab3a:	4282      	cmp	r2, r0
 801ab3c:	d905      	bls.n	801ab4a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801ab3e:	5ccd      	ldrb	r5, [r1, r3]
 801ab40:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801ab44:	3301      	adds	r3, #1
 801ab46:	2d00      	cmp	r5, #0
 801ab48:	d1f6      	bne.n	801ab38 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801ab4a:	bd30      	pop	{r4, r5, pc}
 801ab4c:	4608      	mov	r0, r1
 801ab4e:	e7fc      	b.n	801ab4a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801ab50 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801ab50:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab52:	b08b      	sub	sp, #44	; 0x2c
 801ab54:	468c      	mov	ip, r1
 801ab56:	2100      	movs	r1, #0
 801ab58:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801ab5c:	ae01      	add	r6, sp, #4
 801ab5e:	211f      	movs	r1, #31
 801ab60:	fbb0 f7f3 	udiv	r7, r0, r3
 801ab64:	fb03 0517 	mls	r5, r3, r7, r0
 801ab68:	b2ec      	uxtb	r4, r5
 801ab6a:	2d09      	cmp	r5, #9
 801ab6c:	bfd4      	ite	le
 801ab6e:	3430      	addle	r4, #48	; 0x30
 801ab70:	3457      	addgt	r4, #87	; 0x57
 801ab72:	b2e4      	uxtb	r4, r4
 801ab74:	558c      	strb	r4, [r1, r6]
 801ab76:	4638      	mov	r0, r7
 801ab78:	1e4c      	subs	r4, r1, #1
 801ab7a:	b92f      	cbnz	r7, 801ab88 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801ab7c:	4431      	add	r1, r6
 801ab7e:	4660      	mov	r0, ip
 801ab80:	f7ff ffd5 	bl	801ab2e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801ab84:	b00b      	add	sp, #44	; 0x2c
 801ab86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab88:	4621      	mov	r1, r4
 801ab8a:	e7e9      	b.n	801ab60 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801ab8c <_ZN8touchgfx7Unicode4itoaElPtti>:
 801ab8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab8e:	4607      	mov	r7, r0
 801ab90:	b08b      	sub	sp, #44	; 0x2c
 801ab92:	4608      	mov	r0, r1
 801ab94:	b341      	cbz	r1, 801abe8 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801ab96:	1e99      	subs	r1, r3, #2
 801ab98:	2922      	cmp	r1, #34	; 0x22
 801ab9a:	d825      	bhi.n	801abe8 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801ab9c:	2100      	movs	r1, #0
 801ab9e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801aba2:	463c      	mov	r4, r7
 801aba4:	261f      	movs	r6, #31
 801aba6:	f10d 0c04 	add.w	ip, sp, #4
 801abaa:	fb94 fef3 	sdiv	lr, r4, r3
 801abae:	fb03 441e 	mls	r4, r3, lr, r4
 801abb2:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801abb6:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801abba:	b2ec      	uxtb	r4, r5
 801abbc:	2d09      	cmp	r5, #9
 801abbe:	bfd4      	ite	le
 801abc0:	3430      	addle	r4, #48	; 0x30
 801abc2:	3457      	addgt	r4, #87	; 0x57
 801abc4:	b2e4      	uxtb	r4, r4
 801abc6:	f80c 4006 	strb.w	r4, [ip, r6]
 801abca:	4674      	mov	r4, lr
 801abcc:	1e71      	subs	r1, r6, #1
 801abce:	b96c      	cbnz	r4, 801abec <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801abd0:	2f00      	cmp	r7, #0
 801abd2:	da05      	bge.n	801abe0 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801abd4:	ab0a      	add	r3, sp, #40	; 0x28
 801abd6:	4419      	add	r1, r3
 801abd8:	232d      	movs	r3, #45	; 0x2d
 801abda:	f801 3c24 	strb.w	r3, [r1, #-36]
 801abde:	1eb1      	subs	r1, r6, #2
 801abe0:	3101      	adds	r1, #1
 801abe2:	4461      	add	r1, ip
 801abe4:	f7ff ffa3 	bl	801ab2e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801abe8:	b00b      	add	sp, #44	; 0x2c
 801abea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801abec:	460e      	mov	r6, r1
 801abee:	e7dc      	b.n	801abaa <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801abf0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801abf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abf4:	4691      	mov	r9, r2
 801abf6:	b085      	sub	sp, #20
 801abf8:	6802      	ldr	r2, [r0, #0]
 801abfa:	9201      	str	r2, [sp, #4]
 801abfc:	4688      	mov	r8, r1
 801abfe:	4683      	mov	fp, r0
 801ac00:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801ac04:	9103      	str	r1, [sp, #12]
 801ac06:	4610      	mov	r0, r2
 801ac08:	461c      	mov	r4, r3
 801ac0a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801ac0e:	9302      	str	r3, [sp, #8]
 801ac10:	f7ff ff80 	bl	801ab14 <_ZN8touchgfx7Unicode6strlenEPKt>
 801ac14:	f1b8 0f00 	cmp.w	r8, #0
 801ac18:	bf0c      	ite	eq
 801ac1a:	4684      	moveq	ip, r0
 801ac1c:	f100 0c01 	addne.w	ip, r0, #1
 801ac20:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801ac24:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801ac28:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801ac2a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ac2c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801ac30:	9903      	ldr	r1, [sp, #12]
 801ac32:	fa1f fc8c 	uxth.w	ip, ip
 801ac36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801ac3a:	d041      	beq.n	801acc0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801ac3c:	d834      	bhi.n	801aca8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801ac3e:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801ac42:	d059      	beq.n	801acf8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801ac44:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801ac48:	d03a      	beq.n	801acc0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801ac4a:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801ac4e:	d034      	beq.n	801acba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801ac50:	2400      	movs	r4, #0
 801ac52:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801ac56:	3a01      	subs	r2, #1
 801ac58:	b169      	cbz	r1, 801ac76 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ac5a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ac5c:	458c      	cmp	ip, r1
 801ac5e:	da09      	bge.n	801ac74 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801ac60:	eba1 010c 	sub.w	r1, r1, ip
 801ac64:	b289      	uxth	r1, r1
 801ac66:	b933      	cbnz	r3, 801ac76 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ac68:	2e00      	cmp	r6, #0
 801ac6a:	d051      	beq.n	801ad10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801ac6c:	2800      	cmp	r0, #0
 801ac6e:	d04f      	beq.n	801ad10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801ac70:	440c      	add	r4, r1
 801ac72:	b2a4      	uxth	r4, r4
 801ac74:	2100      	movs	r1, #0
 801ac76:	682b      	ldr	r3, [r5, #0]
 801ac78:	4293      	cmp	r3, r2
 801ac7a:	da07      	bge.n	801ac8c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801ac7c:	f1b8 0f00 	cmp.w	r8, #0
 801ac80:	d004      	beq.n	801ac8c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801ac82:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801ac86:	682b      	ldr	r3, [r5, #0]
 801ac88:	3301      	adds	r3, #1
 801ac8a:	602b      	str	r3, [r5, #0]
 801ac8c:	2730      	movs	r7, #48	; 0x30
 801ac8e:	2c00      	cmp	r4, #0
 801ac90:	d04e      	beq.n	801ad30 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ac92:	682e      	ldr	r6, [r5, #0]
 801ac94:	3c01      	subs	r4, #1
 801ac96:	42b2      	cmp	r2, r6
 801ac98:	b2a4      	uxth	r4, r4
 801ac9a:	dd49      	ble.n	801ad30 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ac9c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801aca0:	682b      	ldr	r3, [r5, #0]
 801aca2:	3301      	adds	r3, #1
 801aca4:	602b      	str	r3, [r5, #0]
 801aca6:	e7f2      	b.n	801ac8e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801aca8:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801acac:	d01d      	beq.n	801acea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801acae:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801acb2:	d002      	beq.n	801acba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801acb4:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801acb8:	e7c9      	b.n	801ac4e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801acba:	4684      	mov	ip, r0
 801acbc:	f04f 0800 	mov.w	r8, #0
 801acc0:	2c00      	cmp	r4, #0
 801acc2:	d0c6      	beq.n	801ac52 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801acc4:	b947      	cbnz	r7, 801acd8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801acc6:	2801      	cmp	r0, #1
 801acc8:	d106      	bne.n	801acd8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801acca:	8814      	ldrh	r4, [r2, #0]
 801accc:	2c30      	cmp	r4, #48	; 0x30
 801acce:	bf02      	ittt	eq
 801acd0:	3202      	addeq	r2, #2
 801acd2:	f8cb 2000 	streq.w	r2, [fp]
 801acd6:	4638      	moveq	r0, r7
 801acd8:	45bc      	cmp	ip, r7
 801acda:	da14      	bge.n	801ad06 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801acdc:	b2bf      	uxth	r7, r7
 801acde:	eba7 040c 	sub.w	r4, r7, ip
 801ace2:	b2a4      	uxth	r4, r4
 801ace4:	46bc      	mov	ip, r7
 801ace6:	2600      	movs	r6, #0
 801ace8:	e7b3      	b.n	801ac52 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801acea:	4684      	mov	ip, r0
 801acec:	b16c      	cbz	r4, 801ad0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801acee:	42b8      	cmp	r0, r7
 801acf0:	dd00      	ble.n	801acf4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801acf2:	b2b8      	uxth	r0, r7
 801acf4:	2400      	movs	r4, #0
 801acf6:	e003      	b.n	801ad00 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801acf8:	f04f 0c01 	mov.w	ip, #1
 801acfc:	2400      	movs	r4, #0
 801acfe:	4660      	mov	r0, ip
 801ad00:	4626      	mov	r6, r4
 801ad02:	46a0      	mov	r8, r4
 801ad04:	e7a5      	b.n	801ac52 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801ad06:	2400      	movs	r4, #0
 801ad08:	e7ed      	b.n	801ace6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801ad0a:	4626      	mov	r6, r4
 801ad0c:	46a0      	mov	r8, r4
 801ad0e:	e7a0      	b.n	801ac52 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801ad10:	2900      	cmp	r1, #0
 801ad12:	d0b0      	beq.n	801ac76 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ad14:	2720      	movs	r7, #32
 801ad16:	682e      	ldr	r6, [r5, #0]
 801ad18:	2900      	cmp	r1, #0
 801ad1a:	d0ac      	beq.n	801ac76 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ad1c:	3901      	subs	r1, #1
 801ad1e:	4296      	cmp	r6, r2
 801ad20:	b289      	uxth	r1, r1
 801ad22:	daa7      	bge.n	801ac74 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801ad24:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801ad28:	682b      	ldr	r3, [r5, #0]
 801ad2a:	3301      	adds	r3, #1
 801ad2c:	602b      	str	r3, [r5, #0]
 801ad2e:	e7f2      	b.n	801ad16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801ad30:	b188      	cbz	r0, 801ad56 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801ad32:	682b      	ldr	r3, [r5, #0]
 801ad34:	3801      	subs	r0, #1
 801ad36:	429a      	cmp	r2, r3
 801ad38:	b280      	uxth	r0, r0
 801ad3a:	dd0c      	ble.n	801ad56 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801ad3c:	f8db 3000 	ldr.w	r3, [fp]
 801ad40:	1c9c      	adds	r4, r3, #2
 801ad42:	f8cb 4000 	str.w	r4, [fp]
 801ad46:	881c      	ldrh	r4, [r3, #0]
 801ad48:	682b      	ldr	r3, [r5, #0]
 801ad4a:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801ad4e:	682b      	ldr	r3, [r5, #0]
 801ad50:	3301      	adds	r3, #1
 801ad52:	602b      	str	r3, [r5, #0]
 801ad54:	e7ec      	b.n	801ad30 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ad56:	2620      	movs	r6, #32
 801ad58:	b151      	cbz	r1, 801ad70 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801ad5a:	6828      	ldr	r0, [r5, #0]
 801ad5c:	3901      	subs	r1, #1
 801ad5e:	4282      	cmp	r2, r0
 801ad60:	b289      	uxth	r1, r1
 801ad62:	dd05      	ble.n	801ad70 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801ad64:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801ad68:	682b      	ldr	r3, [r5, #0]
 801ad6a:	3301      	adds	r3, #1
 801ad6c:	602b      	str	r3, [r5, #0]
 801ad6e:	e7f3      	b.n	801ad58 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801ad70:	b005      	add	sp, #20
 801ad72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ad76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801ad76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ad7a:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801ad7e:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801ad82:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801ad86:	2400      	movs	r4, #0
 801ad88:	8014      	strh	r4, [r2, #0]
 801ad8a:	701c      	strb	r4, [r3, #0]
 801ad8c:	f888 4000 	strb.w	r4, [r8]
 801ad90:	f88c 4000 	strb.w	r4, [ip]
 801ad94:	f88e 4000 	strb.w	r4, [lr]
 801ad98:	703c      	strb	r4, [r7, #0]
 801ad9a:	6804      	ldr	r4, [r0, #0]
 801ad9c:	b1a4      	cbz	r4, 801adc8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801ad9e:	8824      	ldrh	r4, [r4, #0]
 801ada0:	f04f 0901 	mov.w	r9, #1
 801ada4:	b314      	cbz	r4, 801adec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801ada6:	2c2b      	cmp	r4, #43	; 0x2b
 801ada8:	d001      	beq.n	801adae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801adaa:	2c20      	cmp	r4, #32
 801adac:	d110      	bne.n	801add0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801adae:	8014      	strh	r4, [r2, #0]
 801adb0:	6804      	ldr	r4, [r0, #0]
 801adb2:	b10c      	cbz	r4, 801adb8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801adb4:	3402      	adds	r4, #2
 801adb6:	6004      	str	r4, [r0, #0]
 801adb8:	680c      	ldr	r4, [r1, #0]
 801adba:	b10c      	cbz	r4, 801adc0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801adbc:	3401      	adds	r4, #1
 801adbe:	600c      	str	r4, [r1, #0]
 801adc0:	6804      	ldr	r4, [r0, #0]
 801adc2:	b17c      	cbz	r4, 801ade4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801adc4:	8824      	ldrh	r4, [r4, #0]
 801adc6:	e7ed      	b.n	801ada4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801adc8:	680c      	ldr	r4, [r1, #0]
 801adca:	b17c      	cbz	r4, 801adec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801adcc:	7824      	ldrb	r4, [r4, #0]
 801adce:	e7e7      	b.n	801ada0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801add0:	2c2d      	cmp	r4, #45	; 0x2d
 801add2:	d102      	bne.n	801adda <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801add4:	f883 9000 	strb.w	r9, [r3]
 801add8:	e7ea      	b.n	801adb0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801adda:	2c23      	cmp	r4, #35	; 0x23
 801addc:	d107      	bne.n	801adee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801adde:	f888 9000 	strb.w	r9, [r8]
 801ade2:	e7e5      	b.n	801adb0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801ade4:	680c      	ldr	r4, [r1, #0]
 801ade6:	b10c      	cbz	r4, 801adec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801ade8:	7824      	ldrb	r4, [r4, #0]
 801adea:	e7db      	b.n	801ada4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801adec:	2400      	movs	r4, #0
 801adee:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801adf2:	2b09      	cmp	r3, #9
 801adf4:	d901      	bls.n	801adfa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801adf6:	2c2a      	cmp	r4, #42	; 0x2a
 801adf8:	d122      	bne.n	801ae40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801adfa:	2301      	movs	r3, #1
 801adfc:	2c30      	cmp	r4, #48	; 0x30
 801adfe:	f88e 3000 	strb.w	r3, [lr]
 801ae02:	d10d      	bne.n	801ae20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801ae04:	f88c 3000 	strb.w	r3, [ip]
 801ae08:	6803      	ldr	r3, [r0, #0]
 801ae0a:	b10b      	cbz	r3, 801ae10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801ae0c:	3302      	adds	r3, #2
 801ae0e:	6003      	str	r3, [r0, #0]
 801ae10:	680b      	ldr	r3, [r1, #0]
 801ae12:	b10b      	cbz	r3, 801ae18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801ae14:	3301      	adds	r3, #1
 801ae16:	600b      	str	r3, [r1, #0]
 801ae18:	6803      	ldr	r3, [r0, #0]
 801ae1a:	2b00      	cmp	r3, #0
 801ae1c:	d02f      	beq.n	801ae7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801ae1e:	881c      	ldrh	r4, [r3, #0]
 801ae20:	2c2a      	cmp	r4, #42	; 0x2a
 801ae22:	d135      	bne.n	801ae90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801ae24:	f04f 33ff 	mov.w	r3, #4294967295
 801ae28:	6033      	str	r3, [r6, #0]
 801ae2a:	6803      	ldr	r3, [r0, #0]
 801ae2c:	b10b      	cbz	r3, 801ae32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801ae2e:	3302      	adds	r3, #2
 801ae30:	6003      	str	r3, [r0, #0]
 801ae32:	680b      	ldr	r3, [r1, #0]
 801ae34:	b10b      	cbz	r3, 801ae3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801ae36:	3301      	adds	r3, #1
 801ae38:	600b      	str	r3, [r1, #0]
 801ae3a:	6803      	ldr	r3, [r0, #0]
 801ae3c:	b31b      	cbz	r3, 801ae86 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801ae3e:	881c      	ldrh	r4, [r3, #0]
 801ae40:	2c2e      	cmp	r4, #46	; 0x2e
 801ae42:	d11a      	bne.n	801ae7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ae44:	2301      	movs	r3, #1
 801ae46:	703b      	strb	r3, [r7, #0]
 801ae48:	6803      	ldr	r3, [r0, #0]
 801ae4a:	b10b      	cbz	r3, 801ae50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801ae4c:	3302      	adds	r3, #2
 801ae4e:	6003      	str	r3, [r0, #0]
 801ae50:	680b      	ldr	r3, [r1, #0]
 801ae52:	b10b      	cbz	r3, 801ae58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801ae54:	3301      	adds	r3, #1
 801ae56:	600b      	str	r3, [r1, #0]
 801ae58:	6803      	ldr	r3, [r0, #0]
 801ae5a:	2b00      	cmp	r3, #0
 801ae5c:	d036      	beq.n	801aecc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801ae5e:	881b      	ldrh	r3, [r3, #0]
 801ae60:	2b2a      	cmp	r3, #42	; 0x2a
 801ae62:	d137      	bne.n	801aed4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801ae64:	f04f 33ff 	mov.w	r3, #4294967295
 801ae68:	602b      	str	r3, [r5, #0]
 801ae6a:	6803      	ldr	r3, [r0, #0]
 801ae6c:	b10b      	cbz	r3, 801ae72 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801ae6e:	3302      	adds	r3, #2
 801ae70:	6003      	str	r3, [r0, #0]
 801ae72:	680b      	ldr	r3, [r1, #0]
 801ae74:	b10b      	cbz	r3, 801ae7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ae76:	3301      	adds	r3, #1
 801ae78:	600b      	str	r3, [r1, #0]
 801ae7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ae7e:	680c      	ldr	r4, [r1, #0]
 801ae80:	b134      	cbz	r4, 801ae90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801ae82:	7824      	ldrb	r4, [r4, #0]
 801ae84:	e7cc      	b.n	801ae20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801ae86:	680b      	ldr	r3, [r1, #0]
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	d0f6      	beq.n	801ae7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ae8c:	781c      	ldrb	r4, [r3, #0]
 801ae8e:	e7d7      	b.n	801ae40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801ae90:	2300      	movs	r3, #0
 801ae92:	6033      	str	r3, [r6, #0]
 801ae94:	220a      	movs	r2, #10
 801ae96:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801ae9a:	fa1f f38c 	uxth.w	r3, ip
 801ae9e:	2b09      	cmp	r3, #9
 801aea0:	d8ce      	bhi.n	801ae40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801aea2:	6833      	ldr	r3, [r6, #0]
 801aea4:	fb02 c303 	mla	r3, r2, r3, ip
 801aea8:	6033      	str	r3, [r6, #0]
 801aeaa:	6803      	ldr	r3, [r0, #0]
 801aeac:	b10b      	cbz	r3, 801aeb2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801aeae:	3302      	adds	r3, #2
 801aeb0:	6003      	str	r3, [r0, #0]
 801aeb2:	680b      	ldr	r3, [r1, #0]
 801aeb4:	b10b      	cbz	r3, 801aeba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801aeb6:	3301      	adds	r3, #1
 801aeb8:	600b      	str	r3, [r1, #0]
 801aeba:	6803      	ldr	r3, [r0, #0]
 801aebc:	b10b      	cbz	r3, 801aec2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801aebe:	881c      	ldrh	r4, [r3, #0]
 801aec0:	e7e9      	b.n	801ae96 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801aec2:	680c      	ldr	r4, [r1, #0]
 801aec4:	2c00      	cmp	r4, #0
 801aec6:	d0e6      	beq.n	801ae96 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801aec8:	7824      	ldrb	r4, [r4, #0]
 801aeca:	e7e4      	b.n	801ae96 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801aecc:	680b      	ldr	r3, [r1, #0]
 801aece:	b10b      	cbz	r3, 801aed4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801aed0:	781b      	ldrb	r3, [r3, #0]
 801aed2:	e7c5      	b.n	801ae60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801aed4:	2200      	movs	r2, #0
 801aed6:	602a      	str	r2, [r5, #0]
 801aed8:	240a      	movs	r4, #10
 801aeda:	3b30      	subs	r3, #48	; 0x30
 801aedc:	b29e      	uxth	r6, r3
 801aede:	2e09      	cmp	r6, #9
 801aee0:	682a      	ldr	r2, [r5, #0]
 801aee2:	d813      	bhi.n	801af0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801aee4:	fb04 3302 	mla	r3, r4, r2, r3
 801aee8:	602b      	str	r3, [r5, #0]
 801aeea:	6803      	ldr	r3, [r0, #0]
 801aeec:	b10b      	cbz	r3, 801aef2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801aeee:	3302      	adds	r3, #2
 801aef0:	6003      	str	r3, [r0, #0]
 801aef2:	680b      	ldr	r3, [r1, #0]
 801aef4:	b10b      	cbz	r3, 801aefa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801aef6:	3301      	adds	r3, #1
 801aef8:	600b      	str	r3, [r1, #0]
 801aefa:	6803      	ldr	r3, [r0, #0]
 801aefc:	b10b      	cbz	r3, 801af02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801aefe:	881b      	ldrh	r3, [r3, #0]
 801af00:	e7eb      	b.n	801aeda <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801af02:	680b      	ldr	r3, [r1, #0]
 801af04:	2b00      	cmp	r3, #0
 801af06:	d0e8      	beq.n	801aeda <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801af08:	781b      	ldrb	r3, [r3, #0]
 801af0a:	e7e6      	b.n	801aeda <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801af0c:	2a06      	cmp	r2, #6
 801af0e:	bfa8      	it	ge
 801af10:	2206      	movge	r2, #6
 801af12:	602a      	str	r2, [r5, #0]
 801af14:	e7b1      	b.n	801ae7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801af16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801af16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af1a:	b0a3      	sub	sp, #140	; 0x8c
 801af1c:	2600      	movs	r6, #0
 801af1e:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801af22:	4607      	mov	r7, r0
 801af24:	4688      	mov	r8, r1
 801af26:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801af2a:	4631      	mov	r1, r6
 801af2c:	2242      	movs	r2, #66	; 0x42
 801af2e:	4648      	mov	r0, r9
 801af30:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801af32:	960d      	str	r6, [sp, #52]	; 0x34
 801af34:	f00c fee6 	bl	8027d04 <memset>
 801af38:	b15f      	cbz	r7, 801af52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801af3a:	f108 3aff 	add.w	sl, r8, #4294967295
 801af3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801af40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801af42:	b152      	cbz	r2, 801af5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801af44:	8812      	ldrh	r2, [r2, #0]
 801af46:	b10a      	cbz	r2, 801af4c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801af48:	459a      	cmp	sl, r3
 801af4a:	dc2e      	bgt.n	801afaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801af4c:	2200      	movs	r2, #0
 801af4e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801af52:	4638      	mov	r0, r7
 801af54:	b023      	add	sp, #140	; 0x8c
 801af56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af5a:	9a08      	ldr	r2, [sp, #32]
 801af5c:	2a00      	cmp	r2, #0
 801af5e:	d0f5      	beq.n	801af4c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801af60:	7812      	ldrb	r2, [r2, #0]
 801af62:	e7f0      	b.n	801af46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801af64:	2d00      	cmp	r5, #0
 801af66:	d0ea      	beq.n	801af3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801af68:	782a      	ldrb	r2, [r5, #0]
 801af6a:	b142      	cbz	r2, 801af7e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801af6c:	2a25      	cmp	r2, #37	; 0x25
 801af6e:	d001      	beq.n	801af74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801af70:	459a      	cmp	sl, r3
 801af72:	dc08      	bgt.n	801af86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801af74:	f1bb 0f00 	cmp.w	fp, #0
 801af78:	d121      	bne.n	801afbe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801af7a:	2d00      	cmp	r5, #0
 801af7c:	d0df      	beq.n	801af3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801af7e:	782a      	ldrb	r2, [r5, #0]
 801af80:	f04f 0b00 	mov.w	fp, #0
 801af84:	e01d      	b.n	801afc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801af86:	f1bb 0f00 	cmp.w	fp, #0
 801af8a:	d078      	beq.n	801b07e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 801af8c:	f8bb 2000 	ldrh.w	r2, [fp]
 801af90:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801af94:	f1bb 0f00 	cmp.w	fp, #0
 801af98:	d002      	beq.n	801afa0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801af9a:	f10b 0202 	add.w	r2, fp, #2
 801af9e:	9209      	str	r2, [sp, #36]	; 0x24
 801afa0:	b10d      	cbz	r5, 801afa6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801afa2:	3501      	adds	r5, #1
 801afa4:	9508      	str	r5, [sp, #32]
 801afa6:	3301      	adds	r3, #1
 801afa8:	930d      	str	r3, [sp, #52]	; 0x34
 801afaa:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801afae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801afb0:	f1bb 0f00 	cmp.w	fp, #0
 801afb4:	d0d6      	beq.n	801af64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801afb6:	f8bb 2000 	ldrh.w	r2, [fp]
 801afba:	2a00      	cmp	r2, #0
 801afbc:	d1d6      	bne.n	801af6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801afbe:	f8bb 2000 	ldrh.w	r2, [fp]
 801afc2:	2a00      	cmp	r2, #0
 801afc4:	d0bb      	beq.n	801af3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801afc6:	459a      	cmp	sl, r3
 801afc8:	ddb9      	ble.n	801af3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801afca:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801afce:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801afd2:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801afd6:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801afda:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801afde:	960e      	str	r6, [sp, #56]	; 0x38
 801afe0:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801afe4:	960f      	str	r6, [sp, #60]	; 0x3c
 801afe6:	f1bb 0f00 	cmp.w	fp, #0
 801afea:	d002      	beq.n	801aff2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801afec:	f10b 0302 	add.w	r3, fp, #2
 801aff0:	9309      	str	r3, [sp, #36]	; 0x24
 801aff2:	b10d      	cbz	r5, 801aff8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801aff4:	1c6b      	adds	r3, r5, #1
 801aff6:	9308      	str	r3, [sp, #32]
 801aff8:	ab0f      	add	r3, sp, #60	; 0x3c
 801affa:	9305      	str	r3, [sp, #20]
 801affc:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801b000:	9304      	str	r3, [sp, #16]
 801b002:	ab0e      	add	r3, sp, #56	; 0x38
 801b004:	9303      	str	r3, [sp, #12]
 801b006:	ab0c      	add	r3, sp, #48	; 0x30
 801b008:	9302      	str	r3, [sp, #8]
 801b00a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801b00e:	9301      	str	r3, [sp, #4]
 801b010:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801b014:	9300      	str	r3, [sp, #0]
 801b016:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801b01a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801b01e:	a908      	add	r1, sp, #32
 801b020:	a809      	add	r0, sp, #36	; 0x24
 801b022:	f7ff fea8 	bl	801ad76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801b026:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b028:	2b00      	cmp	r3, #0
 801b02a:	bfbe      	ittt	lt
 801b02c:	6823      	ldrlt	r3, [r4, #0]
 801b02e:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b032:	930e      	strlt	r3, [sp, #56]	; 0x38
 801b034:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b036:	bfb8      	it	lt
 801b038:	3404      	addlt	r4, #4
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	bfb8      	it	lt
 801b03e:	6823      	ldrlt	r3, [r4, #0]
 801b040:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801b044:	bfbe      	ittt	lt
 801b046:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b04a:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801b04c:	3404      	addlt	r4, #4
 801b04e:	b1d9      	cbz	r1, 801b088 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 801b050:	880b      	ldrh	r3, [r1, #0]
 801b052:	2b69      	cmp	r3, #105	; 0x69
 801b054:	d01f      	beq.n	801b096 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801b056:	d82f      	bhi.n	801b0b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 801b058:	2b58      	cmp	r3, #88	; 0x58
 801b05a:	d01c      	beq.n	801b096 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801b05c:	d818      	bhi.n	801b090 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 801b05e:	2b25      	cmp	r3, #37	; 0x25
 801b060:	d034      	beq.n	801b0cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 801b062:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801b066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b068:	f1bb 0f00 	cmp.w	fp, #0
 801b06c:	f000 80b8 	beq.w	801b1e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 801b070:	f8bb 5000 	ldrh.w	r5, [fp]
 801b074:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801b078:	3301      	adds	r3, #1
 801b07a:	930d      	str	r3, [sp, #52]	; 0x34
 801b07c:	e029      	b.n	801b0d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801b07e:	b10d      	cbz	r5, 801b084 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 801b080:	782a      	ldrb	r2, [r5, #0]
 801b082:	e785      	b.n	801af90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801b084:	462a      	mov	r2, r5
 801b086:	e783      	b.n	801af90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801b088:	2a00      	cmp	r2, #0
 801b08a:	d0ea      	beq.n	801b062 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801b08c:	7813      	ldrb	r3, [r2, #0]
 801b08e:	e7e0      	b.n	801b052 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 801b090:	3b63      	subs	r3, #99	; 0x63
 801b092:	2b01      	cmp	r3, #1
 801b094:	d8e5      	bhi.n	801b062 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801b096:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801b09a:	b329      	cbz	r1, 801b0e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 801b09c:	880b      	ldrh	r3, [r1, #0]
 801b09e:	2b69      	cmp	r3, #105	; 0x69
 801b0a0:	d063      	beq.n	801b16a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801b0a2:	d825      	bhi.n	801b0f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 801b0a4:	2b63      	cmp	r3, #99	; 0x63
 801b0a6:	d038      	beq.n	801b11a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 801b0a8:	2b64      	cmp	r3, #100	; 0x64
 801b0aa:	d05e      	beq.n	801b16a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801b0ac:	2b58      	cmp	r3, #88	; 0x58
 801b0ae:	d07b      	beq.n	801b1a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 801b0b0:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801b0b4:	4625      	mov	r5, r4
 801b0b6:	e036      	b.n	801b126 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801b0b8:	2b73      	cmp	r3, #115	; 0x73
 801b0ba:	d0ec      	beq.n	801b096 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801b0bc:	d802      	bhi.n	801b0c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 801b0be:	2b6f      	cmp	r3, #111	; 0x6f
 801b0c0:	d1cf      	bne.n	801b062 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801b0c2:	e7e8      	b.n	801b096 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801b0c4:	2b75      	cmp	r3, #117	; 0x75
 801b0c6:	d0e6      	beq.n	801b096 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801b0c8:	2b78      	cmp	r3, #120	; 0x78
 801b0ca:	e7f9      	b.n	801b0c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 801b0cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b0ce:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801b0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b0d4:	b10b      	cbz	r3, 801b0da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 801b0d6:	3302      	adds	r3, #2
 801b0d8:	9309      	str	r3, [sp, #36]	; 0x24
 801b0da:	9b08      	ldr	r3, [sp, #32]
 801b0dc:	2b00      	cmp	r3, #0
 801b0de:	f43f af2e 	beq.w	801af3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b0e2:	3301      	adds	r3, #1
 801b0e4:	9308      	str	r3, [sp, #32]
 801b0e6:	e72a      	b.n	801af3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b0e8:	2a00      	cmp	r2, #0
 801b0ea:	d0e1      	beq.n	801b0b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801b0ec:	7813      	ldrb	r3, [r2, #0]
 801b0ee:	e7d6      	b.n	801b09e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 801b0f0:	2b73      	cmp	r3, #115	; 0x73
 801b0f2:	d036      	beq.n	801b162 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 801b0f4:	d807      	bhi.n	801b106 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 801b0f6:	2b6f      	cmp	r3, #111	; 0x6f
 801b0f8:	d1da      	bne.n	801b0b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801b0fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b0fc:	1d25      	adds	r5, r4, #4
 801b0fe:	eba8 0202 	sub.w	r2, r8, r2
 801b102:	2308      	movs	r3, #8
 801b104:	e04a      	b.n	801b19c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 801b106:	2b75      	cmp	r3, #117	; 0x75
 801b108:	d043      	beq.n	801b192 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 801b10a:	2b78      	cmp	r3, #120	; 0x78
 801b10c:	d1d0      	bne.n	801b0b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801b10e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b110:	1d25      	adds	r5, r4, #4
 801b112:	eba8 0202 	sub.w	r2, r8, r2
 801b116:	2310      	movs	r3, #16
 801b118:	e040      	b.n	801b19c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 801b11a:	6823      	ldr	r3, [r4, #0]
 801b11c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801b120:	1d25      	adds	r5, r4, #4
 801b122:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801b126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b128:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	d052      	beq.n	801b1d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 801b130:	881a      	ldrh	r2, [r3, #0]
 801b132:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801b136:	a80d      	add	r0, sp, #52	; 0x34
 801b138:	9005      	str	r0, [sp, #20]
 801b13a:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801b13e:	9004      	str	r0, [sp, #16]
 801b140:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b142:	9003      	str	r0, [sp, #12]
 801b144:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801b148:	9002      	str	r0, [sp, #8]
 801b14a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b14c:	9001      	str	r0, [sp, #4]
 801b14e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801b152:	9000      	str	r0, [sp, #0]
 801b154:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801b158:	a810      	add	r0, sp, #64	; 0x40
 801b15a:	f7ff fd49 	bl	801abf0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801b15e:	462c      	mov	r4, r5
 801b160:	e7b7      	b.n	801b0d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801b162:	6823      	ldr	r3, [r4, #0]
 801b164:	1d25      	adds	r5, r4, #4
 801b166:	9310      	str	r3, [sp, #64]	; 0x40
 801b168:	e7dd      	b.n	801b126 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801b16a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b16c:	6820      	ldr	r0, [r4, #0]
 801b16e:	eba8 0202 	sub.w	r2, r8, r2
 801b172:	230a      	movs	r3, #10
 801b174:	b292      	uxth	r2, r2
 801b176:	4649      	mov	r1, r9
 801b178:	f7ff fd08 	bl	801ab8c <_ZN8touchgfx7Unicode4itoaElPtti>
 801b17c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801b180:	2b2d      	cmp	r3, #45	; 0x2d
 801b182:	f104 0504 	add.w	r5, r4, #4
 801b186:	d1ce      	bne.n	801b126 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801b188:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b18c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b18e:	3302      	adds	r3, #2
 801b190:	e7e9      	b.n	801b166 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 801b192:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b194:	1d25      	adds	r5, r4, #4
 801b196:	eba8 0202 	sub.w	r2, r8, r2
 801b19a:	230a      	movs	r3, #10
 801b19c:	b292      	uxth	r2, r2
 801b19e:	4649      	mov	r1, r9
 801b1a0:	6820      	ldr	r0, [r4, #0]
 801b1a2:	f7ff fcd5 	bl	801ab50 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801b1a6:	e7be      	b.n	801b126 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801b1a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b1aa:	6820      	ldr	r0, [r4, #0]
 801b1ac:	eba8 0202 	sub.w	r2, r8, r2
 801b1b0:	b292      	uxth	r2, r2
 801b1b2:	2310      	movs	r3, #16
 801b1b4:	4649      	mov	r1, r9
 801b1b6:	f7ff fccb 	bl	801ab50 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801b1ba:	1d25      	adds	r5, r4, #4
 801b1bc:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801b1c0:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801b1c4:	2b00      	cmp	r3, #0
 801b1c6:	d0ae      	beq.n	801b126 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801b1c8:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801b1cc:	2919      	cmp	r1, #25
 801b1ce:	d8f7      	bhi.n	801b1c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801b1d0:	3b20      	subs	r3, #32
 801b1d2:	8013      	strh	r3, [r2, #0]
 801b1d4:	e7f4      	b.n	801b1c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801b1d6:	9a08      	ldr	r2, [sp, #32]
 801b1d8:	2a00      	cmp	r2, #0
 801b1da:	d0aa      	beq.n	801b132 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 801b1dc:	7812      	ldrb	r2, [r2, #0]
 801b1de:	e7a8      	b.n	801b132 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 801b1e0:	2d00      	cmp	r5, #0
 801b1e2:	f43f af47 	beq.w	801b074 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 801b1e6:	782d      	ldrb	r5, [r5, #0]
 801b1e8:	e744      	b.n	801b074 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

0801b1ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801b1ea:	b507      	push	{r0, r1, r2, lr}
 801b1ec:	9300      	str	r3, [sp, #0]
 801b1ee:	4613      	mov	r3, r2
 801b1f0:	2200      	movs	r2, #0
 801b1f2:	f7ff fe90 	bl	801af16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801b1f6:	b003      	add	sp, #12
 801b1f8:	f85d fb04 	ldr.w	pc, [sp], #4

0801b1fc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801b1fc:	b40c      	push	{r2, r3}
 801b1fe:	b507      	push	{r0, r1, r2, lr}
 801b200:	ab04      	add	r3, sp, #16
 801b202:	f853 2b04 	ldr.w	r2, [r3], #4
 801b206:	9301      	str	r3, [sp, #4]
 801b208:	f7ff ffef 	bl	801b1ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801b20c:	b003      	add	sp, #12
 801b20e:	f85d eb04 	ldr.w	lr, [sp], #4
 801b212:	b002      	add	sp, #8
 801b214:	4770      	bx	lr
	...

0801b218 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>:
 801b218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b21c:	b0c3      	sub	sp, #268	; 0x10c
 801b21e:	2600      	movs	r6, #0
 801b220:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 801b224:	4607      	mov	r7, r0
 801b226:	4689      	mov	r9, r1
 801b228:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801b22c:	4631      	mov	r1, r6
 801b22e:	22c8      	movs	r2, #200	; 0xc8
 801b230:	4640      	mov	r0, r8
 801b232:	f8dd a130 	ldr.w	sl, [sp, #304]	; 0x130
 801b236:	960c      	str	r6, [sp, #48]	; 0x30
 801b238:	f00c fd64 	bl	8027d04 <memset>
 801b23c:	b17f      	cbz	r7, 801b25e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x46>
 801b23e:	eddf 5aa4 	vldr	s11, [pc, #656]	; 801b4d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2b8>
 801b242:	f8df b298 	ldr.w	fp, [pc, #664]	; 801b4dc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c4>
 801b246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b24a:	b162      	cbz	r2, 801b266 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x4e>
 801b24c:	8812      	ldrh	r2, [r2, #0]
 801b24e:	b11a      	cbz	r2, 801b258 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x40>
 801b250:	f109 31ff 	add.w	r1, r9, #4294967295
 801b254:	4299      	cmp	r1, r3
 801b256:	dc26      	bgt.n	801b2a6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8e>
 801b258:	2200      	movs	r2, #0
 801b25a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801b25e:	4638      	mov	r0, r7
 801b260:	b043      	add	sp, #268	; 0x10c
 801b262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b266:	9a08      	ldr	r2, [sp, #32]
 801b268:	2a00      	cmp	r2, #0
 801b26a:	d0f5      	beq.n	801b258 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x40>
 801b26c:	7812      	ldrb	r2, [r2, #0]
 801b26e:	e7ee      	b.n	801b24e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x36>
 801b270:	2c00      	cmp	r4, #0
 801b272:	d0e8      	beq.n	801b246 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 801b274:	7822      	ldrb	r2, [r4, #0]
 801b276:	b132      	cbz	r2, 801b286 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x6e>
 801b278:	2a25      	cmp	r2, #37	; 0x25
 801b27a:	d001      	beq.n	801b280 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x68>
 801b27c:	4299      	cmp	r1, r3
 801b27e:	dc05      	bgt.n	801b28c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x74>
 801b280:	b9cd      	cbnz	r5, 801b2b6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9e>
 801b282:	2c00      	cmp	r4, #0
 801b284:	d0df      	beq.n	801b246 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 801b286:	7822      	ldrb	r2, [r4, #0]
 801b288:	2500      	movs	r5, #0
 801b28a:	e015      	b.n	801b2b8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xa0>
 801b28c:	2d00      	cmp	r5, #0
 801b28e:	d073      	beq.n	801b378 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x160>
 801b290:	882a      	ldrh	r2, [r5, #0]
 801b292:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801b296:	b10d      	cbz	r5, 801b29c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x84>
 801b298:	3502      	adds	r5, #2
 801b29a:	9509      	str	r5, [sp, #36]	; 0x24
 801b29c:	b10c      	cbz	r4, 801b2a2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8a>
 801b29e:	3401      	adds	r4, #1
 801b2a0:	9408      	str	r4, [sp, #32]
 801b2a2:	3301      	adds	r3, #1
 801b2a4:	930c      	str	r3, [sp, #48]	; 0x30
 801b2a6:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 801b2aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b2ac:	2d00      	cmp	r5, #0
 801b2ae:	d0df      	beq.n	801b270 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x58>
 801b2b0:	882a      	ldrh	r2, [r5, #0]
 801b2b2:	2a00      	cmp	r2, #0
 801b2b4:	d1e0      	bne.n	801b278 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x60>
 801b2b6:	882a      	ldrh	r2, [r5, #0]
 801b2b8:	2a00      	cmp	r2, #0
 801b2ba:	d0c4      	beq.n	801b246 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 801b2bc:	4299      	cmp	r1, r3
 801b2be:	ddc2      	ble.n	801b246 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 801b2c0:	2300      	movs	r3, #0
 801b2c2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b2c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b2ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b2ce:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801b2d2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801b2d6:	930d      	str	r3, [sp, #52]	; 0x34
 801b2d8:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801b2dc:	930e      	str	r3, [sp, #56]	; 0x38
 801b2de:	b10d      	cbz	r5, 801b2e4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xcc>
 801b2e0:	1cab      	adds	r3, r5, #2
 801b2e2:	9309      	str	r3, [sp, #36]	; 0x24
 801b2e4:	b10c      	cbz	r4, 801b2ea <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xd2>
 801b2e6:	1c63      	adds	r3, r4, #1
 801b2e8:	9308      	str	r3, [sp, #32]
 801b2ea:	ab0e      	add	r3, sp, #56	; 0x38
 801b2ec:	9305      	str	r3, [sp, #20]
 801b2ee:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801b2f2:	9304      	str	r3, [sp, #16]
 801b2f4:	ab0d      	add	r3, sp, #52	; 0x34
 801b2f6:	9303      	str	r3, [sp, #12]
 801b2f8:	ab0b      	add	r3, sp, #44	; 0x2c
 801b2fa:	9302      	str	r3, [sp, #8]
 801b2fc:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801b300:	9301      	str	r3, [sp, #4]
 801b302:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801b306:	9300      	str	r3, [sp, #0]
 801b308:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 801b30c:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 801b310:	a908      	add	r1, sp, #32
 801b312:	a809      	add	r0, sp, #36	; 0x24
 801b314:	f7ff fd2f 	bl	801ad76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801b318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	da0b      	bge.n	801b336 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x11e>
 801b31e:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 801b322:	edd3 7a00 	vldr	s15, [r3]
 801b326:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b32a:	3601      	adds	r6, #1
 801b32c:	ee17 3a90 	vmov	r3, s15
 801b330:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b334:	930d      	str	r3, [sp, #52]	; 0x34
 801b336:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b338:	2b00      	cmp	r3, #0
 801b33a:	da0b      	bge.n	801b354 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x13c>
 801b33c:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 801b340:	edd3 7a00 	vldr	s15, [r3]
 801b344:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b348:	3601      	adds	r6, #1
 801b34a:	ee17 3a90 	vmov	r3, s15
 801b34e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b352:	930e      	str	r3, [sp, #56]	; 0x38
 801b354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b356:	b1a3      	cbz	r3, 801b382 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x16a>
 801b358:	881a      	ldrh	r2, [r3, #0]
 801b35a:	2a25      	cmp	r2, #37	; 0x25
 801b35c:	d016      	beq.n	801b38c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x174>
 801b35e:	2a66      	cmp	r2, #102	; 0x66
 801b360:	d01a      	beq.n	801b398 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x180>
 801b362:	e9cd 4508 	strd	r4, r5, [sp, #32]
 801b366:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b368:	2d00      	cmp	r5, #0
 801b36a:	f000 80fe 	beq.w	801b56a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x352>
 801b36e:	882c      	ldrh	r4, [r5, #0]
 801b370:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801b374:	3301      	adds	r3, #1
 801b376:	e00d      	b.n	801b394 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x17c>
 801b378:	b10c      	cbz	r4, 801b37e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x166>
 801b37a:	7822      	ldrb	r2, [r4, #0]
 801b37c:	e789      	b.n	801b292 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x7a>
 801b37e:	4622      	mov	r2, r4
 801b380:	e787      	b.n	801b292 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x7a>
 801b382:	9b08      	ldr	r3, [sp, #32]
 801b384:	2b00      	cmp	r3, #0
 801b386:	d0ec      	beq.n	801b362 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x14a>
 801b388:	781a      	ldrb	r2, [r3, #0]
 801b38a:	e7e6      	b.n	801b35a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x142>
 801b38c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b38e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801b392:	3302      	adds	r3, #2
 801b394:	930c      	str	r3, [sp, #48]	; 0x30
 801b396:	e042      	b.n	801b41e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x206>
 801b398:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 801b39c:	edd3 7a00 	vldr	s15, [r3]
 801b3a0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801b3a4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 801b3a8:	3601      	adds	r6, #1
 801b3aa:	b923      	cbnz	r3, 801b3b6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x19e>
 801b3ac:	2301      	movs	r3, #1
 801b3ae:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801b3b2:	2306      	movs	r3, #6
 801b3b4:	930e      	str	r3, [sp, #56]	; 0x38
 801b3b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3be:	bf48      	it	mi
 801b3c0:	eef1 7a67 	vnegmi.f32	s15, s15
 801b3c4:	eeb0 7ae7 	vabs.f32	s14, s15
 801b3c8:	bf48      	it	mi
 801b3ca:	232d      	movmi	r3, #45	; 0x2d
 801b3cc:	eeb4 7a65 	vcmp.f32	s14, s11
 801b3d0:	bf48      	it	mi
 801b3d2:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801b3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3da:	dd2b      	ble.n	801b434 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x21c>
 801b3dc:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 801b3e0:	2366      	movs	r3, #102	; 0x66
 801b3e2:	9311      	str	r3, [sp, #68]	; 0x44
 801b3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b3e6:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	f000 80b7 	beq.w	801b55e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x346>
 801b3f0:	881a      	ldrh	r2, [r3, #0]
 801b3f2:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801b3f6:	a80c      	add	r0, sp, #48	; 0x30
 801b3f8:	9005      	str	r0, [sp, #20]
 801b3fa:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 801b3fe:	9004      	str	r0, [sp, #16]
 801b400:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b402:	9003      	str	r0, [sp, #12]
 801b404:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 801b408:	9002      	str	r0, [sp, #8]
 801b40a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b40c:	9001      	str	r0, [sp, #4]
 801b40e:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 801b412:	9000      	str	r0, [sp, #0]
 801b414:	e9cd 9706 	strd	r9, r7, [sp, #24]
 801b418:	a80f      	add	r0, sp, #60	; 0x3c
 801b41a:	f7ff fbe9 	bl	801abf0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801b41e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b420:	b10b      	cbz	r3, 801b426 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x20e>
 801b422:	3302      	adds	r3, #2
 801b424:	9309      	str	r3, [sp, #36]	; 0x24
 801b426:	9b08      	ldr	r3, [sp, #32]
 801b428:	2b00      	cmp	r3, #0
 801b42a:	f43f af0c 	beq.w	801b246 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 801b42e:	3301      	adds	r3, #1
 801b430:	9308      	str	r3, [sp, #32]
 801b432:	e708      	b.n	801b246 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 801b434:	eef4 7a67 	vcmp.f32	s15, s15
 801b438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b43c:	d60b      	bvs.n	801b456 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x23e>
 801b43e:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b440:	ed9f 7a24 	vldr	s14, [pc, #144]	; 801b4d4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2bc>
 801b444:	2300      	movs	r3, #0
 801b446:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801b44a:	4283      	cmp	r3, r0
 801b44c:	da07      	bge.n	801b45e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x246>
 801b44e:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801b452:	3301      	adds	r3, #1
 801b454:	e7f9      	b.n	801b44a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x232>
 801b456:	4b20      	ldr	r3, [pc, #128]	; (801b4d8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c0>)
 801b458:	9310      	str	r3, [sp, #64]	; 0x40
 801b45a:	236e      	movs	r3, #110	; 0x6e
 801b45c:	e7c1      	b.n	801b3e2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1ca>
 801b45e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b466:	eeb0 7a67 	vmov.f32	s14, s15
 801b46a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801b46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b472:	da27      	bge.n	801b4c4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2ac>
 801b474:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b476:	2100      	movs	r1, #0
 801b478:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 801b47c:	eba9 0202 	sub.w	r2, r9, r2
 801b480:	eef4 6ac5 	vcmpe.f32	s13, s10
 801b484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b488:	b28c      	uxth	r4, r1
 801b48a:	db2a      	blt.n	801b4e2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2ca>
 801b48c:	1a53      	subs	r3, r2, r1
 801b48e:	2b00      	cmp	r3, #0
 801b490:	dd27      	ble.n	801b4e2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2ca>
 801b492:	2963      	cmp	r1, #99	; 0x63
 801b494:	d024      	beq.n	801b4e0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c8>
 801b496:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801b49a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801b49e:	ee17 3a10 	vmov	r3, s14
 801b4a2:	2b09      	cmp	r3, #9
 801b4a4:	bfa8      	it	ge
 801b4a6:	2309      	movge	r3, #9
 801b4a8:	ee07 3a10 	vmov	s14, r3
 801b4ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b4b0:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801b4b4:	f828 4011 	strh.w	r4, [r8, r1, lsl #1]
 801b4b8:	eee7 7a66 	vfms.f32	s15, s14, s13
 801b4bc:	3101      	adds	r1, #1
 801b4be:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801b4c2:	e7dd      	b.n	801b480 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x268>
 801b4c4:	ee66 6a86 	vmul.f32	s13, s13, s12
 801b4c8:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801b4cc:	e7cd      	b.n	801b46a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x252>
 801b4ce:	bf00      	nop
 801b4d0:	7f7fffff 	.word	0x7f7fffff
 801b4d4:	3f000002 	.word	0x3f000002
 801b4d8:	0061006e 	.word	0x0061006e
 801b4dc:	006e0069 	.word	0x006e0069
 801b4e0:	460c      	mov	r4, r1
 801b4e2:	2a63      	cmp	r2, #99	; 0x63
 801b4e4:	bfd4      	ite	le
 801b4e6:	ebc4 0202 	rsble	r2, r4, r2
 801b4ea:	f1c4 0263 	rsbgt	r2, r4, #99	; 0x63
 801b4ee:	2a00      	cmp	r2, #0
 801b4f0:	dd30      	ble.n	801b554 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x33c>
 801b4f2:	4603      	mov	r3, r0
 801b4f4:	2501      	movs	r5, #1
 801b4f6:	210a      	movs	r1, #10
 801b4f8:	2b00      	cmp	r3, #0
 801b4fa:	dd0d      	ble.n	801b518 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x300>
 801b4fc:	ee67 7a86 	vmul.f32	s15, s15, s12
 801b500:	3b01      	subs	r3, #1
 801b502:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801b506:	ee17 ca10 	vmov	ip, s14
 801b50a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b50e:	fb01 c505 	mla	r5, r1, r5, ip
 801b512:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b516:	e7ef      	b.n	801b4f8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e0>
 801b518:	2800      	cmp	r0, #0
 801b51a:	f100 33ff 	add.w	r3, r0, #4294967295
 801b51e:	bfac      	ite	ge
 801b520:	1a18      	subge	r0, r3, r0
 801b522:	4618      	movlt	r0, r3
 801b524:	0064      	lsls	r4, r4, #1
 801b526:	900e      	str	r0, [sp, #56]	; 0x38
 801b528:	230a      	movs	r3, #10
 801b52a:	b292      	uxth	r2, r2
 801b52c:	eb08 0104 	add.w	r1, r8, r4
 801b530:	4628      	mov	r0, r5
 801b532:	f7ff fb2b 	bl	801ab8c <_ZN8touchgfx7Unicode4itoaElPtti>
 801b536:	2d01      	cmp	r5, #1
 801b538:	dc0a      	bgt.n	801b550 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x338>
 801b53a:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801b53e:	2b00      	cmp	r3, #0
 801b540:	bf0c      	ite	eq
 801b542:	2300      	moveq	r3, #0
 801b544:	232e      	movne	r3, #46	; 0x2e
 801b546:	aa42      	add	r2, sp, #264	; 0x108
 801b548:	4414      	add	r4, r2
 801b54a:	f824 3cc8 	strh.w	r3, [r4, #-200]
 801b54e:	e749      	b.n	801b3e4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1cc>
 801b550:	232e      	movs	r3, #46	; 0x2e
 801b552:	e7f8      	b.n	801b546 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32e>
 801b554:	ab42      	add	r3, sp, #264	; 0x108
 801b556:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801b55a:	2300      	movs	r3, #0
 801b55c:	e7f5      	b.n	801b54a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x332>
 801b55e:	9a08      	ldr	r2, [sp, #32]
 801b560:	2a00      	cmp	r2, #0
 801b562:	f43f af46 	beq.w	801b3f2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1da>
 801b566:	7812      	ldrb	r2, [r2, #0]
 801b568:	e743      	b.n	801b3f2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1da>
 801b56a:	2c00      	cmp	r4, #0
 801b56c:	f43f af00 	beq.w	801b370 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x158>
 801b570:	7824      	ldrb	r4, [r4, #0]
 801b572:	e6fd      	b.n	801b370 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x158>

0801b574 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801b574:	b507      	push	{r0, r1, r2, lr}
 801b576:	9300      	str	r3, [sp, #0]
 801b578:	4613      	mov	r3, r2
 801b57a:	2200      	movs	r2, #0
 801b57c:	f7ff fe4c 	bl	801b218 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>
 801b580:	b003      	add	sp, #12
 801b582:	f85d fb04 	ldr.w	pc, [sp], #4

0801b586 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt>:
 801b586:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b588:	4603      	mov	r3, r0
 801b58a:	2000      	movs	r0, #0
 801b58c:	4290      	cmp	r0, r2
 801b58e:	d209      	bcs.n	801b5a4 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x1e>
 801b590:	781c      	ldrb	r4, [r3, #0]
 801b592:	0625      	lsls	r5, r4, #24
 801b594:	d407      	bmi.n	801b5a6 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x20>
 801b596:	800c      	strh	r4, [r1, #0]
 801b598:	3301      	adds	r3, #1
 801b59a:	1c8c      	adds	r4, r1, #2
 801b59c:	8809      	ldrh	r1, [r1, #0]
 801b59e:	3001      	adds	r0, #1
 801b5a0:	b280      	uxth	r0, r0
 801b5a2:	bb69      	cbnz	r1, 801b600 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x7a>
 801b5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b5a6:	f004 05e0 	and.w	r5, r4, #224	; 0xe0
 801b5aa:	2dc0      	cmp	r5, #192	; 0xc0
 801b5ac:	d10d      	bne.n	801b5ca <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x44>
 801b5ae:	785d      	ldrb	r5, [r3, #1]
 801b5b0:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 801b5b4:	2e80      	cmp	r6, #128	; 0x80
 801b5b6:	d108      	bne.n	801b5ca <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x44>
 801b5b8:	01a4      	lsls	r4, r4, #6
 801b5ba:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 801b5be:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 801b5c2:	432c      	orrs	r4, r5
 801b5c4:	800c      	strh	r4, [r1, #0]
 801b5c6:	3302      	adds	r3, #2
 801b5c8:	e7e7      	b.n	801b59a <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x14>
 801b5ca:	f004 05f0 	and.w	r5, r4, #240	; 0xf0
 801b5ce:	2de0      	cmp	r5, #224	; 0xe0
 801b5d0:	d114      	bne.n	801b5fc <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x76>
 801b5d2:	785e      	ldrb	r6, [r3, #1]
 801b5d4:	f006 05c0 	and.w	r5, r6, #192	; 0xc0
 801b5d8:	2d80      	cmp	r5, #128	; 0x80
 801b5da:	d10f      	bne.n	801b5fc <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x76>
 801b5dc:	789d      	ldrb	r5, [r3, #2]
 801b5de:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
 801b5e2:	2f80      	cmp	r7, #128	; 0x80
 801b5e4:	d10a      	bne.n	801b5fc <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x76>
 801b5e6:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 801b5ea:	01b6      	lsls	r6, r6, #6
 801b5ec:	ea45 3404 	orr.w	r4, r5, r4, lsl #12
 801b5f0:	f406 667c 	and.w	r6, r6, #4032	; 0xfc0
 801b5f4:	4334      	orrs	r4, r6
 801b5f6:	800c      	strh	r4, [r1, #0]
 801b5f8:	3303      	adds	r3, #3
 801b5fa:	e7ce      	b.n	801b59a <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x14>
 801b5fc:	3301      	adds	r3, #1
 801b5fe:	460c      	mov	r4, r1
 801b600:	4621      	mov	r1, r4
 801b602:	e7c3      	b.n	801b58c <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x6>

0801b604 <_ZN8touchgfx7Unicode6toUTF8EPKtPht>:
 801b604:	b570      	push	{r4, r5, r6, lr}
 801b606:	2300      	movs	r3, #0
 801b608:	4293      	cmp	r3, r2
 801b60a:	d20a      	bcs.n	801b622 <_ZN8touchgfx7Unicode6toUTF8EPKtPht+0x1e>
 801b60c:	8804      	ldrh	r4, [r0, #0]
 801b60e:	2c7f      	cmp	r4, #127	; 0x7f
 801b610:	d809      	bhi.n	801b626 <_ZN8touchgfx7Unicode6toUTF8EPKtPht+0x22>
 801b612:	3301      	adds	r3, #1
 801b614:	700c      	strb	r4, [r1, #0]
 801b616:	b29b      	uxth	r3, r3
 801b618:	3101      	adds	r1, #1
 801b61a:	f830 4b02 	ldrh.w	r4, [r0], #2
 801b61e:	2c00      	cmp	r4, #0
 801b620:	d1f2      	bne.n	801b608 <_ZN8touchgfx7Unicode6toUTF8EPKtPht+0x4>
 801b622:	4618      	mov	r0, r3
 801b624:	bd70      	pop	{r4, r5, r6, pc}
 801b626:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 801b62a:	f103 0602 	add.w	r6, r3, #2
 801b62e:	d211      	bcs.n	801b654 <_ZN8touchgfx7Unicode6toUTF8EPKtPht+0x50>
 801b630:	1c5d      	adds	r5, r3, #1
 801b632:	4295      	cmp	r5, r2
 801b634:	da0e      	bge.n	801b654 <_ZN8touchgfx7Unicode6toUTF8EPKtPht+0x50>
 801b636:	460d      	mov	r5, r1
 801b638:	11a4      	asrs	r4, r4, #6
 801b63a:	f064 043f 	orn	r4, r4, #63	; 0x3f
 801b63e:	f805 4b02 	strb.w	r4, [r5], #2
 801b642:	7803      	ldrb	r3, [r0, #0]
 801b644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b648:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b64c:	704b      	strb	r3, [r1, #1]
 801b64e:	b2b3      	uxth	r3, r6
 801b650:	4629      	mov	r1, r5
 801b652:	e7e2      	b.n	801b61a <_ZN8touchgfx7Unicode6toUTF8EPKtPht+0x16>
 801b654:	4296      	cmp	r6, r2
 801b656:	dae4      	bge.n	801b622 <_ZN8touchgfx7Unicode6toUTF8EPKtPht+0x1e>
 801b658:	1324      	asrs	r4, r4, #12
 801b65a:	f064 041f 	orn	r4, r4, #31
 801b65e:	700c      	strb	r4, [r1, #0]
 801b660:	8804      	ldrh	r4, [r0, #0]
 801b662:	f3c4 1485 	ubfx	r4, r4, #6, #6
 801b666:	f064 047f 	orn	r4, r4, #127	; 0x7f
 801b66a:	704c      	strb	r4, [r1, #1]
 801b66c:	7804      	ldrb	r4, [r0, #0]
 801b66e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 801b672:	f064 047f 	orn	r4, r4, #127	; 0x7f
 801b676:	3303      	adds	r3, #3
 801b678:	708c      	strb	r4, [r1, #2]
 801b67a:	b29b      	uxth	r3, r3
 801b67c:	3103      	adds	r1, #3
 801b67e:	e7cc      	b.n	801b61a <_ZN8touchgfx7Unicode6toUTF8EPKtPht+0x16>

0801b680 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801b680:	4b01      	ldr	r3, [pc, #4]	; (801b688 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801b682:	6018      	str	r0, [r3, #0]
 801b684:	4770      	bx	lr
 801b686:	bf00      	nop
 801b688:	2000c4a4 	.word	0x2000c4a4

0801b68c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801b68c:	4b06      	ldr	r3, [pc, #24]	; (801b6a8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801b68e:	881a      	ldrh	r2, [r3, #0]
 801b690:	4282      	cmp	r2, r0
 801b692:	d807      	bhi.n	801b6a4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801b694:	4b05      	ldr	r3, [pc, #20]	; (801b6ac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801b696:	881b      	ldrh	r3, [r3, #0]
 801b698:	4413      	add	r3, r2
 801b69a:	4298      	cmp	r0, r3
 801b69c:	bfac      	ite	ge
 801b69e:	2000      	movge	r0, #0
 801b6a0:	2001      	movlt	r0, #1
 801b6a2:	4770      	bx	lr
 801b6a4:	2000      	movs	r0, #0
 801b6a6:	4770      	bx	lr
 801b6a8:	2000c4c4 	.word	0x2000c4c4
 801b6ac:	2000c4c8 	.word	0x2000c4c8

0801b6b0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801b6b0:	b508      	push	{r3, lr}
 801b6b2:	4601      	mov	r1, r0
 801b6b4:	f7ff ffea 	bl	801b68c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801b6b8:	b118      	cbz	r0, 801b6c2 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801b6ba:	4b02      	ldr	r3, [pc, #8]	; (801b6c4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801b6bc:	681b      	ldr	r3, [r3, #0]
 801b6be:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801b6c2:	bd08      	pop	{r3, pc}
 801b6c4:	2000c4a8 	.word	0x2000c4a8

0801b6c8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801b6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b6ca:	4c24      	ldr	r4, [pc, #144]	; (801b75c <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801b6cc:	6823      	ldr	r3, [r4, #0]
 801b6ce:	2b00      	cmp	r3, #0
 801b6d0:	d042      	beq.n	801b758 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801b6d2:	4a23      	ldr	r2, [pc, #140]	; (801b760 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801b6d4:	4d23      	ldr	r5, [pc, #140]	; (801b764 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801b6d6:	8811      	ldrh	r1, [r2, #0]
 801b6d8:	f8b5 c000 	ldrh.w	ip, [r5]
 801b6dc:	4822      	ldr	r0, [pc, #136]	; (801b768 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801b6de:	4461      	add	r1, ip
 801b6e0:	1c4a      	adds	r2, r1, #1
 801b6e2:	f022 0201 	bic.w	r2, r2, #1
 801b6e6:	008f      	lsls	r7, r1, #2
 801b6e8:	0412      	lsls	r2, r2, #16
 801b6ea:	19de      	adds	r6, r3, r7
 801b6ec:	0c12      	lsrs	r2, r2, #16
 801b6ee:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801b6f2:	6006      	str	r6, [r0, #0]
 801b6f4:	4e1d      	ldr	r6, [pc, #116]	; (801b76c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801b6f6:	19da      	adds	r2, r3, r7
 801b6f8:	6032      	str	r2, [r6, #0]
 801b6fa:	220e      	movs	r2, #14
 801b6fc:	fb02 f20c 	mul.w	r2, r2, ip
 801b700:	3203      	adds	r2, #3
 801b702:	f022 0203 	bic.w	r2, r2, #3
 801b706:	443a      	add	r2, r7
 801b708:	4f19      	ldr	r7, [pc, #100]	; (801b770 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801b70a:	4413      	add	r3, r2
 801b70c:	603b      	str	r3, [r7, #0]
 801b70e:	4f19      	ldr	r7, [pc, #100]	; (801b774 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801b710:	2300      	movs	r3, #0
 801b712:	803b      	strh	r3, [r7, #0]
 801b714:	4f18      	ldr	r7, [pc, #96]	; (801b778 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801b716:	683f      	ldr	r7, [r7, #0]
 801b718:	1aba      	subs	r2, r7, r2
 801b71a:	4f18      	ldr	r7, [pc, #96]	; (801b77c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801b71c:	603a      	str	r2, [r7, #0]
 801b71e:	4a18      	ldr	r2, [pc, #96]	; (801b780 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801b720:	469c      	mov	ip, r3
 801b722:	8013      	strh	r3, [r2, #0]
 801b724:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801b728:	428b      	cmp	r3, r1
 801b72a:	d10d      	bne.n	801b748 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801b72c:	882d      	ldrh	r5, [r5, #0]
 801b72e:	6830      	ldr	r0, [r6, #0]
 801b730:	2300      	movs	r3, #0
 801b732:	240e      	movs	r4, #14
 801b734:	429d      	cmp	r5, r3
 801b736:	d90f      	bls.n	801b758 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801b738:	fb04 0203 	mla	r2, r4, r3, r0
 801b73c:	3301      	adds	r3, #1
 801b73e:	7b11      	ldrb	r1, [r2, #12]
 801b740:	f36f 1145 	bfc	r1, #5, #1
 801b744:	7311      	strb	r1, [r2, #12]
 801b746:	e7f5      	b.n	801b734 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801b748:	6822      	ldr	r2, [r4, #0]
 801b74a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801b74e:	6802      	ldr	r2, [r0, #0]
 801b750:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801b754:	3301      	adds	r3, #1
 801b756:	e7e7      	b.n	801b728 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801b758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b75a:	bf00      	nop
 801b75c:	2000c4a8 	.word	0x2000c4a8
 801b760:	2000c4c4 	.word	0x2000c4c4
 801b764:	2000c4c8 	.word	0x2000c4c8
 801b768:	2000c4bc 	.word	0x2000c4bc
 801b76c:	2000c4ac 	.word	0x2000c4ac
 801b770:	2000c4b4 	.word	0x2000c4b4
 801b774:	2000c4c6 	.word	0x2000c4c6
 801b778:	2000c4b0 	.word	0x2000c4b0
 801b77c:	2000c4c0 	.word	0x2000c4c0
 801b780:	2000c4b8 	.word	0x2000c4b8

0801b784 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801b784:	4b06      	ldr	r3, [pc, #24]	; (801b7a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801b786:	681b      	ldr	r3, [r3, #0]
 801b788:	b943      	cbnz	r3, 801b79c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801b78a:	b139      	cbz	r1, 801b79c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801b78c:	4b05      	ldr	r3, [pc, #20]	; (801b7a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801b78e:	801a      	strh	r2, [r3, #0]
 801b790:	4b05      	ldr	r3, [pc, #20]	; (801b7a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801b792:	6019      	str	r1, [r3, #0]
 801b794:	4b05      	ldr	r3, [pc, #20]	; (801b7ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801b796:	6018      	str	r0, [r3, #0]
 801b798:	f7ff bf96 	b.w	801b6c8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801b79c:	4770      	bx	lr
 801b79e:	bf00      	nop
 801b7a0:	2000c4b4 	.word	0x2000c4b4
 801b7a4:	2000c4c8 	.word	0x2000c4c8
 801b7a8:	2000c4b0 	.word	0x2000c4b0
 801b7ac:	2000c4a8 	.word	0x2000c4a8

0801b7b0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801b7b0:	b470      	push	{r4, r5, r6}
 801b7b2:	4c07      	ldr	r4, [pc, #28]	; (801b7d0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801b7b4:	6826      	ldr	r6, [r4, #0]
 801b7b6:	4605      	mov	r5, r0
 801b7b8:	4610      	mov	r0, r2
 801b7ba:	9a03      	ldr	r2, [sp, #12]
 801b7bc:	b936      	cbnz	r6, 801b7cc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801b7be:	6025      	str	r5, [r4, #0]
 801b7c0:	4c04      	ldr	r4, [pc, #16]	; (801b7d4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801b7c2:	8021      	strh	r1, [r4, #0]
 801b7c4:	bc70      	pop	{r4, r5, r6}
 801b7c6:	4619      	mov	r1, r3
 801b7c8:	f7ff bfdc 	b.w	801b784 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801b7cc:	bc70      	pop	{r4, r5, r6}
 801b7ce:	4770      	bx	lr
 801b7d0:	2000c4cc 	.word	0x2000c4cc
 801b7d4:	2000c4c4 	.word	0x2000c4c4

0801b7d8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801b7d8:	4a12      	ldr	r2, [pc, #72]	; (801b824 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801b7da:	8803      	ldrh	r3, [r0, #0]
 801b7dc:	8812      	ldrh	r2, [r2, #0]
 801b7de:	4293      	cmp	r3, r2
 801b7e0:	d207      	bcs.n	801b7f2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801b7e2:	4a11      	ldr	r2, [pc, #68]	; (801b828 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801b7e4:	6812      	ldr	r2, [r2, #0]
 801b7e6:	2114      	movs	r1, #20
 801b7e8:	fb01 2303 	mla	r3, r1, r3, r2
 801b7ec:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801b7f0:	4770      	bx	lr
 801b7f2:	490e      	ldr	r1, [pc, #56]	; (801b82c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801b7f4:	8809      	ldrh	r1, [r1, #0]
 801b7f6:	4411      	add	r1, r2
 801b7f8:	428b      	cmp	r3, r1
 801b7fa:	da04      	bge.n	801b806 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801b7fc:	1a9b      	subs	r3, r3, r2
 801b7fe:	4a0c      	ldr	r2, [pc, #48]	; (801b830 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801b800:	210e      	movs	r1, #14
 801b802:	6812      	ldr	r2, [r2, #0]
 801b804:	e7f0      	b.n	801b7e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801b806:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b80a:	4293      	cmp	r3, r2
 801b80c:	d108      	bne.n	801b820 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801b80e:	4b09      	ldr	r3, [pc, #36]	; (801b834 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801b810:	781b      	ldrb	r3, [r3, #0]
 801b812:	b91b      	cbnz	r3, 801b81c <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801b814:	4b08      	ldr	r3, [pc, #32]	; (801b838 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801b816:	f9b3 0000 	ldrsh.w	r0, [r3]
 801b81a:	4770      	bx	lr
 801b81c:	4b07      	ldr	r3, [pc, #28]	; (801b83c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801b81e:	e7fa      	b.n	801b816 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801b820:	2000      	movs	r0, #0
 801b822:	4770      	bx	lr
 801b824:	2000c4c4 	.word	0x2000c4c4
 801b828:	2000c4cc 	.word	0x2000c4cc
 801b82c:	2000c4c8 	.word	0x2000c4c8
 801b830:	2000c4ac 	.word	0x2000c4ac
 801b834:	2000c434 	.word	0x2000c434
 801b838:	2000c436 	.word	0x2000c436
 801b83c:	2000c438 	.word	0x2000c438

0801b840 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801b840:	4a12      	ldr	r2, [pc, #72]	; (801b88c <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801b842:	8803      	ldrh	r3, [r0, #0]
 801b844:	8812      	ldrh	r2, [r2, #0]
 801b846:	4293      	cmp	r3, r2
 801b848:	d207      	bcs.n	801b85a <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801b84a:	4a11      	ldr	r2, [pc, #68]	; (801b890 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801b84c:	6812      	ldr	r2, [r2, #0]
 801b84e:	2114      	movs	r1, #20
 801b850:	fb01 2303 	mla	r3, r1, r3, r2
 801b854:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801b858:	4770      	bx	lr
 801b85a:	490e      	ldr	r1, [pc, #56]	; (801b894 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801b85c:	8809      	ldrh	r1, [r1, #0]
 801b85e:	4411      	add	r1, r2
 801b860:	428b      	cmp	r3, r1
 801b862:	da04      	bge.n	801b86e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801b864:	1a9b      	subs	r3, r3, r2
 801b866:	4a0c      	ldr	r2, [pc, #48]	; (801b898 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801b868:	210e      	movs	r1, #14
 801b86a:	6812      	ldr	r2, [r2, #0]
 801b86c:	e7f0      	b.n	801b850 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801b86e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b872:	4293      	cmp	r3, r2
 801b874:	d108      	bne.n	801b888 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801b876:	4b09      	ldr	r3, [pc, #36]	; (801b89c <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801b878:	781b      	ldrb	r3, [r3, #0]
 801b87a:	b91b      	cbnz	r3, 801b884 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801b87c:	4b08      	ldr	r3, [pc, #32]	; (801b8a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801b87e:	f9b3 0000 	ldrsh.w	r0, [r3]
 801b882:	4770      	bx	lr
 801b884:	4b07      	ldr	r3, [pc, #28]	; (801b8a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801b886:	e7fa      	b.n	801b87e <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801b888:	2000      	movs	r0, #0
 801b88a:	4770      	bx	lr
 801b88c:	2000c4c4 	.word	0x2000c4c4
 801b890:	2000c4cc 	.word	0x2000c4cc
 801b894:	2000c4c8 	.word	0x2000c4c8
 801b898:	2000c4ac 	.word	0x2000c4ac
 801b89c:	2000c434 	.word	0x2000c434
 801b8a0:	2000c438 	.word	0x2000c438
 801b8a4:	2000c436 	.word	0x2000c436

0801b8a8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801b8a8:	b510      	push	{r4, lr}
 801b8aa:	4a1f      	ldr	r2, [pc, #124]	; (801b928 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801b8ac:	880b      	ldrh	r3, [r1, #0]
 801b8ae:	8812      	ldrh	r2, [r2, #0]
 801b8b0:	4293      	cmp	r3, r2
 801b8b2:	d213      	bcs.n	801b8dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801b8b4:	4a1d      	ldr	r2, [pc, #116]	; (801b92c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801b8b6:	6812      	ldr	r2, [r2, #0]
 801b8b8:	2114      	movs	r1, #20
 801b8ba:	fb01 2303 	mla	r3, r1, r3, r2
 801b8be:	8a1a      	ldrh	r2, [r3, #16]
 801b8c0:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801b8c4:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801b8c8:	8a5b      	ldrh	r3, [r3, #18]
 801b8ca:	8004      	strh	r4, [r0, #0]
 801b8cc:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b8d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b8d4:	8041      	strh	r1, [r0, #2]
 801b8d6:	8082      	strh	r2, [r0, #4]
 801b8d8:	80c3      	strh	r3, [r0, #6]
 801b8da:	e00e      	b.n	801b8fa <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801b8dc:	4914      	ldr	r1, [pc, #80]	; (801b930 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801b8de:	8809      	ldrh	r1, [r1, #0]
 801b8e0:	4411      	add	r1, r2
 801b8e2:	428b      	cmp	r3, r1
 801b8e4:	da0a      	bge.n	801b8fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801b8e6:	1a9b      	subs	r3, r3, r2
 801b8e8:	4a12      	ldr	r2, [pc, #72]	; (801b934 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801b8ea:	6812      	ldr	r2, [r2, #0]
 801b8ec:	210e      	movs	r1, #14
 801b8ee:	fb01 2303 	mla	r3, r1, r3, r2
 801b8f2:	681a      	ldr	r2, [r3, #0]
 801b8f4:	6002      	str	r2, [r0, #0]
 801b8f6:	685a      	ldr	r2, [r3, #4]
 801b8f8:	6042      	str	r2, [r0, #4]
 801b8fa:	bd10      	pop	{r4, pc}
 801b8fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b900:	4293      	cmp	r3, r2
 801b902:	d10b      	bne.n	801b91c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801b904:	4b0c      	ldr	r3, [pc, #48]	; (801b938 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801b906:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b90a:	4b0c      	ldr	r3, [pc, #48]	; (801b93c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801b90c:	8081      	strh	r1, [r0, #4]
 801b90e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b912:	80c2      	strh	r2, [r0, #6]
 801b914:	2300      	movs	r3, #0
 801b916:	8003      	strh	r3, [r0, #0]
 801b918:	8043      	strh	r3, [r0, #2]
 801b91a:	e7ee      	b.n	801b8fa <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801b91c:	2300      	movs	r3, #0
 801b91e:	8003      	strh	r3, [r0, #0]
 801b920:	8043      	strh	r3, [r0, #2]
 801b922:	8083      	strh	r3, [r0, #4]
 801b924:	e7d8      	b.n	801b8d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801b926:	bf00      	nop
 801b928:	2000c4c4 	.word	0x2000c4c4
 801b92c:	2000c4cc 	.word	0x2000c4cc
 801b930:	2000c4c8 	.word	0x2000c4c8
 801b934:	2000c4ac 	.word	0x2000c4ac
 801b938:	2000c430 	.word	0x2000c430
 801b93c:	2000c432 	.word	0x2000c432

0801b940 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801b940:	4a17      	ldr	r2, [pc, #92]	; (801b9a0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801b942:	8803      	ldrh	r3, [r0, #0]
 801b944:	8812      	ldrh	r2, [r2, #0]
 801b946:	4293      	cmp	r3, r2
 801b948:	d213      	bcs.n	801b972 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801b94a:	4a16      	ldr	r2, [pc, #88]	; (801b9a4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801b94c:	6812      	ldr	r2, [r2, #0]
 801b94e:	2114      	movs	r1, #20
 801b950:	fb01 2303 	mla	r3, r1, r3, r2
 801b954:	8a1a      	ldrh	r2, [r3, #16]
 801b956:	8919      	ldrh	r1, [r3, #8]
 801b958:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b95c:	428a      	cmp	r2, r1
 801b95e:	db1d      	blt.n	801b99c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801b960:	8a58      	ldrh	r0, [r3, #18]
 801b962:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801b966:	895b      	ldrh	r3, [r3, #10]
 801b968:	4298      	cmp	r0, r3
 801b96a:	bfac      	ite	ge
 801b96c:	2000      	movge	r0, #0
 801b96e:	2001      	movlt	r0, #1
 801b970:	4770      	bx	lr
 801b972:	490d      	ldr	r1, [pc, #52]	; (801b9a8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801b974:	8809      	ldrh	r1, [r1, #0]
 801b976:	4411      	add	r1, r2
 801b978:	428b      	cmp	r3, r1
 801b97a:	da0d      	bge.n	801b998 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801b97c:	1a9b      	subs	r3, r3, r2
 801b97e:	4a0b      	ldr	r2, [pc, #44]	; (801b9ac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801b980:	6812      	ldr	r2, [r2, #0]
 801b982:	210e      	movs	r1, #14
 801b984:	fb01 2303 	mla	r3, r1, r3, r2
 801b988:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801b98c:	891a      	ldrh	r2, [r3, #8]
 801b98e:	4291      	cmp	r1, r2
 801b990:	db04      	blt.n	801b99c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801b992:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801b996:	e7e6      	b.n	801b966 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801b998:	2000      	movs	r0, #0
 801b99a:	4770      	bx	lr
 801b99c:	2001      	movs	r0, #1
 801b99e:	4770      	bx	lr
 801b9a0:	2000c4c4 	.word	0x2000c4c4
 801b9a4:	2000c4cc 	.word	0x2000c4cc
 801b9a8:	2000c4c8 	.word	0x2000c4c8
 801b9ac:	2000c4ac 	.word	0x2000c4ac

0801b9b0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801b9b0:	4a12      	ldr	r2, [pc, #72]	; (801b9fc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801b9b2:	8803      	ldrh	r3, [r0, #0]
 801b9b4:	8811      	ldrh	r1, [r2, #0]
 801b9b6:	428b      	cmp	r3, r1
 801b9b8:	d20b      	bcs.n	801b9d2 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801b9ba:	4a11      	ldr	r2, [pc, #68]	; (801ba00 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b9bc:	6812      	ldr	r2, [r2, #0]
 801b9be:	b112      	cbz	r2, 801b9c6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801b9c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b9c4:	b9c0      	cbnz	r0, 801b9f8 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801b9c6:	4a0f      	ldr	r2, [pc, #60]	; (801ba04 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801b9c8:	6811      	ldr	r1, [r2, #0]
 801b9ca:	2214      	movs	r2, #20
 801b9cc:	4353      	muls	r3, r2
 801b9ce:	58c8      	ldr	r0, [r1, r3]
 801b9d0:	4770      	bx	lr
 801b9d2:	4a0d      	ldr	r2, [pc, #52]	; (801ba08 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801b9d4:	8812      	ldrh	r2, [r2, #0]
 801b9d6:	440a      	add	r2, r1
 801b9d8:	4293      	cmp	r3, r2
 801b9da:	da04      	bge.n	801b9e6 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801b9dc:	4a08      	ldr	r2, [pc, #32]	; (801ba00 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b9de:	6812      	ldr	r2, [r2, #0]
 801b9e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b9e4:	4770      	bx	lr
 801b9e6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b9ea:	4293      	cmp	r3, r2
 801b9ec:	d103      	bne.n	801b9f6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801b9ee:	4b07      	ldr	r3, [pc, #28]	; (801ba0c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801b9f0:	681b      	ldr	r3, [r3, #0]
 801b9f2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801b9f4:	4770      	bx	lr
 801b9f6:	2000      	movs	r0, #0
 801b9f8:	4770      	bx	lr
 801b9fa:	bf00      	nop
 801b9fc:	2000c4c4 	.word	0x2000c4c4
 801ba00:	2000c4a8 	.word	0x2000c4a8
 801ba04:	2000c4cc 	.word	0x2000c4cc
 801ba08:	2000c4c8 	.word	0x2000c4c8
 801ba0c:	2000c43c 	.word	0x2000c43c

0801ba10 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801ba10:	4b24      	ldr	r3, [pc, #144]	; (801baa4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801ba12:	8802      	ldrh	r2, [r0, #0]
 801ba14:	8818      	ldrh	r0, [r3, #0]
 801ba16:	4282      	cmp	r2, r0
 801ba18:	d221      	bcs.n	801ba5e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801ba1a:	4b23      	ldr	r3, [pc, #140]	; (801baa8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801ba1c:	6819      	ldr	r1, [r3, #0]
 801ba1e:	2314      	movs	r3, #20
 801ba20:	fb03 1302 	mla	r3, r3, r2, r1
 801ba24:	6858      	ldr	r0, [r3, #4]
 801ba26:	2800      	cmp	r0, #0
 801ba28:	d03a      	beq.n	801baa0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801ba2a:	4920      	ldr	r1, [pc, #128]	; (801baac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ba2c:	6809      	ldr	r1, [r1, #0]
 801ba2e:	2900      	cmp	r1, #0
 801ba30:	d036      	beq.n	801baa0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801ba32:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ba36:	2900      	cmp	r1, #0
 801ba38:	d032      	beq.n	801baa0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801ba3a:	891a      	ldrh	r2, [r3, #8]
 801ba3c:	8958      	ldrh	r0, [r3, #10]
 801ba3e:	4350      	muls	r0, r2
 801ba40:	7c5a      	ldrb	r2, [r3, #17]
 801ba42:	7cdb      	ldrb	r3, [r3, #19]
 801ba44:	0952      	lsrs	r2, r2, #5
 801ba46:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ba4a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801ba4e:	2b0b      	cmp	r3, #11
 801ba50:	bf18      	it	ne
 801ba52:	0040      	lslne	r0, r0, #1
 801ba54:	3003      	adds	r0, #3
 801ba56:	f020 0003 	bic.w	r0, r0, #3
 801ba5a:	4408      	add	r0, r1
 801ba5c:	4770      	bx	lr
 801ba5e:	4b14      	ldr	r3, [pc, #80]	; (801bab0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801ba60:	881b      	ldrh	r3, [r3, #0]
 801ba62:	4403      	add	r3, r0
 801ba64:	429a      	cmp	r2, r3
 801ba66:	da1a      	bge.n	801ba9e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ba68:	4b12      	ldr	r3, [pc, #72]	; (801bab4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	1a10      	subs	r0, r2, r0
 801ba6e:	210e      	movs	r1, #14
 801ba70:	fb01 3000 	mla	r0, r1, r0, r3
 801ba74:	7b03      	ldrb	r3, [r0, #12]
 801ba76:	f003 031f 	and.w	r3, r3, #31
 801ba7a:	2b0b      	cmp	r3, #11
 801ba7c:	d10b      	bne.n	801ba96 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801ba7e:	8903      	ldrh	r3, [r0, #8]
 801ba80:	8940      	ldrh	r0, [r0, #10]
 801ba82:	4358      	muls	r0, r3
 801ba84:	4b09      	ldr	r3, [pc, #36]	; (801baac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ba86:	6819      	ldr	r1, [r3, #0]
 801ba88:	3003      	adds	r0, #3
 801ba8a:	f020 0303 	bic.w	r3, r0, #3
 801ba8e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801ba92:	4418      	add	r0, r3
 801ba94:	4770      	bx	lr
 801ba96:	2b0d      	cmp	r3, #13
 801ba98:	d101      	bne.n	801ba9e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ba9a:	300d      	adds	r0, #13
 801ba9c:	4770      	bx	lr
 801ba9e:	2000      	movs	r0, #0
 801baa0:	4770      	bx	lr
 801baa2:	bf00      	nop
 801baa4:	2000c4c4 	.word	0x2000c4c4
 801baa8:	2000c4cc 	.word	0x2000c4cc
 801baac:	2000c4a8 	.word	0x2000c4a8
 801bab0:	2000c4c8 	.word	0x2000c4c8
 801bab4:	2000c4ac 	.word	0x2000c4ac

0801bab8 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801bab8:	b510      	push	{r4, lr}
 801baba:	4a17      	ldr	r2, [pc, #92]	; (801bb18 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801babc:	8803      	ldrh	r3, [r0, #0]
 801babe:	8812      	ldrh	r2, [r2, #0]
 801bac0:	4293      	cmp	r3, r2
 801bac2:	d20c      	bcs.n	801bade <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801bac4:	4a15      	ldr	r2, [pc, #84]	; (801bb1c <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801bac6:	6812      	ldr	r2, [r2, #0]
 801bac8:	2114      	movs	r1, #20
 801baca:	fb01 2303 	mla	r3, r1, r3, r2
 801bace:	7c58      	ldrb	r0, [r3, #17]
 801bad0:	0942      	lsrs	r2, r0, #5
 801bad2:	7cd8      	ldrb	r0, [r3, #19]
 801bad4:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801bad8:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801badc:	bd10      	pop	{r4, pc}
 801bade:	4910      	ldr	r1, [pc, #64]	; (801bb20 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801bae0:	8809      	ldrh	r1, [r1, #0]
 801bae2:	4411      	add	r1, r2
 801bae4:	428b      	cmp	r3, r1
 801bae6:	da09      	bge.n	801bafc <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801bae8:	1a9b      	subs	r3, r3, r2
 801baea:	4a0e      	ldr	r2, [pc, #56]	; (801bb24 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801baec:	6812      	ldr	r2, [r2, #0]
 801baee:	210e      	movs	r1, #14
 801baf0:	fb01 2303 	mla	r3, r1, r3, r2
 801baf4:	7b18      	ldrb	r0, [r3, #12]
 801baf6:	f000 001f 	and.w	r0, r0, #31
 801bafa:	e7ef      	b.n	801badc <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801bafc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bb00:	4293      	cmp	r3, r2
 801bb02:	d106      	bne.n	801bb12 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801bb04:	f7f0 fdc2 	bl	800c68c <_ZN8touchgfx3HAL3lcdEv>
 801bb08:	6803      	ldr	r3, [r0, #0]
 801bb0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb10:	4718      	bx	r3
 801bb12:	2000      	movs	r0, #0
 801bb14:	e7e2      	b.n	801badc <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801bb16:	bf00      	nop
 801bb18:	2000c4c4 	.word	0x2000c4c4
 801bb1c:	2000c4cc 	.word	0x2000c4cc
 801bb20:	2000c4c8 	.word	0x2000c4c8
 801bb24:	2000c4ac 	.word	0x2000c4ac

0801bb28 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801bb28:	2010      	movs	r0, #16
 801bb2a:	4770      	bx	lr

0801bb2c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801bb2c:	2000      	movs	r0, #0
 801bb2e:	4770      	bx	lr

0801bb30 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801bb30:	4b02      	ldr	r3, [pc, #8]	; (801bb3c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801bb32:	8818      	ldrh	r0, [r3, #0]
 801bb34:	0040      	lsls	r0, r0, #1
 801bb36:	b280      	uxth	r0, r0
 801bb38:	4770      	bx	lr
 801bb3a:	bf00      	nop
 801bb3c:	2000c436 	.word	0x2000c436

0801bb40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801bb40:	2bff      	cmp	r3, #255	; 0xff
 801bb42:	d050      	beq.n	801bbe6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801bb44:	2a0b      	cmp	r2, #11
 801bb46:	d04a      	beq.n	801bbde <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801bb48:	d80e      	bhi.n	801bb68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801bb4a:	2a03      	cmp	r2, #3
 801bb4c:	d03f      	beq.n	801bbce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801bb4e:	d804      	bhi.n	801bb5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801bb50:	2a01      	cmp	r2, #1
 801bb52:	d03e      	beq.n	801bbd2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801bb54:	d93f      	bls.n	801bbd6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801bb56:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801bb58:	4770      	bx	lr
 801bb5a:	2a09      	cmp	r2, #9
 801bb5c:	d03f      	beq.n	801bbde <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801bb5e:	d83c      	bhi.n	801bbda <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801bb60:	2a08      	cmp	r2, #8
 801bb62:	d03a      	beq.n	801bbda <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801bb64:	2000      	movs	r0, #0
 801bb66:	4770      	bx	lr
 801bb68:	2a2f      	cmp	r2, #47	; 0x2f
 801bb6a:	d024      	beq.n	801bbb6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801bb6c:	d80d      	bhi.n	801bb8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801bb6e:	2a2d      	cmp	r2, #45	; 0x2d
 801bb70:	d014      	beq.n	801bb9c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801bb72:	d826      	bhi.n	801bbc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801bb74:	2a2c      	cmp	r2, #44	; 0x2c
 801bb76:	d1f5      	bne.n	801bb64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bb78:	684b      	ldr	r3, [r1, #4]
 801bb7a:	781b      	ldrb	r3, [r3, #0]
 801bb7c:	2b01      	cmp	r3, #1
 801bb7e:	d018      	beq.n	801bbb2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801bb80:	d323      	bcc.n	801bbca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801bb82:	2b02      	cmp	r3, #2
 801bb84:	d1ee      	bne.n	801bb64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bb86:	6880      	ldr	r0, [r0, #8]
 801bb88:	4770      	bx	lr
 801bb8a:	2a31      	cmp	r2, #49	; 0x31
 801bb8c:	d004      	beq.n	801bb98 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801bb8e:	d328      	bcc.n	801bbe2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801bb90:	2a32      	cmp	r2, #50	; 0x32
 801bb92:	d026      	beq.n	801bbe2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801bb94:	2a33      	cmp	r2, #51	; 0x33
 801bb96:	d1e5      	bne.n	801bb64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bb98:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801bb9a:	4770      	bx	lr
 801bb9c:	684b      	ldr	r3, [r1, #4]
 801bb9e:	781b      	ldrb	r3, [r3, #0]
 801bba0:	2b01      	cmp	r3, #1
 801bba2:	d004      	beq.n	801bbae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801bba4:	d30b      	bcc.n	801bbbe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801bba6:	2b02      	cmp	r3, #2
 801bba8:	d1dc      	bne.n	801bb64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bbaa:	6900      	ldr	r0, [r0, #16]
 801bbac:	4770      	bx	lr
 801bbae:	6a00      	ldr	r0, [r0, #32]
 801bbb0:	4770      	bx	lr
 801bbb2:	6980      	ldr	r0, [r0, #24]
 801bbb4:	4770      	bx	lr
 801bbb6:	684b      	ldr	r3, [r1, #4]
 801bbb8:	781b      	ldrb	r3, [r3, #0]
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d1d2      	bne.n	801bb64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bbbe:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801bbc0:	4770      	bx	lr
 801bbc2:	684b      	ldr	r3, [r1, #4]
 801bbc4:	781b      	ldrb	r3, [r3, #0]
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	d1cc      	bne.n	801bb64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bbca:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801bbcc:	4770      	bx	lr
 801bbce:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801bbd0:	4770      	bx	lr
 801bbd2:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801bbd4:	4770      	bx	lr
 801bbd6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801bbd8:	4770      	bx	lr
 801bbda:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801bbdc:	4770      	bx	lr
 801bbde:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801bbe0:	4770      	bx	lr
 801bbe2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801bbe4:	4770      	bx	lr
 801bbe6:	2a0b      	cmp	r2, #11
 801bbe8:	d049      	beq.n	801bc7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801bbea:	d80e      	bhi.n	801bc0a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801bbec:	2a03      	cmp	r2, #3
 801bbee:	d040      	beq.n	801bc72 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801bbf0:	d804      	bhi.n	801bbfc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801bbf2:	2a01      	cmp	r2, #1
 801bbf4:	d03f      	beq.n	801bc76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801bbf6:	d940      	bls.n	801bc7a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801bbf8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801bbfa:	4770      	bx	lr
 801bbfc:	2a09      	cmp	r2, #9
 801bbfe:	d03e      	beq.n	801bc7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801bc00:	d801      	bhi.n	801bc06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801bc02:	2a08      	cmp	r2, #8
 801bc04:	d1ae      	bne.n	801bb64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bc06:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801bc08:	4770      	bx	lr
 801bc0a:	2a2f      	cmp	r2, #47	; 0x2f
 801bc0c:	d024      	beq.n	801bc58 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801bc0e:	d80d      	bhi.n	801bc2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801bc10:	2a2d      	cmp	r2, #45	; 0x2d
 801bc12:	d014      	beq.n	801bc3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801bc14:	d826      	bhi.n	801bc64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801bc16:	2a2c      	cmp	r2, #44	; 0x2c
 801bc18:	d1a4      	bne.n	801bb64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bc1a:	684b      	ldr	r3, [r1, #4]
 801bc1c:	781b      	ldrb	r3, [r3, #0]
 801bc1e:	2b01      	cmp	r3, #1
 801bc20:	d018      	beq.n	801bc54 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801bc22:	d324      	bcc.n	801bc6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801bc24:	2b02      	cmp	r3, #2
 801bc26:	d19d      	bne.n	801bb64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bc28:	68c0      	ldr	r0, [r0, #12]
 801bc2a:	4770      	bx	lr
 801bc2c:	2a31      	cmp	r2, #49	; 0x31
 801bc2e:	d004      	beq.n	801bc3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801bc30:	d327      	bcc.n	801bc82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801bc32:	2a32      	cmp	r2, #50	; 0x32
 801bc34:	d025      	beq.n	801bc82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801bc36:	2a33      	cmp	r2, #51	; 0x33
 801bc38:	d194      	bne.n	801bb64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bc3a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801bc3c:	4770      	bx	lr
 801bc3e:	684b      	ldr	r3, [r1, #4]
 801bc40:	781b      	ldrb	r3, [r3, #0]
 801bc42:	2b01      	cmp	r3, #1
 801bc44:	d004      	beq.n	801bc50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801bc46:	d30b      	bcc.n	801bc60 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801bc48:	2b02      	cmp	r3, #2
 801bc4a:	d18b      	bne.n	801bb64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bc4c:	6940      	ldr	r0, [r0, #20]
 801bc4e:	4770      	bx	lr
 801bc50:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801bc52:	4770      	bx	lr
 801bc54:	69c0      	ldr	r0, [r0, #28]
 801bc56:	4770      	bx	lr
 801bc58:	684b      	ldr	r3, [r1, #4]
 801bc5a:	781b      	ldrb	r3, [r3, #0]
 801bc5c:	2b00      	cmp	r3, #0
 801bc5e:	d181      	bne.n	801bb64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bc60:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801bc62:	4770      	bx	lr
 801bc64:	684b      	ldr	r3, [r1, #4]
 801bc66:	781b      	ldrb	r3, [r3, #0]
 801bc68:	2b00      	cmp	r3, #0
 801bc6a:	f47f af7b 	bne.w	801bb64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bc6e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801bc70:	4770      	bx	lr
 801bc72:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801bc74:	4770      	bx	lr
 801bc76:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801bc78:	4770      	bx	lr
 801bc7a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801bc7c:	4770      	bx	lr
 801bc7e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801bc80:	4770      	bx	lr
 801bc82:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801bc84:	4770      	bx	lr

0801bc86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bc86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc8a:	b087      	sub	sp, #28
 801bc8c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801bc8e:	9205      	str	r2, [sp, #20]
 801bc90:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801bc94:	9202      	str	r2, [sp, #8]
 801bc96:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801bc9a:	9101      	str	r1, [sp, #4]
 801bc9c:	6841      	ldr	r1, [r0, #4]
 801bc9e:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801bca2:	fb01 2404 	mla	r4, r1, r4, r2
 801bca6:	6802      	ldr	r2, [r0, #0]
 801bca8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bcac:	f8de 2000 	ldr.w	r2, [lr]
 801bcb0:	9203      	str	r2, [sp, #12]
 801bcb2:	f8de 2004 	ldr.w	r2, [lr, #4]
 801bcb6:	3204      	adds	r2, #4
 801bcb8:	9204      	str	r2, [sp, #16]
 801bcba:	9a02      	ldr	r2, [sp, #8]
 801bcbc:	43d6      	mvns	r6, r2
 801bcbe:	b2f6      	uxtb	r6, r6
 801bcc0:	9a01      	ldr	r2, [sp, #4]
 801bcc2:	2a00      	cmp	r2, #0
 801bcc4:	dc03      	bgt.n	801bcce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801bcc6:	9a05      	ldr	r2, [sp, #20]
 801bcc8:	2a00      	cmp	r2, #0
 801bcca:	f340 8129 	ble.w	801bf20 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801bcce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bcd0:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801bcd4:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801bcd8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801bcdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bcde:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	dd0e      	ble.n	801bd04 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bce6:	1408      	asrs	r0, r1, #16
 801bce8:	d405      	bmi.n	801bcf6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bcea:	4560      	cmp	r0, ip
 801bcec:	da03      	bge.n	801bcf6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bcee:	1410      	asrs	r0, r2, #16
 801bcf0:	d401      	bmi.n	801bcf6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bcf2:	42b8      	cmp	r0, r7
 801bcf4:	db07      	blt.n	801bd06 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801bcf6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bcf8:	4401      	add	r1, r0
 801bcfa:	9814      	ldr	r0, [sp, #80]	; 0x50
 801bcfc:	3b01      	subs	r3, #1
 801bcfe:	4402      	add	r2, r0
 801bd00:	3402      	adds	r4, #2
 801bd02:	e7ee      	b.n	801bce2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801bd04:	d071      	beq.n	801bdea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bd06:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801bd08:	1e58      	subs	r0, r3, #1
 801bd0a:	fb05 1500 	mla	r5, r5, r0, r1
 801bd0e:	142d      	asrs	r5, r5, #16
 801bd10:	d45f      	bmi.n	801bdd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801bd12:	4565      	cmp	r5, ip
 801bd14:	da5d      	bge.n	801bdd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801bd16:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801bd18:	fb05 2000 	mla	r0, r5, r0, r2
 801bd1c:	1400      	asrs	r0, r0, #16
 801bd1e:	d458      	bmi.n	801bdd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801bd20:	42b8      	cmp	r0, r7
 801bd22:	da56      	bge.n	801bdd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801bd24:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801bd28:	4699      	mov	r9, r3
 801bd2a:	46a2      	mov	sl, r4
 801bd2c:	f1b9 0f00 	cmp.w	r9, #0
 801bd30:	dd57      	ble.n	801bde2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801bd32:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801bd36:	9803      	ldr	r0, [sp, #12]
 801bd38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801bd3c:	140d      	asrs	r5, r1, #16
 801bd3e:	fb07 000c 	mla	r0, r7, ip, r0
 801bd42:	f109 39ff 	add.w	r9, r9, #4294967295
 801bd46:	5d40      	ldrb	r0, [r0, r5]
 801bd48:	9d04      	ldr	r5, [sp, #16]
 801bd4a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801bd4e:	f8ba 5000 	ldrh.w	r5, [sl]
 801bd52:	122f      	asrs	r7, r5, #8
 801bd54:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801bd58:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801bd5c:	fb17 f706 	smulbb	r7, r7, r6
 801bd60:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801bd64:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bd68:	00ed      	lsls	r5, r5, #3
 801bd6a:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801bd6e:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801bd72:	10c7      	asrs	r7, r0, #3
 801bd74:	b2ed      	uxtb	r5, r5
 801bd76:	00c0      	lsls	r0, r0, #3
 801bd78:	fb18 f806 	smulbb	r8, r8, r6
 801bd7c:	fb15 f506 	smulbb	r5, r5, r6
 801bd80:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bd84:	b2c0      	uxtb	r0, r0
 801bd86:	fa1f fc8c 	uxth.w	ip, ip
 801bd8a:	fb07 870b 	mla	r7, r7, fp, r8
 801bd8e:	fb00 500b 	mla	r0, r0, fp, r5
 801bd92:	b280      	uxth	r0, r0
 801bd94:	b2bf      	uxth	r7, r7
 801bd96:	f10c 0501 	add.w	r5, ip, #1
 801bd9a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801bd9e:	f107 0801 	add.w	r8, r7, #1
 801bda2:	1c45      	adds	r5, r0, #1
 801bda4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801bda8:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801bdac:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bdae:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bdb2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801bdb6:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801bdba:	ea45 0c0c 	orr.w	ip, r5, ip
 801bdbe:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801bdc2:	4401      	add	r1, r0
 801bdc4:	9814      	ldr	r0, [sp, #80]	; 0x50
 801bdc6:	ea4c 0c08 	orr.w	ip, ip, r8
 801bdca:	f82a cb02 	strh.w	ip, [sl], #2
 801bdce:	4402      	add	r2, r0
 801bdd0:	e7ac      	b.n	801bd2c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801bdd2:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801bdd6:	f04f 0800 	mov.w	r8, #0
 801bdda:	eb03 0008 	add.w	r0, r3, r8
 801bdde:	2800      	cmp	r0, #0
 801bde0:	dc41      	bgt.n	801be66 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801bde2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bde6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bdea:	9b01      	ldr	r3, [sp, #4]
 801bdec:	2b00      	cmp	r3, #0
 801bdee:	f340 8097 	ble.w	801bf20 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801bdf2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bdf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bdfa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bdfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801be00:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801be04:	ee31 1a05 	vadd.f32	s2, s2, s10
 801be08:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801be0c:	eef0 6a62 	vmov.f32	s13, s5
 801be10:	ee61 7a27 	vmul.f32	s15, s2, s15
 801be14:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801be18:	ee77 2a62 	vsub.f32	s5, s14, s5
 801be1c:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801be20:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801be24:	eef0 6a43 	vmov.f32	s13, s6
 801be28:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801be2c:	ee12 2a90 	vmov	r2, s5
 801be30:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801be34:	fb92 f3f3 	sdiv	r3, r2, r3
 801be38:	ee13 2a10 	vmov	r2, s6
 801be3c:	9313      	str	r3, [sp, #76]	; 0x4c
 801be3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801be40:	fb92 f3f3 	sdiv	r3, r2, r3
 801be44:	9314      	str	r3, [sp, #80]	; 0x50
 801be46:	9b01      	ldr	r3, [sp, #4]
 801be48:	9a05      	ldr	r2, [sp, #20]
 801be4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801be4e:	3b01      	subs	r3, #1
 801be50:	9301      	str	r3, [sp, #4]
 801be52:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801be56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801be58:	eeb0 3a67 	vmov.f32	s6, s15
 801be5c:	bf08      	it	eq
 801be5e:	4613      	moveq	r3, r2
 801be60:	eef0 2a47 	vmov.f32	s5, s14
 801be64:	e72c      	b.n	801bcc0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801be66:	140f      	asrs	r7, r1, #16
 801be68:	d453      	bmi.n	801bf12 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801be6a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801be6e:	42bd      	cmp	r5, r7
 801be70:	dd4f      	ble.n	801bf12 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801be72:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801be76:	d44c      	bmi.n	801bf12 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801be78:	f8de 000c 	ldr.w	r0, [lr, #12]
 801be7c:	4560      	cmp	r0, ip
 801be7e:	dd48      	ble.n	801bf12 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801be80:	9803      	ldr	r0, [sp, #12]
 801be82:	b22d      	sxth	r5, r5
 801be84:	fb0c 0505 	mla	r5, ip, r5, r0
 801be88:	5de8      	ldrb	r0, [r5, r7]
 801be8a:	9d04      	ldr	r5, [sp, #16]
 801be8c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801be90:	f06f 0501 	mvn.w	r5, #1
 801be94:	fb05 fb08 	mul.w	fp, r5, r8
 801be98:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801be9c:	f834 500b 	ldrh.w	r5, [r4, fp]
 801bea0:	122f      	asrs	r7, r5, #8
 801bea2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801bea6:	fb17 f706 	smulbb	r7, r7, r6
 801beaa:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801beae:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801beb2:	00ed      	lsls	r5, r5, #3
 801beb4:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801beb8:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801bebc:	10c7      	asrs	r7, r0, #3
 801bebe:	b2ed      	uxtb	r5, r5
 801bec0:	00c0      	lsls	r0, r0, #3
 801bec2:	fb19 f906 	smulbb	r9, r9, r6
 801bec6:	fb15 f506 	smulbb	r5, r5, r6
 801beca:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bece:	b2c0      	uxtb	r0, r0
 801bed0:	fa1f fc8c 	uxth.w	ip, ip
 801bed4:	fb07 970a 	mla	r7, r7, sl, r9
 801bed8:	fb00 500a 	mla	r0, r0, sl, r5
 801bedc:	b2bf      	uxth	r7, r7
 801bede:	b280      	uxth	r0, r0
 801bee0:	f10c 0501 	add.w	r5, ip, #1
 801bee4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801bee8:	f107 0901 	add.w	r9, r7, #1
 801beec:	1c45      	adds	r5, r0, #1
 801beee:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801bef2:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801bef6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801befa:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801befe:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801bf02:	ea45 0c0c 	orr.w	ip, r5, ip
 801bf06:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801bf0a:	ea4c 0c09 	orr.w	ip, ip, r9
 801bf0e:	f824 c00b 	strh.w	ip, [r4, fp]
 801bf12:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bf14:	4401      	add	r1, r0
 801bf16:	9814      	ldr	r0, [sp, #80]	; 0x50
 801bf18:	f108 38ff 	add.w	r8, r8, #4294967295
 801bf1c:	4402      	add	r2, r0
 801bf1e:	e75c      	b.n	801bdda <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801bf20:	b007      	add	sp, #28
 801bf22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bf26 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bf26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf2a:	b085      	sub	sp, #20
 801bf2c:	4693      	mov	fp, r2
 801bf2e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801bf30:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801bf32:	6870      	ldr	r0, [r6, #4]
 801bf34:	9100      	str	r1, [sp, #0]
 801bf36:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801bf3a:	fb00 2404 	mla	r4, r0, r4, r2
 801bf3e:	6832      	ldr	r2, [r6, #0]
 801bf40:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bf44:	682a      	ldr	r2, [r5, #0]
 801bf46:	9201      	str	r2, [sp, #4]
 801bf48:	686a      	ldr	r2, [r5, #4]
 801bf4a:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801bf4e:	3204      	adds	r2, #4
 801bf50:	9202      	str	r2, [sp, #8]
 801bf52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bf56:	9a00      	ldr	r2, [sp, #0]
 801bf58:	2a00      	cmp	r2, #0
 801bf5a:	dc03      	bgt.n	801bf64 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801bf5c:	f1bb 0f00 	cmp.w	fp, #0
 801bf60:	f340 80a0 	ble.w	801c0a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801bf64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bf66:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801bf6a:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801bf6e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bf72:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bf74:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bf78:	2b00      	cmp	r3, #0
 801bf7a:	dd0c      	ble.n	801bf96 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bf7c:	1406      	asrs	r6, r0, #16
 801bf7e:	d405      	bmi.n	801bf8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bf80:	454e      	cmp	r6, r9
 801bf82:	da03      	bge.n	801bf8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bf84:	1416      	asrs	r6, r2, #16
 801bf86:	d401      	bmi.n	801bf8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bf88:	4546      	cmp	r6, r8
 801bf8a:	db05      	blt.n	801bf98 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bf8c:	4470      	add	r0, lr
 801bf8e:	4462      	add	r2, ip
 801bf90:	3b01      	subs	r3, #1
 801bf92:	3402      	adds	r4, #2
 801bf94:	e7f0      	b.n	801bf78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801bf96:	d00f      	beq.n	801bfb8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bf98:	1e5e      	subs	r6, r3, #1
 801bf9a:	fb0e 0706 	mla	r7, lr, r6, r0
 801bf9e:	143f      	asrs	r7, r7, #16
 801bfa0:	d541      	bpl.n	801c026 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801bfa2:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801bfa6:	4698      	mov	r8, r3
 801bfa8:	9603      	str	r6, [sp, #12]
 801bfaa:	f1b8 0f00 	cmp.w	r8, #0
 801bfae:	dc59      	bgt.n	801c064 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801bfb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bfb4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bfb8:	9b00      	ldr	r3, [sp, #0]
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	dd72      	ble.n	801c0a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801bfbe:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bfc2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bfc6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bfca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bfcc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bfd0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bfd4:	eeb0 6a62 	vmov.f32	s12, s5
 801bfd8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bfdc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bfe0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bfe4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bfe8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bfec:	eeb0 6a43 	vmov.f32	s12, s6
 801bff0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bff4:	ee12 2a90 	vmov	r2, s5
 801bff8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bffc:	fb92 fef3 	sdiv	lr, r2, r3
 801c000:	ee13 2a10 	vmov	r2, s6
 801c004:	fb92 fcf3 	sdiv	ip, r2, r3
 801c008:	9b00      	ldr	r3, [sp, #0]
 801c00a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c00e:	3b01      	subs	r3, #1
 801c010:	9300      	str	r3, [sp, #0]
 801c012:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c018:	eeb0 3a67 	vmov.f32	s6, s15
 801c01c:	bf08      	it	eq
 801c01e:	465b      	moveq	r3, fp
 801c020:	eef0 2a47 	vmov.f32	s5, s14
 801c024:	e797      	b.n	801bf56 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801c026:	454f      	cmp	r7, r9
 801c028:	dabb      	bge.n	801bfa2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c02a:	fb0c 2606 	mla	r6, ip, r6, r2
 801c02e:	1436      	asrs	r6, r6, #16
 801c030:	d4b7      	bmi.n	801bfa2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c032:	4546      	cmp	r6, r8
 801c034:	dab5      	bge.n	801bfa2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c036:	461e      	mov	r6, r3
 801c038:	46a0      	mov	r8, r4
 801c03a:	2e00      	cmp	r6, #0
 801c03c:	ddb8      	ble.n	801bfb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c03e:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801c042:	9901      	ldr	r1, [sp, #4]
 801c044:	1417      	asrs	r7, r2, #16
 801c046:	ea4f 4920 	mov.w	r9, r0, asr #16
 801c04a:	fb0a 1707 	mla	r7, sl, r7, r1
 801c04e:	9902      	ldr	r1, [sp, #8]
 801c050:	f817 7009 	ldrb.w	r7, [r7, r9]
 801c054:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801c058:	f828 7b02 	strh.w	r7, [r8], #2
 801c05c:	4470      	add	r0, lr
 801c05e:	4462      	add	r2, ip
 801c060:	3e01      	subs	r6, #1
 801c062:	e7ea      	b.n	801c03a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801c064:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c068:	d417      	bmi.n	801c09a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801c06a:	68ae      	ldr	r6, [r5, #8]
 801c06c:	454e      	cmp	r6, r9
 801c06e:	dd14      	ble.n	801c09a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801c070:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c074:	d411      	bmi.n	801c09a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801c076:	68ef      	ldr	r7, [r5, #12]
 801c078:	4557      	cmp	r7, sl
 801c07a:	dd0e      	ble.n	801c09a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801c07c:	9f01      	ldr	r7, [sp, #4]
 801c07e:	b236      	sxth	r6, r6
 801c080:	fb0a 7606 	mla	r6, sl, r6, r7
 801c084:	9f02      	ldr	r7, [sp, #8]
 801c086:	f816 6009 	ldrb.w	r6, [r6, r9]
 801c08a:	f06f 0101 	mvn.w	r1, #1
 801c08e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801c092:	fb01 f608 	mul.w	r6, r1, r8
 801c096:	9903      	ldr	r1, [sp, #12]
 801c098:	538f      	strh	r7, [r1, r6]
 801c09a:	4470      	add	r0, lr
 801c09c:	4462      	add	r2, ip
 801c09e:	f108 38ff 	add.w	r8, r8, #4294967295
 801c0a2:	e782      	b.n	801bfaa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c0a4:	b005      	add	sp, #20
 801c0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c0aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c0aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0ae:	b087      	sub	sp, #28
 801c0b0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c0b2:	9205      	str	r2, [sp, #20]
 801c0b4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c0b8:	9203      	str	r2, [sp, #12]
 801c0ba:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801c0be:	9102      	str	r1, [sp, #8]
 801c0c0:	6861      	ldr	r1, [r4, #4]
 801c0c2:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801c0c6:	fb01 2000 	mla	r0, r1, r0, r2
 801c0ca:	6822      	ldr	r2, [r4, #0]
 801c0cc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801c0d0:	9200      	str	r2, [sp, #0]
 801c0d2:	f8dc 2000 	ldr.w	r2, [ip]
 801c0d6:	9204      	str	r2, [sp, #16]
 801c0d8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c0dc:	3204      	adds	r2, #4
 801c0de:	9201      	str	r2, [sp, #4]
 801c0e0:	9a03      	ldr	r2, [sp, #12]
 801c0e2:	43d5      	mvns	r5, r2
 801c0e4:	b2ed      	uxtb	r5, r5
 801c0e6:	9a02      	ldr	r2, [sp, #8]
 801c0e8:	2a00      	cmp	r2, #0
 801c0ea:	dc03      	bgt.n	801c0f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c0ec:	9a05      	ldr	r2, [sp, #20]
 801c0ee:	2a00      	cmp	r2, #0
 801c0f0:	f340 812c 	ble.w	801c34c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801c0f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c0f6:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801c0fa:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c0fe:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c102:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c104:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c108:	2b00      	cmp	r3, #0
 801c10a:	dd10      	ble.n	801c12e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c10c:	140c      	asrs	r4, r1, #16
 801c10e:	d405      	bmi.n	801c11c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c110:	4574      	cmp	r4, lr
 801c112:	da03      	bge.n	801c11c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c114:	1414      	asrs	r4, r2, #16
 801c116:	d401      	bmi.n	801c11c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c118:	42bc      	cmp	r4, r7
 801c11a:	db09      	blt.n	801c130 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c11c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c11e:	9800      	ldr	r0, [sp, #0]
 801c120:	4421      	add	r1, r4
 801c122:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c124:	3002      	adds	r0, #2
 801c126:	4422      	add	r2, r4
 801c128:	3b01      	subs	r3, #1
 801c12a:	9000      	str	r0, [sp, #0]
 801c12c:	e7ec      	b.n	801c108 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801c12e:	d071      	beq.n	801c214 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801c130:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c132:	1e5c      	subs	r4, r3, #1
 801c134:	fb06 1604 	mla	r6, r6, r4, r1
 801c138:	1436      	asrs	r6, r6, #16
 801c13a:	d45d      	bmi.n	801c1f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c13c:	4576      	cmp	r6, lr
 801c13e:	da5b      	bge.n	801c1f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c140:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c142:	fb06 2404 	mla	r4, r6, r4, r2
 801c146:	1424      	asrs	r4, r4, #16
 801c148:	d456      	bmi.n	801c1f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c14a:	42bc      	cmp	r4, r7
 801c14c:	da54      	bge.n	801c1f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c14e:	f8dd 9000 	ldr.w	r9, [sp]
 801c152:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801c156:	4698      	mov	r8, r3
 801c158:	f1b8 0f00 	cmp.w	r8, #0
 801c15c:	dd54      	ble.n	801c208 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801c15e:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801c162:	9804      	ldr	r0, [sp, #16]
 801c164:	1414      	asrs	r4, r2, #16
 801c166:	fb07 0404 	mla	r4, r7, r4, r0
 801c16a:	140e      	asrs	r6, r1, #16
 801c16c:	9801      	ldr	r0, [sp, #4]
 801c16e:	f814 e006 	ldrb.w	lr, [r4, r6]
 801c172:	f8b9 4000 	ldrh.w	r4, [r9]
 801c176:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c17a:	eb00 0b0e 	add.w	fp, r0, lr
 801c17e:	1227      	asrs	r7, r4, #8
 801c180:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801c184:	f89b b001 	ldrb.w	fp, [fp, #1]
 801c188:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801c18c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c18e:	fb16 f60a 	smulbb	r6, r6, sl
 801c192:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c196:	fb07 6705 	mla	r7, r7, r5, r6
 801c19a:	10e6      	asrs	r6, r4, #3
 801c19c:	00e4      	lsls	r4, r4, #3
 801c19e:	b2e4      	uxtb	r4, r4
 801c1a0:	fb1b fb0a 	smulbb	fp, fp, sl
 801c1a4:	fb14 f405 	smulbb	r4, r4, r5
 801c1a8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c1ac:	b2bf      	uxth	r7, r7
 801c1ae:	fb06 b605 	mla	r6, r6, r5, fp
 801c1b2:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801c1b6:	b2b6      	uxth	r6, r6
 801c1b8:	fa1f fe8e 	uxth.w	lr, lr
 801c1bc:	1c7c      	adds	r4, r7, #1
 801c1be:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801c1c2:	f106 0b01 	add.w	fp, r6, #1
 801c1c6:	f10e 0401 	add.w	r4, lr, #1
 801c1ca:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801c1ce:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801c1d2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c1d6:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801c1da:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801c1de:	4327      	orrs	r7, r4
 801c1e0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801c1e4:	4401      	add	r1, r0
 801c1e6:	9814      	ldr	r0, [sp, #80]	; 0x50
 801c1e8:	ea47 070b 	orr.w	r7, r7, fp
 801c1ec:	f829 7b02 	strh.w	r7, [r9], #2
 801c1f0:	4402      	add	r2, r0
 801c1f2:	f108 38ff 	add.w	r8, r8, #4294967295
 801c1f6:	e7af      	b.n	801c158 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801c1f8:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801c1fc:	f04f 0e00 	mov.w	lr, #0
 801c200:	eb03 040e 	add.w	r4, r3, lr
 801c204:	2c00      	cmp	r4, #0
 801c206:	dc43      	bgt.n	801c290 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801c208:	9a00      	ldr	r2, [sp, #0]
 801c20a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c20e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c212:	9300      	str	r3, [sp, #0]
 801c214:	9b02      	ldr	r3, [sp, #8]
 801c216:	2b00      	cmp	r3, #0
 801c218:	f340 8098 	ble.w	801c34c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801c21c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c220:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c224:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c228:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c22a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c22e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c232:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c236:	eef0 6a62 	vmov.f32	s13, s5
 801c23a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c23e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c242:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c246:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801c24a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c24e:	eef0 6a43 	vmov.f32	s13, s6
 801c252:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c256:	ee12 2a90 	vmov	r2, s5
 801c25a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c25e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c262:	ee13 2a10 	vmov	r2, s6
 801c266:	9313      	str	r3, [sp, #76]	; 0x4c
 801c268:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c26a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c26e:	9314      	str	r3, [sp, #80]	; 0x50
 801c270:	9b02      	ldr	r3, [sp, #8]
 801c272:	9a05      	ldr	r2, [sp, #20]
 801c274:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c278:	3b01      	subs	r3, #1
 801c27a:	9302      	str	r3, [sp, #8]
 801c27c:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801c280:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c282:	eeb0 3a67 	vmov.f32	s6, s15
 801c286:	bf08      	it	eq
 801c288:	4613      	moveq	r3, r2
 801c28a:	eef0 2a47 	vmov.f32	s5, s14
 801c28e:	e72a      	b.n	801c0e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c290:	140f      	asrs	r7, r1, #16
 801c292:	d454      	bmi.n	801c33e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c294:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c298:	42be      	cmp	r6, r7
 801c29a:	dd50      	ble.n	801c33e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c29c:	ea5f 4822 	movs.w	r8, r2, asr #16
 801c2a0:	d44d      	bmi.n	801c33e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c2a2:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801c2a6:	4544      	cmp	r4, r8
 801c2a8:	dd49      	ble.n	801c33e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c2aa:	9c04      	ldr	r4, [sp, #16]
 801c2ac:	b236      	sxth	r6, r6
 801c2ae:	fb08 4606 	mla	r6, r8, r6, r4
 801c2b2:	f06f 0001 	mvn.w	r0, #1
 801c2b6:	f816 8007 	ldrb.w	r8, [r6, r7]
 801c2ba:	9c01      	ldr	r4, [sp, #4]
 801c2bc:	fb00 fa0e 	mul.w	sl, r0, lr
 801c2c0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c2c4:	9800      	ldr	r0, [sp, #0]
 801c2c6:	eb04 0b08 	add.w	fp, r4, r8
 801c2ca:	f830 400a 	ldrh.w	r4, [r0, sl]
 801c2ce:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801c2d2:	9801      	ldr	r0, [sp, #4]
 801c2d4:	f89b b001 	ldrb.w	fp, [fp, #1]
 801c2d8:	f810 8008 	ldrb.w	r8, [r0, r8]
 801c2dc:	9800      	ldr	r0, [sp, #0]
 801c2de:	1227      	asrs	r7, r4, #8
 801c2e0:	fb16 f609 	smulbb	r6, r6, r9
 801c2e4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c2e8:	fb07 6705 	mla	r7, r7, r5, r6
 801c2ec:	10e6      	asrs	r6, r4, #3
 801c2ee:	00e4      	lsls	r4, r4, #3
 801c2f0:	b2e4      	uxtb	r4, r4
 801c2f2:	fb1b fb09 	smulbb	fp, fp, r9
 801c2f6:	fb14 f405 	smulbb	r4, r4, r5
 801c2fa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c2fe:	b2bf      	uxth	r7, r7
 801c300:	fb06 b605 	mla	r6, r6, r5, fp
 801c304:	fb08 4809 	mla	r8, r8, r9, r4
 801c308:	b2b6      	uxth	r6, r6
 801c30a:	fa1f f888 	uxth.w	r8, r8
 801c30e:	1c7c      	adds	r4, r7, #1
 801c310:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801c314:	f106 0b01 	add.w	fp, r6, #1
 801c318:	f108 0401 	add.w	r4, r8, #1
 801c31c:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801c320:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801c324:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c328:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801c32c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801c330:	4327      	orrs	r7, r4
 801c332:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801c336:	ea47 070b 	orr.w	r7, r7, fp
 801c33a:	f820 700a 	strh.w	r7, [r0, sl]
 801c33e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c340:	4401      	add	r1, r0
 801c342:	9814      	ldr	r0, [sp, #80]	; 0x50
 801c344:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c348:	4402      	add	r2, r0
 801c34a:	e759      	b.n	801c200 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c34c:	b007      	add	sp, #28
 801c34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801c354 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c358:	b085      	sub	sp, #20
 801c35a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c35e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c360:	9203      	str	r2, [sp, #12]
 801c362:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c366:	6870      	ldr	r0, [r6, #4]
 801c368:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801c36a:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801c36e:	686f      	ldr	r7, [r5, #4]
 801c370:	9101      	str	r1, [sp, #4]
 801c372:	fb00 2404 	mla	r4, r0, r4, r2
 801c376:	6832      	ldr	r2, [r6, #0]
 801c378:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c37c:	682a      	ldr	r2, [r5, #0]
 801c37e:	9202      	str	r2, [sp, #8]
 801c380:	3704      	adds	r7, #4
 801c382:	9a01      	ldr	r2, [sp, #4]
 801c384:	2a00      	cmp	r2, #0
 801c386:	dc03      	bgt.n	801c390 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c388:	9a03      	ldr	r2, [sp, #12]
 801c38a:	2a00      	cmp	r2, #0
 801c38c:	f340 80cc 	ble.w	801c528 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801c390:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c392:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801c396:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801c39a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c39e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c3a0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	dd0d      	ble.n	801c3c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c3a8:	1406      	asrs	r6, r0, #16
 801c3aa:	d405      	bmi.n	801c3b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c3ac:	454e      	cmp	r6, r9
 801c3ae:	da03      	bge.n	801c3b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c3b0:	1416      	asrs	r6, r2, #16
 801c3b2:	d401      	bmi.n	801c3b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c3b4:	4546      	cmp	r6, r8
 801c3b6:	db06      	blt.n	801c3c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c3b8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c3ba:	4460      	add	r0, ip
 801c3bc:	4432      	add	r2, r6
 801c3be:	3b01      	subs	r3, #1
 801c3c0:	3402      	adds	r4, #2
 801c3c2:	e7ef      	b.n	801c3a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801c3c4:	d00f      	beq.n	801c3e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c3c6:	1e5e      	subs	r6, r3, #1
 801c3c8:	fb0c 0e06 	mla	lr, ip, r6, r0
 801c3cc:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801c3d0:	d543      	bpl.n	801c45a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801c3d2:	4698      	mov	r8, r3
 801c3d4:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801c3d8:	f1b8 0f00 	cmp.w	r8, #0
 801c3dc:	dc71      	bgt.n	801c4c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801c3de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c3e2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c3e6:	9b01      	ldr	r3, [sp, #4]
 801c3e8:	2b00      	cmp	r3, #0
 801c3ea:	f340 809d 	ble.w	801c528 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801c3ee:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c3f2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c3f6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c3fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c3fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c400:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c404:	eeb0 6a62 	vmov.f32	s12, s5
 801c408:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c40c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c410:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c414:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c418:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c41c:	eeb0 6a43 	vmov.f32	s12, s6
 801c420:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c424:	ee12 2a90 	vmov	r2, s5
 801c428:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c42c:	fb92 fcf3 	sdiv	ip, r2, r3
 801c430:	ee13 2a10 	vmov	r2, s6
 801c434:	fb92 f3f3 	sdiv	r3, r2, r3
 801c438:	9312      	str	r3, [sp, #72]	; 0x48
 801c43a:	9b01      	ldr	r3, [sp, #4]
 801c43c:	9a03      	ldr	r2, [sp, #12]
 801c43e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c442:	3b01      	subs	r3, #1
 801c444:	9301      	str	r3, [sp, #4]
 801c446:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c44a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c44c:	eeb0 3a67 	vmov.f32	s6, s15
 801c450:	bf08      	it	eq
 801c452:	4613      	moveq	r3, r2
 801c454:	eef0 2a47 	vmov.f32	s5, s14
 801c458:	e793      	b.n	801c382 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c45a:	45ce      	cmp	lr, r9
 801c45c:	dab9      	bge.n	801c3d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c45e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c460:	fb01 2606 	mla	r6, r1, r6, r2
 801c464:	1436      	asrs	r6, r6, #16
 801c466:	d4b4      	bmi.n	801c3d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c468:	4546      	cmp	r6, r8
 801c46a:	dab2      	bge.n	801c3d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c46c:	4698      	mov	r8, r3
 801c46e:	46a2      	mov	sl, r4
 801c470:	f1b8 0f00 	cmp.w	r8, #0
 801c474:	ddb3      	ble.n	801c3de <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c476:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801c47a:	9902      	ldr	r1, [sp, #8]
 801c47c:	1416      	asrs	r6, r2, #16
 801c47e:	fb09 1606 	mla	r6, r9, r6, r1
 801c482:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801c486:	492a      	ldr	r1, [pc, #168]	; (801c530 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801c488:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801c48c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c490:	eb07 0b0e 	add.w	fp, r7, lr
 801c494:	4460      	add	r0, ip
 801c496:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801c49a:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801c49e:	00f6      	lsls	r6, r6, #3
 801c4a0:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801c4a4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c4a8:	ea49 0606 	orr.w	r6, r9, r6
 801c4ac:	f817 900e 	ldrb.w	r9, [r7, lr]
 801c4b0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c4b2:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801c4b6:	f82a 6b02 	strh.w	r6, [sl], #2
 801c4ba:	440a      	add	r2, r1
 801c4bc:	f108 38ff 	add.w	r8, r8, #4294967295
 801c4c0:	e7d6      	b.n	801c470 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801c4c2:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c4c6:	d429      	bmi.n	801c51c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c4c8:	68ae      	ldr	r6, [r5, #8]
 801c4ca:	454e      	cmp	r6, r9
 801c4cc:	dd26      	ble.n	801c51c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c4ce:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801c4d2:	d423      	bmi.n	801c51c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c4d4:	68e9      	ldr	r1, [r5, #12]
 801c4d6:	4559      	cmp	r1, fp
 801c4d8:	dd20      	ble.n	801c51c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c4da:	9902      	ldr	r1, [sp, #8]
 801c4dc:	fa0f fe86 	sxth.w	lr, r6
 801c4e0:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801c4e4:	f06f 0101 	mvn.w	r1, #1
 801c4e8:	f81e e009 	ldrb.w	lr, [lr, r9]
 801c4ec:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c4f0:	eb07 060e 	add.w	r6, r7, lr
 801c4f4:	fb01 f908 	mul.w	r9, r1, r8
 801c4f8:	f896 b002 	ldrb.w	fp, [r6, #2]
 801c4fc:	7876      	ldrb	r6, [r6, #1]
 801c4fe:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801c502:	00f6      	lsls	r6, r6, #3
 801c504:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801c508:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c50c:	ea4b 0606 	orr.w	r6, fp, r6
 801c510:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801c514:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801c518:	f82a 6009 	strh.w	r6, [sl, r9]
 801c51c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c51e:	4460      	add	r0, ip
 801c520:	440a      	add	r2, r1
 801c522:	f108 38ff 	add.w	r8, r8, #4294967295
 801c526:	e757      	b.n	801c3d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c528:	b005      	add	sp, #20
 801c52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c52e:	bf00      	nop
 801c530:	fffff800 	.word	0xfffff800

0801c534 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c538:	b087      	sub	sp, #28
 801c53a:	468b      	mov	fp, r1
 801c53c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c53e:	9204      	str	r2, [sp, #16]
 801c540:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c544:	9205      	str	r2, [sp, #20]
 801c546:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801c54a:	6841      	ldr	r1, [r0, #4]
 801c54c:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801c550:	fb01 2404 	mla	r4, r1, r4, r2
 801c554:	6802      	ldr	r2, [r0, #0]
 801c556:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c55a:	f8dc 2000 	ldr.w	r2, [ip]
 801c55e:	9201      	str	r2, [sp, #4]
 801c560:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c564:	3204      	adds	r2, #4
 801c566:	9202      	str	r2, [sp, #8]
 801c568:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c56c:	f1bb 0f00 	cmp.w	fp, #0
 801c570:	dc03      	bgt.n	801c57a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801c572:	9a04      	ldr	r2, [sp, #16]
 801c574:	2a00      	cmp	r2, #0
 801c576:	f340 8138 	ble.w	801c7ea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801c57a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c57c:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801c580:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801c584:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c588:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c58a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c58e:	2b00      	cmp	r3, #0
 801c590:	dd0e      	ble.n	801c5b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c592:	1402      	asrs	r2, r0, #16
 801c594:	d405      	bmi.n	801c5a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c596:	42ba      	cmp	r2, r7
 801c598:	da03      	bge.n	801c5a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c59a:	140a      	asrs	r2, r1, #16
 801c59c:	d401      	bmi.n	801c5a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c59e:	42b2      	cmp	r2, r6
 801c5a0:	db07      	blt.n	801c5b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c5a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c5a4:	4410      	add	r0, r2
 801c5a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c5a8:	3b01      	subs	r3, #1
 801c5aa:	4411      	add	r1, r2
 801c5ac:	3402      	adds	r4, #2
 801c5ae:	e7ee      	b.n	801c58e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801c5b0:	d019      	beq.n	801c5e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801c5b2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c5b4:	1e5a      	subs	r2, r3, #1
 801c5b6:	fb05 0502 	mla	r5, r5, r2, r0
 801c5ba:	142d      	asrs	r5, r5, #16
 801c5bc:	d409      	bmi.n	801c5d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c5be:	42bd      	cmp	r5, r7
 801c5c0:	da07      	bge.n	801c5d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c5c2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c5c4:	fb05 1202 	mla	r2, r5, r2, r1
 801c5c8:	1412      	asrs	r2, r2, #16
 801c5ca:	d402      	bmi.n	801c5d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c5cc:	42b2      	cmp	r2, r6
 801c5ce:	f2c0 80ac 	blt.w	801c72a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801c5d2:	f04f 0e00 	mov.w	lr, #0
 801c5d6:	eb03 020e 	add.w	r2, r3, lr
 801c5da:	2a00      	cmp	r2, #0
 801c5dc:	dc3e      	bgt.n	801c65c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801c5de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c5e2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c5e6:	f1bb 0f00 	cmp.w	fp, #0
 801c5ea:	f340 80fe 	ble.w	801c7ea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801c5ee:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c5f2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c5f6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c5fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c5fc:	f1bb 0b01 	subs.w	fp, fp, #1
 801c600:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c604:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c608:	eeb0 6a62 	vmov.f32	s12, s5
 801c60c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c610:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c614:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c618:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c61c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c620:	eeb0 6a43 	vmov.f32	s12, s6
 801c624:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c628:	ee12 2a90 	vmov	r2, s5
 801c62c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c630:	fb92 f3f3 	sdiv	r3, r2, r3
 801c634:	ee13 2a10 	vmov	r2, s6
 801c638:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c63c:	9313      	str	r3, [sp, #76]	; 0x4c
 801c63e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c640:	fb92 f3f3 	sdiv	r3, r2, r3
 801c644:	9a04      	ldr	r2, [sp, #16]
 801c646:	9314      	str	r3, [sp, #80]	; 0x50
 801c648:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c64c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c64e:	eeb0 3a67 	vmov.f32	s6, s15
 801c652:	bf08      	it	eq
 801c654:	4613      	moveq	r3, r2
 801c656:	eef0 2a47 	vmov.f32	s5, s14
 801c65a:	e787      	b.n	801c56c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801c65c:	1406      	asrs	r6, r0, #16
 801c65e:	d45d      	bmi.n	801c71c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c660:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801c664:	42b5      	cmp	r5, r6
 801c666:	dd59      	ble.n	801c71c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c668:	140f      	asrs	r7, r1, #16
 801c66a:	d457      	bmi.n	801c71c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c66c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c670:	42ba      	cmp	r2, r7
 801c672:	dd53      	ble.n	801c71c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c674:	9a01      	ldr	r2, [sp, #4]
 801c676:	b22d      	sxth	r5, r5
 801c678:	fb07 2505 	mla	r5, r7, r5, r2
 801c67c:	5daa      	ldrb	r2, [r5, r6]
 801c67e:	9d02      	ldr	r5, [sp, #8]
 801c680:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801c684:	0e2e      	lsrs	r6, r5, #24
 801c686:	d049      	beq.n	801c71c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c688:	f06f 0201 	mvn.w	r2, #1
 801c68c:	fb02 f20e 	mul.w	r2, r2, lr
 801c690:	9203      	str	r2, [sp, #12]
 801c692:	f834 8002 	ldrh.w	r8, [r4, r2]
 801c696:	9a05      	ldr	r2, [sp, #20]
 801c698:	4356      	muls	r6, r2
 801c69a:	1c72      	adds	r2, r6, #1
 801c69c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801c6a0:	1212      	asrs	r2, r2, #8
 801c6a2:	fa1f f982 	uxth.w	r9, r2
 801c6a6:	ea4f 2728 	mov.w	r7, r8, asr #8
 801c6aa:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801c6ae:	43d2      	mvns	r2, r2
 801c6b0:	b2d2      	uxtb	r2, r2
 801c6b2:	fb16 f609 	smulbb	r6, r6, r9
 801c6b6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c6ba:	fb07 6702 	mla	r7, r7, r2, r6
 801c6be:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c6c2:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801c6c6:	b2ed      	uxtb	r5, r5
 801c6c8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c6cc:	fa5f f888 	uxtb.w	r8, r8
 801c6d0:	fb15 f509 	smulbb	r5, r5, r9
 801c6d4:	fb08 5502 	mla	r5, r8, r2, r5
 801c6d8:	b2bf      	uxth	r7, r7
 801c6da:	fb1a fa09 	smulbb	sl, sl, r9
 801c6de:	b2ad      	uxth	r5, r5
 801c6e0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c6e4:	fb06 a602 	mla	r6, r6, r2, sl
 801c6e8:	1c7a      	adds	r2, r7, #1
 801c6ea:	f105 0a01 	add.w	sl, r5, #1
 801c6ee:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801c6f2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c6f6:	b2b6      	uxth	r6, r6
 801c6f8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c6fc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c700:	ea4a 0707 	orr.w	r7, sl, r7
 801c704:	f106 0a01 	add.w	sl, r6, #1
 801c708:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c70c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c710:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c714:	9a03      	ldr	r2, [sp, #12]
 801c716:	ea47 070a 	orr.w	r7, r7, sl
 801c71a:	52a7      	strh	r7, [r4, r2]
 801c71c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c71e:	4410      	add	r0, r2
 801c720:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c722:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c726:	4411      	add	r1, r2
 801c728:	e755      	b.n	801c5d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c72a:	f04f 0800 	mov.w	r8, #0
 801c72e:	eba3 0208 	sub.w	r2, r3, r8
 801c732:	2a00      	cmp	r2, #0
 801c734:	f77f af53 	ble.w	801c5de <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801c738:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801c73c:	9f01      	ldr	r7, [sp, #4]
 801c73e:	140a      	asrs	r2, r1, #16
 801c740:	1405      	asrs	r5, r0, #16
 801c742:	fb06 7202 	mla	r2, r6, r2, r7
 801c746:	5d52      	ldrb	r2, [r2, r5]
 801c748:	9d02      	ldr	r5, [sp, #8]
 801c74a:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801c74e:	0e2e      	lsrs	r6, r5, #24
 801c750:	d044      	beq.n	801c7dc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801c752:	9a05      	ldr	r2, [sp, #20]
 801c754:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801c758:	4356      	muls	r6, r2
 801c75a:	1c72      	adds	r2, r6, #1
 801c75c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801c760:	1212      	asrs	r2, r2, #8
 801c762:	fa1f f982 	uxth.w	r9, r2
 801c766:	ea4f 272e 	mov.w	r7, lr, asr #8
 801c76a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801c76e:	43d2      	mvns	r2, r2
 801c770:	b2d2      	uxtb	r2, r2
 801c772:	fb16 f609 	smulbb	r6, r6, r9
 801c776:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c77a:	fb07 6702 	mla	r7, r7, r2, r6
 801c77e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c782:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801c786:	b2ed      	uxtb	r5, r5
 801c788:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c78c:	fa5f fe8e 	uxtb.w	lr, lr
 801c790:	fb15 f509 	smulbb	r5, r5, r9
 801c794:	fb0e 5502 	mla	r5, lr, r2, r5
 801c798:	b2bf      	uxth	r7, r7
 801c79a:	fb1a fa09 	smulbb	sl, sl, r9
 801c79e:	b2ad      	uxth	r5, r5
 801c7a0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c7a4:	fb06 a602 	mla	r6, r6, r2, sl
 801c7a8:	1c7a      	adds	r2, r7, #1
 801c7aa:	f105 0a01 	add.w	sl, r5, #1
 801c7ae:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801c7b2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c7b6:	b2b6      	uxth	r6, r6
 801c7b8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c7bc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c7c0:	ea4a 0707 	orr.w	r7, sl, r7
 801c7c4:	f106 0a01 	add.w	sl, r6, #1
 801c7c8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c7cc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c7d0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c7d4:	ea47 070a 	orr.w	r7, r7, sl
 801c7d8:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801c7dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c7de:	4410      	add	r0, r2
 801c7e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c7e2:	f108 0801 	add.w	r8, r8, #1
 801c7e6:	4411      	add	r1, r2
 801c7e8:	e7a1      	b.n	801c72e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801c7ea:	b007      	add	sp, #28
 801c7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c7f0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7f4:	b085      	sub	sp, #20
 801c7f6:	468b      	mov	fp, r1
 801c7f8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c7fa:	9203      	str	r2, [sp, #12]
 801c7fc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c800:	6841      	ldr	r1, [r0, #4]
 801c802:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801c806:	fb01 2404 	mla	r4, r1, r4, r2
 801c80a:	6802      	ldr	r2, [r0, #0]
 801c80c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c810:	f8de 2000 	ldr.w	r2, [lr]
 801c814:	9200      	str	r2, [sp, #0]
 801c816:	f8de 2004 	ldr.w	r2, [lr, #4]
 801c81a:	3204      	adds	r2, #4
 801c81c:	9201      	str	r2, [sp, #4]
 801c81e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c822:	f1bb 0f00 	cmp.w	fp, #0
 801c826:	dc03      	bgt.n	801c830 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801c828:	9a03      	ldr	r2, [sp, #12]
 801c82a:	2a00      	cmp	r2, #0
 801c82c:	f340 8153 	ble.w	801cad6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801c830:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c832:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801c836:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801c83a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c83e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c840:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c844:	2b00      	cmp	r3, #0
 801c846:	dd0e      	ble.n	801c866 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c848:	1408      	asrs	r0, r1, #16
 801c84a:	d405      	bmi.n	801c858 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c84c:	42b8      	cmp	r0, r7
 801c84e:	da03      	bge.n	801c858 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c850:	1410      	asrs	r0, r2, #16
 801c852:	d401      	bmi.n	801c858 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c854:	42b0      	cmp	r0, r6
 801c856:	db07      	blt.n	801c868 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c858:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c85a:	4401      	add	r1, r0
 801c85c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c85e:	3b01      	subs	r3, #1
 801c860:	4402      	add	r2, r0
 801c862:	3402      	adds	r4, #2
 801c864:	e7ee      	b.n	801c844 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801c866:	d017      	beq.n	801c898 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801c868:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c86a:	1e58      	subs	r0, r3, #1
 801c86c:	fb05 1500 	mla	r5, r5, r0, r1
 801c870:	142d      	asrs	r5, r5, #16
 801c872:	d409      	bmi.n	801c888 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c874:	42bd      	cmp	r5, r7
 801c876:	da07      	bge.n	801c888 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c878:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c87a:	fb05 2000 	mla	r0, r5, r0, r2
 801c87e:	1400      	asrs	r0, r0, #16
 801c880:	d402      	bmi.n	801c888 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c882:	42b0      	cmp	r0, r6
 801c884:	f2c0 80bc 	blt.w	801ca00 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801c888:	2600      	movs	r6, #0
 801c88a:	1998      	adds	r0, r3, r6
 801c88c:	2800      	cmp	r0, #0
 801c88e:	dc3e      	bgt.n	801c90e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801c890:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c894:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c898:	f1bb 0f00 	cmp.w	fp, #0
 801c89c:	f340 811b 	ble.w	801cad6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801c8a0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c8a4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c8a8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c8ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c8ae:	f1bb 0b01 	subs.w	fp, fp, #1
 801c8b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c8b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c8ba:	eeb0 6a62 	vmov.f32	s12, s5
 801c8be:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c8c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c8c6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c8ca:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c8ce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c8d2:	eeb0 6a43 	vmov.f32	s12, s6
 801c8d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c8da:	ee12 2a90 	vmov	r2, s5
 801c8de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c8e2:	fb92 f3f3 	sdiv	r3, r2, r3
 801c8e6:	ee13 2a10 	vmov	r2, s6
 801c8ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c8ee:	9311      	str	r3, [sp, #68]	; 0x44
 801c8f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c8f2:	fb92 f3f3 	sdiv	r3, r2, r3
 801c8f6:	9a03      	ldr	r2, [sp, #12]
 801c8f8:	9312      	str	r3, [sp, #72]	; 0x48
 801c8fa:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c8fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c900:	eeb0 3a67 	vmov.f32	s6, s15
 801c904:	bf08      	it	eq
 801c906:	4613      	moveq	r3, r2
 801c908:	eef0 2a47 	vmov.f32	s5, s14
 801c90c:	e789      	b.n	801c822 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801c90e:	140f      	asrs	r7, r1, #16
 801c910:	d426      	bmi.n	801c960 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c912:	f8de 5008 	ldr.w	r5, [lr, #8]
 801c916:	42bd      	cmp	r5, r7
 801c918:	dd22      	ble.n	801c960 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c91a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c91e:	d41f      	bmi.n	801c960 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c920:	f8de 000c 	ldr.w	r0, [lr, #12]
 801c924:	4560      	cmp	r0, ip
 801c926:	dd1b      	ble.n	801c960 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c928:	9800      	ldr	r0, [sp, #0]
 801c92a:	b22d      	sxth	r5, r5
 801c92c:	fb0c 0505 	mla	r5, ip, r5, r0
 801c930:	5de8      	ldrb	r0, [r5, r7]
 801c932:	9d01      	ldr	r5, [sp, #4]
 801c934:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801c938:	0e07      	lsrs	r7, r0, #24
 801c93a:	2fff      	cmp	r7, #255	; 0xff
 801c93c:	d116      	bne.n	801c96c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c93e:	f06f 0501 	mvn.w	r5, #1
 801c942:	fb05 f706 	mul.w	r7, r5, r6
 801c946:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801c94a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801c94e:	0945      	lsrs	r5, r0, #5
 801c950:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c954:	ea4c 0505 	orr.w	r5, ip, r5
 801c958:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801c95c:	4305      	orrs	r5, r0
 801c95e:	53e5      	strh	r5, [r4, r7]
 801c960:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c962:	4401      	add	r1, r0
 801c964:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c966:	3e01      	subs	r6, #1
 801c968:	4402      	add	r2, r0
 801c96a:	e78e      	b.n	801c88a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801c96c:	b2fd      	uxtb	r5, r7
 801c96e:	2f00      	cmp	r7, #0
 801c970:	d0f6      	beq.n	801c960 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c972:	f06f 0701 	mvn.w	r7, #1
 801c976:	4377      	muls	r7, r6
 801c978:	fa1f f985 	uxth.w	r9, r5
 801c97c:	f834 8007 	ldrh.w	r8, [r4, r7]
 801c980:	9702      	str	r7, [sp, #8]
 801c982:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801c986:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801c98a:	43ed      	mvns	r5, r5
 801c98c:	b2ed      	uxtb	r5, r5
 801c98e:	fb17 f709 	smulbb	r7, r7, r9
 801c992:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c996:	fb0c 7c05 	mla	ip, ip, r5, r7
 801c99a:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801c99e:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801c9a2:	b2c0      	uxtb	r0, r0
 801c9a4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c9a8:	fa5f f888 	uxtb.w	r8, r8
 801c9ac:	fb10 f009 	smulbb	r0, r0, r9
 801c9b0:	fb08 0005 	mla	r0, r8, r5, r0
 801c9b4:	b280      	uxth	r0, r0
 801c9b6:	fa1f fc8c 	uxth.w	ip, ip
 801c9ba:	fb1a fa09 	smulbb	sl, sl, r9
 801c9be:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c9c2:	fb07 a705 	mla	r7, r7, r5, sl
 801c9c6:	f100 0a01 	add.w	sl, r0, #1
 801c9ca:	f10c 0501 	add.w	r5, ip, #1
 801c9ce:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801c9d2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c9d6:	b2bf      	uxth	r7, r7
 801c9d8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c9dc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c9e0:	ea4a 0c0c 	orr.w	ip, sl, ip
 801c9e4:	f107 0a01 	add.w	sl, r7, #1
 801c9e8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801c9ec:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c9f0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c9f4:	9802      	ldr	r0, [sp, #8]
 801c9f6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c9fa:	f824 c000 	strh.w	ip, [r4, r0]
 801c9fe:	e7af      	b.n	801c960 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ca00:	f04f 0800 	mov.w	r8, #0
 801ca04:	eba3 0008 	sub.w	r0, r3, r8
 801ca08:	2800      	cmp	r0, #0
 801ca0a:	f77f af41 	ble.w	801c890 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ca0e:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801ca12:	9f00      	ldr	r7, [sp, #0]
 801ca14:	1410      	asrs	r0, r2, #16
 801ca16:	140d      	asrs	r5, r1, #16
 801ca18:	fb06 7000 	mla	r0, r6, r0, r7
 801ca1c:	5d40      	ldrb	r0, [r0, r5]
 801ca1e:	9d01      	ldr	r5, [sp, #4]
 801ca20:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801ca24:	0e2e      	lsrs	r6, r5, #24
 801ca26:	2eff      	cmp	r6, #255	; 0xff
 801ca28:	d112      	bne.n	801ca50 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801ca2a:	482c      	ldr	r0, [pc, #176]	; (801cadc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801ca2c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801ca30:	0968      	lsrs	r0, r5, #5
 801ca32:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ca36:	4330      	orrs	r0, r6
 801ca38:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ca3c:	4328      	orrs	r0, r5
 801ca3e:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801ca42:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ca44:	4401      	add	r1, r0
 801ca46:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ca48:	f108 0801 	add.w	r8, r8, #1
 801ca4c:	4402      	add	r2, r0
 801ca4e:	e7d9      	b.n	801ca04 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ca50:	b2f0      	uxtb	r0, r6
 801ca52:	2e00      	cmp	r6, #0
 801ca54:	d0f5      	beq.n	801ca42 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801ca56:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801ca5a:	fa1f f980 	uxth.w	r9, r0
 801ca5e:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ca62:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ca66:	43c0      	mvns	r0, r0
 801ca68:	b2c0      	uxtb	r0, r0
 801ca6a:	fb16 f609 	smulbb	r6, r6, r9
 801ca6e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ca72:	fb07 6700 	mla	r7, r7, r0, r6
 801ca76:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ca7a:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801ca7e:	b2ed      	uxtb	r5, r5
 801ca80:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ca84:	fa5f fc8c 	uxtb.w	ip, ip
 801ca88:	fb15 f509 	smulbb	r5, r5, r9
 801ca8c:	fb0c 5500 	mla	r5, ip, r0, r5
 801ca90:	b2bf      	uxth	r7, r7
 801ca92:	fb1a fa09 	smulbb	sl, sl, r9
 801ca96:	b2ad      	uxth	r5, r5
 801ca98:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ca9c:	fb06 a600 	mla	r6, r6, r0, sl
 801caa0:	1c78      	adds	r0, r7, #1
 801caa2:	f105 0a01 	add.w	sl, r5, #1
 801caa6:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801caaa:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801caae:	b2b6      	uxth	r6, r6
 801cab0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cab4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801cab8:	ea4a 0707 	orr.w	r7, sl, r7
 801cabc:	f106 0a01 	add.w	sl, r6, #1
 801cac0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801cac4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cac8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cacc:	ea47 070a 	orr.w	r7, r7, sl
 801cad0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801cad4:	e7b5      	b.n	801ca42 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801cad6:	b005      	add	sp, #20
 801cad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cadc:	fffff800 	.word	0xfffff800

0801cae0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cae4:	b087      	sub	sp, #28
 801cae6:	468b      	mov	fp, r1
 801cae8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801caea:	9204      	str	r2, [sp, #16]
 801caec:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801caf0:	9205      	str	r2, [sp, #20]
 801caf2:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801caf6:	6861      	ldr	r1, [r4, #4]
 801caf8:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801cafc:	fb01 2000 	mla	r0, r1, r0, r2
 801cb00:	6822      	ldr	r2, [r4, #0]
 801cb02:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801cb06:	f8de 2000 	ldr.w	r2, [lr]
 801cb0a:	9201      	str	r2, [sp, #4]
 801cb0c:	f8de 2004 	ldr.w	r2, [lr, #4]
 801cb10:	9202      	str	r2, [sp, #8]
 801cb12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cb16:	f1bb 0f00 	cmp.w	fp, #0
 801cb1a:	dc03      	bgt.n	801cb24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801cb1c:	9a04      	ldr	r2, [sp, #16]
 801cb1e:	2a00      	cmp	r2, #0
 801cb20:	f340 8142 	ble.w	801cda8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801cb24:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cb26:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801cb2a:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801cb2e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801cb32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cb34:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cb38:	2b00      	cmp	r3, #0
 801cb3a:	dd0e      	ble.n	801cb5a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801cb3c:	140c      	asrs	r4, r1, #16
 801cb3e:	d405      	bmi.n	801cb4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801cb40:	42bc      	cmp	r4, r7
 801cb42:	da03      	bge.n	801cb4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801cb44:	1414      	asrs	r4, r2, #16
 801cb46:	d401      	bmi.n	801cb4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801cb48:	42b4      	cmp	r4, r6
 801cb4a:	db07      	blt.n	801cb5c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801cb4c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cb4e:	4421      	add	r1, r4
 801cb50:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cb52:	3b01      	subs	r3, #1
 801cb54:	4422      	add	r2, r4
 801cb56:	3002      	adds	r0, #2
 801cb58:	e7ee      	b.n	801cb38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801cb5a:	d019      	beq.n	801cb90 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801cb5c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801cb5e:	1e5c      	subs	r4, r3, #1
 801cb60:	fb05 1504 	mla	r5, r5, r4, r1
 801cb64:	142d      	asrs	r5, r5, #16
 801cb66:	d409      	bmi.n	801cb7c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801cb68:	42bd      	cmp	r5, r7
 801cb6a:	da07      	bge.n	801cb7c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801cb6c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801cb6e:	fb05 2404 	mla	r4, r5, r4, r2
 801cb72:	1424      	asrs	r4, r4, #16
 801cb74:	d402      	bmi.n	801cb7c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801cb76:	42b4      	cmp	r4, r6
 801cb78:	f2c0 80b1 	blt.w	801ccde <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801cb7c:	f04f 0800 	mov.w	r8, #0
 801cb80:	eb03 0408 	add.w	r4, r3, r8
 801cb84:	2c00      	cmp	r4, #0
 801cb86:	dc3e      	bgt.n	801cc06 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801cb88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cb8c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cb90:	f1bb 0f00 	cmp.w	fp, #0
 801cb94:	f340 8108 	ble.w	801cda8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801cb98:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cb9c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cba0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cba6:	f1bb 0b01 	subs.w	fp, fp, #1
 801cbaa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cbae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cbb2:	eeb0 6a62 	vmov.f32	s12, s5
 801cbb6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cbba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cbbe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cbc2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801cbc6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cbca:	eeb0 6a43 	vmov.f32	s12, s6
 801cbce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cbd2:	ee12 2a90 	vmov	r2, s5
 801cbd6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cbda:	fb92 f3f3 	sdiv	r3, r2, r3
 801cbde:	ee13 2a10 	vmov	r2, s6
 801cbe2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cbe6:	9313      	str	r3, [sp, #76]	; 0x4c
 801cbe8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cbea:	fb92 f3f3 	sdiv	r3, r2, r3
 801cbee:	9a04      	ldr	r2, [sp, #16]
 801cbf0:	9314      	str	r3, [sp, #80]	; 0x50
 801cbf2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801cbf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cbf8:	eeb0 3a67 	vmov.f32	s6, s15
 801cbfc:	bf08      	it	eq
 801cbfe:	4613      	moveq	r3, r2
 801cc00:	eef0 2a47 	vmov.f32	s5, s14
 801cc04:	e787      	b.n	801cb16 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801cc06:	140e      	asrs	r6, r1, #16
 801cc08:	d462      	bmi.n	801ccd0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801cc0a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801cc0e:	42b5      	cmp	r5, r6
 801cc10:	dd5e      	ble.n	801ccd0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801cc12:	1417      	asrs	r7, r2, #16
 801cc14:	d45c      	bmi.n	801ccd0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801cc16:	f8de 400c 	ldr.w	r4, [lr, #12]
 801cc1a:	42bc      	cmp	r4, r7
 801cc1c:	dd58      	ble.n	801ccd0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801cc1e:	b22d      	sxth	r5, r5
 801cc20:	fb07 6505 	mla	r5, r7, r5, r6
 801cc24:	9c02      	ldr	r4, [sp, #8]
 801cc26:	5d66      	ldrb	r6, [r4, r5]
 801cc28:	2e00      	cmp	r6, #0
 801cc2a:	d051      	beq.n	801ccd0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801cc2c:	9c01      	ldr	r4, [sp, #4]
 801cc2e:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801cc32:	f06f 0401 	mvn.w	r4, #1
 801cc36:	fb04 f408 	mul.w	r4, r4, r8
 801cc3a:	9403      	str	r4, [sp, #12]
 801cc3c:	5b05      	ldrh	r5, [r0, r4]
 801cc3e:	9c05      	ldr	r4, [sp, #20]
 801cc40:	4366      	muls	r6, r4
 801cc42:	1c74      	adds	r4, r6, #1
 801cc44:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801cc48:	1224      	asrs	r4, r4, #8
 801cc4a:	b2a7      	uxth	r7, r4
 801cc4c:	122e      	asrs	r6, r5, #8
 801cc4e:	43e4      	mvns	r4, r4
 801cc50:	b2e4      	uxtb	r4, r4
 801cc52:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801cc56:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801cc5a:	fb16 f604 	smulbb	r6, r6, r4
 801cc5e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801cc62:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cc66:	00ed      	lsls	r5, r5, #3
 801cc68:	fb0c 6c07 	mla	ip, ip, r7, r6
 801cc6c:	b2ed      	uxtb	r5, r5
 801cc6e:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801cc72:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801cc76:	fb15 f504 	smulbb	r5, r5, r4
 801cc7a:	fa5f f989 	uxtb.w	r9, r9
 801cc7e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801cc82:	fb09 5507 	mla	r5, r9, r7, r5
 801cc86:	fb1a fa04 	smulbb	sl, sl, r4
 801cc8a:	fa1f fc8c 	uxth.w	ip, ip
 801cc8e:	b2ad      	uxth	r5, r5
 801cc90:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801cc94:	fb06 a607 	mla	r6, r6, r7, sl
 801cc98:	f10c 0401 	add.w	r4, ip, #1
 801cc9c:	f105 0a01 	add.w	sl, r5, #1
 801cca0:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801cca4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cca8:	b2b6      	uxth	r6, r6
 801ccaa:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ccae:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ccb2:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ccb6:	f106 0a01 	add.w	sl, r6, #1
 801ccba:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ccbe:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ccc2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ccc6:	9c03      	ldr	r4, [sp, #12]
 801ccc8:	ea4c 0c0a 	orr.w	ip, ip, sl
 801cccc:	f820 c004 	strh.w	ip, [r0, r4]
 801ccd0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ccd2:	4421      	add	r1, r4
 801ccd4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ccd6:	f108 38ff 	add.w	r8, r8, #4294967295
 801ccda:	4422      	add	r2, r4
 801ccdc:	e750      	b.n	801cb80 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ccde:	f04f 0900 	mov.w	r9, #0
 801cce2:	eba3 0409 	sub.w	r4, r3, r9
 801cce6:	2c00      	cmp	r4, #0
 801cce8:	f77f af4e 	ble.w	801cb88 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ccec:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801ccf0:	140d      	asrs	r5, r1, #16
 801ccf2:	1414      	asrs	r4, r2, #16
 801ccf4:	fb06 5404 	mla	r4, r6, r4, r5
 801ccf8:	9d02      	ldr	r5, [sp, #8]
 801ccfa:	5d2e      	ldrb	r6, [r5, r4]
 801ccfc:	2e00      	cmp	r6, #0
 801ccfe:	d04c      	beq.n	801cd9a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801cd00:	9d01      	ldr	r5, [sp, #4]
 801cd02:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801cd06:	9c05      	ldr	r4, [sp, #20]
 801cd08:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801cd0c:	4366      	muls	r6, r4
 801cd0e:	1c74      	adds	r4, r6, #1
 801cd10:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801cd14:	1224      	asrs	r4, r4, #8
 801cd16:	b2a7      	uxth	r7, r4
 801cd18:	122e      	asrs	r6, r5, #8
 801cd1a:	43e4      	mvns	r4, r4
 801cd1c:	b2e4      	uxtb	r4, r4
 801cd1e:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801cd22:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801cd26:	fb16 f604 	smulbb	r6, r6, r4
 801cd2a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801cd2e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cd32:	00ed      	lsls	r5, r5, #3
 801cd34:	fb0c 6c07 	mla	ip, ip, r7, r6
 801cd38:	b2ed      	uxtb	r5, r5
 801cd3a:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801cd3e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801cd42:	fb15 f504 	smulbb	r5, r5, r4
 801cd46:	fa5f f888 	uxtb.w	r8, r8
 801cd4a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801cd4e:	fb08 5507 	mla	r5, r8, r7, r5
 801cd52:	fb1a fa04 	smulbb	sl, sl, r4
 801cd56:	fa1f fc8c 	uxth.w	ip, ip
 801cd5a:	b2ad      	uxth	r5, r5
 801cd5c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801cd60:	fb06 a607 	mla	r6, r6, r7, sl
 801cd64:	f10c 0401 	add.w	r4, ip, #1
 801cd68:	f105 0a01 	add.w	sl, r5, #1
 801cd6c:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801cd70:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cd74:	b2b6      	uxth	r6, r6
 801cd76:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cd7a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801cd7e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801cd82:	f106 0a01 	add.w	sl, r6, #1
 801cd86:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801cd8a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cd8e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cd92:	ea4c 0c0a 	orr.w	ip, ip, sl
 801cd96:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801cd9a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cd9c:	4421      	add	r1, r4
 801cd9e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cda0:	f109 0901 	add.w	r9, r9, #1
 801cda4:	4422      	add	r2, r4
 801cda6:	e79c      	b.n	801cce2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801cda8:	b007      	add	sp, #28
 801cdaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cdae <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cdae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdb2:	b085      	sub	sp, #20
 801cdb4:	468b      	mov	fp, r1
 801cdb6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cdb8:	9203      	str	r2, [sp, #12]
 801cdba:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801cdbe:	6861      	ldr	r1, [r4, #4]
 801cdc0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801cdc4:	fb01 2000 	mla	r0, r1, r0, r2
 801cdc8:	6822      	ldr	r2, [r4, #0]
 801cdca:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801cdce:	f8d8 2000 	ldr.w	r2, [r8]
 801cdd2:	9200      	str	r2, [sp, #0]
 801cdd4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801cdd8:	9201      	str	r2, [sp, #4]
 801cdda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cdde:	f1bb 0f00 	cmp.w	fp, #0
 801cde2:	dc03      	bgt.n	801cdec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801cde4:	9a03      	ldr	r2, [sp, #12]
 801cde6:	2a00      	cmp	r2, #0
 801cde8:	f340 8146 	ble.w	801d078 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801cdec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cdee:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801cdf2:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801cdf6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801cdfa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cdfc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	dd0e      	ble.n	801ce22 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ce04:	140c      	asrs	r4, r1, #16
 801ce06:	d405      	bmi.n	801ce14 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ce08:	42bc      	cmp	r4, r7
 801ce0a:	da03      	bge.n	801ce14 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ce0c:	1414      	asrs	r4, r2, #16
 801ce0e:	d401      	bmi.n	801ce14 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ce10:	42b4      	cmp	r4, r6
 801ce12:	db07      	blt.n	801ce24 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ce14:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ce16:	4421      	add	r1, r4
 801ce18:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ce1a:	3b01      	subs	r3, #1
 801ce1c:	4422      	add	r2, r4
 801ce1e:	3002      	adds	r0, #2
 801ce20:	e7ee      	b.n	801ce00 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ce22:	d017      	beq.n	801ce54 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801ce24:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ce26:	1e5c      	subs	r4, r3, #1
 801ce28:	fb05 1504 	mla	r5, r5, r4, r1
 801ce2c:	142d      	asrs	r5, r5, #16
 801ce2e:	d409      	bmi.n	801ce44 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ce30:	42bd      	cmp	r5, r7
 801ce32:	da07      	bge.n	801ce44 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ce34:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ce36:	fb05 2404 	mla	r4, r5, r4, r2
 801ce3a:	1424      	asrs	r4, r4, #16
 801ce3c:	d402      	bmi.n	801ce44 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ce3e:	42b4      	cmp	r4, r6
 801ce40:	f2c0 80b3 	blt.w	801cfaa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801ce44:	2600      	movs	r6, #0
 801ce46:	199c      	adds	r4, r3, r6
 801ce48:	2c00      	cmp	r4, #0
 801ce4a:	dc3e      	bgt.n	801ceca <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ce4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ce50:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ce54:	f1bb 0f00 	cmp.w	fp, #0
 801ce58:	f340 810e 	ble.w	801d078 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801ce5c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ce60:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ce64:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ce68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ce6a:	f1bb 0b01 	subs.w	fp, fp, #1
 801ce6e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ce72:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ce76:	eeb0 6a62 	vmov.f32	s12, s5
 801ce7a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ce7e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ce82:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ce86:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ce8a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ce8e:	eeb0 6a43 	vmov.f32	s12, s6
 801ce92:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ce96:	ee12 2a90 	vmov	r2, s5
 801ce9a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ce9e:	fb92 f3f3 	sdiv	r3, r2, r3
 801cea2:	ee13 2a10 	vmov	r2, s6
 801cea6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ceaa:	9311      	str	r3, [sp, #68]	; 0x44
 801ceac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ceae:	fb92 f3f3 	sdiv	r3, r2, r3
 801ceb2:	9a03      	ldr	r2, [sp, #12]
 801ceb4:	9312      	str	r3, [sp, #72]	; 0x48
 801ceb6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ceba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cebc:	eeb0 3a67 	vmov.f32	s6, s15
 801cec0:	bf08      	it	eq
 801cec2:	4613      	moveq	r3, r2
 801cec4:	eef0 2a47 	vmov.f32	s5, s14
 801cec8:	e789      	b.n	801cdde <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ceca:	140f      	asrs	r7, r1, #16
 801cecc:	d418      	bmi.n	801cf00 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801cece:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801ced2:	42bd      	cmp	r5, r7
 801ced4:	dd14      	ble.n	801cf00 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ced6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ceda:	d411      	bmi.n	801cf00 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801cedc:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801cee0:	4564      	cmp	r4, ip
 801cee2:	dd0d      	ble.n	801cf00 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801cee4:	b22d      	sxth	r5, r5
 801cee6:	fb0c 7505 	mla	r5, ip, r5, r7
 801ceea:	9c01      	ldr	r4, [sp, #4]
 801ceec:	5d64      	ldrb	r4, [r4, r5]
 801ceee:	2cff      	cmp	r4, #255	; 0xff
 801cef0:	d10c      	bne.n	801cf0c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801cef2:	9c00      	ldr	r4, [sp, #0]
 801cef4:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801cef8:	f06f 0401 	mvn.w	r4, #1
 801cefc:	4374      	muls	r4, r6
 801cefe:	5305      	strh	r5, [r0, r4]
 801cf00:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cf02:	4421      	add	r1, r4
 801cf04:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cf06:	3e01      	subs	r6, #1
 801cf08:	4422      	add	r2, r4
 801cf0a:	e79c      	b.n	801ce46 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801cf0c:	2c00      	cmp	r4, #0
 801cf0e:	d0f7      	beq.n	801cf00 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801cf10:	9f00      	ldr	r7, [sp, #0]
 801cf12:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801cf16:	f06f 0501 	mvn.w	r5, #1
 801cf1a:	4375      	muls	r5, r6
 801cf1c:	9502      	str	r5, [sp, #8]
 801cf1e:	5b45      	ldrh	r5, [r0, r5]
 801cf20:	fa1f fc84 	uxth.w	ip, r4
 801cf24:	122f      	asrs	r7, r5, #8
 801cf26:	43e4      	mvns	r4, r4
 801cf28:	b2e4      	uxtb	r4, r4
 801cf2a:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801cf2e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801cf32:	fb17 f704 	smulbb	r7, r7, r4
 801cf36:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801cf3a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801cf3e:	00ed      	lsls	r5, r5, #3
 801cf40:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801cf44:	b2ed      	uxtb	r5, r5
 801cf46:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801cf4a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801cf4e:	fb15 f504 	smulbb	r5, r5, r4
 801cf52:	fa5f f989 	uxtb.w	r9, r9
 801cf56:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801cf5a:	fb09 550c 	mla	r5, r9, ip, r5
 801cf5e:	fb1a fa04 	smulbb	sl, sl, r4
 801cf62:	fa1f fe8e 	uxth.w	lr, lr
 801cf66:	b2ad      	uxth	r5, r5
 801cf68:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801cf6c:	fb07 a70c 	mla	r7, r7, ip, sl
 801cf70:	f10e 0401 	add.w	r4, lr, #1
 801cf74:	f105 0a01 	add.w	sl, r5, #1
 801cf78:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801cf7c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cf80:	b2bf      	uxth	r7, r7
 801cf82:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cf86:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801cf8a:	ea4a 0e0e 	orr.w	lr, sl, lr
 801cf8e:	f107 0a01 	add.w	sl, r7, #1
 801cf92:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801cf96:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cf9a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cf9e:	9c02      	ldr	r4, [sp, #8]
 801cfa0:	ea4e 0e0a 	orr.w	lr, lr, sl
 801cfa4:	f820 e004 	strh.w	lr, [r0, r4]
 801cfa8:	e7aa      	b.n	801cf00 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801cfaa:	f04f 0900 	mov.w	r9, #0
 801cfae:	eba3 0409 	sub.w	r4, r3, r9
 801cfb2:	2c00      	cmp	r4, #0
 801cfb4:	f77f af4a 	ble.w	801ce4c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801cfb8:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801cfbc:	1414      	asrs	r4, r2, #16
 801cfbe:	140d      	asrs	r5, r1, #16
 801cfc0:	fb06 5504 	mla	r5, r6, r4, r5
 801cfc4:	9c01      	ldr	r4, [sp, #4]
 801cfc6:	5d64      	ldrb	r4, [r4, r5]
 801cfc8:	2cff      	cmp	r4, #255	; 0xff
 801cfca:	d10b      	bne.n	801cfe4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801cfcc:	9c00      	ldr	r4, [sp, #0]
 801cfce:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801cfd2:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801cfd6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cfd8:	4421      	add	r1, r4
 801cfda:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cfdc:	f109 0901 	add.w	r9, r9, #1
 801cfe0:	4422      	add	r2, r4
 801cfe2:	e7e4      	b.n	801cfae <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801cfe4:	2c00      	cmp	r4, #0
 801cfe6:	d0f6      	beq.n	801cfd6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801cfe8:	9e00      	ldr	r6, [sp, #0]
 801cfea:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801cfee:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801cff2:	b2a7      	uxth	r7, r4
 801cff4:	122e      	asrs	r6, r5, #8
 801cff6:	43e4      	mvns	r4, r4
 801cff8:	b2e4      	uxtb	r4, r4
 801cffa:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801cffe:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d002:	fb16 f604 	smulbb	r6, r6, r4
 801d006:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801d00a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d00e:	00ed      	lsls	r5, r5, #3
 801d010:	fb0c 6c07 	mla	ip, ip, r7, r6
 801d014:	b2ed      	uxtb	r5, r5
 801d016:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801d01a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d01e:	fb15 f504 	smulbb	r5, r5, r4
 801d022:	fa5f fe8e 	uxtb.w	lr, lr
 801d026:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801d02a:	fb0e 5507 	mla	r5, lr, r7, r5
 801d02e:	fb1a fa04 	smulbb	sl, sl, r4
 801d032:	fa1f fc8c 	uxth.w	ip, ip
 801d036:	b2ad      	uxth	r5, r5
 801d038:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d03c:	fb06 a607 	mla	r6, r6, r7, sl
 801d040:	f10c 0401 	add.w	r4, ip, #1
 801d044:	f105 0a01 	add.w	sl, r5, #1
 801d048:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801d04c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d050:	b2b6      	uxth	r6, r6
 801d052:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d056:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d05a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801d05e:	f106 0a01 	add.w	sl, r6, #1
 801d062:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d066:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d06a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d06e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801d072:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801d076:	e7ae      	b.n	801cfd6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801d078:	b005      	add	sp, #20
 801d07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d07e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d07e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d082:	b085      	sub	sp, #20
 801d084:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d086:	9203      	str	r2, [sp, #12]
 801d088:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801d08c:	9201      	str	r2, [sp, #4]
 801d08e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d092:	9100      	str	r1, [sp, #0]
 801d094:	6841      	ldr	r1, [r0, #4]
 801d096:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801d09a:	fb01 2404 	mla	r4, r1, r4, r2
 801d09e:	6802      	ldr	r2, [r0, #0]
 801d0a0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d0a4:	f8de 2000 	ldr.w	r2, [lr]
 801d0a8:	9202      	str	r2, [sp, #8]
 801d0aa:	9a01      	ldr	r2, [sp, #4]
 801d0ac:	43d6      	mvns	r6, r2
 801d0ae:	b2f6      	uxtb	r6, r6
 801d0b0:	9a00      	ldr	r2, [sp, #0]
 801d0b2:	2a00      	cmp	r2, #0
 801d0b4:	dc03      	bgt.n	801d0be <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801d0b6:	9a03      	ldr	r2, [sp, #12]
 801d0b8:	2a00      	cmp	r2, #0
 801d0ba:	f340 8124 	ble.w	801d306 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801d0be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d0c0:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801d0c4:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801d0c8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d0cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d0ce:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d0d2:	2b00      	cmp	r3, #0
 801d0d4:	dd0e      	ble.n	801d0f4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d0d6:	1408      	asrs	r0, r1, #16
 801d0d8:	d405      	bmi.n	801d0e6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d0da:	4560      	cmp	r0, ip
 801d0dc:	da03      	bge.n	801d0e6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d0de:	1410      	asrs	r0, r2, #16
 801d0e0:	d401      	bmi.n	801d0e6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d0e2:	42b8      	cmp	r0, r7
 801d0e4:	db07      	blt.n	801d0f6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d0e6:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d0e8:	4401      	add	r1, r0
 801d0ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d0ec:	3b01      	subs	r3, #1
 801d0ee:	4402      	add	r2, r0
 801d0f0:	3402      	adds	r4, #2
 801d0f2:	e7ee      	b.n	801d0d2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801d0f4:	d06e      	beq.n	801d1d4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801d0f6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d0f8:	1e58      	subs	r0, r3, #1
 801d0fa:	fb05 1500 	mla	r5, r5, r0, r1
 801d0fe:	142d      	asrs	r5, r5, #16
 801d100:	d45c      	bmi.n	801d1bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d102:	4565      	cmp	r5, ip
 801d104:	da5a      	bge.n	801d1bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d106:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d108:	fb05 2000 	mla	r0, r5, r0, r2
 801d10c:	1400      	asrs	r0, r0, #16
 801d10e:	d455      	bmi.n	801d1bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d110:	42b8      	cmp	r0, r7
 801d112:	da53      	bge.n	801d1bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d114:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801d118:	4699      	mov	r9, r3
 801d11a:	46a2      	mov	sl, r4
 801d11c:	f1b9 0f00 	cmp.w	r9, #0
 801d120:	dd54      	ble.n	801d1cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d122:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801d126:	140d      	asrs	r5, r1, #16
 801d128:	1410      	asrs	r0, r2, #16
 801d12a:	fb07 5000 	mla	r0, r7, r0, r5
 801d12e:	9d02      	ldr	r5, [sp, #8]
 801d130:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801d134:	f8ba 5000 	ldrh.w	r5, [sl]
 801d138:	122f      	asrs	r7, r5, #8
 801d13a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d13e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d142:	fb17 f706 	smulbb	r7, r7, r6
 801d146:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801d14a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d14e:	00ed      	lsls	r5, r5, #3
 801d150:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801d154:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801d158:	10c7      	asrs	r7, r0, #3
 801d15a:	b2ed      	uxtb	r5, r5
 801d15c:	00c0      	lsls	r0, r0, #3
 801d15e:	fb18 f806 	smulbb	r8, r8, r6
 801d162:	fb15 f506 	smulbb	r5, r5, r6
 801d166:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d16a:	b2c0      	uxtb	r0, r0
 801d16c:	fa1f fc8c 	uxth.w	ip, ip
 801d170:	fb07 870b 	mla	r7, r7, fp, r8
 801d174:	fb00 500b 	mla	r0, r0, fp, r5
 801d178:	b280      	uxth	r0, r0
 801d17a:	b2bf      	uxth	r7, r7
 801d17c:	f10c 0501 	add.w	r5, ip, #1
 801d180:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d184:	f107 0801 	add.w	r8, r7, #1
 801d188:	1c45      	adds	r5, r0, #1
 801d18a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d18e:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801d192:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d194:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d198:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d19c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801d1a0:	ea45 0c0c 	orr.w	ip, r5, ip
 801d1a4:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d1a8:	4401      	add	r1, r0
 801d1aa:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d1ac:	ea4c 0c08 	orr.w	ip, ip, r8
 801d1b0:	f82a cb02 	strh.w	ip, [sl], #2
 801d1b4:	4402      	add	r2, r0
 801d1b6:	f109 39ff 	add.w	r9, r9, #4294967295
 801d1ba:	e7af      	b.n	801d11c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d1bc:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801d1c0:	f04f 0800 	mov.w	r8, #0
 801d1c4:	eb03 0008 	add.w	r0, r3, r8
 801d1c8:	2800      	cmp	r0, #0
 801d1ca:	dc41      	bgt.n	801d250 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d1cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d1d0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d1d4:	9b00      	ldr	r3, [sp, #0]
 801d1d6:	2b00      	cmp	r3, #0
 801d1d8:	f340 8095 	ble.w	801d306 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801d1dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d1e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d1e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d1e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d1ea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d1ee:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d1f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d1f6:	eef0 6a62 	vmov.f32	s13, s5
 801d1fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d1fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d202:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d206:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801d20a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d20e:	eef0 6a43 	vmov.f32	s13, s6
 801d212:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d216:	ee12 2a90 	vmov	r2, s5
 801d21a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d21e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d222:	ee13 2a10 	vmov	r2, s6
 801d226:	9311      	str	r3, [sp, #68]	; 0x44
 801d228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d22a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d22e:	9312      	str	r3, [sp, #72]	; 0x48
 801d230:	9b00      	ldr	r3, [sp, #0]
 801d232:	9a03      	ldr	r2, [sp, #12]
 801d234:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d238:	3b01      	subs	r3, #1
 801d23a:	9300      	str	r3, [sp, #0]
 801d23c:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801d240:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d242:	eeb0 3a67 	vmov.f32	s6, s15
 801d246:	bf08      	it	eq
 801d248:	4613      	moveq	r3, r2
 801d24a:	eef0 2a47 	vmov.f32	s5, s14
 801d24e:	e72f      	b.n	801d0b0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801d250:	140f      	asrs	r7, r1, #16
 801d252:	d451      	bmi.n	801d2f8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d254:	f8de 5008 	ldr.w	r5, [lr, #8]
 801d258:	42bd      	cmp	r5, r7
 801d25a:	dd4d      	ble.n	801d2f8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d25c:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d260:	d44a      	bmi.n	801d2f8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d262:	f8de 000c 	ldr.w	r0, [lr, #12]
 801d266:	4560      	cmp	r0, ip
 801d268:	dd46      	ble.n	801d2f8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d26a:	b22d      	sxth	r5, r5
 801d26c:	fb0c 7505 	mla	r5, ip, r5, r7
 801d270:	9802      	ldr	r0, [sp, #8]
 801d272:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801d276:	f06f 0501 	mvn.w	r5, #1
 801d27a:	fb05 fb08 	mul.w	fp, r5, r8
 801d27e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d282:	f834 500b 	ldrh.w	r5, [r4, fp]
 801d286:	122f      	asrs	r7, r5, #8
 801d288:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d28c:	fb17 f706 	smulbb	r7, r7, r6
 801d290:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d294:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d298:	00ed      	lsls	r5, r5, #3
 801d29a:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801d29e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d2a2:	10c7      	asrs	r7, r0, #3
 801d2a4:	b2ed      	uxtb	r5, r5
 801d2a6:	00c0      	lsls	r0, r0, #3
 801d2a8:	fb19 f906 	smulbb	r9, r9, r6
 801d2ac:	fb15 f506 	smulbb	r5, r5, r6
 801d2b0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d2b4:	b2c0      	uxtb	r0, r0
 801d2b6:	fa1f fc8c 	uxth.w	ip, ip
 801d2ba:	fb07 970a 	mla	r7, r7, sl, r9
 801d2be:	fb00 500a 	mla	r0, r0, sl, r5
 801d2c2:	b2bf      	uxth	r7, r7
 801d2c4:	b280      	uxth	r0, r0
 801d2c6:	f10c 0501 	add.w	r5, ip, #1
 801d2ca:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d2ce:	f107 0901 	add.w	r9, r7, #1
 801d2d2:	1c45      	adds	r5, r0, #1
 801d2d4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d2d8:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801d2dc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d2e0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d2e4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801d2e8:	ea45 0c0c 	orr.w	ip, r5, ip
 801d2ec:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801d2f0:	ea4c 0c09 	orr.w	ip, ip, r9
 801d2f4:	f824 c00b 	strh.w	ip, [r4, fp]
 801d2f8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d2fa:	4401      	add	r1, r0
 801d2fc:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d2fe:	f108 38ff 	add.w	r8, r8, #4294967295
 801d302:	4402      	add	r2, r0
 801d304:	e75e      	b.n	801d1c4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801d306:	b005      	add	sp, #20
 801d308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d30c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d310:	b085      	sub	sp, #20
 801d312:	4693      	mov	fp, r2
 801d314:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d316:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801d318:	6870      	ldr	r0, [r6, #4]
 801d31a:	9101      	str	r1, [sp, #4]
 801d31c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d320:	fb00 2404 	mla	r4, r0, r4, r2
 801d324:	6832      	ldr	r2, [r6, #0]
 801d326:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801d32a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d32e:	682a      	ldr	r2, [r5, #0]
 801d330:	9202      	str	r2, [sp, #8]
 801d332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d336:	9a01      	ldr	r2, [sp, #4]
 801d338:	2a00      	cmp	r2, #0
 801d33a:	dc03      	bgt.n	801d344 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d33c:	f1bb 0f00 	cmp.w	fp, #0
 801d340:	f340 809a 	ble.w	801d478 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801d344:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d346:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d34a:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801d34e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d352:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d354:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d358:	2b00      	cmp	r3, #0
 801d35a:	dd0c      	ble.n	801d376 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d35c:	1406      	asrs	r6, r0, #16
 801d35e:	d405      	bmi.n	801d36c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d360:	454e      	cmp	r6, r9
 801d362:	da03      	bge.n	801d36c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d364:	1416      	asrs	r6, r2, #16
 801d366:	d401      	bmi.n	801d36c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d368:	4546      	cmp	r6, r8
 801d36a:	db05      	blt.n	801d378 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d36c:	4470      	add	r0, lr
 801d36e:	4462      	add	r2, ip
 801d370:	3b01      	subs	r3, #1
 801d372:	3402      	adds	r4, #2
 801d374:	e7f0      	b.n	801d358 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801d376:	d00f      	beq.n	801d398 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d378:	1e5e      	subs	r6, r3, #1
 801d37a:	fb0e 0706 	mla	r7, lr, r6, r0
 801d37e:	143f      	asrs	r7, r7, #16
 801d380:	d541      	bpl.n	801d406 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801d382:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801d386:	4698      	mov	r8, r3
 801d388:	9603      	str	r6, [sp, #12]
 801d38a:	f1b8 0f00 	cmp.w	r8, #0
 801d38e:	dc56      	bgt.n	801d43e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801d390:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d394:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d398:	9b01      	ldr	r3, [sp, #4]
 801d39a:	2b00      	cmp	r3, #0
 801d39c:	dd6c      	ble.n	801d478 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801d39e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d3a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d3a6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d3aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d3ac:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d3b0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d3b4:	eeb0 6a62 	vmov.f32	s12, s5
 801d3b8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d3bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d3c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d3c4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d3c8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d3cc:	eeb0 6a43 	vmov.f32	s12, s6
 801d3d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d3d4:	ee12 2a90 	vmov	r2, s5
 801d3d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d3dc:	fb92 fef3 	sdiv	lr, r2, r3
 801d3e0:	ee13 2a10 	vmov	r2, s6
 801d3e4:	fb92 fcf3 	sdiv	ip, r2, r3
 801d3e8:	9b01      	ldr	r3, [sp, #4]
 801d3ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d3ee:	3b01      	subs	r3, #1
 801d3f0:	9301      	str	r3, [sp, #4]
 801d3f2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d3f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d3f8:	eeb0 3a67 	vmov.f32	s6, s15
 801d3fc:	bf08      	it	eq
 801d3fe:	465b      	moveq	r3, fp
 801d400:	eef0 2a47 	vmov.f32	s5, s14
 801d404:	e797      	b.n	801d336 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801d406:	454f      	cmp	r7, r9
 801d408:	dabb      	bge.n	801d382 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d40a:	fb0c 2606 	mla	r6, ip, r6, r2
 801d40e:	1436      	asrs	r6, r6, #16
 801d410:	d4b7      	bmi.n	801d382 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d412:	4546      	cmp	r6, r8
 801d414:	dab5      	bge.n	801d382 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d416:	461e      	mov	r6, r3
 801d418:	46a0      	mov	r8, r4
 801d41a:	2e00      	cmp	r6, #0
 801d41c:	ddb8      	ble.n	801d390 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d41e:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801d422:	9902      	ldr	r1, [sp, #8]
 801d424:	1417      	asrs	r7, r2, #16
 801d426:	ea4f 4920 	mov.w	r9, r0, asr #16
 801d42a:	fb0a 9707 	mla	r7, sl, r7, r9
 801d42e:	4470      	add	r0, lr
 801d430:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801d434:	f828 7b02 	strh.w	r7, [r8], #2
 801d438:	4462      	add	r2, ip
 801d43a:	3e01      	subs	r6, #1
 801d43c:	e7ed      	b.n	801d41a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801d43e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d442:	d414      	bmi.n	801d46e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d444:	68ae      	ldr	r6, [r5, #8]
 801d446:	454e      	cmp	r6, r9
 801d448:	dd11      	ble.n	801d46e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d44a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801d44e:	d40e      	bmi.n	801d46e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d450:	68ef      	ldr	r7, [r5, #12]
 801d452:	4557      	cmp	r7, sl
 801d454:	dd0b      	ble.n	801d46e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d456:	b236      	sxth	r6, r6
 801d458:	fb0a 9606 	mla	r6, sl, r6, r9
 801d45c:	9f02      	ldr	r7, [sp, #8]
 801d45e:	f06f 0101 	mvn.w	r1, #1
 801d462:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801d466:	fb01 f608 	mul.w	r6, r1, r8
 801d46a:	9903      	ldr	r1, [sp, #12]
 801d46c:	538f      	strh	r7, [r1, r6]
 801d46e:	4470      	add	r0, lr
 801d470:	4462      	add	r2, ip
 801d472:	f108 38ff 	add.w	r8, r8, #4294967295
 801d476:	e788      	b.n	801d38a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d478:	b005      	add	sp, #20
 801d47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d47e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d47e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d482:	b087      	sub	sp, #28
 801d484:	468b      	mov	fp, r1
 801d486:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d488:	9203      	str	r2, [sp, #12]
 801d48a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d48e:	9204      	str	r2, [sp, #16]
 801d490:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801d494:	6841      	ldr	r1, [r0, #4]
 801d496:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801d49a:	fb01 2505 	mla	r5, r1, r5, r2
 801d49e:	6802      	ldr	r2, [r0, #0]
 801d4a0:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801d4a4:	f8d9 2000 	ldr.w	r2, [r9]
 801d4a8:	9201      	str	r2, [sp, #4]
 801d4aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d4ae:	f1bb 0f00 	cmp.w	fp, #0
 801d4b2:	dc03      	bgt.n	801d4bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d4b4:	9a03      	ldr	r2, [sp, #12]
 801d4b6:	2a00      	cmp	r2, #0
 801d4b8:	f340 8159 	ble.w	801d76e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801d4bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d4be:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801d4c2:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801d4c6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d4ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d4cc:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d4d0:	2b00      	cmp	r3, #0
 801d4d2:	dd0e      	ble.n	801d4f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d4d4:	1402      	asrs	r2, r0, #16
 801d4d6:	d405      	bmi.n	801d4e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d4d8:	42ba      	cmp	r2, r7
 801d4da:	da03      	bge.n	801d4e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d4dc:	140a      	asrs	r2, r1, #16
 801d4de:	d401      	bmi.n	801d4e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d4e0:	42b2      	cmp	r2, r6
 801d4e2:	db07      	blt.n	801d4f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d4e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d4e6:	4410      	add	r0, r2
 801d4e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d4ea:	3b01      	subs	r3, #1
 801d4ec:	4411      	add	r1, r2
 801d4ee:	3502      	adds	r5, #2
 801d4f0:	e7ee      	b.n	801d4d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d4f2:	d017      	beq.n	801d524 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d4f4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d4f6:	1e5a      	subs	r2, r3, #1
 801d4f8:	fb04 0402 	mla	r4, r4, r2, r0
 801d4fc:	1424      	asrs	r4, r4, #16
 801d4fe:	d409      	bmi.n	801d514 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d500:	42bc      	cmp	r4, r7
 801d502:	da07      	bge.n	801d514 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d504:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d506:	fb04 1202 	mla	r2, r4, r2, r1
 801d50a:	1412      	asrs	r2, r2, #16
 801d50c:	d402      	bmi.n	801d514 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d50e:	42b2      	cmp	r2, r6
 801d510:	f2c0 80bf 	blt.w	801d692 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801d514:	2700      	movs	r7, #0
 801d516:	19da      	adds	r2, r3, r7
 801d518:	2a00      	cmp	r2, #0
 801d51a:	dc3e      	bgt.n	801d59a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d51c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d520:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801d524:	f1bb 0f00 	cmp.w	fp, #0
 801d528:	f340 8121 	ble.w	801d76e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801d52c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d530:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d534:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d538:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d53a:	f1bb 0b01 	subs.w	fp, fp, #1
 801d53e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d542:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d546:	eeb0 6a62 	vmov.f32	s12, s5
 801d54a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d54e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d552:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d556:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d55a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d55e:	eeb0 6a43 	vmov.f32	s12, s6
 801d562:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d566:	ee12 2a90 	vmov	r2, s5
 801d56a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d56e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d572:	ee13 2a10 	vmov	r2, s6
 801d576:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d57a:	9313      	str	r3, [sp, #76]	; 0x4c
 801d57c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d57e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d582:	9a03      	ldr	r2, [sp, #12]
 801d584:	9314      	str	r3, [sp, #80]	; 0x50
 801d586:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d58a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d58c:	eeb0 3a67 	vmov.f32	s6, s15
 801d590:	bf08      	it	eq
 801d592:	4613      	moveq	r3, r2
 801d594:	eef0 2a47 	vmov.f32	s5, s14
 801d598:	e789      	b.n	801d4ae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801d59a:	1406      	asrs	r6, r0, #16
 801d59c:	d42d      	bmi.n	801d5fa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d59e:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801d5a2:	42b4      	cmp	r4, r6
 801d5a4:	dd29      	ble.n	801d5fa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d5a6:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801d5aa:	d426      	bmi.n	801d5fa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d5ac:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801d5b0:	4562      	cmp	r2, ip
 801d5b2:	dd22      	ble.n	801d5fa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d5b4:	b224      	sxth	r4, r4
 801d5b6:	9a01      	ldr	r2, [sp, #4]
 801d5b8:	fb0c 6404 	mla	r4, ip, r4, r6
 801d5bc:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801d5c0:	0e22      	lsrs	r2, r4, #24
 801d5c2:	d01a      	beq.n	801d5fa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d5c4:	9e04      	ldr	r6, [sp, #16]
 801d5c6:	4372      	muls	r2, r6
 801d5c8:	1c56      	adds	r6, r2, #1
 801d5ca:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d5ce:	1212      	asrs	r2, r2, #8
 801d5d0:	0a26      	lsrs	r6, r4, #8
 801d5d2:	2aff      	cmp	r2, #255	; 0xff
 801d5d4:	9605      	str	r6, [sp, #20]
 801d5d6:	d116      	bne.n	801d606 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801d5d8:	f06f 0201 	mvn.w	r2, #1
 801d5dc:	fb02 fc07 	mul.w	ip, r2, r7
 801d5e0:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801d5e4:	0962      	lsrs	r2, r4, #5
 801d5e6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d5ea:	f026 0607 	bic.w	r6, r6, #7
 801d5ee:	4316      	orrs	r6, r2
 801d5f0:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801d5f4:	4326      	orrs	r6, r4
 801d5f6:	f825 600c 	strh.w	r6, [r5, ip]
 801d5fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d5fc:	4410      	add	r0, r2
 801d5fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d600:	3f01      	subs	r7, #1
 801d602:	4411      	add	r1, r2
 801d604:	e787      	b.n	801d516 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d606:	f06f 0601 	mvn.w	r6, #1
 801d60a:	437e      	muls	r6, r7
 801d60c:	fa1f fa82 	uxth.w	sl, r2
 801d610:	f835 8006 	ldrh.w	r8, [r5, r6]
 801d614:	9602      	str	r6, [sp, #8]
 801d616:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801d61a:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801d61e:	43d2      	mvns	r2, r2
 801d620:	b2d2      	uxtb	r2, r2
 801d622:	fb1c fc0a 	smulbb	ip, ip, sl
 801d626:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801d62a:	fb0e ce02 	mla	lr, lr, r2, ip
 801d62e:	b2e4      	uxtb	r4, r4
 801d630:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801d634:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801d638:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801d63c:	fa5f f888 	uxtb.w	r8, r8
 801d640:	fb14 f40a 	smulbb	r4, r4, sl
 801d644:	fb08 4402 	mla	r4, r8, r2, r4
 801d648:	fa1f fe8e 	uxth.w	lr, lr
 801d64c:	fb16 f60a 	smulbb	r6, r6, sl
 801d650:	b2a4      	uxth	r4, r4
 801d652:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801d656:	fb0c 6c02 	mla	ip, ip, r2, r6
 801d65a:	f10e 0201 	add.w	r2, lr, #1
 801d65e:	1c66      	adds	r6, r4, #1
 801d660:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801d664:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801d668:	fa1f fc8c 	uxth.w	ip, ip
 801d66c:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d670:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801d674:	ea46 0e0e 	orr.w	lr, r6, lr
 801d678:	f10c 0601 	add.w	r6, ip, #1
 801d67c:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801d680:	0976      	lsrs	r6, r6, #5
 801d682:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d686:	9a02      	ldr	r2, [sp, #8]
 801d688:	ea4e 0e06 	orr.w	lr, lr, r6
 801d68c:	f825 e002 	strh.w	lr, [r5, r2]
 801d690:	e7b3      	b.n	801d5fa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d692:	f04f 0800 	mov.w	r8, #0
 801d696:	eba3 0208 	sub.w	r2, r3, r8
 801d69a:	2a00      	cmp	r2, #0
 801d69c:	f77f af3e 	ble.w	801d51c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d6a0:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801d6a4:	1404      	asrs	r4, r0, #16
 801d6a6:	140a      	asrs	r2, r1, #16
 801d6a8:	fb06 4202 	mla	r2, r6, r2, r4
 801d6ac:	9c01      	ldr	r4, [sp, #4]
 801d6ae:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801d6b2:	0e22      	lsrs	r2, r4, #24
 801d6b4:	d016      	beq.n	801d6e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801d6b6:	9e04      	ldr	r6, [sp, #16]
 801d6b8:	4372      	muls	r2, r6
 801d6ba:	1c56      	adds	r6, r2, #1
 801d6bc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d6c0:	1212      	asrs	r2, r2, #8
 801d6c2:	2aff      	cmp	r2, #255	; 0xff
 801d6c4:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801d6c8:	d113      	bne.n	801d6f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801d6ca:	0962      	lsrs	r2, r4, #5
 801d6cc:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801d6d0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d6d4:	f026 0607 	bic.w	r6, r6, #7
 801d6d8:	4316      	orrs	r6, r2
 801d6da:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801d6de:	4326      	orrs	r6, r4
 801d6e0:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801d6e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d6e6:	4410      	add	r0, r2
 801d6e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d6ea:	f108 0801 	add.w	r8, r8, #1
 801d6ee:	4411      	add	r1, r2
 801d6f0:	e7d1      	b.n	801d696 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801d6f2:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801d6f6:	fa1f fa82 	uxth.w	sl, r2
 801d6fa:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d6fe:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801d702:	43d2      	mvns	r2, r2
 801d704:	b2d2      	uxtb	r2, r2
 801d706:	fb17 f70a 	smulbb	r7, r7, sl
 801d70a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d70e:	fb0c 7c02 	mla	ip, ip, r2, r7
 801d712:	b2e4      	uxtb	r4, r4
 801d714:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801d718:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d71c:	fa5f fe8e 	uxtb.w	lr, lr
 801d720:	fb14 f40a 	smulbb	r4, r4, sl
 801d724:	fb0e 4402 	mla	r4, lr, r2, r4
 801d728:	b2f6      	uxtb	r6, r6
 801d72a:	fa1f fc8c 	uxth.w	ip, ip
 801d72e:	fb16 f60a 	smulbb	r6, r6, sl
 801d732:	b2a4      	uxth	r4, r4
 801d734:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d738:	fb07 6702 	mla	r7, r7, r2, r6
 801d73c:	f10c 0201 	add.w	r2, ip, #1
 801d740:	1c66      	adds	r6, r4, #1
 801d742:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801d746:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801d74a:	b2bf      	uxth	r7, r7
 801d74c:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d750:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d754:	ea46 0c0c 	orr.w	ip, r6, ip
 801d758:	1c7e      	adds	r6, r7, #1
 801d75a:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801d75e:	0976      	lsrs	r6, r6, #5
 801d760:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d764:	ea4c 0c06 	orr.w	ip, ip, r6
 801d768:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801d76c:	e7ba      	b.n	801d6e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801d76e:	b007      	add	sp, #28
 801d770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d774 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d778:	b085      	sub	sp, #20
 801d77a:	468b      	mov	fp, r1
 801d77c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d77e:	9203      	str	r2, [sp, #12]
 801d780:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d784:	6841      	ldr	r1, [r0, #4]
 801d786:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801d78a:	fb01 2404 	mla	r4, r1, r4, r2
 801d78e:	6802      	ldr	r2, [r0, #0]
 801d790:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d794:	f8d8 2000 	ldr.w	r2, [r8]
 801d798:	9201      	str	r2, [sp, #4]
 801d79a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d79e:	f1bb 0f00 	cmp.w	fp, #0
 801d7a2:	dc03      	bgt.n	801d7ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d7a4:	9a03      	ldr	r2, [sp, #12]
 801d7a6:	2a00      	cmp	r2, #0
 801d7a8:	f340 814f 	ble.w	801da4a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801d7ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d7ae:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801d7b2:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801d7b6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d7ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d7bc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d7c0:	2b00      	cmp	r3, #0
 801d7c2:	dd0e      	ble.n	801d7e2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d7c4:	1408      	asrs	r0, r1, #16
 801d7c6:	d405      	bmi.n	801d7d4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d7c8:	42b8      	cmp	r0, r7
 801d7ca:	da03      	bge.n	801d7d4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d7cc:	1410      	asrs	r0, r2, #16
 801d7ce:	d401      	bmi.n	801d7d4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d7d0:	42b0      	cmp	r0, r6
 801d7d2:	db07      	blt.n	801d7e4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d7d4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d7d6:	4401      	add	r1, r0
 801d7d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d7da:	3b01      	subs	r3, #1
 801d7dc:	4402      	add	r2, r0
 801d7de:	3402      	adds	r4, #2
 801d7e0:	e7ee      	b.n	801d7c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801d7e2:	d017      	beq.n	801d814 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d7e4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d7e6:	1e58      	subs	r0, r3, #1
 801d7e8:	fb05 1500 	mla	r5, r5, r0, r1
 801d7ec:	142d      	asrs	r5, r5, #16
 801d7ee:	d409      	bmi.n	801d804 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d7f0:	42bd      	cmp	r5, r7
 801d7f2:	da07      	bge.n	801d804 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d7f4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d7f6:	fb05 2000 	mla	r0, r5, r0, r2
 801d7fa:	1400      	asrs	r0, r0, #16
 801d7fc:	d402      	bmi.n	801d804 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d7fe:	42b0      	cmp	r0, r6
 801d800:	f2c0 80ba 	blt.w	801d978 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801d804:	2600      	movs	r6, #0
 801d806:	1998      	adds	r0, r3, r6
 801d808:	2800      	cmp	r0, #0
 801d80a:	dc3e      	bgt.n	801d88a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801d80c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d810:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d814:	f1bb 0f00 	cmp.w	fp, #0
 801d818:	f340 8117 	ble.w	801da4a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801d81c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d820:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d824:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d828:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d82a:	f1bb 0b01 	subs.w	fp, fp, #1
 801d82e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d832:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d836:	eeb0 6a62 	vmov.f32	s12, s5
 801d83a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d83e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d842:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d846:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d84a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d84e:	eeb0 6a43 	vmov.f32	s12, s6
 801d852:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d856:	ee12 2a90 	vmov	r2, s5
 801d85a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d85e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d862:	ee13 2a10 	vmov	r2, s6
 801d866:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d86a:	9311      	str	r3, [sp, #68]	; 0x44
 801d86c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d86e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d872:	9a03      	ldr	r2, [sp, #12]
 801d874:	9312      	str	r3, [sp, #72]	; 0x48
 801d876:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d87a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d87c:	eeb0 3a67 	vmov.f32	s6, s15
 801d880:	bf08      	it	eq
 801d882:	4613      	moveq	r3, r2
 801d884:	eef0 2a47 	vmov.f32	s5, s14
 801d888:	e789      	b.n	801d79e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801d88a:	140f      	asrs	r7, r1, #16
 801d88c:	d424      	bmi.n	801d8d8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d88e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801d892:	42bd      	cmp	r5, r7
 801d894:	dd20      	ble.n	801d8d8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d896:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d89a:	d41d      	bmi.n	801d8d8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d89c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801d8a0:	4560      	cmp	r0, ip
 801d8a2:	dd19      	ble.n	801d8d8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d8a4:	b22d      	sxth	r5, r5
 801d8a6:	fb0c 7505 	mla	r5, ip, r5, r7
 801d8aa:	9801      	ldr	r0, [sp, #4]
 801d8ac:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801d8b0:	0e07      	lsrs	r7, r0, #24
 801d8b2:	2fff      	cmp	r7, #255	; 0xff
 801d8b4:	d116      	bne.n	801d8e4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801d8b6:	f06f 0501 	mvn.w	r5, #1
 801d8ba:	fb05 f706 	mul.w	r7, r5, r6
 801d8be:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801d8c2:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801d8c6:	0945      	lsrs	r5, r0, #5
 801d8c8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d8cc:	ea4c 0505 	orr.w	r5, ip, r5
 801d8d0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801d8d4:	4305      	orrs	r5, r0
 801d8d6:	53e5      	strh	r5, [r4, r7]
 801d8d8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d8da:	4401      	add	r1, r0
 801d8dc:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d8de:	3e01      	subs	r6, #1
 801d8e0:	4402      	add	r2, r0
 801d8e2:	e790      	b.n	801d806 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d8e4:	b2fd      	uxtb	r5, r7
 801d8e6:	2f00      	cmp	r7, #0
 801d8e8:	d0f6      	beq.n	801d8d8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d8ea:	f06f 0701 	mvn.w	r7, #1
 801d8ee:	4377      	muls	r7, r6
 801d8f0:	fa1f f985 	uxth.w	r9, r5
 801d8f4:	f834 e007 	ldrh.w	lr, [r4, r7]
 801d8f8:	9702      	str	r7, [sp, #8]
 801d8fa:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d8fe:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801d902:	43ed      	mvns	r5, r5
 801d904:	b2ed      	uxtb	r5, r5
 801d906:	fb17 f709 	smulbb	r7, r7, r9
 801d90a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d90e:	fb0c 7c05 	mla	ip, ip, r5, r7
 801d912:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801d916:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801d91a:	b2c0      	uxtb	r0, r0
 801d91c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d920:	fa5f fe8e 	uxtb.w	lr, lr
 801d924:	fb10 f009 	smulbb	r0, r0, r9
 801d928:	fb0e 0005 	mla	r0, lr, r5, r0
 801d92c:	b280      	uxth	r0, r0
 801d92e:	fa1f fc8c 	uxth.w	ip, ip
 801d932:	fb1a fa09 	smulbb	sl, sl, r9
 801d936:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d93a:	fb07 a705 	mla	r7, r7, r5, sl
 801d93e:	f100 0a01 	add.w	sl, r0, #1
 801d942:	f10c 0501 	add.w	r5, ip, #1
 801d946:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801d94a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d94e:	b2bf      	uxth	r7, r7
 801d950:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d954:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d958:	ea4a 0c0c 	orr.w	ip, sl, ip
 801d95c:	f107 0a01 	add.w	sl, r7, #1
 801d960:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801d964:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d968:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d96c:	9802      	ldr	r0, [sp, #8]
 801d96e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801d972:	f824 c000 	strh.w	ip, [r4, r0]
 801d976:	e7af      	b.n	801d8d8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d978:	f04f 0e00 	mov.w	lr, #0
 801d97c:	eba3 000e 	sub.w	r0, r3, lr
 801d980:	2800      	cmp	r0, #0
 801d982:	f77f af43 	ble.w	801d80c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d986:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801d98a:	140d      	asrs	r5, r1, #16
 801d98c:	1410      	asrs	r0, r2, #16
 801d98e:	fb06 5000 	mla	r0, r6, r0, r5
 801d992:	9d01      	ldr	r5, [sp, #4]
 801d994:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801d998:	0e2e      	lsrs	r6, r5, #24
 801d99a:	2eff      	cmp	r6, #255	; 0xff
 801d99c:	d112      	bne.n	801d9c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801d99e:	482c      	ldr	r0, [pc, #176]	; (801da50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801d9a0:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801d9a4:	0968      	lsrs	r0, r5, #5
 801d9a6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d9aa:	4330      	orrs	r0, r6
 801d9ac:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801d9b0:	4328      	orrs	r0, r5
 801d9b2:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801d9b6:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d9b8:	4401      	add	r1, r0
 801d9ba:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d9bc:	f10e 0e01 	add.w	lr, lr, #1
 801d9c0:	4402      	add	r2, r0
 801d9c2:	e7db      	b.n	801d97c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d9c4:	b2f0      	uxtb	r0, r6
 801d9c6:	2e00      	cmp	r6, #0
 801d9c8:	d0f5      	beq.n	801d9b6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801d9ca:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801d9ce:	fa1f f980 	uxth.w	r9, r0
 801d9d2:	ea4f 272c 	mov.w	r7, ip, asr #8
 801d9d6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801d9da:	43c0      	mvns	r0, r0
 801d9dc:	b2c0      	uxtb	r0, r0
 801d9de:	fb16 f609 	smulbb	r6, r6, r9
 801d9e2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d9e6:	fb07 6700 	mla	r7, r7, r0, r6
 801d9ea:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801d9ee:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801d9f2:	b2ed      	uxtb	r5, r5
 801d9f4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d9f8:	fa5f fc8c 	uxtb.w	ip, ip
 801d9fc:	fb15 f509 	smulbb	r5, r5, r9
 801da00:	fb0c 5500 	mla	r5, ip, r0, r5
 801da04:	b2bf      	uxth	r7, r7
 801da06:	fb1a fa09 	smulbb	sl, sl, r9
 801da0a:	b2ad      	uxth	r5, r5
 801da0c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801da10:	fb06 a600 	mla	r6, r6, r0, sl
 801da14:	1c78      	adds	r0, r7, #1
 801da16:	f105 0a01 	add.w	sl, r5, #1
 801da1a:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801da1e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801da22:	b2b6      	uxth	r6, r6
 801da24:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801da28:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801da2c:	ea4a 0707 	orr.w	r7, sl, r7
 801da30:	f106 0a01 	add.w	sl, r6, #1
 801da34:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801da38:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801da3c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801da40:	ea47 070a 	orr.w	r7, r7, sl
 801da44:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801da48:	e7b5      	b.n	801d9b6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801da4a:	b005      	add	sp, #20
 801da4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da50:	fffff800 	.word	0xfffff800

0801da54 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801da54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da58:	b087      	sub	sp, #28
 801da5a:	468b      	mov	fp, r1
 801da5c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801da5e:	9203      	str	r2, [sp, #12]
 801da60:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801da64:	9204      	str	r2, [sp, #16]
 801da66:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801da6a:	6841      	ldr	r1, [r0, #4]
 801da6c:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801da70:	fb01 2404 	mla	r4, r1, r4, r2
 801da74:	6802      	ldr	r2, [r0, #0]
 801da76:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801da7a:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801da7e:	3201      	adds	r2, #1
 801da80:	f022 0201 	bic.w	r2, r2, #1
 801da84:	9200      	str	r2, [sp, #0]
 801da86:	f8d9 2000 	ldr.w	r2, [r9]
 801da8a:	9201      	str	r2, [sp, #4]
 801da8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801da90:	f1bb 0f00 	cmp.w	fp, #0
 801da94:	dc03      	bgt.n	801da9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801da96:	9a03      	ldr	r2, [sp, #12]
 801da98:	2a00      	cmp	r2, #0
 801da9a:	f340 8169 	ble.w	801dd70 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801da9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801daa0:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801daa4:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801daa8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801daac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801daae:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801dab2:	2b00      	cmp	r3, #0
 801dab4:	dd0e      	ble.n	801dad4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801dab6:	1402      	asrs	r2, r0, #16
 801dab8:	d405      	bmi.n	801dac6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801daba:	42ba      	cmp	r2, r7
 801dabc:	da03      	bge.n	801dac6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dabe:	140a      	asrs	r2, r1, #16
 801dac0:	d401      	bmi.n	801dac6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dac2:	42b2      	cmp	r2, r6
 801dac4:	db07      	blt.n	801dad6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801dac6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dac8:	4410      	add	r0, r2
 801daca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dacc:	3b01      	subs	r3, #1
 801dace:	4411      	add	r1, r2
 801dad0:	3402      	adds	r4, #2
 801dad2:	e7ee      	b.n	801dab2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801dad4:	d017      	beq.n	801db06 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801dad6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801dad8:	1e5a      	subs	r2, r3, #1
 801dada:	fb05 0502 	mla	r5, r5, r2, r0
 801dade:	142d      	asrs	r5, r5, #16
 801dae0:	d409      	bmi.n	801daf6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801dae2:	42bd      	cmp	r5, r7
 801dae4:	da07      	bge.n	801daf6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801dae6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801dae8:	fb05 1202 	mla	r2, r5, r2, r1
 801daec:	1412      	asrs	r2, r2, #16
 801daee:	d402      	bmi.n	801daf6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801daf0:	42b2      	cmp	r2, r6
 801daf2:	f2c0 80c7 	blt.w	801dc84 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801daf6:	2700      	movs	r7, #0
 801daf8:	19da      	adds	r2, r3, r7
 801dafa:	2a00      	cmp	r2, #0
 801dafc:	dc3e      	bgt.n	801db7c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801dafe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801db02:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801db06:	f1bb 0f00 	cmp.w	fp, #0
 801db0a:	f340 8131 	ble.w	801dd70 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801db0e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801db12:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801db16:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801db1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801db1c:	f1bb 0b01 	subs.w	fp, fp, #1
 801db20:	ee31 1a05 	vadd.f32	s2, s2, s10
 801db24:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801db28:	eeb0 6a62 	vmov.f32	s12, s5
 801db2c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801db30:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801db34:	ee77 2a62 	vsub.f32	s5, s14, s5
 801db38:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801db3c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801db40:	eeb0 6a43 	vmov.f32	s12, s6
 801db44:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801db48:	ee12 2a90 	vmov	r2, s5
 801db4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801db50:	fb92 f3f3 	sdiv	r3, r2, r3
 801db54:	ee13 2a10 	vmov	r2, s6
 801db58:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801db5c:	9313      	str	r3, [sp, #76]	; 0x4c
 801db5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801db60:	fb92 f3f3 	sdiv	r3, r2, r3
 801db64:	9a03      	ldr	r2, [sp, #12]
 801db66:	9314      	str	r3, [sp, #80]	; 0x50
 801db68:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801db6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801db6e:	eeb0 3a67 	vmov.f32	s6, s15
 801db72:	bf08      	it	eq
 801db74:	4613      	moveq	r3, r2
 801db76:	eef0 2a47 	vmov.f32	s5, s14
 801db7a:	e789      	b.n	801da90 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801db7c:	1405      	asrs	r5, r0, #16
 801db7e:	d435      	bmi.n	801dbec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801db80:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801db84:	42aa      	cmp	r2, r5
 801db86:	dd31      	ble.n	801dbec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801db88:	140e      	asrs	r6, r1, #16
 801db8a:	d42f      	bmi.n	801dbec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801db8c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801db90:	42b2      	cmp	r2, r6
 801db92:	dd2b      	ble.n	801dbec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801db94:	9a00      	ldr	r2, [sp, #0]
 801db96:	fb06 5502 	mla	r5, r6, r2, r5
 801db9a:	086a      	lsrs	r2, r5, #1
 801db9c:	9e01      	ldr	r6, [sp, #4]
 801db9e:	5cb2      	ldrb	r2, [r6, r2]
 801dba0:	07ee      	lsls	r6, r5, #31
 801dba2:	bf54      	ite	pl
 801dba4:	f002 020f 	andpl.w	r2, r2, #15
 801dba8:	1112      	asrmi	r2, r2, #4
 801dbaa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801dbae:	b2d2      	uxtb	r2, r2
 801dbb0:	b1e2      	cbz	r2, 801dbec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801dbb2:	9d04      	ldr	r5, [sp, #16]
 801dbb4:	436a      	muls	r2, r5
 801dbb6:	1c55      	adds	r5, r2, #1
 801dbb8:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801dbbc:	4d6e      	ldr	r5, [pc, #440]	; (801dd78 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801dbbe:	682d      	ldr	r5, [r5, #0]
 801dbc0:	1212      	asrs	r2, r2, #8
 801dbc2:	0a2e      	lsrs	r6, r5, #8
 801dbc4:	2aff      	cmp	r2, #255	; 0xff
 801dbc6:	9605      	str	r6, [sp, #20]
 801dbc8:	d116      	bne.n	801dbf8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801dbca:	f06f 0201 	mvn.w	r2, #1
 801dbce:	fb02 fc07 	mul.w	ip, r2, r7
 801dbd2:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801dbd6:	096a      	lsrs	r2, r5, #5
 801dbd8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801dbdc:	f026 0607 	bic.w	r6, r6, #7
 801dbe0:	4316      	orrs	r6, r2
 801dbe2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801dbe6:	432e      	orrs	r6, r5
 801dbe8:	f824 600c 	strh.w	r6, [r4, ip]
 801dbec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dbee:	4410      	add	r0, r2
 801dbf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dbf2:	3f01      	subs	r7, #1
 801dbf4:	4411      	add	r1, r2
 801dbf6:	e77f      	b.n	801daf8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801dbf8:	f06f 0601 	mvn.w	r6, #1
 801dbfc:	437e      	muls	r6, r7
 801dbfe:	fa1f fa82 	uxth.w	sl, r2
 801dc02:	f834 8006 	ldrh.w	r8, [r4, r6]
 801dc06:	9602      	str	r6, [sp, #8]
 801dc08:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801dc0c:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801dc10:	43d2      	mvns	r2, r2
 801dc12:	b2d2      	uxtb	r2, r2
 801dc14:	fb1c fc0a 	smulbb	ip, ip, sl
 801dc18:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801dc1c:	fb0e ce02 	mla	lr, lr, r2, ip
 801dc20:	b2ed      	uxtb	r5, r5
 801dc22:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801dc26:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801dc2a:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801dc2e:	fa5f f888 	uxtb.w	r8, r8
 801dc32:	fb15 f50a 	smulbb	r5, r5, sl
 801dc36:	fb08 5502 	mla	r5, r8, r2, r5
 801dc3a:	fa1f fe8e 	uxth.w	lr, lr
 801dc3e:	fb16 f60a 	smulbb	r6, r6, sl
 801dc42:	b2ad      	uxth	r5, r5
 801dc44:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801dc48:	fb0c 6c02 	mla	ip, ip, r2, r6
 801dc4c:	f10e 0201 	add.w	r2, lr, #1
 801dc50:	1c6e      	adds	r6, r5, #1
 801dc52:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801dc56:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801dc5a:	fa1f fc8c 	uxth.w	ip, ip
 801dc5e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801dc62:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801dc66:	ea46 0e0e 	orr.w	lr, r6, lr
 801dc6a:	f10c 0601 	add.w	r6, ip, #1
 801dc6e:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801dc72:	0976      	lsrs	r6, r6, #5
 801dc74:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801dc78:	9a02      	ldr	r2, [sp, #8]
 801dc7a:	ea4e 0e06 	orr.w	lr, lr, r6
 801dc7e:	f824 e002 	strh.w	lr, [r4, r2]
 801dc82:	e7b3      	b.n	801dbec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801dc84:	f04f 0800 	mov.w	r8, #0
 801dc88:	eba3 0208 	sub.w	r2, r3, r8
 801dc8c:	2a00      	cmp	r2, #0
 801dc8e:	f77f af36 	ble.w	801dafe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801dc92:	9e00      	ldr	r6, [sp, #0]
 801dc94:	1402      	asrs	r2, r0, #16
 801dc96:	140d      	asrs	r5, r1, #16
 801dc98:	fb06 2505 	mla	r5, r6, r5, r2
 801dc9c:	086a      	lsrs	r2, r5, #1
 801dc9e:	9e01      	ldr	r6, [sp, #4]
 801dca0:	5cb2      	ldrb	r2, [r6, r2]
 801dca2:	07ed      	lsls	r5, r5, #31
 801dca4:	bf54      	ite	pl
 801dca6:	f002 020f 	andpl.w	r2, r2, #15
 801dcaa:	1112      	asrmi	r2, r2, #4
 801dcac:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801dcb0:	b2d2      	uxtb	r2, r2
 801dcb2:	b1c2      	cbz	r2, 801dce6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801dcb4:	9d04      	ldr	r5, [sp, #16]
 801dcb6:	436a      	muls	r2, r5
 801dcb8:	1c55      	adds	r5, r2, #1
 801dcba:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801dcbe:	4d2e      	ldr	r5, [pc, #184]	; (801dd78 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801dcc0:	1212      	asrs	r2, r2, #8
 801dcc2:	682e      	ldr	r6, [r5, #0]
 801dcc4:	2aff      	cmp	r2, #255	; 0xff
 801dcc6:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801dcca:	d113      	bne.n	801dcf4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801dccc:	0972      	lsrs	r2, r6, #5
 801dcce:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801dcd2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801dcd6:	f025 0507 	bic.w	r5, r5, #7
 801dcda:	4315      	orrs	r5, r2
 801dcdc:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801dce0:	4335      	orrs	r5, r6
 801dce2:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801dce6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dce8:	4410      	add	r0, r2
 801dcea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dcec:	f108 0801 	add.w	r8, r8, #1
 801dcf0:	4411      	add	r1, r2
 801dcf2:	e7c9      	b.n	801dc88 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801dcf4:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801dcf8:	fa1f fa82 	uxth.w	sl, r2
 801dcfc:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801dd00:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801dd04:	43d2      	mvns	r2, r2
 801dd06:	b2d2      	uxtb	r2, r2
 801dd08:	fb17 f70a 	smulbb	r7, r7, sl
 801dd0c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801dd10:	fb0c 7c02 	mla	ip, ip, r2, r7
 801dd14:	b2f6      	uxtb	r6, r6
 801dd16:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801dd1a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801dd1e:	fa5f fe8e 	uxtb.w	lr, lr
 801dd22:	fb16 f60a 	smulbb	r6, r6, sl
 801dd26:	fb0e 6602 	mla	r6, lr, r2, r6
 801dd2a:	b2ed      	uxtb	r5, r5
 801dd2c:	fa1f fc8c 	uxth.w	ip, ip
 801dd30:	fb15 f50a 	smulbb	r5, r5, sl
 801dd34:	b2b6      	uxth	r6, r6
 801dd36:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801dd3a:	fb07 5702 	mla	r7, r7, r2, r5
 801dd3e:	f10c 0201 	add.w	r2, ip, #1
 801dd42:	1c75      	adds	r5, r6, #1
 801dd44:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801dd48:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801dd4c:	b2bf      	uxth	r7, r7
 801dd4e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801dd52:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801dd56:	ea45 0c0c 	orr.w	ip, r5, ip
 801dd5a:	1c7d      	adds	r5, r7, #1
 801dd5c:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801dd60:	096d      	lsrs	r5, r5, #5
 801dd62:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801dd66:	ea4c 0c05 	orr.w	ip, ip, r5
 801dd6a:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801dd6e:	e7ba      	b.n	801dce6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801dd70:	b007      	add	sp, #28
 801dd72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd76:	bf00      	nop
 801dd78:	2000c44c 	.word	0x2000c44c

0801dd7c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd80:	b087      	sub	sp, #28
 801dd82:	f8df 830c 	ldr.w	r8, [pc, #780]	; 801e090 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801dd86:	9815      	ldr	r0, [sp, #84]	; 0x54
 801dd88:	9205      	str	r2, [sp, #20]
 801dd8a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801dd8e:	9101      	str	r1, [sp, #4]
 801dd90:	6841      	ldr	r1, [r0, #4]
 801dd92:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801dd96:	fb01 2404 	mla	r4, r1, r4, r2
 801dd9a:	6802      	ldr	r2, [r0, #0]
 801dd9c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801dda0:	f8db 2008 	ldr.w	r2, [fp, #8]
 801dda4:	3201      	adds	r2, #1
 801dda6:	f022 0201 	bic.w	r2, r2, #1
 801ddaa:	9202      	str	r2, [sp, #8]
 801ddac:	f8db 2000 	ldr.w	r2, [fp]
 801ddb0:	9203      	str	r2, [sp, #12]
 801ddb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ddb6:	9a01      	ldr	r2, [sp, #4]
 801ddb8:	2a00      	cmp	r2, #0
 801ddba:	dc03      	bgt.n	801ddc4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ddbc:	9a05      	ldr	r2, [sp, #20]
 801ddbe:	2a00      	cmp	r2, #0
 801ddc0:	f340 8162 	ble.w	801e088 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801ddc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ddc6:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801ddca:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801ddce:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ddd2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ddd4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ddd8:	2b00      	cmp	r3, #0
 801ddda:	dd0e      	ble.n	801ddfa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801dddc:	1402      	asrs	r2, r0, #16
 801ddde:	d405      	bmi.n	801ddec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801dde0:	42ba      	cmp	r2, r7
 801dde2:	da03      	bge.n	801ddec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801dde4:	140a      	asrs	r2, r1, #16
 801dde6:	d401      	bmi.n	801ddec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801dde8:	42b2      	cmp	r2, r6
 801ddea:	db07      	blt.n	801ddfc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ddec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ddee:	4410      	add	r0, r2
 801ddf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ddf2:	3b01      	subs	r3, #1
 801ddf4:	4411      	add	r1, r2
 801ddf6:	3402      	adds	r4, #2
 801ddf8:	e7ee      	b.n	801ddd8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ddfa:	d017      	beq.n	801de2c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801ddfc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ddfe:	1e5a      	subs	r2, r3, #1
 801de00:	fb05 0502 	mla	r5, r5, r2, r0
 801de04:	142d      	asrs	r5, r5, #16
 801de06:	d409      	bmi.n	801de1c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801de08:	42bd      	cmp	r5, r7
 801de0a:	da07      	bge.n	801de1c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801de0c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801de0e:	fb05 1202 	mla	r2, r5, r2, r1
 801de12:	1412      	asrs	r2, r2, #16
 801de14:	d402      	bmi.n	801de1c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801de16:	42b2      	cmp	r2, r6
 801de18:	f2c0 80c3 	blt.w	801dfa2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801de1c:	2500      	movs	r5, #0
 801de1e:	195a      	adds	r2, r3, r5
 801de20:	2a00      	cmp	r2, #0
 801de22:	dc3f      	bgt.n	801dea4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801de24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801de28:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801de2c:	9b01      	ldr	r3, [sp, #4]
 801de2e:	2b00      	cmp	r3, #0
 801de30:	f340 812a 	ble.w	801e088 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801de34:	ee30 0a04 	vadd.f32	s0, s0, s8
 801de38:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801de3c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801de40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801de42:	ee31 1a05 	vadd.f32	s2, s2, s10
 801de46:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801de4a:	eeb0 6a62 	vmov.f32	s12, s5
 801de4e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801de52:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801de56:	ee77 2a62 	vsub.f32	s5, s14, s5
 801de5a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801de5e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801de62:	eeb0 6a43 	vmov.f32	s12, s6
 801de66:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801de6a:	ee12 2a90 	vmov	r2, s5
 801de6e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801de72:	fb92 f3f3 	sdiv	r3, r2, r3
 801de76:	ee13 2a10 	vmov	r2, s6
 801de7a:	9313      	str	r3, [sp, #76]	; 0x4c
 801de7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801de7e:	fb92 f3f3 	sdiv	r3, r2, r3
 801de82:	9314      	str	r3, [sp, #80]	; 0x50
 801de84:	9b01      	ldr	r3, [sp, #4]
 801de86:	9a05      	ldr	r2, [sp, #20]
 801de88:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801de8c:	3b01      	subs	r3, #1
 801de8e:	9301      	str	r3, [sp, #4]
 801de90:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801de94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801de96:	eeb0 3a67 	vmov.f32	s6, s15
 801de9a:	bf08      	it	eq
 801de9c:	4613      	moveq	r3, r2
 801de9e:	eef0 2a47 	vmov.f32	s5, s14
 801dea2:	e788      	b.n	801ddb6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801dea4:	1406      	asrs	r6, r0, #16
 801dea6:	d42c      	bmi.n	801df02 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801dea8:	f8db 2008 	ldr.w	r2, [fp, #8]
 801deac:	42b2      	cmp	r2, r6
 801deae:	dd28      	ble.n	801df02 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801deb0:	140f      	asrs	r7, r1, #16
 801deb2:	d426      	bmi.n	801df02 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801deb4:	f8db 200c 	ldr.w	r2, [fp, #12]
 801deb8:	42ba      	cmp	r2, r7
 801deba:	dd22      	ble.n	801df02 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801debc:	9a02      	ldr	r2, [sp, #8]
 801debe:	fb07 6602 	mla	r6, r7, r2, r6
 801dec2:	0872      	lsrs	r2, r6, #1
 801dec4:	9f03      	ldr	r7, [sp, #12]
 801dec6:	5cba      	ldrb	r2, [r7, r2]
 801dec8:	07f6      	lsls	r6, r6, #31
 801deca:	bf54      	ite	pl
 801decc:	f002 020f 	andpl.w	r2, r2, #15
 801ded0:	1112      	asrmi	r2, r2, #4
 801ded2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ded6:	b2d2      	uxtb	r2, r2
 801ded8:	2aff      	cmp	r2, #255	; 0xff
 801deda:	d118      	bne.n	801df0e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801dedc:	f8d8 2000 	ldr.w	r2, [r8]
 801dee0:	f06f 0601 	mvn.w	r6, #1
 801dee4:	fb06 f705 	mul.w	r7, r6, r5
 801dee8:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801deec:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801def0:	0956      	lsrs	r6, r2, #5
 801def2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801def6:	ea4c 0606 	orr.w	r6, ip, r6
 801defa:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801defe:	4316      	orrs	r6, r2
 801df00:	53e6      	strh	r6, [r4, r7]
 801df02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801df04:	4410      	add	r0, r2
 801df06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801df08:	3d01      	subs	r5, #1
 801df0a:	4411      	add	r1, r2
 801df0c:	e787      	b.n	801de1e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801df0e:	2a00      	cmp	r2, #0
 801df10:	d0f7      	beq.n	801df02 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801df12:	f06f 0601 	mvn.w	r6, #1
 801df16:	436e      	muls	r6, r5
 801df18:	f8d8 c000 	ldr.w	ip, [r8]
 801df1c:	f834 e006 	ldrh.w	lr, [r4, r6]
 801df20:	9604      	str	r6, [sp, #16]
 801df22:	fa1f f982 	uxth.w	r9, r2
 801df26:	ea4f 272e 	mov.w	r7, lr, asr #8
 801df2a:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801df2e:	43d2      	mvns	r2, r2
 801df30:	b2d2      	uxtb	r2, r2
 801df32:	fb16 f609 	smulbb	r6, r6, r9
 801df36:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801df3a:	fb07 6702 	mla	r7, r7, r2, r6
 801df3e:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801df42:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801df46:	fa5f fc8c 	uxtb.w	ip, ip
 801df4a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801df4e:	fa5f fe8e 	uxtb.w	lr, lr
 801df52:	fb1c fc09 	smulbb	ip, ip, r9
 801df56:	fb0e cc02 	mla	ip, lr, r2, ip
 801df5a:	b2bf      	uxth	r7, r7
 801df5c:	fb1a fa09 	smulbb	sl, sl, r9
 801df60:	fa1f fc8c 	uxth.w	ip, ip
 801df64:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801df68:	fb06 a602 	mla	r6, r6, r2, sl
 801df6c:	1c7a      	adds	r2, r7, #1
 801df6e:	f10c 0a01 	add.w	sl, ip, #1
 801df72:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801df76:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801df7a:	b2b6      	uxth	r6, r6
 801df7c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801df80:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801df84:	ea4a 0707 	orr.w	r7, sl, r7
 801df88:	f106 0a01 	add.w	sl, r6, #1
 801df8c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801df90:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801df94:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801df98:	9a04      	ldr	r2, [sp, #16]
 801df9a:	ea47 070a 	orr.w	r7, r7, sl
 801df9e:	52a7      	strh	r7, [r4, r2]
 801dfa0:	e7af      	b.n	801df02 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801dfa2:	f04f 0e00 	mov.w	lr, #0
 801dfa6:	eba3 020e 	sub.w	r2, r3, lr
 801dfaa:	2a00      	cmp	r2, #0
 801dfac:	f77f af3a 	ble.w	801de24 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801dfb0:	9e02      	ldr	r6, [sp, #8]
 801dfb2:	1402      	asrs	r2, r0, #16
 801dfb4:	140d      	asrs	r5, r1, #16
 801dfb6:	fb06 2505 	mla	r5, r6, r5, r2
 801dfba:	086a      	lsrs	r2, r5, #1
 801dfbc:	9e03      	ldr	r6, [sp, #12]
 801dfbe:	5cb2      	ldrb	r2, [r6, r2]
 801dfc0:	07ed      	lsls	r5, r5, #31
 801dfc2:	bf54      	ite	pl
 801dfc4:	f002 020f 	andpl.w	r2, r2, #15
 801dfc8:	1112      	asrmi	r2, r2, #4
 801dfca:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801dfce:	b2d2      	uxtb	r2, r2
 801dfd0:	2aff      	cmp	r2, #255	; 0xff
 801dfd2:	d115      	bne.n	801e000 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801dfd4:	f8d8 5000 	ldr.w	r5, [r8]
 801dfd8:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801dfdc:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801dfe0:	096a      	lsrs	r2, r5, #5
 801dfe2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801dfe6:	4332      	orrs	r2, r6
 801dfe8:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801dfec:	432a      	orrs	r2, r5
 801dfee:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801dff2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dff4:	4410      	add	r0, r2
 801dff6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dff8:	f10e 0e01 	add.w	lr, lr, #1
 801dffc:	4411      	add	r1, r2
 801dffe:	e7d2      	b.n	801dfa6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801e000:	2a00      	cmp	r2, #0
 801e002:	d0f6      	beq.n	801dff2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801e004:	f8d8 7000 	ldr.w	r7, [r8]
 801e008:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801e00c:	fa1f f982 	uxth.w	r9, r2
 801e010:	ea4f 262c 	mov.w	r6, ip, asr #8
 801e014:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801e018:	43d2      	mvns	r2, r2
 801e01a:	b2d2      	uxtb	r2, r2
 801e01c:	fb15 f509 	smulbb	r5, r5, r9
 801e020:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e024:	fb06 5602 	mla	r6, r6, r2, r5
 801e028:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801e02c:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801e030:	b2ff      	uxtb	r7, r7
 801e032:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e036:	fa5f fc8c 	uxtb.w	ip, ip
 801e03a:	fb17 f709 	smulbb	r7, r7, r9
 801e03e:	fb0c 7702 	mla	r7, ip, r2, r7
 801e042:	b2b6      	uxth	r6, r6
 801e044:	fb1a fa09 	smulbb	sl, sl, r9
 801e048:	b2bf      	uxth	r7, r7
 801e04a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e04e:	fb05 a502 	mla	r5, r5, r2, sl
 801e052:	1c72      	adds	r2, r6, #1
 801e054:	f107 0a01 	add.w	sl, r7, #1
 801e058:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801e05c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801e060:	b2ad      	uxth	r5, r5
 801e062:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e066:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801e06a:	ea4a 0606 	orr.w	r6, sl, r6
 801e06e:	f105 0a01 	add.w	sl, r5, #1
 801e072:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e076:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e07a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e07e:	ea46 060a 	orr.w	r6, r6, sl
 801e082:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801e086:	e7b4      	b.n	801dff2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801e088:	b007      	add	sp, #28
 801e08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e08e:	bf00      	nop
 801e090:	2000c44c 	.word	0x2000c44c

0801e094 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801e094:	4770      	bx	lr

0801e096 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801e096:	4770      	bx	lr

0801e098 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801e098:	4770      	bx	lr

0801e09a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801e09a:	4770      	bx	lr

0801e09c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e09c:	4770      	bx	lr

0801e09e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e09e:	4770      	bx	lr

0801e0a0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e0a0:	4770      	bx	lr

0801e0a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e0a2:	4770      	bx	lr

0801e0a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e0a4:	4770      	bx	lr

0801e0a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801e0a6:	4770      	bx	lr

0801e0a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e0a8:	4770      	bx	lr

0801e0aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e0aa:	4770      	bx	lr

0801e0ac <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e0ac:	4770      	bx	lr

0801e0ae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801e0ae:	4770      	bx	lr

0801e0b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e0b0:	4770      	bx	lr

0801e0b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e0b2:	4770      	bx	lr

0801e0b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e0b4:	4770      	bx	lr

0801e0b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e0b6:	4770      	bx	lr

0801e0b8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e0b8:	4770      	bx	lr

0801e0ba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e0ba:	4770      	bx	lr

0801e0bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e0bc:	4770      	bx	lr

0801e0be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801e0be:	4770      	bx	lr

0801e0c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e0c0:	4770      	bx	lr

0801e0c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801e0c2:	4770      	bx	lr

0801e0c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e0c4:	4770      	bx	lr

0801e0c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801e0c6:	4770      	bx	lr

0801e0c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e0c8:	4770      	bx	lr

0801e0ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801e0ca:	4770      	bx	lr

0801e0cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801e0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e0d0:	b088      	sub	sp, #32
 801e0d2:	ac08      	add	r4, sp, #32
 801e0d4:	4606      	mov	r6, r0
 801e0d6:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801e0da:	4620      	mov	r0, r4
 801e0dc:	4688      	mov	r8, r1
 801e0de:	4691      	mov	r9, r2
 801e0e0:	f7fd fc66 	bl	801b9b0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e0e4:	6833      	ldr	r3, [r6, #0]
 801e0e6:	4605      	mov	r5, r0
 801e0e8:	4620      	mov	r0, r4
 801e0ea:	699f      	ldr	r7, [r3, #24]
 801e0ec:	f7fd fb74 	bl	801b7d8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e0f0:	4682      	mov	sl, r0
 801e0f2:	4620      	mov	r0, r4
 801e0f4:	f7fd fba4 	bl	801b840 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e0f8:	9500      	str	r5, [sp, #0]
 801e0fa:	e9cd a001 	strd	sl, r0, [sp, #4]
 801e0fe:	464b      	mov	r3, r9
 801e100:	a806      	add	r0, sp, #24
 801e102:	4642      	mov	r2, r8
 801e104:	4631      	mov	r1, r6
 801e106:	47b8      	blx	r7
 801e108:	4628      	mov	r0, r5
 801e10a:	b008      	add	sp, #32
 801e10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801e110 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801e110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e114:	2300      	movs	r3, #0
 801e116:	9300      	str	r3, [sp, #0]
 801e118:	4b3d      	ldr	r3, [pc, #244]	; (801e210 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801e11a:	781b      	ldrb	r3, [r3, #0]
 801e11c:	2b00      	cmp	r3, #0
 801e11e:	d137      	bne.n	801e190 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801e120:	4a3c      	ldr	r2, [pc, #240]	; (801e214 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801e122:	f9b2 2000 	ldrsh.w	r2, [r2]
 801e126:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e12a:	2b00      	cmp	r3, #0
 801e12c:	d132      	bne.n	801e194 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801e12e:	4b3a      	ldr	r3, [pc, #232]	; (801e218 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801e130:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e134:	6808      	ldr	r0, [r1, #0]
 801e136:	6849      	ldr	r1, [r1, #4]
 801e138:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e13c:	ac02      	add	r4, sp, #8
 801e13e:	ab02      	add	r3, sp, #8
 801e140:	c303      	stmia	r3!, {r0, r1}
 801e142:	4669      	mov	r1, sp
 801e144:	4620      	mov	r0, r4
 801e146:	f7f9 fe9b 	bl	8017e80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e14a:	4668      	mov	r0, sp
 801e14c:	f7f9 fe70 	bl	8017e30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e150:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e154:	f8bd 2000 	ldrh.w	r2, [sp]
 801e158:	4d30      	ldr	r5, [pc, #192]	; (801e21c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801e15a:	4413      	add	r3, r2
 801e15c:	f8ad 3008 	strh.w	r3, [sp, #8]
 801e160:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801e164:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801e168:	6828      	ldr	r0, [r5, #0]
 801e16a:	4413      	add	r3, r2
 801e16c:	f8ad 300a 	strh.w	r3, [sp, #10]
 801e170:	6803      	ldr	r3, [r0, #0]
 801e172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e174:	4798      	blx	r3
 801e176:	f010 0f01 	tst.w	r0, #1
 801e17a:	462f      	mov	r7, r5
 801e17c:	d00c      	beq.n	801e198 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801e17e:	6828      	ldr	r0, [r5, #0]
 801e180:	6803      	ldr	r3, [r0, #0]
 801e182:	e894 0006 	ldmia.w	r4, {r1, r2}
 801e186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e188:	4798      	blx	r3
 801e18a:	b004      	add	sp, #16
 801e18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e190:	4a21      	ldr	r2, [pc, #132]	; (801e218 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801e192:	e7c6      	b.n	801e122 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801e194:	4b1f      	ldr	r3, [pc, #124]	; (801e214 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801e196:	e7cb      	b.n	801e130 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801e198:	6838      	ldr	r0, [r7, #0]
 801e19a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801e19e:	6803      	ldr	r3, [r0, #0]
 801e1a0:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801e1a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e1a6:	4798      	blx	r3
 801e1a8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801e1ac:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801e1b0:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801e1b4:	fb16 3602 	smlabb	r6, r6, r2, r3
 801e1b8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801e1bc:	6838      	ldr	r0, [r7, #0]
 801e1be:	6803      	ldr	r3, [r0, #0]
 801e1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e1c2:	4798      	blx	r3
 801e1c4:	4a13      	ldr	r2, [pc, #76]	; (801e214 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801e1c6:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801e1ca:	8813      	ldrh	r3, [r2, #0]
 801e1cc:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801e1d0:	fb03 1404 	mla	r4, r3, r4, r1
 801e1d4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801e1d8:	435d      	muls	r5, r3
 801e1da:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801e1de:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801e1e2:	4691      	mov	r9, r2
 801e1e4:	6838      	ldr	r0, [r7, #0]
 801e1e6:	42ac      	cmp	r4, r5
 801e1e8:	6803      	ldr	r3, [r0, #0]
 801e1ea:	d20e      	bcs.n	801e20a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801e1ec:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801e1f0:	4632      	mov	r2, r6
 801e1f2:	4643      	mov	r3, r8
 801e1f4:	4621      	mov	r1, r4
 801e1f6:	47d0      	blx	sl
 801e1f8:	f8b9 3000 	ldrh.w	r3, [r9]
 801e1fc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e200:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801e204:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801e208:	e7ec      	b.n	801e1e4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801e20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e20c:	4798      	blx	r3
 801e20e:	e7bc      	b.n	801e18a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801e210:	2000c434 	.word	0x2000c434
 801e214:	2000c436 	.word	0x2000c436
 801e218:	2000c438 	.word	0x2000c438
 801e21c:	2000c43c 	.word	0x2000c43c

0801e220 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801e220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e224:	b08b      	sub	sp, #44	; 0x2c
 801e226:	460f      	mov	r7, r1
 801e228:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801e22c:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801e230:	4616      	mov	r6, r2
 801e232:	f1bb 0f00 	cmp.w	fp, #0
 801e236:	d049      	beq.n	801e2cc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801e238:	6810      	ldr	r0, [r2, #0]
 801e23a:	6851      	ldr	r1, [r2, #4]
 801e23c:	ad06      	add	r5, sp, #24
 801e23e:	c503      	stmia	r5!, {r0, r1}
 801e240:	6818      	ldr	r0, [r3, #0]
 801e242:	6859      	ldr	r1, [r3, #4]
 801e244:	ad08      	add	r5, sp, #32
 801e246:	c503      	stmia	r5!, {r0, r1}
 801e248:	a806      	add	r0, sp, #24
 801e24a:	f7f9 fdf1 	bl	8017e30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e24e:	4631      	mov	r1, r6
 801e250:	a808      	add	r0, sp, #32
 801e252:	f7f9 fe15 	bl	8017e80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e256:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e25a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e25e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801e262:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801e266:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801e26a:	fb16 2103 	smlabb	r1, r6, r3, r2
 801e26e:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801e272:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e276:	4f5f      	ldr	r7, [pc, #380]	; (801e3f4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801e278:	440a      	add	r2, r1
 801e27a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e27e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e282:	6838      	ldr	r0, [r7, #0]
 801e284:	4413      	add	r3, r2
 801e286:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801e28a:	6803      	ldr	r3, [r0, #0]
 801e28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e28e:	4798      	blx	r3
 801e290:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801e294:	46b9      	mov	r9, r7
 801e296:	d01c      	beq.n	801e2d2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801e298:	f010 0f04 	tst.w	r0, #4
 801e29c:	d01d      	beq.n	801e2da <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801e29e:	f8d9 0000 	ldr.w	r0, [r9]
 801e2a2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e2a6:	6801      	ldr	r1, [r0, #0]
 801e2a8:	f8cd b00c 	str.w	fp, [sp, #12]
 801e2ac:	2700      	movs	r7, #0
 801e2ae:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801e2b2:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801e2b6:	9402      	str	r4, [sp, #8]
 801e2b8:	b2ad      	uxth	r5, r5
 801e2ba:	fa1f f488 	uxth.w	r4, r8
 801e2be:	9501      	str	r5, [sp, #4]
 801e2c0:	9400      	str	r4, [sp, #0]
 801e2c2:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801e2c4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e2c8:	4631      	mov	r1, r6
 801e2ca:	47a0      	blx	r4
 801e2cc:	b00b      	add	sp, #44	; 0x2c
 801e2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2d2:	b914      	cbnz	r4, 801e2da <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801e2d4:	f010 0f01 	tst.w	r0, #1
 801e2d8:	e7e0      	b.n	801e29c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801e2da:	f8d9 0000 	ldr.w	r0, [r9]
 801e2de:	6803      	ldr	r3, [r0, #0]
 801e2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e2e2:	4798      	blx	r3
 801e2e4:	4b44      	ldr	r3, [pc, #272]	; (801e3f8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801e2e6:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801e2ea:	881a      	ldrh	r2, [r3, #0]
 801e2ec:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801e2f0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801e2f4:	fb02 1404 	mla	r4, r2, r4, r1
 801e2f8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801e2fc:	469a      	mov	sl, r3
 801e2fe:	fb05 f502 	mul.w	r5, r5, r2
 801e302:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801e306:	d059      	beq.n	801e3bc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801e308:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801e30c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801e310:	fa1f f28b 	uxth.w	r2, fp
 801e314:	fa1f f989 	uxth.w	r9, r9
 801e318:	469e      	mov	lr, r3
 801e31a:	42ac      	cmp	r4, r5
 801e31c:	d264      	bcs.n	801e3e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801e31e:	eb04 0a07 	add.w	sl, r4, r7
 801e322:	4554      	cmp	r4, sl
 801e324:	d23d      	bcs.n	801e3a2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801e326:	8821      	ldrh	r1, [r4, #0]
 801e328:	f836 3b02 	ldrh.w	r3, [r6], #2
 801e32c:	1208      	asrs	r0, r1, #8
 801e32e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801e332:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e336:	fb10 f009 	smulbb	r0, r0, r9
 801e33a:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801e33e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e342:	00c9      	lsls	r1, r1, #3
 801e344:	fb0c 0c02 	mla	ip, ip, r2, r0
 801e348:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801e34c:	10d8      	asrs	r0, r3, #3
 801e34e:	b2c9      	uxtb	r1, r1
 801e350:	00db      	lsls	r3, r3, #3
 801e352:	fa1f fc8c 	uxth.w	ip, ip
 801e356:	fb1b fb09 	smulbb	fp, fp, r9
 801e35a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801e35e:	b2db      	uxtb	r3, r3
 801e360:	fb11 f109 	smulbb	r1, r1, r9
 801e364:	fb00 b002 	mla	r0, r0, r2, fp
 801e368:	fb03 1302 	mla	r3, r3, r2, r1
 801e36c:	f10c 0b01 	add.w	fp, ip, #1
 801e370:	b29b      	uxth	r3, r3
 801e372:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e376:	b280      	uxth	r0, r0
 801e378:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801e37c:	f103 0c01 	add.w	ip, r3, #1
 801e380:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801e384:	1c43      	adds	r3, r0, #1
 801e386:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e38a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801e38e:	0940      	lsrs	r0, r0, #5
 801e390:	ea4c 0c0b 	orr.w	ip, ip, fp
 801e394:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e398:	ea4c 0c00 	orr.w	ip, ip, r0
 801e39c:	f824 cb02 	strh.w	ip, [r4], #2
 801e3a0:	e7bf      	b.n	801e322 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801e3a2:	f8be 3000 	ldrh.w	r3, [lr]
 801e3a6:	eba3 0308 	sub.w	r3, r3, r8
 801e3aa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e3ae:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801e3b2:	eba3 0308 	sub.w	r3, r3, r8
 801e3b6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801e3ba:	e7ae      	b.n	801e31a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801e3bc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801e3c0:	f8d9 0000 	ldr.w	r0, [r9]
 801e3c4:	42ac      	cmp	r4, r5
 801e3c6:	6803      	ldr	r3, [r0, #0]
 801e3c8:	d20e      	bcs.n	801e3e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801e3ca:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801e3ce:	4632      	mov	r2, r6
 801e3d0:	463b      	mov	r3, r7
 801e3d2:	4621      	mov	r1, r4
 801e3d4:	47c0      	blx	r8
 801e3d6:	f8ba 3000 	ldrh.w	r3, [sl]
 801e3da:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e3de:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801e3e2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801e3e6:	e7eb      	b.n	801e3c0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801e3e8:	4b02      	ldr	r3, [pc, #8]	; (801e3f4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801e3ea:	6818      	ldr	r0, [r3, #0]
 801e3ec:	6803      	ldr	r3, [r0, #0]
 801e3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3f0:	4798      	blx	r3
 801e3f2:	e76b      	b.n	801e2cc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801e3f4:	2000c43c 	.word	0x2000c43c
 801e3f8:	2000c436 	.word	0x2000c436

0801e3fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e3fc:	b510      	push	{r4, lr}
 801e3fe:	2104      	movs	r1, #4
 801e400:	4604      	mov	r4, r0
 801e402:	f009 facb 	bl	802799c <_ZdlPvj>
 801e406:	4620      	mov	r0, r4
 801e408:	bd10      	pop	{r4, pc}

0801e40a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801e40a:	b510      	push	{r4, lr}
 801e40c:	2104      	movs	r1, #4
 801e40e:	4604      	mov	r4, r0
 801e410:	f009 fac4 	bl	802799c <_ZdlPvj>
 801e414:	4620      	mov	r0, r4
 801e416:	bd10      	pop	{r4, pc}

0801e418 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e418:	b510      	push	{r4, lr}
 801e41a:	2104      	movs	r1, #4
 801e41c:	4604      	mov	r4, r0
 801e41e:	f009 fabd 	bl	802799c <_ZdlPvj>
 801e422:	4620      	mov	r0, r4
 801e424:	bd10      	pop	{r4, pc}

0801e426 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801e426:	b510      	push	{r4, lr}
 801e428:	2104      	movs	r1, #4
 801e42a:	4604      	mov	r4, r0
 801e42c:	f009 fab6 	bl	802799c <_ZdlPvj>
 801e430:	4620      	mov	r0, r4
 801e432:	bd10      	pop	{r4, pc}

0801e434 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e434:	b510      	push	{r4, lr}
 801e436:	2104      	movs	r1, #4
 801e438:	4604      	mov	r4, r0
 801e43a:	f009 faaf 	bl	802799c <_ZdlPvj>
 801e43e:	4620      	mov	r0, r4
 801e440:	bd10      	pop	{r4, pc}

0801e442 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801e442:	b510      	push	{r4, lr}
 801e444:	2104      	movs	r1, #4
 801e446:	4604      	mov	r4, r0
 801e448:	f009 faa8 	bl	802799c <_ZdlPvj>
 801e44c:	4620      	mov	r0, r4
 801e44e:	bd10      	pop	{r4, pc}

0801e450 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e450:	b510      	push	{r4, lr}
 801e452:	2104      	movs	r1, #4
 801e454:	4604      	mov	r4, r0
 801e456:	f009 faa1 	bl	802799c <_ZdlPvj>
 801e45a:	4620      	mov	r0, r4
 801e45c:	bd10      	pop	{r4, pc}

0801e45e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801e45e:	b510      	push	{r4, lr}
 801e460:	2104      	movs	r1, #4
 801e462:	4604      	mov	r4, r0
 801e464:	f009 fa9a 	bl	802799c <_ZdlPvj>
 801e468:	4620      	mov	r0, r4
 801e46a:	bd10      	pop	{r4, pc}

0801e46c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e46c:	b510      	push	{r4, lr}
 801e46e:	2104      	movs	r1, #4
 801e470:	4604      	mov	r4, r0
 801e472:	f009 fa93 	bl	802799c <_ZdlPvj>
 801e476:	4620      	mov	r0, r4
 801e478:	bd10      	pop	{r4, pc}

0801e47a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e47a:	b510      	push	{r4, lr}
 801e47c:	2104      	movs	r1, #4
 801e47e:	4604      	mov	r4, r0
 801e480:	f009 fa8c 	bl	802799c <_ZdlPvj>
 801e484:	4620      	mov	r0, r4
 801e486:	bd10      	pop	{r4, pc}

0801e488 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e488:	b510      	push	{r4, lr}
 801e48a:	2104      	movs	r1, #4
 801e48c:	4604      	mov	r4, r0
 801e48e:	f009 fa85 	bl	802799c <_ZdlPvj>
 801e492:	4620      	mov	r0, r4
 801e494:	bd10      	pop	{r4, pc}

0801e496 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e496:	b510      	push	{r4, lr}
 801e498:	2104      	movs	r1, #4
 801e49a:	4604      	mov	r4, r0
 801e49c:	f009 fa7e 	bl	802799c <_ZdlPvj>
 801e4a0:	4620      	mov	r0, r4
 801e4a2:	bd10      	pop	{r4, pc}

0801e4a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e4a4:	b510      	push	{r4, lr}
 801e4a6:	2104      	movs	r1, #4
 801e4a8:	4604      	mov	r4, r0
 801e4aa:	f009 fa77 	bl	802799c <_ZdlPvj>
 801e4ae:	4620      	mov	r0, r4
 801e4b0:	bd10      	pop	{r4, pc}

0801e4b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801e4b2:	b510      	push	{r4, lr}
 801e4b4:	2104      	movs	r1, #4
 801e4b6:	4604      	mov	r4, r0
 801e4b8:	f009 fa70 	bl	802799c <_ZdlPvj>
 801e4bc:	4620      	mov	r0, r4
 801e4be:	bd10      	pop	{r4, pc}

0801e4c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e4c0:	b510      	push	{r4, lr}
 801e4c2:	2104      	movs	r1, #4
 801e4c4:	4604      	mov	r4, r0
 801e4c6:	f009 fa69 	bl	802799c <_ZdlPvj>
 801e4ca:	4620      	mov	r0, r4
 801e4cc:	bd10      	pop	{r4, pc}

0801e4ce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e4ce:	b510      	push	{r4, lr}
 801e4d0:	2104      	movs	r1, #4
 801e4d2:	4604      	mov	r4, r0
 801e4d4:	f009 fa62 	bl	802799c <_ZdlPvj>
 801e4d8:	4620      	mov	r0, r4
 801e4da:	bd10      	pop	{r4, pc}

0801e4dc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e4dc:	b510      	push	{r4, lr}
 801e4de:	2104      	movs	r1, #4
 801e4e0:	4604      	mov	r4, r0
 801e4e2:	f009 fa5b 	bl	802799c <_ZdlPvj>
 801e4e6:	4620      	mov	r0, r4
 801e4e8:	bd10      	pop	{r4, pc}

0801e4ea <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801e4ea:	b510      	push	{r4, lr}
 801e4ec:	2104      	movs	r1, #4
 801e4ee:	4604      	mov	r4, r0
 801e4f0:	f009 fa54 	bl	802799c <_ZdlPvj>
 801e4f4:	4620      	mov	r0, r4
 801e4f6:	bd10      	pop	{r4, pc}

0801e4f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e4f8:	b510      	push	{r4, lr}
 801e4fa:	2104      	movs	r1, #4
 801e4fc:	4604      	mov	r4, r0
 801e4fe:	f009 fa4d 	bl	802799c <_ZdlPvj>
 801e502:	4620      	mov	r0, r4
 801e504:	bd10      	pop	{r4, pc}

0801e506 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e506:	b510      	push	{r4, lr}
 801e508:	2104      	movs	r1, #4
 801e50a:	4604      	mov	r4, r0
 801e50c:	f009 fa46 	bl	802799c <_ZdlPvj>
 801e510:	4620      	mov	r0, r4
 801e512:	bd10      	pop	{r4, pc}

0801e514 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e514:	b510      	push	{r4, lr}
 801e516:	2104      	movs	r1, #4
 801e518:	4604      	mov	r4, r0
 801e51a:	f009 fa3f 	bl	802799c <_ZdlPvj>
 801e51e:	4620      	mov	r0, r4
 801e520:	bd10      	pop	{r4, pc}

0801e522 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e522:	b510      	push	{r4, lr}
 801e524:	2104      	movs	r1, #4
 801e526:	4604      	mov	r4, r0
 801e528:	f009 fa38 	bl	802799c <_ZdlPvj>
 801e52c:	4620      	mov	r0, r4
 801e52e:	bd10      	pop	{r4, pc}

0801e530 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e530:	b510      	push	{r4, lr}
 801e532:	2104      	movs	r1, #4
 801e534:	4604      	mov	r4, r0
 801e536:	f009 fa31 	bl	802799c <_ZdlPvj>
 801e53a:	4620      	mov	r0, r4
 801e53c:	bd10      	pop	{r4, pc}

0801e53e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e53e:	b510      	push	{r4, lr}
 801e540:	2104      	movs	r1, #4
 801e542:	4604      	mov	r4, r0
 801e544:	f009 fa2a 	bl	802799c <_ZdlPvj>
 801e548:	4620      	mov	r0, r4
 801e54a:	bd10      	pop	{r4, pc}

0801e54c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801e54c:	b510      	push	{r4, lr}
 801e54e:	2104      	movs	r1, #4
 801e550:	4604      	mov	r4, r0
 801e552:	f009 fa23 	bl	802799c <_ZdlPvj>
 801e556:	4620      	mov	r0, r4
 801e558:	bd10      	pop	{r4, pc}

0801e55a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801e55a:	b510      	push	{r4, lr}
 801e55c:	2104      	movs	r1, #4
 801e55e:	4604      	mov	r4, r0
 801e560:	f009 fa1c 	bl	802799c <_ZdlPvj>
 801e564:	4620      	mov	r0, r4
 801e566:	bd10      	pop	{r4, pc}

0801e568 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801e568:	b510      	push	{r4, lr}
 801e56a:	2104      	movs	r1, #4
 801e56c:	4604      	mov	r4, r0
 801e56e:	f009 fa15 	bl	802799c <_ZdlPvj>
 801e572:	4620      	mov	r0, r4
 801e574:	bd10      	pop	{r4, pc}

0801e576 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801e576:	b510      	push	{r4, lr}
 801e578:	2104      	movs	r1, #4
 801e57a:	4604      	mov	r4, r0
 801e57c:	f009 fa0e 	bl	802799c <_ZdlPvj>
 801e580:	4620      	mov	r0, r4
 801e582:	bd10      	pop	{r4, pc}

0801e584 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801e584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e588:	b091      	sub	sp, #68	; 0x44
 801e58a:	469b      	mov	fp, r3
 801e58c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801e590:	4616      	mov	r6, r2
 801e592:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801e596:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e59a:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801e59e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e5a2:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801e5a6:	4604      	mov	r4, r0
 801e5a8:	460d      	mov	r5, r1
 801e5aa:	4640      	mov	r0, r8
 801e5ac:	4659      	mov	r1, fp
 801e5ae:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801e5b2:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801e5b6:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801e5ba:	f7f5 f911 	bl	80137e0 <_ZN8touchgfx4RectaNERKS0_>
 801e5be:	4631      	mov	r1, r6
 801e5c0:	4640      	mov	r0, r8
 801e5c2:	f7f5 f90d 	bl	80137e0 <_ZN8touchgfx4RectaNERKS0_>
 801e5c6:	4b74      	ldr	r3, [pc, #464]	; (801e798 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801e5c8:	8818      	ldrh	r0, [r3, #0]
 801e5ca:	4b74      	ldr	r3, [pc, #464]	; (801e79c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801e5cc:	8819      	ldrh	r1, [r3, #0]
 801e5ce:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801e5d2:	2b00      	cmp	r3, #0
 801e5d4:	b202      	sxth	r2, r0
 801e5d6:	b20e      	sxth	r6, r1
 801e5d8:	da07      	bge.n	801e5ea <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801e5da:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801e5de:	4463      	add	r3, ip
 801e5e0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801e5e4:	2300      	movs	r3, #0
 801e5e6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801e5ea:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801e5ee:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801e5f2:	1ad2      	subs	r2, r2, r3
 801e5f4:	4594      	cmp	ip, r2
 801e5f6:	bfc4      	itt	gt
 801e5f8:	1ac2      	subgt	r2, r0, r3
 801e5fa:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801e5fe:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801e602:	2a00      	cmp	r2, #0
 801e604:	da07      	bge.n	801e616 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801e606:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801e60a:	4462      	add	r2, ip
 801e60c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801e610:	2200      	movs	r2, #0
 801e612:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801e616:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801e61a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801e61e:	eba6 060a 	sub.w	r6, r6, sl
 801e622:	42b2      	cmp	r2, r6
 801e624:	bfc4      	itt	gt
 801e626:	eba1 020a 	subgt.w	r2, r1, sl
 801e62a:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801e62e:	4a5c      	ldr	r2, [pc, #368]	; (801e7a0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801e630:	7812      	ldrb	r2, [r2, #0]
 801e632:	b9a2      	cbnz	r2, 801e65e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801e634:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801e638:	4286      	cmp	r6, r0
 801e63a:	4640      	mov	r0, r8
 801e63c:	9303      	str	r3, [sp, #12]
 801e63e:	bf14      	ite	ne
 801e640:	2600      	movne	r6, #0
 801e642:	2601      	moveq	r6, #1
 801e644:	f7f5 f90f 	bl	8013866 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e648:	9b03      	ldr	r3, [sp, #12]
 801e64a:	b160      	cbz	r0, 801e666 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801e64c:	2300      	movs	r3, #0
 801e64e:	8023      	strh	r3, [r4, #0]
 801e650:	8063      	strh	r3, [r4, #2]
 801e652:	80a3      	strh	r3, [r4, #4]
 801e654:	4620      	mov	r0, r4
 801e656:	80e3      	strh	r3, [r4, #6]
 801e658:	b011      	add	sp, #68	; 0x44
 801e65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e65e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801e662:	428e      	cmp	r6, r1
 801e664:	e7e9      	b.n	801e63a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801e666:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801e66a:	9205      	str	r2, [sp, #20]
 801e66c:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801e670:	9206      	str	r2, [sp, #24]
 801e672:	f8bb 2000 	ldrh.w	r2, [fp]
 801e676:	900e      	str	r0, [sp, #56]	; 0x38
 801e678:	1a9b      	subs	r3, r3, r2
 801e67a:	b21b      	sxth	r3, r3
 801e67c:	9303      	str	r3, [sp, #12]
 801e67e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801e682:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801e686:	ebaa 0a03 	sub.w	sl, sl, r3
 801e68a:	fa0f f38a 	sxth.w	r3, sl
 801e68e:	9304      	str	r3, [sp, #16]
 801e690:	9b03      	ldr	r3, [sp, #12]
 801e692:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801e696:	9b04      	ldr	r3, [sp, #16]
 801e698:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801e69c:	9b05      	ldr	r3, [sp, #20]
 801e69e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801e6a2:	a90e      	add	r1, sp, #56	; 0x38
 801e6a4:	9b06      	ldr	r3, [sp, #24]
 801e6a6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801e6aa:	a80c      	add	r0, sp, #48	; 0x30
 801e6ac:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801e6b0:	f7f9 fbe6 	bl	8017e80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e6b4:	4640      	mov	r0, r8
 801e6b6:	f7f9 fbbb 	bl	8017e30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e6ba:	a80e      	add	r0, sp, #56	; 0x38
 801e6bc:	f7f9 fbb8 	bl	8017e30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e6c0:	4b38      	ldr	r3, [pc, #224]	; (801e7a4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801e6c2:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801e6c6:	881b      	ldrh	r3, [r3, #0]
 801e6c8:	9307      	str	r3, [sp, #28]
 801e6ca:	682b      	ldr	r3, [r5, #0]
 801e6cc:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801e7a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801e6d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e6d2:	4628      	mov	r0, r5
 801e6d4:	4798      	blx	r3
 801e6d6:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801e6da:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801e6de:	4681      	mov	r9, r0
 801e6e0:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801e6e4:	f8db 0000 	ldr.w	r0, [fp]
 801e6e8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801e6ea:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801e6ee:	6803      	ldr	r3, [r0, #0]
 801e6f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e6f2:	4798      	blx	r3
 801e6f4:	4607      	mov	r7, r0
 801e6f6:	f8db 0000 	ldr.w	r0, [fp]
 801e6fa:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801e6fe:	6803      	ldr	r3, [r0, #0]
 801e700:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801e704:	9109      	str	r1, [sp, #36]	; 0x24
 801e706:	9208      	str	r2, [sp, #32]
 801e708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e70a:	4798      	blx	r3
 801e70c:	f010 0f01 	tst.w	r0, #1
 801e710:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801e714:	d012      	beq.n	801e73c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801e716:	f8db 0000 	ldr.w	r0, [fp]
 801e71a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801e71e:	6803      	ldr	r3, [r0, #0]
 801e720:	9200      	str	r2, [sp, #0]
 801e722:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801e724:	e898 0006 	ldmia.w	r8, {r1, r2}
 801e728:	462b      	mov	r3, r5
 801e72a:	47b0      	blx	r6
 801e72c:	9b03      	ldr	r3, [sp, #12]
 801e72e:	8023      	strh	r3, [r4, #0]
 801e730:	9b04      	ldr	r3, [sp, #16]
 801e732:	8063      	strh	r3, [r4, #2]
 801e734:	9b05      	ldr	r3, [sp, #20]
 801e736:	80a3      	strh	r3, [r4, #4]
 801e738:	9b06      	ldr	r3, [sp, #24]
 801e73a:	e78b      	b.n	801e654 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801e73c:	fb09 f202 	mul.w	r2, r9, r2
 801e740:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801e744:	440f      	add	r7, r1
 801e746:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801e74a:	b166      	cbz	r6, 801e766 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801e74c:	9a07      	ldr	r2, [sp, #28]
 801e74e:	4592      	cmp	sl, r2
 801e750:	d109      	bne.n	801e766 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801e752:	f8db 0000 	ldr.w	r0, [fp]
 801e756:	6802      	ldr	r2, [r0, #0]
 801e758:	fb09 f303 	mul.w	r3, r9, r3
 801e75c:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801e75e:	4629      	mov	r1, r5
 801e760:	463a      	mov	r2, r7
 801e762:	47b0      	blx	r6
 801e764:	e7e2      	b.n	801e72c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801e766:	fb0a f303 	mul.w	r3, sl, r3
 801e76a:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801e7a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801e76e:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801e772:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801e776:	4545      	cmp	r5, r8
 801e778:	d2d8      	bcs.n	801e72c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801e77a:	f8db 0000 	ldr.w	r0, [fp]
 801e77e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801e782:	6802      	ldr	r2, [r0, #0]
 801e784:	4629      	mov	r1, r5
 801e786:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801e78a:	005b      	lsls	r3, r3, #1
 801e78c:	463a      	mov	r2, r7
 801e78e:	47d0      	blx	sl
 801e790:	444f      	add	r7, r9
 801e792:	4435      	add	r5, r6
 801e794:	e7ef      	b.n	801e776 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801e796:	bf00      	nop
 801e798:	2000c430 	.word	0x2000c430
 801e79c:	2000c432 	.word	0x2000c432
 801e7a0:	2000c434 	.word	0x2000c434
 801e7a4:	2000c436 	.word	0x2000c436
 801e7a8:	2000c43c 	.word	0x2000c43c

0801e7ac <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801e7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e7ae:	4606      	mov	r6, r0
 801e7b0:	b087      	sub	sp, #28
 801e7b2:	460c      	mov	r4, r1
 801e7b4:	4617      	mov	r7, r2
 801e7b6:	461d      	mov	r5, r3
 801e7b8:	b333      	cbz	r3, 801e808 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801e7ba:	4608      	mov	r0, r1
 801e7bc:	f7f5 f853 	bl	8013866 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e7c0:	bb10      	cbnz	r0, 801e808 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801e7c2:	6820      	ldr	r0, [r4, #0]
 801e7c4:	6861      	ldr	r1, [r4, #4]
 801e7c6:	4c1c      	ldr	r4, [pc, #112]	; (801e838 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801e7c8:	ab04      	add	r3, sp, #16
 801e7ca:	c303      	stmia	r3!, {r0, r1}
 801e7cc:	a804      	add	r0, sp, #16
 801e7ce:	f7f9 fb2f 	bl	8017e30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e7d2:	6820      	ldr	r0, [r4, #0]
 801e7d4:	6803      	ldr	r3, [r0, #0]
 801e7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e7d8:	4798      	blx	r3
 801e7da:	2dff      	cmp	r5, #255	; 0xff
 801e7dc:	d016      	beq.n	801e80c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801e7de:	f010 0f08 	tst.w	r0, #8
 801e7e2:	6820      	ldr	r0, [r4, #0]
 801e7e4:	d015      	beq.n	801e812 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801e7e6:	2400      	movs	r4, #0
 801e7e8:	6801      	ldr	r1, [r0, #0]
 801e7ea:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801e7ee:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e7f2:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801e7f6:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801e7fa:	9401      	str	r4, [sp, #4]
 801e7fc:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801e800:	9400      	str	r4, [sp, #0]
 801e802:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801e804:	4639      	mov	r1, r7
 801e806:	47a0      	blx	r4
 801e808:	b007      	add	sp, #28
 801e80a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e80c:	f010 0f02 	tst.w	r0, #2
 801e810:	e7e7      	b.n	801e7e2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801e812:	6803      	ldr	r3, [r0, #0]
 801e814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e816:	4798      	blx	r3
 801e818:	4b08      	ldr	r3, [pc, #32]	; (801e83c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801e81a:	881a      	ldrh	r2, [r3, #0]
 801e81c:	6833      	ldr	r3, [r6, #0]
 801e81e:	e9cd 7500 	strd	r7, r5, [sp]
 801e822:	4601      	mov	r1, r0
 801e824:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801e826:	4630      	mov	r0, r6
 801e828:	ab04      	add	r3, sp, #16
 801e82a:	47a8      	blx	r5
 801e82c:	6820      	ldr	r0, [r4, #0]
 801e82e:	6803      	ldr	r3, [r0, #0]
 801e830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e832:	4798      	blx	r3
 801e834:	e7e8      	b.n	801e808 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801e836:	bf00      	nop
 801e838:	2000c43c 	.word	0x2000c43c
 801e83c:	2000c436 	.word	0x2000c436

0801e840 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801e840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e844:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801e848:	9e08      	ldr	r6, [sp, #32]
 801e84a:	4688      	mov	r8, r1
 801e84c:	4614      	mov	r4, r2
 801e84e:	461d      	mov	r5, r3
 801e850:	2f00      	cmp	r7, #0
 801e852:	f000 80a9 	beq.w	801e9a8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801e856:	4618      	mov	r0, r3
 801e858:	f7f5 f805 	bl	8013866 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e85c:	2800      	cmp	r0, #0
 801e85e:	f040 80a3 	bne.w	801e9a8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801e862:	f9b5 1000 	ldrsh.w	r1, [r5]
 801e866:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801e86a:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801e86e:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801e872:	fb04 1303 	mla	r3, r4, r3, r1
 801e876:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801e87a:	4365      	muls	r5, r4
 801e87c:	2fff      	cmp	r7, #255	; 0xff
 801e87e:	eba4 0200 	sub.w	r2, r4, r0
 801e882:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801e886:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801e88a:	d04a      	beq.n	801e922 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 801e88c:	b2bc      	uxth	r4, r7
 801e88e:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801e892:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801e896:	fa5f f788 	uxtb.w	r7, r8
 801e89a:	b2f3      	uxtb	r3, r6
 801e89c:	0040      	lsls	r0, r0, #1
 801e89e:	fb0e fe04 	mul.w	lr, lr, r4
 801e8a2:	4367      	muls	r7, r4
 801e8a4:	4363      	muls	r3, r4
 801e8a6:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801e8aa:	fa1f fc8c 	uxth.w	ip, ip
 801e8ae:	42a9      	cmp	r1, r5
 801e8b0:	d27a      	bcs.n	801e9a8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801e8b2:	eb01 0900 	add.w	r9, r1, r0
 801e8b6:	4549      	cmp	r1, r9
 801e8b8:	d231      	bcs.n	801e91e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 801e8ba:	880a      	ldrh	r2, [r1, #0]
 801e8bc:	1214      	asrs	r4, r2, #8
 801e8be:	10d6      	asrs	r6, r2, #3
 801e8c0:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801e8c4:	00d2      	lsls	r2, r2, #3
 801e8c6:	b2d2      	uxtb	r2, r2
 801e8c8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801e8cc:	fb14 f40c 	smulbb	r4, r4, ip
 801e8d0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801e8d4:	4474      	add	r4, lr
 801e8d6:	fb12 f20c 	smulbb	r2, r2, ip
 801e8da:	b2a4      	uxth	r4, r4
 801e8dc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e8e0:	441a      	add	r2, r3
 801e8e2:	b292      	uxth	r2, r2
 801e8e4:	f104 0a01 	add.w	sl, r4, #1
 801e8e8:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801e8ec:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801e8f0:	fb16 f60c 	smulbb	r6, r6, ip
 801e8f4:	f102 0a01 	add.w	sl, r2, #1
 801e8f8:	443e      	add	r6, r7
 801e8fa:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801e8fe:	b2b6      	uxth	r6, r6
 801e900:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801e904:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e908:	4322      	orrs	r2, r4
 801e90a:	1c74      	adds	r4, r6, #1
 801e90c:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801e910:	0976      	lsrs	r6, r6, #5
 801e912:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e916:	4332      	orrs	r2, r6
 801e918:	f821 2b02 	strh.w	r2, [r1], #2
 801e91c:	e7cb      	b.n	801e8b6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 801e91e:	4441      	add	r1, r8
 801e920:	e7c5      	b.n	801e8ae <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 801e922:	4f22      	ldr	r7, [pc, #136]	; (801e9ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 801e924:	0973      	lsrs	r3, r6, #5
 801e926:	ea08 0707 	and.w	r7, r8, r7
 801e92a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e92e:	433b      	orrs	r3, r7
 801e930:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801e934:	4333      	orrs	r3, r6
 801e936:	07e7      	lsls	r7, r4, #31
 801e938:	b29b      	uxth	r3, r3
 801e93a:	d50b      	bpl.n	801e954 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801e93c:	0040      	lsls	r0, r0, #1
 801e93e:	0052      	lsls	r2, r2, #1
 801e940:	42a9      	cmp	r1, r5
 801e942:	d231      	bcs.n	801e9a8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801e944:	180c      	adds	r4, r1, r0
 801e946:	42a1      	cmp	r1, r4
 801e948:	d202      	bcs.n	801e950 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 801e94a:	f821 3b02 	strh.w	r3, [r1], #2
 801e94e:	e7fa      	b.n	801e946 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 801e950:	4411      	add	r1, r2
 801e952:	e7f5      	b.n	801e940 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 801e954:	078e      	lsls	r6, r1, #30
 801e956:	d008      	beq.n	801e96a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801e958:	0066      	lsls	r6, r4, #1
 801e95a:	460a      	mov	r2, r1
 801e95c:	42aa      	cmp	r2, r5
 801e95e:	d202      	bcs.n	801e966 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 801e960:	8013      	strh	r3, [r2, #0]
 801e962:	4432      	add	r2, r6
 801e964:	e7fa      	b.n	801e95c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 801e966:	3102      	adds	r1, #2
 801e968:	3801      	subs	r0, #1
 801e96a:	07c2      	lsls	r2, r0, #31
 801e96c:	d50b      	bpl.n	801e986 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 801e96e:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801e972:	3a01      	subs	r2, #1
 801e974:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801e978:	0066      	lsls	r6, r4, #1
 801e97a:	42aa      	cmp	r2, r5
 801e97c:	d202      	bcs.n	801e984 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 801e97e:	8013      	strh	r3, [r2, #0]
 801e980:	4432      	add	r2, r6
 801e982:	e7fa      	b.n	801e97a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 801e984:	3801      	subs	r0, #1
 801e986:	b178      	cbz	r0, 801e9a8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801e988:	1040      	asrs	r0, r0, #1
 801e98a:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801e98e:	0080      	lsls	r0, r0, #2
 801e990:	0064      	lsls	r4, r4, #1
 801e992:	42a9      	cmp	r1, r5
 801e994:	d208      	bcs.n	801e9a8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801e996:	180e      	adds	r6, r1, r0
 801e998:	460a      	mov	r2, r1
 801e99a:	42b2      	cmp	r2, r6
 801e99c:	d202      	bcs.n	801e9a4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 801e99e:	f842 3b04 	str.w	r3, [r2], #4
 801e9a2:	e7fa      	b.n	801e99a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 801e9a4:	4421      	add	r1, r4
 801e9a6:	e7f4      	b.n	801e992 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 801e9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e9ac:	00fff800 	.word	0x00fff800

0801e9b0 <_ZN8touchgfx8LCD16bppC1Ev>:
 801e9b0:	2200      	movs	r2, #0
 801e9b2:	4910      	ldr	r1, [pc, #64]	; (801e9f4 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801e9b4:	6042      	str	r2, [r0, #4]
 801e9b6:	6001      	str	r1, [r0, #0]
 801e9b8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801e9bc:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801e9c0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801e9c4:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801e9c8:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801e9cc:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801e9d0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801e9d4:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801e9d8:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801e9dc:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801e9e0:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801e9e4:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801e9e8:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801e9ec:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801e9f0:	4770      	bx	lr
 801e9f2:	bf00      	nop
 801e9f4:	0802f008 	.word	0x0802f008

0801e9f8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801e9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9fc:	460d      	mov	r5, r1
 801e9fe:	b08d      	sub	sp, #52	; 0x34
 801ea00:	4604      	mov	r4, r0
 801ea02:	6808      	ldr	r0, [r1, #0]
 801ea04:	6849      	ldr	r1, [r1, #4]
 801ea06:	4699      	mov	r9, r3
 801ea08:	ab08      	add	r3, sp, #32
 801ea0a:	c303      	stmia	r3!, {r0, r1}
 801ea0c:	6810      	ldr	r0, [r2, #0]
 801ea0e:	6851      	ldr	r1, [r2, #4]
 801ea10:	ab0a      	add	r3, sp, #40	; 0x28
 801ea12:	c303      	stmia	r3!, {r0, r1}
 801ea14:	a808      	add	r0, sp, #32
 801ea16:	f7f9 fa0b 	bl	8017e30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ea1a:	4629      	mov	r1, r5
 801ea1c:	a80a      	add	r0, sp, #40	; 0x28
 801ea1e:	f7f9 fa2f 	bl	8017e80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ea22:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801ea26:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801ea2a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801ea2e:	4d63      	ldr	r5, [pc, #396]	; (801ebbc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801ea30:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801ea34:	6828      	ldr	r0, [r5, #0]
 801ea36:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801ea3a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ea3e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801ea42:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801ea46:	440a      	add	r2, r1
 801ea48:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801ea4c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801ea50:	4413      	add	r3, r2
 801ea52:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801ea56:	6803      	ldr	r3, [r0, #0]
 801ea58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ea5a:	4798      	blx	r3
 801ea5c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ea60:	d119      	bne.n	801ea96 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801ea62:	f010 0f20 	tst.w	r0, #32
 801ea66:	6828      	ldr	r0, [r5, #0]
 801ea68:	d018      	beq.n	801ea9c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801ea6a:	2500      	movs	r5, #0
 801ea6c:	6801      	ldr	r1, [r0, #0]
 801ea6e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801ea72:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801ea76:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801ea7a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801ea7e:	9502      	str	r5, [sp, #8]
 801ea80:	b2b6      	uxth	r6, r6
 801ea82:	fa1f f588 	uxth.w	r5, r8
 801ea86:	9601      	str	r6, [sp, #4]
 801ea88:	9500      	str	r5, [sp, #0]
 801ea8a:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801ea8c:	4621      	mov	r1, r4
 801ea8e:	47a8      	blx	r5
 801ea90:	b00d      	add	sp, #52	; 0x34
 801ea92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea96:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ea9a:	e7e4      	b.n	801ea66 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801ea9c:	6803      	ldr	r3, [r0, #0]
 801ea9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eaa0:	4798      	blx	r3
 801eaa2:	4947      	ldr	r1, [pc, #284]	; (801ebc0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801eaa4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801eaa8:	880b      	ldrh	r3, [r1, #0]
 801eaaa:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801eaae:	fb03 5202 	mla	r2, r3, r2, r5
 801eab2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801eab6:	4373      	muls	r3, r6
 801eab8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801eabc:	9307      	str	r3, [sp, #28]
 801eabe:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801eac2:	9306      	str	r3, [sp, #24]
 801eac4:	468a      	mov	sl, r1
 801eac6:	9b07      	ldr	r3, [sp, #28]
 801eac8:	4298      	cmp	r0, r3
 801eaca:	d270      	bcs.n	801ebae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801eacc:	9b06      	ldr	r3, [sp, #24]
 801eace:	4621      	mov	r1, r4
 801ead0:	eb00 0b03 	add.w	fp, r0, r3
 801ead4:	4558      	cmp	r0, fp
 801ead6:	d25d      	bcs.n	801eb94 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801ead8:	f851 4b04 	ldr.w	r4, [r1], #4
 801eadc:	0e23      	lsrs	r3, r4, #24
 801eade:	d014      	beq.n	801eb0a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801eae0:	2bff      	cmp	r3, #255	; 0xff
 801eae2:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801eae6:	d112      	bne.n	801eb0e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801eae8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801eaec:	d10f      	bne.n	801eb0e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801eaee:	0963      	lsrs	r3, r4, #5
 801eaf0:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801eaf4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801eaf8:	f02c 0c07 	bic.w	ip, ip, #7
 801eafc:	ea43 0c0c 	orr.w	ip, r3, ip
 801eb00:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801eb04:	ea4c 0404 	orr.w	r4, ip, r4
 801eb08:	8004      	strh	r4, [r0, #0]
 801eb0a:	3002      	adds	r0, #2
 801eb0c:	e7e2      	b.n	801ead4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801eb0e:	fb09 f303 	mul.w	r3, r9, r3
 801eb12:	8807      	ldrh	r7, [r0, #0]
 801eb14:	1c5a      	adds	r2, r3, #1
 801eb16:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801eb1a:	1212      	asrs	r2, r2, #8
 801eb1c:	123e      	asrs	r6, r7, #8
 801eb1e:	b293      	uxth	r3, r2
 801eb20:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801eb24:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801eb28:	43d2      	mvns	r2, r2
 801eb2a:	b2d2      	uxtb	r2, r2
 801eb2c:	10fd      	asrs	r5, r7, #3
 801eb2e:	fb1e fe03 	smulbb	lr, lr, r3
 801eb32:	00ff      	lsls	r7, r7, #3
 801eb34:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801eb38:	fb06 e602 	mla	r6, r6, r2, lr
 801eb3c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801eb40:	b2ff      	uxtb	r7, r7
 801eb42:	fa5f fc8c 	uxtb.w	ip, ip
 801eb46:	b2e4      	uxtb	r4, r4
 801eb48:	b2b6      	uxth	r6, r6
 801eb4a:	fb1c fc03 	smulbb	ip, ip, r3
 801eb4e:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801eb52:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801eb56:	fb14 f403 	smulbb	r4, r4, r3
 801eb5a:	fb05 c502 	mla	r5, r5, r2, ip
 801eb5e:	f106 0e01 	add.w	lr, r6, #1
 801eb62:	fb07 4702 	mla	r7, r7, r2, r4
 801eb66:	b2ad      	uxth	r5, r5
 801eb68:	b2bf      	uxth	r7, r7
 801eb6a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801eb6e:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801eb72:	f105 0c01 	add.w	ip, r5, #1
 801eb76:	1c7e      	adds	r6, r7, #1
 801eb78:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801eb7c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801eb80:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801eb84:	096d      	lsrs	r5, r5, #5
 801eb86:	ea46 060e 	orr.w	r6, r6, lr
 801eb8a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801eb8e:	432e      	orrs	r6, r5
 801eb90:	8006      	strh	r6, [r0, #0]
 801eb92:	e7ba      	b.n	801eb0a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801eb94:	f8ba 3000 	ldrh.w	r3, [sl]
 801eb98:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801eb9c:	eba3 0308 	sub.w	r3, r3, r8
 801eba0:	eba4 0408 	sub.w	r4, r4, r8
 801eba4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801eba8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801ebac:	e78b      	b.n	801eac6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801ebae:	4b03      	ldr	r3, [pc, #12]	; (801ebbc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801ebb0:	6818      	ldr	r0, [r3, #0]
 801ebb2:	6803      	ldr	r3, [r0, #0]
 801ebb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ebb6:	4798      	blx	r3
 801ebb8:	e76a      	b.n	801ea90 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801ebba:	bf00      	nop
 801ebbc:	2000c43c 	.word	0x2000c43c
 801ebc0:	2000c436 	.word	0x2000c436

0801ebc4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801ebc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ebc8:	460c      	mov	r4, r1
 801ebca:	b085      	sub	sp, #20
 801ebcc:	6810      	ldr	r0, [r2, #0]
 801ebce:	6851      	ldr	r1, [r2, #4]
 801ebd0:	466d      	mov	r5, sp
 801ebd2:	c503      	stmia	r5!, {r0, r1}
 801ebd4:	6818      	ldr	r0, [r3, #0]
 801ebd6:	6859      	ldr	r1, [r3, #4]
 801ebd8:	4616      	mov	r6, r2
 801ebda:	c503      	stmia	r5!, {r0, r1}
 801ebdc:	4668      	mov	r0, sp
 801ebde:	f7f9 f927 	bl	8017e30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ebe2:	4631      	mov	r1, r6
 801ebe4:	a802      	add	r0, sp, #8
 801ebe6:	f7f9 f94b 	bl	8017e80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ebea:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801ebee:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801ebf2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801ebf6:	4d28      	ldr	r5, [pc, #160]	; (801ec98 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801ebf8:	4e28      	ldr	r6, [pc, #160]	; (801ec9c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801ebfa:	6828      	ldr	r0, [r5, #0]
 801ebfc:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801ec00:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801ec04:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ec08:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801ec0c:	f8bd 1000 	ldrh.w	r1, [sp]
 801ec10:	440a      	add	r2, r1
 801ec12:	f8ad 2008 	strh.w	r2, [sp, #8]
 801ec16:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801ec1a:	4413      	add	r3, r2
 801ec1c:	f8ad 300a 	strh.w	r3, [sp, #10]
 801ec20:	6803      	ldr	r3, [r0, #0]
 801ec22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ec24:	4798      	blx	r3
 801ec26:	8833      	ldrh	r3, [r6, #0]
 801ec28:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801ec2c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801ec30:	f8df e06c 	ldr.w	lr, [pc, #108]	; 801eca0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801ec34:	fb03 1202 	mla	r2, r3, r2, r1
 801ec38:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ec3c:	fb08 f303 	mul.w	r3, r8, r3
 801ec40:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ec44:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801ec48:	4298      	cmp	r0, r3
 801ec4a:	d21d      	bcs.n	801ec88 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801ec4c:	eb00 080c 	add.w	r8, r0, ip
 801ec50:	4540      	cmp	r0, r8
 801ec52:	d20f      	bcs.n	801ec74 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801ec54:	f854 1b04 	ldr.w	r1, [r4], #4
 801ec58:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801ec5c:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801ec60:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ec64:	ea42 0209 	orr.w	r2, r2, r9
 801ec68:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801ec6c:	430a      	orrs	r2, r1
 801ec6e:	f820 2b02 	strh.w	r2, [r0], #2
 801ec72:	e7ed      	b.n	801ec50 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801ec74:	8832      	ldrh	r2, [r6, #0]
 801ec76:	1bd2      	subs	r2, r2, r7
 801ec78:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ec7c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801ec80:	1bd2      	subs	r2, r2, r7
 801ec82:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801ec86:	e7df      	b.n	801ec48 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801ec88:	6828      	ldr	r0, [r5, #0]
 801ec8a:	6803      	ldr	r3, [r0, #0]
 801ec8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ec8e:	4798      	blx	r3
 801ec90:	b005      	add	sp, #20
 801ec92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ec96:	bf00      	nop
 801ec98:	2000c43c 	.word	0x2000c43c
 801ec9c:	2000c436 	.word	0x2000c436
 801eca0:	fffff800 	.word	0xfffff800

0801eca4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801eca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eca8:	460e      	mov	r6, r1
 801ecaa:	b08e      	sub	sp, #56	; 0x38
 801ecac:	4604      	mov	r4, r0
 801ecae:	6808      	ldr	r0, [r1, #0]
 801ecb0:	6849      	ldr	r1, [r1, #4]
 801ecb2:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 801ee8c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801ecb6:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 801ee90 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801ecba:	461d      	mov	r5, r3
 801ecbc:	ab0a      	add	r3, sp, #40	; 0x28
 801ecbe:	c303      	stmia	r3!, {r0, r1}
 801ecc0:	6810      	ldr	r0, [r2, #0]
 801ecc2:	6851      	ldr	r1, [r2, #4]
 801ecc4:	ab0c      	add	r3, sp, #48	; 0x30
 801ecc6:	c303      	stmia	r3!, {r0, r1}
 801ecc8:	a80a      	add	r0, sp, #40	; 0x28
 801ecca:	f7f9 f8b1 	bl	8017e30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ecce:	4631      	mov	r1, r6
 801ecd0:	a80c      	add	r0, sp, #48	; 0x30
 801ecd2:	f7f9 f8d5 	bl	8017e80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ecd6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801ecda:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801ecde:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801ece2:	f8d8 0000 	ldr.w	r0, [r8]
 801ece6:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801ecea:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801ecee:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ecf2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ecf6:	440c      	add	r4, r1
 801ecf8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801ecfc:	440a      	add	r2, r1
 801ecfe:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801ed02:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801ed06:	4413      	add	r3, r2
 801ed08:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801ed0c:	6803      	ldr	r3, [r0, #0]
 801ed0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ed10:	4798      	blx	r3
 801ed12:	2dff      	cmp	r5, #255	; 0xff
 801ed14:	d124      	bne.n	801ed60 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801ed16:	f010 0f01 	tst.w	r0, #1
 801ed1a:	f8d8 0000 	ldr.w	r0, [r8]
 801ed1e:	d022      	beq.n	801ed66 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801ed20:	2100      	movs	r1, #0
 801ed22:	f8d0 c000 	ldr.w	ip, [r0]
 801ed26:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801ed2a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801ed2e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801ed32:	f04f 0e01 	mov.w	lr, #1
 801ed36:	f8cd e018 	str.w	lr, [sp, #24]
 801ed3a:	f8b9 e000 	ldrh.w	lr, [r9]
 801ed3e:	9503      	str	r5, [sp, #12]
 801ed40:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801ed44:	b2b6      	uxth	r6, r6
 801ed46:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801ed4a:	9102      	str	r1, [sp, #8]
 801ed4c:	b2bf      	uxth	r7, r7
 801ed4e:	9601      	str	r6, [sp, #4]
 801ed50:	9700      	str	r7, [sp, #0]
 801ed52:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801ed56:	4621      	mov	r1, r4
 801ed58:	47a8      	blx	r5
 801ed5a:	b00e      	add	sp, #56	; 0x38
 801ed5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ed60:	f010 0f04 	tst.w	r0, #4
 801ed64:	e7d9      	b.n	801ed1a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801ed66:	6803      	ldr	r3, [r0, #0]
 801ed68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ed6a:	4798      	blx	r3
 801ed6c:	f8b9 3000 	ldrh.w	r3, [r9]
 801ed70:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801ed74:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801ed78:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801ed7c:	fb03 1202 	mla	r2, r3, r2, r1
 801ed80:	ebac 0c07 	sub.w	ip, ip, r7
 801ed84:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ed88:	435e      	muls	r6, r3
 801ed8a:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801ed8e:	2dff      	cmp	r5, #255	; 0xff
 801ed90:	eba3 0707 	sub.w	r7, r3, r7
 801ed94:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801ed98:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ed9c:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801eda0:	d049      	beq.n	801ee36 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801eda2:	43eb      	mvns	r3, r5
 801eda4:	fa1f f985 	uxth.w	r9, r5
 801eda8:	b2db      	uxtb	r3, r3
 801edaa:	42b0      	cmp	r0, r6
 801edac:	d266      	bcs.n	801ee7c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801edae:	eb00 0a0e 	add.w	sl, r0, lr
 801edb2:	4550      	cmp	r0, sl
 801edb4:	4621      	mov	r1, r4
 801edb6:	f104 0403 	add.w	r4, r4, #3
 801edba:	d25b      	bcs.n	801ee74 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801edbc:	8802      	ldrh	r2, [r0, #0]
 801edbe:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801edc2:	ea4f 2822 	mov.w	r8, r2, asr #8
 801edc6:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801edca:	fb11 f109 	smulbb	r1, r1, r9
 801edce:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801edd2:	10d5      	asrs	r5, r2, #3
 801edd4:	fb08 1803 	mla	r8, r8, r3, r1
 801edd8:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801eddc:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ede0:	fb11 f109 	smulbb	r1, r1, r9
 801ede4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801ede8:	fb05 1503 	mla	r5, r5, r3, r1
 801edec:	00d2      	lsls	r2, r2, #3
 801edee:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801edf2:	b2d2      	uxtb	r2, r2
 801edf4:	fb11 f109 	smulbb	r1, r1, r9
 801edf8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801edfc:	fa1f f888 	uxth.w	r8, r8
 801ee00:	fb02 1203 	mla	r2, r2, r3, r1
 801ee04:	b292      	uxth	r2, r2
 801ee06:	f108 0101 	add.w	r1, r8, #1
 801ee0a:	b2ad      	uxth	r5, r5
 801ee0c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801ee10:	1c51      	adds	r1, r2, #1
 801ee12:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ee16:	1c69      	adds	r1, r5, #1
 801ee18:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801ee1c:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801ee20:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ee24:	096d      	lsrs	r5, r5, #5
 801ee26:	ea42 0208 	orr.w	r2, r2, r8
 801ee2a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ee2e:	432a      	orrs	r2, r5
 801ee30:	f820 2b02 	strh.w	r2, [r0], #2
 801ee34:	e7bd      	b.n	801edb2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801ee36:	4a14      	ldr	r2, [pc, #80]	; (801ee88 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801ee38:	42b0      	cmp	r0, r6
 801ee3a:	d21f      	bcs.n	801ee7c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801ee3c:	eb00 050e 	add.w	r5, r0, lr
 801ee40:	42a8      	cmp	r0, r5
 801ee42:	4621      	mov	r1, r4
 801ee44:	f104 0403 	add.w	r4, r4, #3
 801ee48:	d210      	bcs.n	801ee6c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801ee4a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801ee4e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801ee52:	00db      	lsls	r3, r3, #3
 801ee54:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801ee58:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ee5c:	430b      	orrs	r3, r1
 801ee5e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801ee62:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801ee66:	f820 3b02 	strh.w	r3, [r0], #2
 801ee6a:	e7e9      	b.n	801ee40 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801ee6c:	4438      	add	r0, r7
 801ee6e:	eb01 040c 	add.w	r4, r1, ip
 801ee72:	e7e1      	b.n	801ee38 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801ee74:	4438      	add	r0, r7
 801ee76:	eb01 040c 	add.w	r4, r1, ip
 801ee7a:	e796      	b.n	801edaa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801ee7c:	4b03      	ldr	r3, [pc, #12]	; (801ee8c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801ee7e:	6818      	ldr	r0, [r3, #0]
 801ee80:	6803      	ldr	r3, [r0, #0]
 801ee82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ee84:	4798      	blx	r3
 801ee86:	e768      	b.n	801ed5a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801ee88:	fffff800 	.word	0xfffff800
 801ee8c:	2000c43c 	.word	0x2000c43c
 801ee90:	2000c436 	.word	0x2000c436

0801ee94 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801ee94:	b4f0      	push	{r4, r5, r6, r7}
 801ee96:	4616      	mov	r6, r2
 801ee98:	2e01      	cmp	r6, #1
 801ee9a:	461c      	mov	r4, r3
 801ee9c:	460d      	mov	r5, r1
 801ee9e:	9a04      	ldr	r2, [sp, #16]
 801eea0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801eea4:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801eea8:	d012      	beq.n	801eed0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801eeaa:	d303      	bcc.n	801eeb4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801eeac:	2e02      	cmp	r6, #2
 801eeae:	d00a      	beq.n	801eec6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801eeb0:	bcf0      	pop	{r4, r5, r6, r7}
 801eeb2:	4770      	bx	lr
 801eeb4:	6805      	ldr	r5, [r0, #0]
 801eeb6:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801eeba:	68ed      	ldr	r5, [r5, #12]
 801eebc:	4613      	mov	r3, r2
 801eebe:	46ac      	mov	ip, r5
 801eec0:	4622      	mov	r2, r4
 801eec2:	bcf0      	pop	{r4, r5, r6, r7}
 801eec4:	4760      	bx	ip
 801eec6:	4621      	mov	r1, r4
 801eec8:	4628      	mov	r0, r5
 801eeca:	bcf0      	pop	{r4, r5, r6, r7}
 801eecc:	f7ff bd94 	b.w	801e9f8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801eed0:	4621      	mov	r1, r4
 801eed2:	4628      	mov	r0, r5
 801eed4:	bcf0      	pop	{r4, r5, r6, r7}
 801eed6:	f7ff bee5 	b.w	801eca4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801eedc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801eedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eee0:	4681      	mov	r9, r0
 801eee2:	b093      	sub	sp, #76	; 0x4c
 801eee4:	6810      	ldr	r0, [r2, #0]
 801eee6:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801eeea:	4f6d      	ldr	r7, [pc, #436]	; (801f0a0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801eeec:	4688      	mov	r8, r1
 801eeee:	6851      	ldr	r1, [r2, #4]
 801eef0:	ac0e      	add	r4, sp, #56	; 0x38
 801eef2:	c403      	stmia	r4!, {r0, r1}
 801eef4:	6818      	ldr	r0, [r3, #0]
 801eef6:	6859      	ldr	r1, [r3, #4]
 801eef8:	ac10      	add	r4, sp, #64	; 0x40
 801eefa:	4616      	mov	r6, r2
 801eefc:	c403      	stmia	r4!, {r0, r1}
 801eefe:	a80e      	add	r0, sp, #56	; 0x38
 801ef00:	f7f8 ff96 	bl	8017e30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ef04:	4631      	mov	r1, r6
 801ef06:	a810      	add	r0, sp, #64	; 0x40
 801ef08:	f7f8 ffba 	bl	8017e80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ef0c:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801ef10:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801ef14:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801ef18:	4e62      	ldr	r6, [pc, #392]	; (801f0a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801ef1a:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801ef1e:	6830      	ldr	r0, [r6, #0]
 801ef20:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801ef24:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ef28:	4489      	add	r9, r1
 801ef2a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801ef2e:	440a      	add	r2, r1
 801ef30:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801ef34:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801ef38:	4413      	add	r3, r2
 801ef3a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801ef3e:	6803      	ldr	r3, [r0, #0]
 801ef40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ef42:	4798      	blx	r3
 801ef44:	f010 0f80 	tst.w	r0, #128	; 0x80
 801ef48:	6830      	ldr	r0, [r6, #0]
 801ef4a:	d01d      	beq.n	801ef88 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801ef4c:	2200      	movs	r2, #0
 801ef4e:	6801      	ldr	r1, [r0, #0]
 801ef50:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801ef54:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801ef58:	220b      	movs	r2, #11
 801ef5a:	9207      	str	r2, [sp, #28]
 801ef5c:	883a      	ldrh	r2, [r7, #0]
 801ef5e:	9206      	str	r2, [sp, #24]
 801ef60:	2201      	movs	r2, #1
 801ef62:	e9cd a204 	strd	sl, r2, [sp, #16]
 801ef66:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801ef6a:	9203      	str	r2, [sp, #12]
 801ef6c:	b2a4      	uxth	r4, r4
 801ef6e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801ef72:	9200      	str	r2, [sp, #0]
 801ef74:	b2ad      	uxth	r5, r5
 801ef76:	9502      	str	r5, [sp, #8]
 801ef78:	9401      	str	r4, [sp, #4]
 801ef7a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801ef7c:	4642      	mov	r2, r8
 801ef7e:	4649      	mov	r1, r9
 801ef80:	47a0      	blx	r4
 801ef82:	b013      	add	sp, #76	; 0x4c
 801ef84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef88:	6803      	ldr	r3, [r0, #0]
 801ef8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ef8c:	4798      	blx	r3
 801ef8e:	883b      	ldrh	r3, [r7, #0]
 801ef90:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801ef94:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801ef98:	fb03 1202 	mla	r2, r3, r2, r1
 801ef9c:	435d      	muls	r5, r3
 801ef9e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801efa2:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801efa6:	920c      	str	r2, [sp, #48]	; 0x30
 801efa8:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801efac:	1b12      	subs	r2, r2, r4
 801efae:	920d      	str	r2, [sp, #52]	; 0x34
 801efb0:	0062      	lsls	r2, r4, #1
 801efb2:	1b1c      	subs	r4, r3, r4
 801efb4:	0063      	lsls	r3, r4, #1
 801efb6:	920a      	str	r2, [sp, #40]	; 0x28
 801efb8:	930b      	str	r3, [sp, #44]	; 0x2c
 801efba:	f04f 0e04 	mov.w	lr, #4
 801efbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801efc0:	4298      	cmp	r0, r3
 801efc2:	d266      	bcs.n	801f092 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801efc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801efc6:	eb00 0b03 	add.w	fp, r0, r3
 801efca:	4558      	cmp	r0, fp
 801efcc:	d25c      	bcs.n	801f088 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801efce:	f819 3b01 	ldrb.w	r3, [r9], #1
 801efd2:	fb1e e303 	smlabb	r3, lr, r3, lr
 801efd6:	f858 2003 	ldr.w	r2, [r8, r3]
 801efda:	0e11      	lsrs	r1, r2, #24
 801efdc:	d012      	beq.n	801f004 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801efde:	29ff      	cmp	r1, #255	; 0xff
 801efe0:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801efe4:	d110      	bne.n	801f008 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801efe6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801efea:	d10d      	bne.n	801f008 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801efec:	0953      	lsrs	r3, r2, #5
 801efee:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801eff2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801eff6:	f027 0707 	bic.w	r7, r7, #7
 801effa:	431f      	orrs	r7, r3
 801effc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801f000:	433a      	orrs	r2, r7
 801f002:	8002      	strh	r2, [r0, #0]
 801f004:	3002      	adds	r0, #2
 801f006:	e7e0      	b.n	801efca <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801f008:	fb0a f101 	mul.w	r1, sl, r1
 801f00c:	8806      	ldrh	r6, [r0, #0]
 801f00e:	1c4b      	adds	r3, r1, #1
 801f010:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801f014:	1235      	asrs	r5, r6, #8
 801f016:	10f4      	asrs	r4, r6, #3
 801f018:	121b      	asrs	r3, r3, #8
 801f01a:	00f6      	lsls	r6, r6, #3
 801f01c:	b299      	uxth	r1, r3
 801f01e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801f022:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f026:	b2f6      	uxtb	r6, r6
 801f028:	43db      	mvns	r3, r3
 801f02a:	b2d2      	uxtb	r2, r2
 801f02c:	b2db      	uxtb	r3, r3
 801f02e:	fb1c fc01 	smulbb	ip, ip, r1
 801f032:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801f036:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801f03a:	fb12 f201 	smulbb	r2, r2, r1
 801f03e:	fb05 c503 	mla	r5, r5, r3, ip
 801f042:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801f046:	b2ff      	uxtb	r7, r7
 801f048:	fb06 2203 	mla	r2, r6, r3, r2
 801f04c:	b2ad      	uxth	r5, r5
 801f04e:	fb17 f701 	smulbb	r7, r7, r1
 801f052:	b292      	uxth	r2, r2
 801f054:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801f058:	fb04 7403 	mla	r4, r4, r3, r7
 801f05c:	f105 0c01 	add.w	ip, r5, #1
 801f060:	1c57      	adds	r7, r2, #1
 801f062:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801f066:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801f06a:	b2a4      	uxth	r4, r4
 801f06c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f070:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801f074:	433d      	orrs	r5, r7
 801f076:	1c67      	adds	r7, r4, #1
 801f078:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801f07c:	0964      	lsrs	r4, r4, #5
 801f07e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801f082:	4325      	orrs	r5, r4
 801f084:	8005      	strh	r5, [r0, #0]
 801f086:	e7bd      	b.n	801f004 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801f088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f08a:	4418      	add	r0, r3
 801f08c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f08e:	4499      	add	r9, r3
 801f090:	e795      	b.n	801efbe <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801f092:	4b04      	ldr	r3, [pc, #16]	; (801f0a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801f094:	6818      	ldr	r0, [r3, #0]
 801f096:	6803      	ldr	r3, [r0, #0]
 801f098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f09a:	4798      	blx	r3
 801f09c:	e771      	b.n	801ef82 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801f09e:	bf00      	nop
 801f0a0:	2000c436 	.word	0x2000c436
 801f0a4:	2000c43c 	.word	0x2000c43c

0801f0a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801f0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0ac:	b087      	sub	sp, #28
 801f0ae:	4680      	mov	r8, r0
 801f0b0:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801f0b4:	460d      	mov	r5, r1
 801f0b6:	4614      	mov	r4, r2
 801f0b8:	2e00      	cmp	r6, #0
 801f0ba:	f000 80b9 	beq.w	801f230 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801f0be:	6810      	ldr	r0, [r2, #0]
 801f0c0:	6851      	ldr	r1, [r2, #4]
 801f0c2:	af02      	add	r7, sp, #8
 801f0c4:	c703      	stmia	r7!, {r0, r1}
 801f0c6:	6818      	ldr	r0, [r3, #0]
 801f0c8:	6859      	ldr	r1, [r3, #4]
 801f0ca:	af04      	add	r7, sp, #16
 801f0cc:	c703      	stmia	r7!, {r0, r1}
 801f0ce:	a802      	add	r0, sp, #8
 801f0d0:	f7f8 feae 	bl	8017e30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f0d4:	4621      	mov	r1, r4
 801f0d6:	a804      	add	r0, sp, #16
 801f0d8:	f7f8 fed2 	bl	8017e80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f0dc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801f0e0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801f0e4:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801f0e8:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801f0ec:	fb14 2103 	smlabb	r1, r4, r3, r2
 801f0f0:	eb08 0401 	add.w	r4, r8, r1
 801f0f4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801f0f8:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801f0fc:	440a      	add	r2, r1
 801f0fe:	f8ad 2010 	strh.w	r2, [sp, #16]
 801f102:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801f106:	4413      	add	r3, r2
 801f108:	f8ad 3012 	strh.w	r3, [sp, #18]
 801f10c:	4b4a      	ldr	r3, [pc, #296]	; (801f238 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801f10e:	6818      	ldr	r0, [r3, #0]
 801f110:	6803      	ldr	r3, [r0, #0]
 801f112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f114:	4798      	blx	r3
 801f116:	4b49      	ldr	r3, [pc, #292]	; (801f23c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801f118:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801f11c:	881a      	ldrh	r2, [r3, #0]
 801f11e:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801f122:	2eff      	cmp	r6, #255	; 0xff
 801f124:	fb02 c101 	mla	r1, r2, r1, ip
 801f128:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801f12c:	fb02 f207 	mul.w	r2, r2, r7
 801f130:	f105 0104 	add.w	r1, r5, #4
 801f134:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801f138:	461d      	mov	r5, r3
 801f13a:	d05a      	beq.n	801f1f2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801f13c:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801f140:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801f144:	b2b6      	uxth	r6, r6
 801f146:	fa1f fe8e 	uxth.w	lr, lr
 801f14a:	9301      	str	r3, [sp, #4]
 801f14c:	4282      	cmp	r2, r0
 801f14e:	d96a      	bls.n	801f226 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801f150:	eb00 0b0a 	add.w	fp, r0, sl
 801f154:	4583      	cmp	fp, r0
 801f156:	d940      	bls.n	801f1da <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801f158:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f15c:	8805      	ldrh	r5, [r0, #0]
 801f15e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801f162:	122f      	asrs	r7, r5, #8
 801f164:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801f168:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f16c:	fb17 f70e 	smulbb	r7, r7, lr
 801f170:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801f174:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f178:	00ed      	lsls	r5, r5, #3
 801f17a:	fb0c 7c06 	mla	ip, ip, r6, r7
 801f17e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f182:	10df      	asrs	r7, r3, #3
 801f184:	b2ed      	uxtb	r5, r5
 801f186:	00db      	lsls	r3, r3, #3
 801f188:	fa1f fc8c 	uxth.w	ip, ip
 801f18c:	fb19 f90e 	smulbb	r9, r9, lr
 801f190:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f194:	b2db      	uxtb	r3, r3
 801f196:	fb15 f50e 	smulbb	r5, r5, lr
 801f19a:	fb07 9706 	mla	r7, r7, r6, r9
 801f19e:	fb03 5306 	mla	r3, r3, r6, r5
 801f1a2:	f10c 0901 	add.w	r9, ip, #1
 801f1a6:	b29b      	uxth	r3, r3
 801f1a8:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801f1ac:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801f1b0:	f103 0c01 	add.w	ip, r3, #1
 801f1b4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801f1b8:	b2bf      	uxth	r7, r7
 801f1ba:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f1be:	ea4c 0c09 	orr.w	ip, ip, r9
 801f1c2:	f107 0901 	add.w	r9, r7, #1
 801f1c6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801f1ca:	097f      	lsrs	r7, r7, #5
 801f1cc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f1d0:	ea4c 0c07 	orr.w	ip, ip, r7
 801f1d4:	f820 cb02 	strh.w	ip, [r0], #2
 801f1d8:	e7bc      	b.n	801f154 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801f1da:	9b01      	ldr	r3, [sp, #4]
 801f1dc:	881b      	ldrh	r3, [r3, #0]
 801f1de:	eba3 0308 	sub.w	r3, r3, r8
 801f1e2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f1e6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801f1ea:	eba3 0308 	sub.w	r3, r3, r8
 801f1ee:	441c      	add	r4, r3
 801f1f0:	e7ac      	b.n	801f14c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801f1f2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801f1f6:	4282      	cmp	r2, r0
 801f1f8:	d915      	bls.n	801f226 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801f1fa:	eb00 060a 	add.w	r6, r0, sl
 801f1fe:	4286      	cmp	r6, r0
 801f200:	d906      	bls.n	801f210 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801f202:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f206:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801f20a:	f820 3b02 	strh.w	r3, [r0], #2
 801f20e:	e7f6      	b.n	801f1fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801f210:	882b      	ldrh	r3, [r5, #0]
 801f212:	eba3 0308 	sub.w	r3, r3, r8
 801f216:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f21a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801f21e:	eba3 0308 	sub.w	r3, r3, r8
 801f222:	441c      	add	r4, r3
 801f224:	e7e7      	b.n	801f1f6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801f226:	4b04      	ldr	r3, [pc, #16]	; (801f238 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801f228:	6818      	ldr	r0, [r3, #0]
 801f22a:	6803      	ldr	r3, [r0, #0]
 801f22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f22e:	4798      	blx	r3
 801f230:	b007      	add	sp, #28
 801f232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f236:	bf00      	nop
 801f238:	2000c43c 	.word	0x2000c43c
 801f23c:	2000c436 	.word	0x2000c436

0801f240 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801f240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f244:	b091      	sub	sp, #68	; 0x44
 801f246:	4680      	mov	r8, r0
 801f248:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801f24c:	460f      	mov	r7, r1
 801f24e:	4614      	mov	r4, r2
 801f250:	2d00      	cmp	r5, #0
 801f252:	d051      	beq.n	801f2f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801f254:	6810      	ldr	r0, [r2, #0]
 801f256:	6851      	ldr	r1, [r2, #4]
 801f258:	f8df 9200 	ldr.w	r9, [pc, #512]	; 801f45c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801f25c:	ae0c      	add	r6, sp, #48	; 0x30
 801f25e:	c603      	stmia	r6!, {r0, r1}
 801f260:	6818      	ldr	r0, [r3, #0]
 801f262:	6859      	ldr	r1, [r3, #4]
 801f264:	ae0e      	add	r6, sp, #56	; 0x38
 801f266:	c603      	stmia	r6!, {r0, r1}
 801f268:	a80c      	add	r0, sp, #48	; 0x30
 801f26a:	f7f8 fde1 	bl	8017e30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f26e:	4621      	mov	r1, r4
 801f270:	a80e      	add	r0, sp, #56	; 0x38
 801f272:	f7f8 fe05 	bl	8017e80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f276:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801f27a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801f27e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801f282:	f8d9 0000 	ldr.w	r0, [r9]
 801f286:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801f28a:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801f28e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f292:	eb08 0401 	add.w	r4, r8, r1
 801f296:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801f29a:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801f460 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801f29e:	440a      	add	r2, r1
 801f2a0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801f2a4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801f2a8:	4413      	add	r3, r2
 801f2aa:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801f2ae:	6803      	ldr	r3, [r0, #0]
 801f2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f2b2:	4798      	blx	r3
 801f2b4:	f010 0f80 	tst.w	r0, #128	; 0x80
 801f2b8:	f8d9 0000 	ldr.w	r0, [r9]
 801f2bc:	d01f      	beq.n	801f2fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801f2be:	2200      	movs	r2, #0
 801f2c0:	6801      	ldr	r1, [r0, #0]
 801f2c2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801f2c6:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801f2ca:	220b      	movs	r2, #11
 801f2cc:	9207      	str	r2, [sp, #28]
 801f2ce:	f8b8 2000 	ldrh.w	r2, [r8]
 801f2d2:	9206      	str	r2, [sp, #24]
 801f2d4:	2201      	movs	r2, #1
 801f2d6:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801f2da:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801f2de:	9203      	str	r2, [sp, #12]
 801f2e0:	fa1f f28a 	uxth.w	r2, sl
 801f2e4:	9202      	str	r2, [sp, #8]
 801f2e6:	b2b6      	uxth	r6, r6
 801f2e8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801f2ec:	9200      	str	r2, [sp, #0]
 801f2ee:	9601      	str	r6, [sp, #4]
 801f2f0:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801f2f2:	463a      	mov	r2, r7
 801f2f4:	4621      	mov	r1, r4
 801f2f6:	47a8      	blx	r5
 801f2f8:	b011      	add	sp, #68	; 0x44
 801f2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2fe:	6803      	ldr	r3, [r0, #0]
 801f300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f302:	4798      	blx	r3
 801f304:	f8b8 2000 	ldrh.w	r2, [r8]
 801f308:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801f30c:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801f310:	2dff      	cmp	r5, #255	; 0xff
 801f312:	fb02 1303 	mla	r3, r2, r3, r1
 801f316:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f31a:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801f31e:	fb0a fa02 	mul.w	sl, sl, r2
 801f322:	d062      	beq.n	801f3ea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801f324:	ea6f 0c05 	mvn.w	ip, r5
 801f328:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801f32c:	930a      	str	r3, [sp, #40]	; 0x28
 801f32e:	b2ad      	uxth	r5, r5
 801f330:	fa5f fc8c 	uxtb.w	ip, ip
 801f334:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801f338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f33a:	4298      	cmp	r0, r3
 801f33c:	f080 8085 	bcs.w	801f44a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801f340:	eb00 0b09 	add.w	fp, r0, r9
 801f344:	4558      	cmp	r0, fp
 801f346:	d246      	bcs.n	801f3d6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801f348:	f814 eb01 	ldrb.w	lr, [r4], #1
 801f34c:	2303      	movs	r3, #3
 801f34e:	2204      	movs	r2, #4
 801f350:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801f354:	eb07 0a0e 	add.w	sl, r7, lr
 801f358:	8803      	ldrh	r3, [r0, #0]
 801f35a:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801f35e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801f362:	1219      	asrs	r1, r3, #8
 801f364:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801f368:	fb18 f805 	smulbb	r8, r8, r5
 801f36c:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801f370:	10da      	asrs	r2, r3, #3
 801f372:	fb01 810c 	mla	r1, r1, ip, r8
 801f376:	00db      	lsls	r3, r3, #3
 801f378:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801f37c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801f380:	b2db      	uxtb	r3, r3
 801f382:	fb18 f805 	smulbb	r8, r8, r5
 801f386:	fb1e fe05 	smulbb	lr, lr, r5
 801f38a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801f38e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801f392:	b289      	uxth	r1, r1
 801f394:	fb02 820c 	mla	r2, r2, ip, r8
 801f398:	fb03 e30c 	mla	r3, r3, ip, lr
 801f39c:	b292      	uxth	r2, r2
 801f39e:	b29b      	uxth	r3, r3
 801f3a0:	f101 0801 	add.w	r8, r1, #1
 801f3a4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801f3a8:	f103 0e01 	add.w	lr, r3, #1
 801f3ac:	f102 0801 	add.w	r8, r2, #1
 801f3b0:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801f3b4:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801f3b8:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801f3bc:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801f3c0:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801f3c4:	ea4e 0101 	orr.w	r1, lr, r1
 801f3c8:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f3cc:	ea41 0108 	orr.w	r1, r1, r8
 801f3d0:	f820 1b02 	strh.w	r1, [r0], #2
 801f3d4:	e7b6      	b.n	801f344 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801f3d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f3d8:	881b      	ldrh	r3, [r3, #0]
 801f3da:	1b9b      	subs	r3, r3, r6
 801f3dc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f3e0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801f3e4:	1b9b      	subs	r3, r3, r6
 801f3e6:	441c      	add	r4, r3
 801f3e8:	e7a6      	b.n	801f338 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801f3ea:	491b      	ldr	r1, [pc, #108]	; (801f458 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801f3ec:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801f3f0:	2203      	movs	r2, #3
 801f3f2:	2504      	movs	r5, #4
 801f3f4:	4550      	cmp	r0, sl
 801f3f6:	d228      	bcs.n	801f44a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801f3f8:	eb00 0c09 	add.w	ip, r0, r9
 801f3fc:	4560      	cmp	r0, ip
 801f3fe:	4623      	mov	r3, r4
 801f400:	d219      	bcs.n	801f436 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801f402:	f893 e000 	ldrb.w	lr, [r3]
 801f406:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801f40a:	eb07 0b0e 	add.w	fp, r7, lr
 801f40e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801f412:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801f416:	f89b b001 	ldrb.w	fp, [fp, #1]
 801f41a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801f41e:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801f422:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801f426:	ea43 030b 	orr.w	r3, r3, fp
 801f42a:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801f42e:	3401      	adds	r4, #1
 801f430:	f820 3b02 	strh.w	r3, [r0], #2
 801f434:	e7e2      	b.n	801f3fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801f436:	f8b8 3000 	ldrh.w	r3, [r8]
 801f43a:	1b9b      	subs	r3, r3, r6
 801f43c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f440:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801f444:	1b9b      	subs	r3, r3, r6
 801f446:	441c      	add	r4, r3
 801f448:	e7d4      	b.n	801f3f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801f44a:	4b04      	ldr	r3, [pc, #16]	; (801f45c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801f44c:	6818      	ldr	r0, [r3, #0]
 801f44e:	6803      	ldr	r3, [r0, #0]
 801f450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f452:	4798      	blx	r3
 801f454:	e750      	b.n	801f2f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801f456:	bf00      	nop
 801f458:	fffff800 	.word	0xfffff800
 801f45c:	2000c43c 	.word	0x2000c43c
 801f460:	2000c436 	.word	0x2000c436

0801f464 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801f464:	b430      	push	{r4, r5}
 801f466:	780d      	ldrb	r5, [r1, #0]
 801f468:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801f46c:	2d01      	cmp	r5, #1
 801f46e:	d00a      	beq.n	801f486 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801f470:	d305      	bcc.n	801f47e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801f472:	2d02      	cmp	r5, #2
 801f474:	d10b      	bne.n	801f48e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801f476:	9402      	str	r4, [sp, #8]
 801f478:	bc30      	pop	{r4, r5}
 801f47a:	f7ff be15 	b.w	801f0a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801f47e:	9402      	str	r4, [sp, #8]
 801f480:	bc30      	pop	{r4, r5}
 801f482:	f7ff bd2b 	b.w	801eedc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801f486:	9402      	str	r4, [sp, #8]
 801f488:	bc30      	pop	{r4, r5}
 801f48a:	f7ff bed9 	b.w	801f240 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801f48e:	bc30      	pop	{r4, r5}
 801f490:	4770      	bx	lr
	...

0801f494 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801f494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f498:	4604      	mov	r4, r0
 801f49a:	b087      	sub	sp, #28
 801f49c:	6810      	ldr	r0, [r2, #0]
 801f49e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801f4a2:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801f6dc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801f4a6:	460e      	mov	r6, r1
 801f4a8:	6851      	ldr	r1, [r2, #4]
 801f4aa:	ad02      	add	r5, sp, #8
 801f4ac:	c503      	stmia	r5!, {r0, r1}
 801f4ae:	6818      	ldr	r0, [r3, #0]
 801f4b0:	6859      	ldr	r1, [r3, #4]
 801f4b2:	ad04      	add	r5, sp, #16
 801f4b4:	4617      	mov	r7, r2
 801f4b6:	c503      	stmia	r5!, {r0, r1}
 801f4b8:	a802      	add	r0, sp, #8
 801f4ba:	f7f8 fcb9 	bl	8017e30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f4be:	4639      	mov	r1, r7
 801f4c0:	a804      	add	r0, sp, #16
 801f4c2:	f7f8 fcdd 	bl	8017e80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f4c6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801f4ca:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801f4ce:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801f4d2:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801f4d6:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801f4da:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f4de:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801f4e2:	440e      	add	r6, r1
 801f4e4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801f4e8:	440a      	add	r2, r1
 801f4ea:	f8ad 2010 	strh.w	r2, [sp, #16]
 801f4ee:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801f4f2:	4413      	add	r3, r2
 801f4f4:	f8ad 3012 	strh.w	r3, [sp, #18]
 801f4f8:	4b77      	ldr	r3, [pc, #476]	; (801f6d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801f4fa:	6818      	ldr	r0, [r3, #0]
 801f4fc:	6803      	ldr	r3, [r0, #0]
 801f4fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f500:	4798      	blx	r3
 801f502:	f8b9 b000 	ldrh.w	fp, [r9]
 801f506:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801f50a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801f50e:	fb0b 2303 	mla	r3, fp, r3, r2
 801f512:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f516:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f51a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801f51e:	fb05 f50b 	mul.w	r5, r5, fp
 801f522:	9300      	str	r3, [sp, #0]
 801f524:	d069      	beq.n	801f5fa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801f526:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801f52a:	4558      	cmp	r0, fp
 801f52c:	f080 80cc 	bcs.w	801f6c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801f530:	9b00      	ldr	r3, [sp, #0]
 801f532:	18c3      	adds	r3, r0, r3
 801f534:	9301      	str	r3, [sp, #4]
 801f536:	4631      	mov	r1, r6
 801f538:	9b01      	ldr	r3, [sp, #4]
 801f53a:	4298      	cmp	r0, r3
 801f53c:	d24f      	bcs.n	801f5de <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801f53e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f542:	2a00      	cmp	r2, #0
 801f544:	d048      	beq.n	801f5d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801f546:	fb0a f202 	mul.w	r2, sl, r2
 801f54a:	1c53      	adds	r3, r2, #1
 801f54c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f550:	121b      	asrs	r3, r3, #8
 801f552:	d041      	beq.n	801f5d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801f554:	8802      	ldrh	r2, [r0, #0]
 801f556:	f8b4 c000 	ldrh.w	ip, [r4]
 801f55a:	b29e      	uxth	r6, r3
 801f55c:	1215      	asrs	r5, r2, #8
 801f55e:	43db      	mvns	r3, r3
 801f560:	b2db      	uxtb	r3, r3
 801f562:	ea4f 272c 	mov.w	r7, ip, asr #8
 801f566:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f56a:	fb15 f503 	smulbb	r5, r5, r3
 801f56e:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801f572:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f576:	00d2      	lsls	r2, r2, #3
 801f578:	fb07 5706 	mla	r7, r7, r6, r5
 801f57c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801f580:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801f584:	b2d2      	uxtb	r2, r2
 801f586:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f58a:	b2bf      	uxth	r7, r7
 801f58c:	fb1e fe03 	smulbb	lr, lr, r3
 801f590:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801f594:	fa5f fc8c 	uxtb.w	ip, ip
 801f598:	fb12 f203 	smulbb	r2, r2, r3
 801f59c:	fb05 e506 	mla	r5, r5, r6, lr
 801f5a0:	fb0c 2c06 	mla	ip, ip, r6, r2
 801f5a4:	f107 0e01 	add.w	lr, r7, #1
 801f5a8:	fa1f fc8c 	uxth.w	ip, ip
 801f5ac:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801f5b0:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801f5b4:	f10c 0701 	add.w	r7, ip, #1
 801f5b8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801f5bc:	b2ad      	uxth	r5, r5
 801f5be:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f5c2:	ea47 070e 	orr.w	r7, r7, lr
 801f5c6:	f105 0e01 	add.w	lr, r5, #1
 801f5ca:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801f5ce:	096d      	lsrs	r5, r5, #5
 801f5d0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f5d4:	432f      	orrs	r7, r5
 801f5d6:	8007      	strh	r7, [r0, #0]
 801f5d8:	3002      	adds	r0, #2
 801f5da:	3402      	adds	r4, #2
 801f5dc:	e7ac      	b.n	801f538 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801f5de:	f8b9 3000 	ldrh.w	r3, [r9]
 801f5e2:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801f5e6:	eba3 0308 	sub.w	r3, r3, r8
 801f5ea:	eba6 0608 	sub.w	r6, r6, r8
 801f5ee:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801f5f2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f5f6:	440e      	add	r6, r1
 801f5f8:	e797      	b.n	801f52a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801f5fa:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801f5fe:	42a8      	cmp	r0, r5
 801f600:	d262      	bcs.n	801f6c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801f602:	9b00      	ldr	r3, [sp, #0]
 801f604:	4631      	mov	r1, r6
 801f606:	eb00 0b03 	add.w	fp, r0, r3
 801f60a:	4558      	cmp	r0, fp
 801f60c:	d24e      	bcs.n	801f6ac <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801f60e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f612:	b12b      	cbz	r3, 801f620 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801f614:	2bff      	cmp	r3, #255	; 0xff
 801f616:	f8b4 e000 	ldrh.w	lr, [r4]
 801f61a:	d104      	bne.n	801f626 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801f61c:	f8a0 e000 	strh.w	lr, [r0]
 801f620:	3002      	adds	r0, #2
 801f622:	3402      	adds	r4, #2
 801f624:	e7f1      	b.n	801f60a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801f626:	8802      	ldrh	r2, [r0, #0]
 801f628:	b29f      	uxth	r7, r3
 801f62a:	1216      	asrs	r6, r2, #8
 801f62c:	43db      	mvns	r3, r3
 801f62e:	b2db      	uxtb	r3, r3
 801f630:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f634:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f638:	fb16 f603 	smulbb	r6, r6, r3
 801f63c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801f640:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f644:	00d2      	lsls	r2, r2, #3
 801f646:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f64a:	b2d2      	uxtb	r2, r2
 801f64c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f650:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f654:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f658:	fb1a fa03 	smulbb	sl, sl, r3
 801f65c:	fa1f fc8c 	uxth.w	ip, ip
 801f660:	fb12 f303 	smulbb	r3, r2, r3
 801f664:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f668:	fa5f fe8e 	uxtb.w	lr, lr
 801f66c:	fb06 a607 	mla	r6, r6, r7, sl
 801f670:	f10c 0201 	add.w	r2, ip, #1
 801f674:	fb0e 3307 	mla	r3, lr, r7, r3
 801f678:	b2b6      	uxth	r6, r6
 801f67a:	b29b      	uxth	r3, r3
 801f67c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801f680:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801f684:	f106 0a01 	add.w	sl, r6, #1
 801f688:	f103 0c01 	add.w	ip, r3, #1
 801f68c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801f690:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801f694:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f698:	0976      	lsrs	r6, r6, #5
 801f69a:	ea4c 0c02 	orr.w	ip, ip, r2
 801f69e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f6a2:	ea4c 0c06 	orr.w	ip, ip, r6
 801f6a6:	f8a0 c000 	strh.w	ip, [r0]
 801f6aa:	e7b9      	b.n	801f620 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801f6ac:	f8b9 3000 	ldrh.w	r3, [r9]
 801f6b0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801f6b4:	eba3 0308 	sub.w	r3, r3, r8
 801f6b8:	eba6 0608 	sub.w	r6, r6, r8
 801f6bc:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801f6c0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f6c4:	440e      	add	r6, r1
 801f6c6:	e79a      	b.n	801f5fe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801f6c8:	4b03      	ldr	r3, [pc, #12]	; (801f6d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801f6ca:	6818      	ldr	r0, [r3, #0]
 801f6cc:	6803      	ldr	r3, [r0, #0]
 801f6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f6d0:	4798      	blx	r3
 801f6d2:	b007      	add	sp, #28
 801f6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6d8:	2000c43c 	.word	0x2000c43c
 801f6dc:	2000c436 	.word	0x2000c436

0801f6e0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801f6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6e4:	b089      	sub	sp, #36	; 0x24
 801f6e6:	4682      	mov	sl, r0
 801f6e8:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801f6ec:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f6ee:	460f      	mov	r7, r1
 801f6f0:	4691      	mov	r9, r2
 801f6f2:	4698      	mov	r8, r3
 801f6f4:	2e00      	cmp	r6, #0
 801f6f6:	d036      	beq.n	801f766 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801f6f8:	4608      	mov	r0, r1
 801f6fa:	f7fc f86d 	bl	801b7d8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f6fe:	4605      	mov	r5, r0
 801f700:	4638      	mov	r0, r7
 801f702:	f7fc f89d 	bl	801b840 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f706:	f8ad 000e 	strh.w	r0, [sp, #14]
 801f70a:	4638      	mov	r0, r7
 801f70c:	f8ad 9008 	strh.w	r9, [sp, #8]
 801f710:	f8ad 500c 	strh.w	r5, [sp, #12]
 801f714:	f8ad 800a 	strh.w	r8, [sp, #10]
 801f718:	f7fc f94a 	bl	801b9b0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f71c:	4605      	mov	r5, r0
 801f71e:	4638      	mov	r0, r7
 801f720:	f7fc f976 	bl	801ba10 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801f724:	4681      	mov	r9, r0
 801f726:	4638      	mov	r0, r7
 801f728:	f7fc f9c6 	bl	801bab8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f72c:	280b      	cmp	r0, #11
 801f72e:	d81a      	bhi.n	801f766 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801f730:	e8df f000 	tbb	[pc, r0]
 801f734:	1906aebd 	.word	0x1906aebd
 801f738:	19191919 	.word	0x19191919
 801f73c:	b5191919 	.word	0xb5191919
 801f740:	4bb0      	ldr	r3, [pc, #704]	; (801fa04 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801f742:	6818      	ldr	r0, [r3, #0]
 801f744:	6803      	ldr	r3, [r0, #0]
 801f746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f748:	4798      	blx	r3
 801f74a:	2eff      	cmp	r6, #255	; 0xff
 801f74c:	d121      	bne.n	801f792 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801f74e:	0683      	lsls	r3, r0, #26
 801f750:	d41f      	bmi.n	801f792 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801f752:	4638      	mov	r0, r7
 801f754:	f7fc f8f4 	bl	801b940 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801f758:	b940      	cbnz	r0, 801f76c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 801f75a:	4623      	mov	r3, r4
 801f75c:	aa02      	add	r2, sp, #8
 801f75e:	4629      	mov	r1, r5
 801f760:	4650      	mov	r0, sl
 801f762:	f7ff fa2f 	bl	801ebc4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801f766:	b009      	add	sp, #36	; 0x24
 801f768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f76c:	f10d 0818 	add.w	r8, sp, #24
 801f770:	4639      	mov	r1, r7
 801f772:	4640      	mov	r0, r8
 801f774:	f7fc f898 	bl	801b8a8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801f778:	e898 0003 	ldmia.w	r8, {r0, r1}
 801f77c:	af04      	add	r7, sp, #16
 801f77e:	e887 0003 	stmia.w	r7, {r0, r1}
 801f782:	4638      	mov	r0, r7
 801f784:	4621      	mov	r1, r4
 801f786:	f7f4 f82b 	bl	80137e0 <_ZN8touchgfx4RectaNERKS0_>
 801f78a:	4638      	mov	r0, r7
 801f78c:	f7f4 f86b 	bl	8013866 <_ZNK8touchgfx4Rect7isEmptyEv>
 801f790:	b130      	cbz	r0, 801f7a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801f792:	4633      	mov	r3, r6
 801f794:	4622      	mov	r2, r4
 801f796:	a902      	add	r1, sp, #8
 801f798:	4628      	mov	r0, r5
 801f79a:	f7ff f92d 	bl	801e9f8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f79e:	e7e2      	b.n	801f766 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801f7a0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801f7a4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801f7a8:	4293      	cmp	r3, r2
 801f7aa:	dd12      	ble.n	801f7d2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 801f7ac:	1a9b      	subs	r3, r3, r2
 801f7ae:	f9b4 0000 	ldrsh.w	r0, [r4]
 801f7b2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f7b6:	f8ad 0018 	strh.w	r0, [sp, #24]
 801f7ba:	f8ad 201a 	strh.w	r2, [sp, #26]
 801f7be:	f8ad 101c 	strh.w	r1, [sp, #28]
 801f7c2:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f7c6:	4642      	mov	r2, r8
 801f7c8:	4633      	mov	r3, r6
 801f7ca:	a902      	add	r1, sp, #8
 801f7cc:	4628      	mov	r0, r5
 801f7ce:	f7ff f913 	bl	801e9f8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f7d2:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801f7d6:	f9b4 2000 	ldrsh.w	r2, [r4]
 801f7da:	4293      	cmp	r3, r2
 801f7dc:	dd12      	ble.n	801f804 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 801f7de:	1a9b      	subs	r3, r3, r2
 801f7e0:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801f7e4:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801f7e8:	f8ad 2018 	strh.w	r2, [sp, #24]
 801f7ec:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f7f0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f7f4:	f8ad 101e 	strh.w	r1, [sp, #30]
 801f7f8:	23ff      	movs	r3, #255	; 0xff
 801f7fa:	4642      	mov	r2, r8
 801f7fc:	a902      	add	r1, sp, #8
 801f7fe:	4628      	mov	r0, r5
 801f800:	f7ff f8fa 	bl	801e9f8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f804:	463b      	mov	r3, r7
 801f806:	aa02      	add	r2, sp, #8
 801f808:	4629      	mov	r1, r5
 801f80a:	4650      	mov	r0, sl
 801f80c:	f7ff f9da 	bl	801ebc4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801f810:	88a2      	ldrh	r2, [r4, #4]
 801f812:	8823      	ldrh	r3, [r4, #0]
 801f814:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801f818:	4413      	add	r3, r2
 801f81a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f81e:	440a      	add	r2, r1
 801f820:	b29b      	uxth	r3, r3
 801f822:	b292      	uxth	r2, r2
 801f824:	b211      	sxth	r1, r2
 801f826:	b218      	sxth	r0, r3
 801f828:	4288      	cmp	r0, r1
 801f82a:	dd12      	ble.n	801f852 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 801f82c:	1a9b      	subs	r3, r3, r2
 801f82e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801f832:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801f836:	f8ad 1018 	strh.w	r1, [sp, #24]
 801f83a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f83e:	f8ad 001e 	strh.w	r0, [sp, #30]
 801f842:	23ff      	movs	r3, #255	; 0xff
 801f844:	4642      	mov	r2, r8
 801f846:	a902      	add	r1, sp, #8
 801f848:	4628      	mov	r0, r5
 801f84a:	f8ad 601a 	strh.w	r6, [sp, #26]
 801f84e:	f7ff f8d3 	bl	801e9f8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f852:	88e2      	ldrh	r2, [r4, #6]
 801f854:	8863      	ldrh	r3, [r4, #2]
 801f856:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801f85a:	4413      	add	r3, r2
 801f85c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801f860:	440a      	add	r2, r1
 801f862:	b29b      	uxth	r3, r3
 801f864:	b292      	uxth	r2, r2
 801f866:	b211      	sxth	r1, r2
 801f868:	b218      	sxth	r0, r3
 801f86a:	4288      	cmp	r0, r1
 801f86c:	f77f af7b 	ble.w	801f766 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801f870:	1a9b      	subs	r3, r3, r2
 801f872:	f9b4 6000 	ldrsh.w	r6, [r4]
 801f876:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801f87a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f87e:	f8ad 6018 	strh.w	r6, [sp, #24]
 801f882:	f8ad 101a 	strh.w	r1, [sp, #26]
 801f886:	f8ad 001c 	strh.w	r0, [sp, #28]
 801f88a:	23ff      	movs	r3, #255	; 0xff
 801f88c:	4642      	mov	r2, r8
 801f88e:	e782      	b.n	801f796 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 801f890:	4633      	mov	r3, r6
 801f892:	4622      	mov	r2, r4
 801f894:	a902      	add	r1, sp, #8
 801f896:	4628      	mov	r0, r5
 801f898:	f7ff fa04 	bl	801eca4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801f89c:	e763      	b.n	801f766 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801f89e:	9600      	str	r6, [sp, #0]
 801f8a0:	4623      	mov	r3, r4
 801f8a2:	aa02      	add	r2, sp, #8
 801f8a4:	4649      	mov	r1, r9
 801f8a6:	4628      	mov	r0, r5
 801f8a8:	f7ff fddc 	bl	801f464 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801f8ac:	e75b      	b.n	801f766 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801f8ae:	4638      	mov	r0, r7
 801f8b0:	f7fc f846 	bl	801b940 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801f8b4:	b950      	cbnz	r0, 801f8cc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 801f8b6:	e9cd 6000 	strd	r6, r0, [sp]
 801f8ba:	f8da 3000 	ldr.w	r3, [sl]
 801f8be:	aa02      	add	r2, sp, #8
 801f8c0:	68de      	ldr	r6, [r3, #12]
 801f8c2:	4629      	mov	r1, r5
 801f8c4:	4623      	mov	r3, r4
 801f8c6:	4650      	mov	r0, sl
 801f8c8:	47b0      	blx	r6
 801f8ca:	e74c      	b.n	801f766 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801f8cc:	f10d 0818 	add.w	r8, sp, #24
 801f8d0:	4639      	mov	r1, r7
 801f8d2:	4640      	mov	r0, r8
 801f8d4:	f7fb ffe8 	bl	801b8a8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801f8d8:	e898 0003 	ldmia.w	r8, {r0, r1}
 801f8dc:	af04      	add	r7, sp, #16
 801f8de:	e887 0003 	stmia.w	r7, {r0, r1}
 801f8e2:	4638      	mov	r0, r7
 801f8e4:	4621      	mov	r1, r4
 801f8e6:	f7f3 ff7b 	bl	80137e0 <_ZN8touchgfx4RectaNERKS0_>
 801f8ea:	4638      	mov	r0, r7
 801f8ec:	f7f3 ffbb 	bl	8013866 <_ZNK8touchgfx4Rect7isEmptyEv>
 801f8f0:	b138      	cbz	r0, 801f902 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 801f8f2:	9600      	str	r6, [sp, #0]
 801f8f4:	4623      	mov	r3, r4
 801f8f6:	aa02      	add	r2, sp, #8
 801f8f8:	4649      	mov	r1, r9
 801f8fa:	4628      	mov	r0, r5
 801f8fc:	f7ff fdca 	bl	801f494 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801f900:	e731      	b.n	801f766 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801f902:	e9cd 6000 	strd	r6, r0, [sp]
 801f906:	f8da 3000 	ldr.w	r3, [sl]
 801f90a:	aa02      	add	r2, sp, #8
 801f90c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801f910:	4629      	mov	r1, r5
 801f912:	463b      	mov	r3, r7
 801f914:	4650      	mov	r0, sl
 801f916:	47d8      	blx	fp
 801f918:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801f91c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801f920:	4293      	cmp	r3, r2
 801f922:	dd13      	ble.n	801f94c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 801f924:	f9b4 0000 	ldrsh.w	r0, [r4]
 801f928:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f92c:	f8ad 0018 	strh.w	r0, [sp, #24]
 801f930:	1a9b      	subs	r3, r3, r2
 801f932:	f8ad 201a 	strh.w	r2, [sp, #26]
 801f936:	f8ad 101c 	strh.w	r1, [sp, #28]
 801f93a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f93e:	9600      	str	r6, [sp, #0]
 801f940:	4643      	mov	r3, r8
 801f942:	aa02      	add	r2, sp, #8
 801f944:	4649      	mov	r1, r9
 801f946:	4628      	mov	r0, r5
 801f948:	f7ff fda4 	bl	801f494 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801f94c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801f950:	f9b4 2000 	ldrsh.w	r2, [r4]
 801f954:	4293      	cmp	r3, r2
 801f956:	dd13      	ble.n	801f980 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 801f958:	1a9b      	subs	r3, r3, r2
 801f95a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801f95e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801f962:	f8ad 2018 	strh.w	r2, [sp, #24]
 801f966:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f96a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f96e:	f8ad 101e 	strh.w	r1, [sp, #30]
 801f972:	9600      	str	r6, [sp, #0]
 801f974:	4643      	mov	r3, r8
 801f976:	aa02      	add	r2, sp, #8
 801f978:	4649      	mov	r1, r9
 801f97a:	4628      	mov	r0, r5
 801f97c:	f7ff fd8a 	bl	801f494 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801f980:	88a2      	ldrh	r2, [r4, #4]
 801f982:	8823      	ldrh	r3, [r4, #0]
 801f984:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801f988:	4413      	add	r3, r2
 801f98a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f98e:	440a      	add	r2, r1
 801f990:	b29b      	uxth	r3, r3
 801f992:	b292      	uxth	r2, r2
 801f994:	b211      	sxth	r1, r2
 801f996:	b218      	sxth	r0, r3
 801f998:	4288      	cmp	r0, r1
 801f99a:	dd13      	ble.n	801f9c4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 801f99c:	1a9b      	subs	r3, r3, r2
 801f99e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801f9a2:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801f9a6:	f8ad 1018 	strh.w	r1, [sp, #24]
 801f9aa:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f9ae:	f8ad 001e 	strh.w	r0, [sp, #30]
 801f9b2:	9600      	str	r6, [sp, #0]
 801f9b4:	4643      	mov	r3, r8
 801f9b6:	aa02      	add	r2, sp, #8
 801f9b8:	4649      	mov	r1, r9
 801f9ba:	4628      	mov	r0, r5
 801f9bc:	f8ad 701a 	strh.w	r7, [sp, #26]
 801f9c0:	f7ff fd68 	bl	801f494 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801f9c4:	88e2      	ldrh	r2, [r4, #6]
 801f9c6:	8863      	ldrh	r3, [r4, #2]
 801f9c8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801f9cc:	4413      	add	r3, r2
 801f9ce:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801f9d2:	440a      	add	r2, r1
 801f9d4:	b29b      	uxth	r3, r3
 801f9d6:	b292      	uxth	r2, r2
 801f9d8:	b211      	sxth	r1, r2
 801f9da:	b218      	sxth	r0, r3
 801f9dc:	4288      	cmp	r0, r1
 801f9de:	f77f aec2 	ble.w	801f766 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801f9e2:	f9b4 7000 	ldrsh.w	r7, [r4]
 801f9e6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801f9ea:	f8ad 7018 	strh.w	r7, [sp, #24]
 801f9ee:	1a9b      	subs	r3, r3, r2
 801f9f0:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f9f4:	f8ad 101a 	strh.w	r1, [sp, #26]
 801f9f8:	f8ad 001c 	strh.w	r0, [sp, #28]
 801f9fc:	9600      	str	r6, [sp, #0]
 801f9fe:	4643      	mov	r3, r8
 801fa00:	e779      	b.n	801f8f6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 801fa02:	bf00      	nop
 801fa04:	2000c43c 	.word	0x2000c43c

0801fa08 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801fa08:	b180      	cbz	r0, 801fa2c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801fa0a:	2903      	cmp	r1, #3
 801fa0c:	d81c      	bhi.n	801fa48 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801fa0e:	e8df f001 	tbb	[pc, r1]
 801fa12:	1d02      	.short	0x1d02
 801fa14:	1f08      	.short	0x1f08
 801fa16:	4b10      	ldr	r3, [pc, #64]	; (801fa58 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801fa18:	8818      	ldrh	r0, [r3, #0]
 801fa1a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801fa1e:	4240      	negs	r0, r0
 801fa20:	4770      	bx	lr
 801fa22:	4b0d      	ldr	r3, [pc, #52]	; (801fa58 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801fa24:	8818      	ldrh	r0, [r3, #0]
 801fa26:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801fa2a:	4770      	bx	lr
 801fa2c:	2903      	cmp	r1, #3
 801fa2e:	d80b      	bhi.n	801fa48 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801fa30:	a301      	add	r3, pc, #4	; (adr r3, 801fa38 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801fa32:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801fa36:	bf00      	nop
 801fa38:	0801fa4d 	.word	0x0801fa4d
 801fa3c:	0801fa23 	.word	0x0801fa23
 801fa40:	0801fa51 	.word	0x0801fa51
 801fa44:	0801fa17 	.word	0x0801fa17
 801fa48:	2000      	movs	r0, #0
 801fa4a:	4770      	bx	lr
 801fa4c:	2001      	movs	r0, #1
 801fa4e:	4770      	bx	lr
 801fa50:	f04f 30ff 	mov.w	r0, #4294967295
 801fa54:	4770      	bx	lr
 801fa56:	bf00      	nop
 801fa58:	2000c436 	.word	0x2000c436

0801fa5c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801fa5c:	b180      	cbz	r0, 801fa80 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801fa5e:	2903      	cmp	r1, #3
 801fa60:	d81c      	bhi.n	801fa9c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801fa62:	e8df f001 	tbb	[pc, r1]
 801fa66:	021d      	.short	0x021d
 801fa68:	071f      	.short	0x071f
 801fa6a:	4b10      	ldr	r3, [pc, #64]	; (801faac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801fa6c:	8818      	ldrh	r0, [r3, #0]
 801fa6e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801fa72:	4770      	bx	lr
 801fa74:	4b0d      	ldr	r3, [pc, #52]	; (801faac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801fa76:	8818      	ldrh	r0, [r3, #0]
 801fa78:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801fa7c:	4240      	negs	r0, r0
 801fa7e:	4770      	bx	lr
 801fa80:	2903      	cmp	r1, #3
 801fa82:	d80b      	bhi.n	801fa9c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801fa84:	a301      	add	r3, pc, #4	; (adr r3, 801fa8c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801fa86:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801fa8a:	bf00      	nop
 801fa8c:	0801fa6b 	.word	0x0801fa6b
 801fa90:	0801faa5 	.word	0x0801faa5
 801fa94:	0801fa75 	.word	0x0801fa75
 801fa98:	0801faa1 	.word	0x0801faa1
 801fa9c:	2000      	movs	r0, #0
 801fa9e:	4770      	bx	lr
 801faa0:	2001      	movs	r0, #1
 801faa2:	4770      	bx	lr
 801faa4:	f04f 30ff 	mov.w	r0, #4294967295
 801faa8:	4770      	bx	lr
 801faaa:	bf00      	nop
 801faac:	2000c436 	.word	0x2000c436

0801fab0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801fab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fab4:	b099      	sub	sp, #100	; 0x64
 801fab6:	910b      	str	r1, [sp, #44]	; 0x2c
 801fab8:	a914      	add	r1, sp, #80	; 0x50
 801faba:	e881 000c 	stmia.w	r1, {r2, r3}
 801fabe:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801fac2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801fac6:	f891 900d 	ldrb.w	r9, [r1, #13]
 801faca:	9309      	str	r3, [sp, #36]	; 0x24
 801facc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801fad0:	9310      	str	r3, [sp, #64]	; 0x40
 801fad2:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801fad6:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801fada:	930c      	str	r3, [sp, #48]	; 0x30
 801fadc:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801fae0:	798f      	ldrb	r7, [r1, #6]
 801fae2:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801fae6:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801faea:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801faee:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801faf2:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801faf6:	431f      	orrs	r7, r3
 801faf8:	f000 8195 	beq.w	801fe26 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801fafc:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801fb00:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801fb04:	f891 9007 	ldrb.w	r9, [r1, #7]
 801fb08:	ea59 0903 	orrs.w	r9, r9, r3
 801fb0c:	f000 818b 	beq.w	801fe26 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801fb10:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801fb14:	b29b      	uxth	r3, r3
 801fb16:	2d00      	cmp	r5, #0
 801fb18:	f000 812e 	beq.w	801fd78 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 801fb1c:	1aed      	subs	r5, r5, r3
 801fb1e:	b2ad      	uxth	r5, r5
 801fb20:	042b      	lsls	r3, r5, #16
 801fb22:	d502      	bpl.n	801fb2a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801fb24:	1b64      	subs	r4, r4, r5
 801fb26:	b224      	sxth	r4, r4
 801fb28:	2500      	movs	r5, #0
 801fb2a:	f9b2 1000 	ldrsh.w	r1, [r2]
 801fb2e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801fb32:	428c      	cmp	r4, r1
 801fb34:	b28b      	uxth	r3, r1
 801fb36:	bfbf      	itttt	lt
 801fb38:	18ed      	addlt	r5, r5, r3
 801fb3a:	1b2c      	sublt	r4, r5, r4
 801fb3c:	b2a5      	uxthlt	r5, r4
 801fb3e:	460c      	movlt	r4, r1
 801fb40:	8891      	ldrh	r1, [r2, #4]
 801fb42:	440b      	add	r3, r1
 801fb44:	b21b      	sxth	r3, r3
 801fb46:	930f      	str	r3, [sp, #60]	; 0x3c
 801fb48:	88d3      	ldrh	r3, [r2, #6]
 801fb4a:	8852      	ldrh	r2, [r2, #2]
 801fb4c:	4413      	add	r3, r2
 801fb4e:	b21b      	sxth	r3, r3
 801fb50:	930d      	str	r3, [sp, #52]	; 0x34
 801fb52:	4bbe      	ldr	r3, [pc, #760]	; (801fe4c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801fb54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fb56:	f893 b000 	ldrb.w	fp, [r3]
 801fb5a:	f10b 3cff 	add.w	ip, fp, #4294967295
 801fb5e:	f1dc 0300 	rsbs	r3, ip, #0
 801fb62:	eb43 030c 	adc.w	r3, r3, ip
 801fb66:	930e      	str	r3, [sp, #56]	; 0x38
 801fb68:	4621      	mov	r1, r4
 801fb6a:	4653      	mov	r3, sl
 801fb6c:	a814      	add	r0, sp, #80	; 0x50
 801fb6e:	f7f7 ffd9 	bl	8017b24 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801fb72:	4621      	mov	r1, r4
 801fb74:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801fb78:	4653      	mov	r3, sl
 801fb7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fb7c:	a814      	add	r0, sp, #80	; 0x50
 801fb7e:	f7f7 ffee 	bl	8017b5e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801fb82:	a918      	add	r1, sp, #96	; 0x60
 801fb84:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801fb88:	a817      	add	r0, sp, #92	; 0x5c
 801fb8a:	f7f8 f90f 	bl	8017dac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801fb8e:	f1ba 0f00 	cmp.w	sl, #0
 801fb92:	f040 80f4 	bne.w	801fd7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801fb96:	f1bb 0f01 	cmp.w	fp, #1
 801fb9a:	f040 80f8 	bne.w	801fd8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801fb9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fba0:	2b00      	cmp	r3, #0
 801fba2:	f040 8145 	bne.w	801fe30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801fba6:	b2ba      	uxth	r2, r7
 801fba8:	b905      	cbnz	r5, 801fbac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801fbaa:	b16e      	cbz	r6, 801fbc8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801fbac:	fb06 5302 	mla	r3, r6, r2, r5
 801fbb0:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801fbb2:	fb08 f303 	mul.w	r3, r8, r3
 801fbb6:	4631      	mov	r1, r6
 801fbb8:	f003 0607 	and.w	r6, r3, #7
 801fbbc:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801fbc0:	9328      	str	r3, [sp, #160]	; 0xa0
 801fbc2:	eba9 0301 	sub.w	r3, r9, r1
 801fbc6:	930a      	str	r3, [sp, #40]	; 0x28
 801fbc8:	4651      	mov	r1, sl
 801fbca:	980e      	ldr	r0, [sp, #56]	; 0x38
 801fbcc:	f7ff ff1c 	bl	801fa08 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801fbd0:	4681      	mov	r9, r0
 801fbd2:	980e      	ldr	r0, [sp, #56]	; 0x38
 801fbd4:	f7ff ff42 	bl	801fa5c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801fbd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fbda:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fbdc:	eba3 0a01 	sub.w	sl, r3, r1
 801fbe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fbe2:	459a      	cmp	sl, r3
 801fbe4:	bfa8      	it	ge
 801fbe6:	469a      	movge	sl, r3
 801fbe8:	f1ba 0f00 	cmp.w	sl, #0
 801fbec:	4683      	mov	fp, r0
 801fbee:	f340 811a 	ble.w	801fe26 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801fbf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fbf4:	1b64      	subs	r4, r4, r5
 801fbf6:	1b1c      	subs	r4, r3, r4
 801fbf8:	42bc      	cmp	r4, r7
 801fbfa:	bfd4      	ite	le
 801fbfc:	ebc5 0504 	rsble	r5, r5, r4
 801fc00:	ebc5 0507 	rsbgt	r5, r5, r7
 801fc04:	2d00      	cmp	r5, #0
 801fc06:	f340 810e 	ble.w	801fe26 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801fc0a:	1b52      	subs	r2, r2, r5
 801fc0c:	fb08 f302 	mul.w	r3, r8, r2
 801fc10:	930f      	str	r3, [sp, #60]	; 0x3c
 801fc12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fc14:	2b00      	cmp	r3, #0
 801fc16:	f040 8116 	bne.w	801fe46 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801fc1a:	4b8d      	ldr	r3, [pc, #564]	; (801fe50 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801fc1c:	6818      	ldr	r0, [r3, #0]
 801fc1e:	6803      	ldr	r3, [r0, #0]
 801fc20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fc22:	4798      	blx	r3
 801fc24:	2301      	movs	r3, #1
 801fc26:	fa03 f308 	lsl.w	r3, r3, r8
 801fc2a:	4a8a      	ldr	r2, [pc, #552]	; (801fe54 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801fc2c:	3b01      	subs	r3, #1
 801fc2e:	b2db      	uxtb	r3, r3
 801fc30:	8811      	ldrh	r1, [r2, #0]
 801fc32:	930e      	str	r3, [sp, #56]	; 0x38
 801fc34:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801fc38:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801fc3c:	fb01 2303 	mla	r3, r1, r3, r2
 801fc40:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801fc44:	930a      	str	r3, [sp, #40]	; 0x28
 801fc46:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fc48:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801fc4c:	9313      	str	r3, [sp, #76]	; 0x4c
 801fc4e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fc50:	0a19      	lsrs	r1, r3, #8
 801fc52:	b2cb      	uxtb	r3, r1
 801fc54:	9312      	str	r3, [sp, #72]	; 0x48
 801fc56:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fc58:	b2db      	uxtb	r3, r3
 801fc5a:	9311      	str	r3, [sp, #68]	; 0x44
 801fc5c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fc5e:	095a      	lsrs	r2, r3, #5
 801fc60:	4b7d      	ldr	r3, [pc, #500]	; (801fe58 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801fc62:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fc66:	400b      	ands	r3, r1
 801fc68:	4313      	orrs	r3, r2
 801fc6a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801fc6c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801fc70:	4313      	orrs	r3, r2
 801fc72:	b29b      	uxth	r3, r3
 801fc74:	9310      	str	r3, [sp, #64]	; 0x40
 801fc76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fc78:	781a      	ldrb	r2, [r3, #0]
 801fc7a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801fc7e:	4132      	asrs	r2, r6
 801fc80:	fb05 b919 	mls	r9, r5, r9, fp
 801fc84:	fb03 fb05 	mul.w	fp, r3, r5
 801fc88:	b2d2      	uxtb	r2, r2
 801fc8a:	930d      	str	r3, [sp, #52]	; 0x34
 801fc8c:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801fc90:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801fc94:	f0c0 80f5 	bcc.w	801fe82 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 801fc98:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801fc9c:	46ae      	mov	lr, r5
 801fc9e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801fca2:	f0c0 80dd 	bcc.w	801fe60 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801fca6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fca8:	4013      	ands	r3, r2
 801fcaa:	d055      	beq.n	801fd58 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801fcac:	20ff      	movs	r0, #255	; 0xff
 801fcae:	990e      	ldr	r1, [sp, #56]	; 0x38
 801fcb0:	fb90 f1f1 	sdiv	r1, r0, r1
 801fcb4:	434b      	muls	r3, r1
 801fcb6:	2bfe      	cmp	r3, #254	; 0xfe
 801fcb8:	dd03      	ble.n	801fcc2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801fcba:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fcbc:	4281      	cmp	r1, r0
 801fcbe:	f000 80cd 	beq.w	801fe5c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801fcc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fcc4:	f8bc 4000 	ldrh.w	r4, [ip]
 801fcc8:	fb11 f303 	smulbb	r3, r1, r3
 801fccc:	b29b      	uxth	r3, r3
 801fcce:	1c59      	adds	r1, r3, #1
 801fcd0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801fcd4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fcd8:	b29f      	uxth	r7, r3
 801fcda:	43db      	mvns	r3, r3
 801fcdc:	b2db      	uxtb	r3, r3
 801fcde:	9309      	str	r3, [sp, #36]	; 0x24
 801fce0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fce2:	1220      	asrs	r0, r4, #8
 801fce4:	fb13 f907 	smulbb	r9, r3, r7
 801fce8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801fcec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fcee:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801fcf2:	fb00 9003 	mla	r0, r0, r3, r9
 801fcf6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fcf8:	10e1      	asrs	r1, r4, #3
 801fcfa:	fb13 f907 	smulbb	r9, r3, r7
 801fcfe:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801fd02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd04:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801fd08:	fb01 9103 	mla	r1, r1, r3, r9
 801fd0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fd0e:	00e4      	lsls	r4, r4, #3
 801fd10:	fb13 f707 	smulbb	r7, r3, r7
 801fd14:	b2e4      	uxtb	r4, r4
 801fd16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd18:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801fd1c:	fb04 7403 	mla	r4, r4, r3, r7
 801fd20:	b280      	uxth	r0, r0
 801fd22:	b2a4      	uxth	r4, r4
 801fd24:	1c43      	adds	r3, r0, #1
 801fd26:	f104 0901 	add.w	r9, r4, #1
 801fd2a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801fd2e:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801fd32:	b289      	uxth	r1, r1
 801fd34:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801fd38:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801fd3c:	ea49 0000 	orr.w	r0, r9, r0
 801fd40:	f101 0901 	add.w	r9, r1, #1
 801fd44:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801fd48:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801fd4c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801fd50:	ea40 0009 	orr.w	r0, r0, r9
 801fd54:	f8ac 0000 	strh.w	r0, [ip]
 801fd58:	4446      	add	r6, r8
 801fd5a:	b2b6      	uxth	r6, r6
 801fd5c:	2e07      	cmp	r6, #7
 801fd5e:	bf81      	itttt	hi
 801fd60:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801fd62:	785a      	ldrbhi	r2, [r3, #1]
 801fd64:	3301      	addhi	r3, #1
 801fd66:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801fd68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fd6a:	bf9a      	itte	ls
 801fd6c:	fa42 f208 	asrls.w	r2, r2, r8
 801fd70:	b2d2      	uxtbls	r2, r2
 801fd72:	2600      	movhi	r6, #0
 801fd74:	449c      	add	ip, r3
 801fd76:	e792      	b.n	801fc9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801fd78:	441c      	add	r4, r3
 801fd7a:	b224      	sxth	r4, r4
 801fd7c:	e6d5      	b.n	801fb2a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801fd7e:	f1ba 0f01 	cmp.w	sl, #1
 801fd82:	f47f af0c 	bne.w	801fb9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801fd86:	f1bb 0f01 	cmp.w	fp, #1
 801fd8a:	f47f af08 	bne.w	801fb9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801fd8e:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 801fe50 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801fd92:	f8db 0000 	ldr.w	r0, [fp]
 801fd96:	6803      	ldr	r3, [r0, #0]
 801fd98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fd9a:	4798      	blx	r3
 801fd9c:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801fda0:	465a      	mov	r2, fp
 801fda2:	d006      	beq.n	801fdb2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801fda4:	f1b8 0f04 	cmp.w	r8, #4
 801fda8:	d140      	bne.n	801fe2c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801fdaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fdac:	3300      	adds	r3, #0
 801fdae:	bf18      	it	ne
 801fdb0:	2301      	movne	r3, #1
 801fdb2:	0580      	lsls	r0, r0, #22
 801fdb4:	d56e      	bpl.n	801fe94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801fdb6:	f1b8 0f08 	cmp.w	r8, #8
 801fdba:	d16b      	bne.n	801fe94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801fdbc:	2b00      	cmp	r3, #0
 801fdbe:	bf0c      	ite	eq
 801fdc0:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801fdc4:	f44f 7180 	movne.w	r1, #256	; 0x100
 801fdc8:	2d00      	cmp	r5, #0
 801fdca:	f47f aee8 	bne.w	801fb9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801fdce:	2e00      	cmp	r6, #0
 801fdd0:	f47f aee5 	bne.w	801fb9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801fdd4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801fdd6:	19e3      	adds	r3, r4, r7
 801fdd8:	4283      	cmp	r3, r0
 801fdda:	f73f aee0 	bgt.w	801fb9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801fdde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fde0:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fde2:	444b      	add	r3, r9
 801fde4:	4283      	cmp	r3, r0
 801fde6:	f73f aeda 	bgt.w	801fb9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801fdea:	6810      	ldr	r0, [r2, #0]
 801fdec:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801fdf0:	6804      	ldr	r4, [r0, #0]
 801fdf2:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801fdf6:	b2bf      	uxth	r7, r7
 801fdf8:	f1b8 0f08 	cmp.w	r8, #8
 801fdfc:	f04f 0500 	mov.w	r5, #0
 801fe00:	bf18      	it	ne
 801fe02:	3701      	addne	r7, #1
 801fe04:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801fe08:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fe0a:	9104      	str	r1, [sp, #16]
 801fe0c:	bf18      	it	ne
 801fe0e:	f027 0701 	bicne.w	r7, r7, #1
 801fe12:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801fe14:	bf18      	it	ne
 801fe16:	b2bf      	uxthne	r7, r7
 801fe18:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801fe1c:	e9cd 7900 	strd	r7, r9, [sp]
 801fe20:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801fe22:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801fe24:	47a0      	blx	r4
 801fe26:	b019      	add	sp, #100	; 0x64
 801fe28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe2c:	2300      	movs	r3, #0
 801fe2e:	e7c0      	b.n	801fdb2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801fe30:	2208      	movs	r2, #8
 801fe32:	fb92 f3f8 	sdiv	r3, r2, r8
 801fe36:	1e5a      	subs	r2, r3, #1
 801fe38:	443a      	add	r2, r7
 801fe3a:	fb92 f2f3 	sdiv	r2, r2, r3
 801fe3e:	fb12 f203 	smulbb	r2, r2, r3
 801fe42:	b292      	uxth	r2, r2
 801fe44:	e6b0      	b.n	801fba8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801fe46:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801fe48:	e6ec      	b.n	801fc24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801fe4a:	bf00      	nop
 801fe4c:	2000c434 	.word	0x2000c434
 801fe50:	2000c43c 	.word	0x2000c43c
 801fe54:	2000c436 	.word	0x2000c436
 801fe58:	00fff800 	.word	0x00fff800
 801fe5c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801fe5e:	e779      	b.n	801fd54 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801fe60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fe62:	b153      	cbz	r3, 801fe7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801fe64:	441e      	add	r6, r3
 801fe66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fe68:	b2b6      	uxth	r6, r6
 801fe6a:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801fe6e:	f006 0607 	and.w	r6, r6, #7
 801fe72:	781a      	ldrb	r2, [r3, #0]
 801fe74:	9328      	str	r3, [sp, #160]	; 0xa0
 801fe76:	4132      	asrs	r2, r6
 801fe78:	b2d2      	uxtb	r2, r2
 801fe7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fe7c:	445b      	add	r3, fp
 801fe7e:	930a      	str	r3, [sp, #40]	; 0x28
 801fe80:	e706      	b.n	801fc90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801fe82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe84:	2b00      	cmp	r3, #0
 801fe86:	d1ce      	bne.n	801fe26 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801fe88:	4b05      	ldr	r3, [pc, #20]	; (801fea0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 801fe8a:	6818      	ldr	r0, [r3, #0]
 801fe8c:	6803      	ldr	r3, [r0, #0]
 801fe8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fe90:	4798      	blx	r3
 801fe92:	e7c8      	b.n	801fe26 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801fe94:	2b00      	cmp	r3, #0
 801fe96:	f43f ae82 	beq.w	801fb9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801fe9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801fe9e:	e793      	b.n	801fdc8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801fea0:	2000c43c 	.word	0x2000c43c

0801fea4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801fea4:	b538      	push	{r3, r4, r5, lr}
 801fea6:	4c15      	ldr	r4, [pc, #84]	; (801fefc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801fea8:	7823      	ldrb	r3, [r4, #0]
 801feaa:	f3bf 8f5b 	dmb	ish
 801feae:	07da      	lsls	r2, r3, #31
 801feb0:	4605      	mov	r5, r0
 801feb2:	d40b      	bmi.n	801fecc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801feb4:	4620      	mov	r0, r4
 801feb6:	f007 fd73 	bl	80279a0 <__cxa_guard_acquire>
 801feba:	b138      	cbz	r0, 801fecc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801febc:	4620      	mov	r0, r4
 801febe:	f007 fd7b 	bl	80279b8 <__cxa_guard_release>
 801fec2:	4a0f      	ldr	r2, [pc, #60]	; (801ff00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801fec4:	490f      	ldr	r1, [pc, #60]	; (801ff04 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801fec6:	4810      	ldr	r0, [pc, #64]	; (801ff08 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801fec8:	f007 fd63 	bl	8027992 <__aeabi_atexit>
 801fecc:	4c0f      	ldr	r4, [pc, #60]	; (801ff0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801fece:	7823      	ldrb	r3, [r4, #0]
 801fed0:	f3bf 8f5b 	dmb	ish
 801fed4:	07db      	lsls	r3, r3, #31
 801fed6:	d40b      	bmi.n	801fef0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801fed8:	4620      	mov	r0, r4
 801feda:	f007 fd61 	bl	80279a0 <__cxa_guard_acquire>
 801fede:	b138      	cbz	r0, 801fef0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801fee0:	4620      	mov	r0, r4
 801fee2:	f007 fd69 	bl	80279b8 <__cxa_guard_release>
 801fee6:	4a06      	ldr	r2, [pc, #24]	; (801ff00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801fee8:	4909      	ldr	r1, [pc, #36]	; (801ff10 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801feea:	480a      	ldr	r0, [pc, #40]	; (801ff14 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801feec:	f007 fd51 	bl	8027992 <__aeabi_atexit>
 801fef0:	4b05      	ldr	r3, [pc, #20]	; (801ff08 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801fef2:	612b      	str	r3, [r5, #16]
 801fef4:	4b07      	ldr	r3, [pc, #28]	; (801ff14 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801fef6:	616b      	str	r3, [r5, #20]
 801fef8:	bd38      	pop	{r3, r4, r5, pc}
 801fefa:	bf00      	nop
 801fefc:	2000c510 	.word	0x2000c510
 801ff00:	20000000 	.word	0x20000000
 801ff04:	0801e0c7 	.word	0x0801e0c7
 801ff08:	20000060 	.word	0x20000060
 801ff0c:	2000c514 	.word	0x2000c514
 801ff10:	0801e0c5 	.word	0x0801e0c5
 801ff14:	20000064 	.word	0x20000064

0801ff18 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801ff18:	b538      	push	{r3, r4, r5, lr}
 801ff1a:	4c15      	ldr	r4, [pc, #84]	; (801ff70 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801ff1c:	7823      	ldrb	r3, [r4, #0]
 801ff1e:	f3bf 8f5b 	dmb	ish
 801ff22:	07da      	lsls	r2, r3, #31
 801ff24:	4605      	mov	r5, r0
 801ff26:	d40b      	bmi.n	801ff40 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801ff28:	4620      	mov	r0, r4
 801ff2a:	f007 fd39 	bl	80279a0 <__cxa_guard_acquire>
 801ff2e:	b138      	cbz	r0, 801ff40 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801ff30:	4620      	mov	r0, r4
 801ff32:	f007 fd41 	bl	80279b8 <__cxa_guard_release>
 801ff36:	4a0f      	ldr	r2, [pc, #60]	; (801ff74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801ff38:	490f      	ldr	r1, [pc, #60]	; (801ff78 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801ff3a:	4810      	ldr	r0, [pc, #64]	; (801ff7c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801ff3c:	f007 fd29 	bl	8027992 <__aeabi_atexit>
 801ff40:	4c0f      	ldr	r4, [pc, #60]	; (801ff80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801ff42:	7823      	ldrb	r3, [r4, #0]
 801ff44:	f3bf 8f5b 	dmb	ish
 801ff48:	07db      	lsls	r3, r3, #31
 801ff4a:	d40b      	bmi.n	801ff64 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801ff4c:	4620      	mov	r0, r4
 801ff4e:	f007 fd27 	bl	80279a0 <__cxa_guard_acquire>
 801ff52:	b138      	cbz	r0, 801ff64 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801ff54:	4620      	mov	r0, r4
 801ff56:	f007 fd2f 	bl	80279b8 <__cxa_guard_release>
 801ff5a:	4a06      	ldr	r2, [pc, #24]	; (801ff74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801ff5c:	4909      	ldr	r1, [pc, #36]	; (801ff84 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801ff5e:	480a      	ldr	r0, [pc, #40]	; (801ff88 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801ff60:	f007 fd17 	bl	8027992 <__aeabi_atexit>
 801ff64:	4b05      	ldr	r3, [pc, #20]	; (801ff7c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801ff66:	60ab      	str	r3, [r5, #8]
 801ff68:	4b07      	ldr	r3, [pc, #28]	; (801ff88 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801ff6a:	60eb      	str	r3, [r5, #12]
 801ff6c:	bd38      	pop	{r3, r4, r5, pc}
 801ff6e:	bf00      	nop
 801ff70:	2000c4e8 	.word	0x2000c4e8
 801ff74:	20000000 	.word	0x20000000
 801ff78:	0801e0cb 	.word	0x0801e0cb
 801ff7c:	20000038 	.word	0x20000038
 801ff80:	2000c4ec 	.word	0x2000c4ec
 801ff84:	0801e0c9 	.word	0x0801e0c9
 801ff88:	2000003c 	.word	0x2000003c

0801ff8c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801ff8c:	b510      	push	{r4, lr}
 801ff8e:	4604      	mov	r4, r0
 801ff90:	f7ff ff88 	bl	801fea4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801ff94:	4620      	mov	r0, r4
 801ff96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ff9a:	f7ff bfbd 	b.w	801ff18 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801ffa0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801ffa0:	b538      	push	{r3, r4, r5, lr}
 801ffa2:	4c15      	ldr	r4, [pc, #84]	; (801fff8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801ffa4:	7823      	ldrb	r3, [r4, #0]
 801ffa6:	f3bf 8f5b 	dmb	ish
 801ffaa:	07da      	lsls	r2, r3, #31
 801ffac:	4605      	mov	r5, r0
 801ffae:	d40b      	bmi.n	801ffc8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ffb0:	4620      	mov	r0, r4
 801ffb2:	f007 fcf5 	bl	80279a0 <__cxa_guard_acquire>
 801ffb6:	b138      	cbz	r0, 801ffc8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ffb8:	4620      	mov	r0, r4
 801ffba:	f007 fcfd 	bl	80279b8 <__cxa_guard_release>
 801ffbe:	4a0f      	ldr	r2, [pc, #60]	; (801fffc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ffc0:	490f      	ldr	r1, [pc, #60]	; (8020000 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801ffc2:	4810      	ldr	r0, [pc, #64]	; (8020004 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ffc4:	f007 fce5 	bl	8027992 <__aeabi_atexit>
 801ffc8:	4c0f      	ldr	r4, [pc, #60]	; (8020008 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801ffca:	7823      	ldrb	r3, [r4, #0]
 801ffcc:	f3bf 8f5b 	dmb	ish
 801ffd0:	07db      	lsls	r3, r3, #31
 801ffd2:	d40b      	bmi.n	801ffec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ffd4:	4620      	mov	r0, r4
 801ffd6:	f007 fce3 	bl	80279a0 <__cxa_guard_acquire>
 801ffda:	b138      	cbz	r0, 801ffec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ffdc:	4620      	mov	r0, r4
 801ffde:	f007 fceb 	bl	80279b8 <__cxa_guard_release>
 801ffe2:	4a06      	ldr	r2, [pc, #24]	; (801fffc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ffe4:	4909      	ldr	r1, [pc, #36]	; (802000c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801ffe6:	480a      	ldr	r0, [pc, #40]	; (8020010 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ffe8:	f007 fcd3 	bl	8027992 <__aeabi_atexit>
 801ffec:	4b05      	ldr	r3, [pc, #20]	; (8020004 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ffee:	622b      	str	r3, [r5, #32]
 801fff0:	4b07      	ldr	r3, [pc, #28]	; (8020010 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801fff2:	626b      	str	r3, [r5, #36]	; 0x24
 801fff4:	bd38      	pop	{r3, r4, r5, pc}
 801fff6:	bf00      	nop
 801fff8:	2000c518 	.word	0x2000c518
 801fffc:	20000000 	.word	0x20000000
 8020000:	0801e0bf 	.word	0x0801e0bf
 8020004:	20000068 	.word	0x20000068
 8020008:	2000c51c 	.word	0x2000c51c
 802000c:	0801e0bd 	.word	0x0801e0bd
 8020010:	2000006c 	.word	0x2000006c

08020014 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8020014:	b538      	push	{r3, r4, r5, lr}
 8020016:	4c15      	ldr	r4, [pc, #84]	; (802006c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8020018:	7823      	ldrb	r3, [r4, #0]
 802001a:	f3bf 8f5b 	dmb	ish
 802001e:	07da      	lsls	r2, r3, #31
 8020020:	4605      	mov	r5, r0
 8020022:	d40b      	bmi.n	802003c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8020024:	4620      	mov	r0, r4
 8020026:	f007 fcbb 	bl	80279a0 <__cxa_guard_acquire>
 802002a:	b138      	cbz	r0, 802003c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 802002c:	4620      	mov	r0, r4
 802002e:	f007 fcc3 	bl	80279b8 <__cxa_guard_release>
 8020032:	4a0f      	ldr	r2, [pc, #60]	; (8020070 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8020034:	490f      	ldr	r1, [pc, #60]	; (8020074 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8020036:	4810      	ldr	r0, [pc, #64]	; (8020078 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8020038:	f007 fcab 	bl	8027992 <__aeabi_atexit>
 802003c:	4c0f      	ldr	r4, [pc, #60]	; (802007c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802003e:	7823      	ldrb	r3, [r4, #0]
 8020040:	f3bf 8f5b 	dmb	ish
 8020044:	07db      	lsls	r3, r3, #31
 8020046:	d40b      	bmi.n	8020060 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8020048:	4620      	mov	r0, r4
 802004a:	f007 fca9 	bl	80279a0 <__cxa_guard_acquire>
 802004e:	b138      	cbz	r0, 8020060 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8020050:	4620      	mov	r0, r4
 8020052:	f007 fcb1 	bl	80279b8 <__cxa_guard_release>
 8020056:	4a06      	ldr	r2, [pc, #24]	; (8020070 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8020058:	4909      	ldr	r1, [pc, #36]	; (8020080 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 802005a:	480a      	ldr	r0, [pc, #40]	; (8020084 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802005c:	f007 fc99 	bl	8027992 <__aeabi_atexit>
 8020060:	4b05      	ldr	r3, [pc, #20]	; (8020078 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8020062:	61ab      	str	r3, [r5, #24]
 8020064:	4b07      	ldr	r3, [pc, #28]	; (8020084 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8020066:	61eb      	str	r3, [r5, #28]
 8020068:	bd38      	pop	{r3, r4, r5, pc}
 802006a:	bf00      	nop
 802006c:	2000c4f0 	.word	0x2000c4f0
 8020070:	20000000 	.word	0x20000000
 8020074:	0801e0c3 	.word	0x0801e0c3
 8020078:	20000040 	.word	0x20000040
 802007c:	2000c4f4 	.word	0x2000c4f4
 8020080:	0801e0c1 	.word	0x0801e0c1
 8020084:	20000044 	.word	0x20000044

08020088 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8020088:	b510      	push	{r4, lr}
 802008a:	4604      	mov	r4, r0
 802008c:	f7ff ff88 	bl	801ffa0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8020090:	4620      	mov	r0, r4
 8020092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020096:	f7ff bfbd 	b.w	8020014 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0802009c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 802009c:	b538      	push	{r3, r4, r5, lr}
 802009e:	4c15      	ldr	r4, [pc, #84]	; (80200f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80200a0:	7823      	ldrb	r3, [r4, #0]
 80200a2:	f3bf 8f5b 	dmb	ish
 80200a6:	07da      	lsls	r2, r3, #31
 80200a8:	4605      	mov	r5, r0
 80200aa:	d40b      	bmi.n	80200c4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80200ac:	4620      	mov	r0, r4
 80200ae:	f007 fc77 	bl	80279a0 <__cxa_guard_acquire>
 80200b2:	b138      	cbz	r0, 80200c4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80200b4:	4620      	mov	r0, r4
 80200b6:	f007 fc7f 	bl	80279b8 <__cxa_guard_release>
 80200ba:	4a0f      	ldr	r2, [pc, #60]	; (80200f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80200bc:	490f      	ldr	r1, [pc, #60]	; (80200fc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80200be:	4810      	ldr	r0, [pc, #64]	; (8020100 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80200c0:	f007 fc67 	bl	8027992 <__aeabi_atexit>
 80200c4:	4c0f      	ldr	r4, [pc, #60]	; (8020104 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80200c6:	7823      	ldrb	r3, [r4, #0]
 80200c8:	f3bf 8f5b 	dmb	ish
 80200cc:	07db      	lsls	r3, r3, #31
 80200ce:	d40b      	bmi.n	80200e8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80200d0:	4620      	mov	r0, r4
 80200d2:	f007 fc65 	bl	80279a0 <__cxa_guard_acquire>
 80200d6:	b138      	cbz	r0, 80200e8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80200d8:	4620      	mov	r0, r4
 80200da:	f007 fc6d 	bl	80279b8 <__cxa_guard_release>
 80200de:	4a06      	ldr	r2, [pc, #24]	; (80200f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80200e0:	4909      	ldr	r1, [pc, #36]	; (8020108 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80200e2:	480a      	ldr	r0, [pc, #40]	; (802010c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80200e4:	f007 fc55 	bl	8027992 <__aeabi_atexit>
 80200e8:	4b05      	ldr	r3, [pc, #20]	; (8020100 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80200ea:	632b      	str	r3, [r5, #48]	; 0x30
 80200ec:	4b07      	ldr	r3, [pc, #28]	; (802010c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80200ee:	636b      	str	r3, [r5, #52]	; 0x34
 80200f0:	bd38      	pop	{r3, r4, r5, pc}
 80200f2:	bf00      	nop
 80200f4:	2000c528 	.word	0x2000c528
 80200f8:	20000000 	.word	0x20000000
 80200fc:	0801e0b7 	.word	0x0801e0b7
 8020100:	20000078 	.word	0x20000078
 8020104:	2000c52c 	.word	0x2000c52c
 8020108:	0801e0b5 	.word	0x0801e0b5
 802010c:	2000007c 	.word	0x2000007c

08020110 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8020110:	b538      	push	{r3, r4, r5, lr}
 8020112:	4c15      	ldr	r4, [pc, #84]	; (8020168 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8020114:	7823      	ldrb	r3, [r4, #0]
 8020116:	f3bf 8f5b 	dmb	ish
 802011a:	07da      	lsls	r2, r3, #31
 802011c:	4605      	mov	r5, r0
 802011e:	d40b      	bmi.n	8020138 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8020120:	4620      	mov	r0, r4
 8020122:	f007 fc3d 	bl	80279a0 <__cxa_guard_acquire>
 8020126:	b138      	cbz	r0, 8020138 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8020128:	4620      	mov	r0, r4
 802012a:	f007 fc45 	bl	80279b8 <__cxa_guard_release>
 802012e:	4a0f      	ldr	r2, [pc, #60]	; (802016c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8020130:	490f      	ldr	r1, [pc, #60]	; (8020170 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8020132:	4810      	ldr	r0, [pc, #64]	; (8020174 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8020134:	f007 fc2d 	bl	8027992 <__aeabi_atexit>
 8020138:	4c0f      	ldr	r4, [pc, #60]	; (8020178 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 802013a:	7823      	ldrb	r3, [r4, #0]
 802013c:	f3bf 8f5b 	dmb	ish
 8020140:	07db      	lsls	r3, r3, #31
 8020142:	d40b      	bmi.n	802015c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8020144:	4620      	mov	r0, r4
 8020146:	f007 fc2b 	bl	80279a0 <__cxa_guard_acquire>
 802014a:	b138      	cbz	r0, 802015c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 802014c:	4620      	mov	r0, r4
 802014e:	f007 fc33 	bl	80279b8 <__cxa_guard_release>
 8020152:	4a06      	ldr	r2, [pc, #24]	; (802016c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8020154:	4909      	ldr	r1, [pc, #36]	; (802017c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8020156:	480a      	ldr	r0, [pc, #40]	; (8020180 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8020158:	f007 fc1b 	bl	8027992 <__aeabi_atexit>
 802015c:	4b05      	ldr	r3, [pc, #20]	; (8020174 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802015e:	62ab      	str	r3, [r5, #40]	; 0x28
 8020160:	4b07      	ldr	r3, [pc, #28]	; (8020180 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8020162:	62eb      	str	r3, [r5, #44]	; 0x2c
 8020164:	bd38      	pop	{r3, r4, r5, pc}
 8020166:	bf00      	nop
 8020168:	2000c4f8 	.word	0x2000c4f8
 802016c:	20000000 	.word	0x20000000
 8020170:	0801e0bb 	.word	0x0801e0bb
 8020174:	20000048 	.word	0x20000048
 8020178:	2000c4fc 	.word	0x2000c4fc
 802017c:	0801e0b9 	.word	0x0801e0b9
 8020180:	2000004c 	.word	0x2000004c

08020184 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8020184:	b510      	push	{r4, lr}
 8020186:	4604      	mov	r4, r0
 8020188:	f7ff ff88 	bl	802009c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 802018c:	4620      	mov	r0, r4
 802018e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020192:	f7ff bfbd 	b.w	8020110 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08020198 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8020198:	b538      	push	{r3, r4, r5, lr}
 802019a:	4c15      	ldr	r4, [pc, #84]	; (80201f0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 802019c:	7823      	ldrb	r3, [r4, #0]
 802019e:	f3bf 8f5b 	dmb	ish
 80201a2:	07da      	lsls	r2, r3, #31
 80201a4:	4605      	mov	r5, r0
 80201a6:	d40b      	bmi.n	80201c0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80201a8:	4620      	mov	r0, r4
 80201aa:	f007 fbf9 	bl	80279a0 <__cxa_guard_acquire>
 80201ae:	b138      	cbz	r0, 80201c0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80201b0:	4620      	mov	r0, r4
 80201b2:	f007 fc01 	bl	80279b8 <__cxa_guard_release>
 80201b6:	4a0f      	ldr	r2, [pc, #60]	; (80201f4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80201b8:	490f      	ldr	r1, [pc, #60]	; (80201f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 80201ba:	4810      	ldr	r0, [pc, #64]	; (80201fc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80201bc:	f007 fbe9 	bl	8027992 <__aeabi_atexit>
 80201c0:	4c0f      	ldr	r4, [pc, #60]	; (8020200 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 80201c2:	7823      	ldrb	r3, [r4, #0]
 80201c4:	f3bf 8f5b 	dmb	ish
 80201c8:	07db      	lsls	r3, r3, #31
 80201ca:	d40b      	bmi.n	80201e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80201cc:	4620      	mov	r0, r4
 80201ce:	f007 fbe7 	bl	80279a0 <__cxa_guard_acquire>
 80201d2:	b138      	cbz	r0, 80201e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80201d4:	4620      	mov	r0, r4
 80201d6:	f007 fbef 	bl	80279b8 <__cxa_guard_release>
 80201da:	4a06      	ldr	r2, [pc, #24]	; (80201f4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80201dc:	4909      	ldr	r1, [pc, #36]	; (8020204 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 80201de:	480a      	ldr	r0, [pc, #40]	; (8020208 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80201e0:	f007 fbd7 	bl	8027992 <__aeabi_atexit>
 80201e4:	4b05      	ldr	r3, [pc, #20]	; (80201fc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80201e6:	652b      	str	r3, [r5, #80]	; 0x50
 80201e8:	4b07      	ldr	r3, [pc, #28]	; (8020208 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80201ea:	656b      	str	r3, [r5, #84]	; 0x54
 80201ec:	bd38      	pop	{r3, r4, r5, pc}
 80201ee:	bf00      	nop
 80201f0:	2000c530 	.word	0x2000c530
 80201f4:	20000000 	.word	0x20000000
 80201f8:	0801e0a7 	.word	0x0801e0a7
 80201fc:	20000080 	.word	0x20000080
 8020200:	2000c534 	.word	0x2000c534
 8020204:	0801e0a5 	.word	0x0801e0a5
 8020208:	20000084 	.word	0x20000084

0802020c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 802020c:	b538      	push	{r3, r4, r5, lr}
 802020e:	4c15      	ldr	r4, [pc, #84]	; (8020264 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8020210:	7823      	ldrb	r3, [r4, #0]
 8020212:	f3bf 8f5b 	dmb	ish
 8020216:	07da      	lsls	r2, r3, #31
 8020218:	4605      	mov	r5, r0
 802021a:	d40b      	bmi.n	8020234 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 802021c:	4620      	mov	r0, r4
 802021e:	f007 fbbf 	bl	80279a0 <__cxa_guard_acquire>
 8020222:	b138      	cbz	r0, 8020234 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8020224:	4620      	mov	r0, r4
 8020226:	f007 fbc7 	bl	80279b8 <__cxa_guard_release>
 802022a:	4a0f      	ldr	r2, [pc, #60]	; (8020268 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 802022c:	490f      	ldr	r1, [pc, #60]	; (802026c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 802022e:	4810      	ldr	r0, [pc, #64]	; (8020270 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8020230:	f007 fbaf 	bl	8027992 <__aeabi_atexit>
 8020234:	4c0f      	ldr	r4, [pc, #60]	; (8020274 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8020236:	7823      	ldrb	r3, [r4, #0]
 8020238:	f3bf 8f5b 	dmb	ish
 802023c:	07db      	lsls	r3, r3, #31
 802023e:	d40b      	bmi.n	8020258 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8020240:	4620      	mov	r0, r4
 8020242:	f007 fbad 	bl	80279a0 <__cxa_guard_acquire>
 8020246:	b138      	cbz	r0, 8020258 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8020248:	4620      	mov	r0, r4
 802024a:	f007 fbb5 	bl	80279b8 <__cxa_guard_release>
 802024e:	4a06      	ldr	r2, [pc, #24]	; (8020268 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8020250:	4909      	ldr	r1, [pc, #36]	; (8020278 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8020252:	480a      	ldr	r0, [pc, #40]	; (802027c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8020254:	f007 fb9d 	bl	8027992 <__aeabi_atexit>
 8020258:	4b05      	ldr	r3, [pc, #20]	; (8020270 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 802025a:	64ab      	str	r3, [r5, #72]	; 0x48
 802025c:	4b07      	ldr	r3, [pc, #28]	; (802027c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 802025e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8020260:	bd38      	pop	{r3, r4, r5, pc}
 8020262:	bf00      	nop
 8020264:	2000c538 	.word	0x2000c538
 8020268:	20000000 	.word	0x20000000
 802026c:	0801e0ab 	.word	0x0801e0ab
 8020270:	20000088 	.word	0x20000088
 8020274:	2000c53c 	.word	0x2000c53c
 8020278:	0801e0a9 	.word	0x0801e0a9
 802027c:	2000008c 	.word	0x2000008c

08020280 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8020280:	b538      	push	{r3, r4, r5, lr}
 8020282:	4c15      	ldr	r4, [pc, #84]	; (80202d8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8020284:	7823      	ldrb	r3, [r4, #0]
 8020286:	f3bf 8f5b 	dmb	ish
 802028a:	07da      	lsls	r2, r3, #31
 802028c:	4605      	mov	r5, r0
 802028e:	d40b      	bmi.n	80202a8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8020290:	4620      	mov	r0, r4
 8020292:	f007 fb85 	bl	80279a0 <__cxa_guard_acquire>
 8020296:	b138      	cbz	r0, 80202a8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8020298:	4620      	mov	r0, r4
 802029a:	f007 fb8d 	bl	80279b8 <__cxa_guard_release>
 802029e:	4a0f      	ldr	r2, [pc, #60]	; (80202dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80202a0:	490f      	ldr	r1, [pc, #60]	; (80202e0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 80202a2:	4810      	ldr	r0, [pc, #64]	; (80202e4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80202a4:	f007 fb75 	bl	8027992 <__aeabi_atexit>
 80202a8:	4c0f      	ldr	r4, [pc, #60]	; (80202e8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 80202aa:	7823      	ldrb	r3, [r4, #0]
 80202ac:	f3bf 8f5b 	dmb	ish
 80202b0:	07db      	lsls	r3, r3, #31
 80202b2:	d40b      	bmi.n	80202cc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80202b4:	4620      	mov	r0, r4
 80202b6:	f007 fb73 	bl	80279a0 <__cxa_guard_acquire>
 80202ba:	b138      	cbz	r0, 80202cc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80202bc:	4620      	mov	r0, r4
 80202be:	f007 fb7b 	bl	80279b8 <__cxa_guard_release>
 80202c2:	4a06      	ldr	r2, [pc, #24]	; (80202dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80202c4:	4909      	ldr	r1, [pc, #36]	; (80202ec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 80202c6:	480a      	ldr	r0, [pc, #40]	; (80202f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80202c8:	f007 fb63 	bl	8027992 <__aeabi_atexit>
 80202cc:	4b05      	ldr	r3, [pc, #20]	; (80202e4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80202ce:	642b      	str	r3, [r5, #64]	; 0x40
 80202d0:	4b07      	ldr	r3, [pc, #28]	; (80202f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80202d2:	646b      	str	r3, [r5, #68]	; 0x44
 80202d4:	bd38      	pop	{r3, r4, r5, pc}
 80202d6:	bf00      	nop
 80202d8:	2000c500 	.word	0x2000c500
 80202dc:	20000000 	.word	0x20000000
 80202e0:	0801e0af 	.word	0x0801e0af
 80202e4:	20000050 	.word	0x20000050
 80202e8:	2000c504 	.word	0x2000c504
 80202ec:	0801e0ad 	.word	0x0801e0ad
 80202f0:	20000054 	.word	0x20000054

080202f4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 80202f4:	b538      	push	{r3, r4, r5, lr}
 80202f6:	4c15      	ldr	r4, [pc, #84]	; (802034c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80202f8:	7823      	ldrb	r3, [r4, #0]
 80202fa:	f3bf 8f5b 	dmb	ish
 80202fe:	07da      	lsls	r2, r3, #31
 8020300:	4605      	mov	r5, r0
 8020302:	d40b      	bmi.n	802031c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8020304:	4620      	mov	r0, r4
 8020306:	f007 fb4b 	bl	80279a0 <__cxa_guard_acquire>
 802030a:	b138      	cbz	r0, 802031c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 802030c:	4620      	mov	r0, r4
 802030e:	f007 fb53 	bl	80279b8 <__cxa_guard_release>
 8020312:	4a0f      	ldr	r2, [pc, #60]	; (8020350 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8020314:	490f      	ldr	r1, [pc, #60]	; (8020354 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8020316:	4810      	ldr	r0, [pc, #64]	; (8020358 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8020318:	f007 fb3b 	bl	8027992 <__aeabi_atexit>
 802031c:	4c0f      	ldr	r4, [pc, #60]	; (802035c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 802031e:	7823      	ldrb	r3, [r4, #0]
 8020320:	f3bf 8f5b 	dmb	ish
 8020324:	07db      	lsls	r3, r3, #31
 8020326:	d40b      	bmi.n	8020340 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8020328:	4620      	mov	r0, r4
 802032a:	f007 fb39 	bl	80279a0 <__cxa_guard_acquire>
 802032e:	b138      	cbz	r0, 8020340 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8020330:	4620      	mov	r0, r4
 8020332:	f007 fb41 	bl	80279b8 <__cxa_guard_release>
 8020336:	4a06      	ldr	r2, [pc, #24]	; (8020350 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8020338:	4909      	ldr	r1, [pc, #36]	; (8020360 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 802033a:	480a      	ldr	r0, [pc, #40]	; (8020364 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 802033c:	f007 fb29 	bl	8027992 <__aeabi_atexit>
 8020340:	4b05      	ldr	r3, [pc, #20]	; (8020358 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8020342:	63ab      	str	r3, [r5, #56]	; 0x38
 8020344:	4b07      	ldr	r3, [pc, #28]	; (8020364 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8020346:	63eb      	str	r3, [r5, #60]	; 0x3c
 8020348:	bd38      	pop	{r3, r4, r5, pc}
 802034a:	bf00      	nop
 802034c:	2000c520 	.word	0x2000c520
 8020350:	20000000 	.word	0x20000000
 8020354:	0801e0b3 	.word	0x0801e0b3
 8020358:	20000070 	.word	0x20000070
 802035c:	2000c524 	.word	0x2000c524
 8020360:	0801e0b1 	.word	0x0801e0b1
 8020364:	20000074 	.word	0x20000074

08020368 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8020368:	b510      	push	{r4, lr}
 802036a:	4604      	mov	r4, r0
 802036c:	f7ff ff14 	bl	8020198 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8020370:	4620      	mov	r0, r4
 8020372:	f7ff ff85 	bl	8020280 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8020376:	4620      	mov	r0, r4
 8020378:	f7ff ff48 	bl	802020c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 802037c:	4620      	mov	r0, r4
 802037e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020382:	f7ff bfb7 	b.w	80202f4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08020388 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8020388:	b538      	push	{r3, r4, r5, lr}
 802038a:	4c15      	ldr	r4, [pc, #84]	; (80203e0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 802038c:	7823      	ldrb	r3, [r4, #0]
 802038e:	f3bf 8f5b 	dmb	ish
 8020392:	07da      	lsls	r2, r3, #31
 8020394:	4605      	mov	r5, r0
 8020396:	d40b      	bmi.n	80203b0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8020398:	4620      	mov	r0, r4
 802039a:	f007 fb01 	bl	80279a0 <__cxa_guard_acquire>
 802039e:	b138      	cbz	r0, 80203b0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80203a0:	4620      	mov	r0, r4
 80203a2:	f007 fb09 	bl	80279b8 <__cxa_guard_release>
 80203a6:	4a0f      	ldr	r2, [pc, #60]	; (80203e4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80203a8:	490f      	ldr	r1, [pc, #60]	; (80203e8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80203aa:	4810      	ldr	r0, [pc, #64]	; (80203ec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80203ac:	f007 faf1 	bl	8027992 <__aeabi_atexit>
 80203b0:	4c0f      	ldr	r4, [pc, #60]	; (80203f0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80203b2:	7823      	ldrb	r3, [r4, #0]
 80203b4:	f3bf 8f5b 	dmb	ish
 80203b8:	07db      	lsls	r3, r3, #31
 80203ba:	d40b      	bmi.n	80203d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80203bc:	4620      	mov	r0, r4
 80203be:	f007 faef 	bl	80279a0 <__cxa_guard_acquire>
 80203c2:	b138      	cbz	r0, 80203d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80203c4:	4620      	mov	r0, r4
 80203c6:	f007 faf7 	bl	80279b8 <__cxa_guard_release>
 80203ca:	4a06      	ldr	r2, [pc, #24]	; (80203e4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80203cc:	4909      	ldr	r1, [pc, #36]	; (80203f4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 80203ce:	480a      	ldr	r0, [pc, #40]	; (80203f8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80203d0:	f007 fadf 	bl	8027992 <__aeabi_atexit>
 80203d4:	4b05      	ldr	r3, [pc, #20]	; (80203ec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80203d6:	662b      	str	r3, [r5, #96]	; 0x60
 80203d8:	4b07      	ldr	r3, [pc, #28]	; (80203f8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80203da:	666b      	str	r3, [r5, #100]	; 0x64
 80203dc:	bd38      	pop	{r3, r4, r5, pc}
 80203de:	bf00      	nop
 80203e0:	2000c508 	.word	0x2000c508
 80203e4:	20000000 	.word	0x20000000
 80203e8:	0801e09f 	.word	0x0801e09f
 80203ec:	20000058 	.word	0x20000058
 80203f0:	2000c50c 	.word	0x2000c50c
 80203f4:	0801e09d 	.word	0x0801e09d
 80203f8:	2000005c 	.word	0x2000005c

080203fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80203fc:	b538      	push	{r3, r4, r5, lr}
 80203fe:	4c15      	ldr	r4, [pc, #84]	; (8020454 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8020400:	7823      	ldrb	r3, [r4, #0]
 8020402:	f3bf 8f5b 	dmb	ish
 8020406:	07da      	lsls	r2, r3, #31
 8020408:	4605      	mov	r5, r0
 802040a:	d40b      	bmi.n	8020424 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 802040c:	4620      	mov	r0, r4
 802040e:	f007 fac7 	bl	80279a0 <__cxa_guard_acquire>
 8020412:	b138      	cbz	r0, 8020424 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8020414:	4620      	mov	r0, r4
 8020416:	f007 facf 	bl	80279b8 <__cxa_guard_release>
 802041a:	4a0f      	ldr	r2, [pc, #60]	; (8020458 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 802041c:	490f      	ldr	r1, [pc, #60]	; (802045c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802041e:	4810      	ldr	r0, [pc, #64]	; (8020460 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8020420:	f007 fab7 	bl	8027992 <__aeabi_atexit>
 8020424:	4c0f      	ldr	r4, [pc, #60]	; (8020464 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8020426:	7823      	ldrb	r3, [r4, #0]
 8020428:	f3bf 8f5b 	dmb	ish
 802042c:	07db      	lsls	r3, r3, #31
 802042e:	d40b      	bmi.n	8020448 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8020430:	4620      	mov	r0, r4
 8020432:	f007 fab5 	bl	80279a0 <__cxa_guard_acquire>
 8020436:	b138      	cbz	r0, 8020448 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8020438:	4620      	mov	r0, r4
 802043a:	f007 fabd 	bl	80279b8 <__cxa_guard_release>
 802043e:	4a06      	ldr	r2, [pc, #24]	; (8020458 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8020440:	4909      	ldr	r1, [pc, #36]	; (8020468 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8020442:	480a      	ldr	r0, [pc, #40]	; (802046c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8020444:	f007 faa5 	bl	8027992 <__aeabi_atexit>
 8020448:	4b05      	ldr	r3, [pc, #20]	; (8020460 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802044a:	65ab      	str	r3, [r5, #88]	; 0x58
 802044c:	4b07      	ldr	r3, [pc, #28]	; (802046c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802044e:	65eb      	str	r3, [r5, #92]	; 0x5c
 8020450:	bd38      	pop	{r3, r4, r5, pc}
 8020452:	bf00      	nop
 8020454:	2000c4e0 	.word	0x2000c4e0
 8020458:	20000000 	.word	0x20000000
 802045c:	0801e0a3 	.word	0x0801e0a3
 8020460:	20000030 	.word	0x20000030
 8020464:	2000c4e4 	.word	0x2000c4e4
 8020468:	0801e0a1 	.word	0x0801e0a1
 802046c:	20000034 	.word	0x20000034

08020470 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8020470:	b510      	push	{r4, lr}
 8020472:	4604      	mov	r4, r0
 8020474:	f7ff ff88 	bl	8020388 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8020478:	4620      	mov	r0, r4
 802047a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802047e:	f7ff bfbd 	b.w	80203fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08020484 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8020484:	b538      	push	{r3, r4, r5, lr}
 8020486:	4c15      	ldr	r4, [pc, #84]	; (80204dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8020488:	7823      	ldrb	r3, [r4, #0]
 802048a:	f3bf 8f5b 	dmb	ish
 802048e:	07da      	lsls	r2, r3, #31
 8020490:	4605      	mov	r5, r0
 8020492:	d40b      	bmi.n	80204ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8020494:	4620      	mov	r0, r4
 8020496:	f007 fa83 	bl	80279a0 <__cxa_guard_acquire>
 802049a:	b138      	cbz	r0, 80204ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 802049c:	4620      	mov	r0, r4
 802049e:	f007 fa8b 	bl	80279b8 <__cxa_guard_release>
 80204a2:	4a0f      	ldr	r2, [pc, #60]	; (80204e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80204a4:	490f      	ldr	r1, [pc, #60]	; (80204e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80204a6:	4810      	ldr	r0, [pc, #64]	; (80204e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80204a8:	f007 fa73 	bl	8027992 <__aeabi_atexit>
 80204ac:	4c0f      	ldr	r4, [pc, #60]	; (80204ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80204ae:	7823      	ldrb	r3, [r4, #0]
 80204b0:	f3bf 8f5b 	dmb	ish
 80204b4:	07db      	lsls	r3, r3, #31
 80204b6:	d40b      	bmi.n	80204d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80204b8:	4620      	mov	r0, r4
 80204ba:	f007 fa71 	bl	80279a0 <__cxa_guard_acquire>
 80204be:	b138      	cbz	r0, 80204d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80204c0:	4620      	mov	r0, r4
 80204c2:	f007 fa79 	bl	80279b8 <__cxa_guard_release>
 80204c6:	4a06      	ldr	r2, [pc, #24]	; (80204e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80204c8:	4909      	ldr	r1, [pc, #36]	; (80204f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 80204ca:	480a      	ldr	r0, [pc, #40]	; (80204f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80204cc:	f007 fa61 	bl	8027992 <__aeabi_atexit>
 80204d0:	4b05      	ldr	r3, [pc, #20]	; (80204e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80204d2:	672b      	str	r3, [r5, #112]	; 0x70
 80204d4:	4b07      	ldr	r3, [pc, #28]	; (80204f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80204d6:	676b      	str	r3, [r5, #116]	; 0x74
 80204d8:	bd38      	pop	{r3, r4, r5, pc}
 80204da:	bf00      	nop
 80204dc:	2000c4d8 	.word	0x2000c4d8
 80204e0:	20000000 	.word	0x20000000
 80204e4:	0801e097 	.word	0x0801e097
 80204e8:	20000028 	.word	0x20000028
 80204ec:	2000c4dc 	.word	0x2000c4dc
 80204f0:	0801e095 	.word	0x0801e095
 80204f4:	2000002c 	.word	0x2000002c

080204f8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 80204f8:	b538      	push	{r3, r4, r5, lr}
 80204fa:	4c15      	ldr	r4, [pc, #84]	; (8020550 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80204fc:	7823      	ldrb	r3, [r4, #0]
 80204fe:	f3bf 8f5b 	dmb	ish
 8020502:	07da      	lsls	r2, r3, #31
 8020504:	4605      	mov	r5, r0
 8020506:	d40b      	bmi.n	8020520 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8020508:	4620      	mov	r0, r4
 802050a:	f007 fa49 	bl	80279a0 <__cxa_guard_acquire>
 802050e:	b138      	cbz	r0, 8020520 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8020510:	4620      	mov	r0, r4
 8020512:	f007 fa51 	bl	80279b8 <__cxa_guard_release>
 8020516:	4a0f      	ldr	r2, [pc, #60]	; (8020554 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8020518:	490f      	ldr	r1, [pc, #60]	; (8020558 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802051a:	4810      	ldr	r0, [pc, #64]	; (802055c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802051c:	f007 fa39 	bl	8027992 <__aeabi_atexit>
 8020520:	4c0f      	ldr	r4, [pc, #60]	; (8020560 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8020522:	7823      	ldrb	r3, [r4, #0]
 8020524:	f3bf 8f5b 	dmb	ish
 8020528:	07db      	lsls	r3, r3, #31
 802052a:	d40b      	bmi.n	8020544 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 802052c:	4620      	mov	r0, r4
 802052e:	f007 fa37 	bl	80279a0 <__cxa_guard_acquire>
 8020532:	b138      	cbz	r0, 8020544 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8020534:	4620      	mov	r0, r4
 8020536:	f007 fa3f 	bl	80279b8 <__cxa_guard_release>
 802053a:	4a06      	ldr	r2, [pc, #24]	; (8020554 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 802053c:	4909      	ldr	r1, [pc, #36]	; (8020564 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 802053e:	480a      	ldr	r0, [pc, #40]	; (8020568 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8020540:	f007 fa27 	bl	8027992 <__aeabi_atexit>
 8020544:	4b05      	ldr	r3, [pc, #20]	; (802055c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8020546:	66ab      	str	r3, [r5, #104]	; 0x68
 8020548:	4b07      	ldr	r3, [pc, #28]	; (8020568 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802054a:	66eb      	str	r3, [r5, #108]	; 0x6c
 802054c:	bd38      	pop	{r3, r4, r5, pc}
 802054e:	bf00      	nop
 8020550:	2000c4d0 	.word	0x2000c4d0
 8020554:	20000000 	.word	0x20000000
 8020558:	0801e09b 	.word	0x0801e09b
 802055c:	20000020 	.word	0x20000020
 8020560:	2000c4d4 	.word	0x2000c4d4
 8020564:	0801e099 	.word	0x0801e099
 8020568:	20000024 	.word	0x20000024

0802056c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 802056c:	b510      	push	{r4, lr}
 802056e:	4604      	mov	r4, r0
 8020570:	f7ff ff88 	bl	8020484 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8020574:	4620      	mov	r0, r4
 8020576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802057a:	f7ff bfbd 	b.w	80204f8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0802057e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 802057e:	b510      	push	{r4, lr}
 8020580:	4604      	mov	r4, r0
 8020582:	f7ff fff3 	bl	802056c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8020586:	4620      	mov	r0, r4
 8020588:	f7ff ff72 	bl	8020470 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 802058c:	4620      	mov	r0, r4
 802058e:	f7ff fdf9 	bl	8020184 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8020592:	4620      	mov	r0, r4
 8020594:	f7ff fcfa 	bl	801ff8c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8020598:	4620      	mov	r0, r4
 802059a:	f7ff fd75 	bl	8020088 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 802059e:	4620      	mov	r0, r4
 80205a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80205a4:	f7ff bee0 	b.w	8020368 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

080205a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 80205a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205ac:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 80205b0:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 80205b4:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 80205b8:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80205bc:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80205c0:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 80205c4:	8808      	ldrh	r0, [r1, #0]
 80205c6:	fb05 4c0e 	mla	ip, r5, lr, r4
 80205ca:	2d00      	cmp	r5, #0
 80205cc:	eb02 0a0c 	add.w	sl, r2, ip
 80205d0:	f2c0 80b0 	blt.w	8020734 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 80205d4:	45ab      	cmp	fp, r5
 80205d6:	f340 80ad 	ble.w	8020734 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 80205da:	2c00      	cmp	r4, #0
 80205dc:	f2c0 80a8 	blt.w	8020730 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 80205e0:	45a6      	cmp	lr, r4
 80205e2:	f340 80a5 	ble.w	8020730 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 80205e6:	f812 200c 	ldrb.w	r2, [r2, ip]
 80205ea:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 80205ee:	1c62      	adds	r2, r4, #1
 80205f0:	f100 80a3 	bmi.w	802073a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 80205f4:	4596      	cmp	lr, r2
 80205f6:	f340 80a0 	ble.w	802073a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 80205fa:	f1b9 0f00 	cmp.w	r9, #0
 80205fe:	f000 809c 	beq.w	802073a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8020602:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8020606:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 802060a:	3501      	adds	r5, #1
 802060c:	f100 8099 	bmi.w	8020742 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8020610:	45ab      	cmp	fp, r5
 8020612:	f340 8096 	ble.w	8020742 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8020616:	2f00      	cmp	r7, #0
 8020618:	f000 8093 	beq.w	8020742 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 802061c:	2c00      	cmp	r4, #0
 802061e:	f2c0 808e 	blt.w	802073e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8020622:	45a6      	cmp	lr, r4
 8020624:	f340 808b 	ble.w	802073e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8020628:	f81a 200e 	ldrb.w	r2, [sl, lr]
 802062c:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8020630:	3401      	adds	r4, #1
 8020632:	f100 8089 	bmi.w	8020748 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8020636:	45a6      	cmp	lr, r4
 8020638:	f340 8086 	ble.w	8020748 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 802063c:	f1b9 0f00 	cmp.w	r9, #0
 8020640:	f000 8082 	beq.w	8020748 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8020644:	44d6      	add	lr, sl
 8020646:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802064a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802064e:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8020652:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8020656:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 802065a:	fb19 fe07 	smulbb	lr, r9, r7
 802065e:	ea44 0808 	orr.w	r8, r4, r8
 8020662:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8020666:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 802066a:	f1c7 0210 	rsb	r2, r7, #16
 802066e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8020672:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020676:	ea44 0c0c 	orr.w	ip, r4, ip
 802067a:	eba2 0209 	sub.w	r2, r2, r9
 802067e:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8020682:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8020686:	fb04 f40c 	mul.w	r4, r4, ip
 802068a:	fb02 4808 	mla	r8, r2, r8, r4
 802068e:	041a      	lsls	r2, r3, #16
 8020690:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020694:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020698:	4313      	orrs	r3, r2
 802069a:	042a      	lsls	r2, r5, #16
 802069c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80206a0:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80206a4:	fb0e 8303 	mla	r3, lr, r3, r8
 80206a8:	432a      	orrs	r2, r5
 80206aa:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 80206ae:	fb07 3202 	mla	r2, r7, r2, r3
 80206b2:	0d53      	lsrs	r3, r2, #21
 80206b4:	0952      	lsrs	r2, r2, #5
 80206b6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80206ba:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80206be:	431a      	orrs	r2, r3
 80206c0:	b293      	uxth	r3, r2
 80206c2:	b2b4      	uxth	r4, r6
 80206c4:	1202      	asrs	r2, r0, #8
 80206c6:	43f6      	mvns	r6, r6
 80206c8:	b2f6      	uxtb	r6, r6
 80206ca:	121d      	asrs	r5, r3, #8
 80206cc:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80206d0:	fb12 f206 	smulbb	r2, r2, r6
 80206d4:	10c7      	asrs	r7, r0, #3
 80206d6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80206da:	00c0      	lsls	r0, r0, #3
 80206dc:	fb05 2504 	mla	r5, r5, r4, r2
 80206e0:	b2c0      	uxtb	r0, r0
 80206e2:	10da      	asrs	r2, r3, #3
 80206e4:	00db      	lsls	r3, r3, #3
 80206e6:	b2db      	uxtb	r3, r3
 80206e8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80206ec:	fb10 f006 	smulbb	r0, r0, r6
 80206f0:	b2ad      	uxth	r5, r5
 80206f2:	fb03 0004 	mla	r0, r3, r4, r0
 80206f6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80206fa:	fb17 f706 	smulbb	r7, r7, r6
 80206fe:	b280      	uxth	r0, r0
 8020700:	1c6b      	adds	r3, r5, #1
 8020702:	fb02 7204 	mla	r2, r2, r4, r7
 8020706:	b292      	uxth	r2, r2
 8020708:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802070c:	1c43      	adds	r3, r0, #1
 802070e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020712:	1c50      	adds	r0, r2, #1
 8020714:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020718:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802071c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020720:	0952      	lsrs	r2, r2, #5
 8020722:	432b      	orrs	r3, r5
 8020724:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020728:	4313      	orrs	r3, r2
 802072a:	800b      	strh	r3, [r1, #0]
 802072c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020730:	4680      	mov	r8, r0
 8020732:	e75c      	b.n	80205ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8020734:	4684      	mov	ip, r0
 8020736:	4680      	mov	r8, r0
 8020738:	e767      	b.n	802060a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 802073a:	4684      	mov	ip, r0
 802073c:	e765      	b.n	802060a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 802073e:	4605      	mov	r5, r0
 8020740:	e776      	b.n	8020630 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8020742:	4603      	mov	r3, r0
 8020744:	4605      	mov	r5, r0
 8020746:	e782      	b.n	802064e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8020748:	4603      	mov	r3, r0
 802074a:	e780      	b.n	802064e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0802074c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802074c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020750:	b099      	sub	sp, #100	; 0x64
 8020752:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 8020756:	9215      	str	r2, [sp, #84]	; 0x54
 8020758:	9309      	str	r3, [sp, #36]	; 0x24
 802075a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802075c:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 8020760:	930d      	str	r3, [sp, #52]	; 0x34
 8020762:	910c      	str	r1, [sp, #48]	; 0x30
 8020764:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8020768:	9016      	str	r0, [sp, #88]	; 0x58
 802076a:	6850      	ldr	r0, [r2, #4]
 802076c:	6812      	ldr	r2, [r2, #0]
 802076e:	fb00 1303 	mla	r3, r0, r3, r1
 8020772:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8020776:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020778:	681b      	ldr	r3, [r3, #0]
 802077a:	930b      	str	r3, [sp, #44]	; 0x2c
 802077c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802077e:	685e      	ldr	r6, [r3, #4]
 8020780:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020782:	43db      	mvns	r3, r3
 8020784:	b2db      	uxtb	r3, r3
 8020786:	3604      	adds	r6, #4
 8020788:	930a      	str	r3, [sp, #40]	; 0x28
 802078a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802078c:	2b00      	cmp	r3, #0
 802078e:	dc03      	bgt.n	8020798 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020790:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020792:	2b00      	cmp	r3, #0
 8020794:	f340 8225 	ble.w	8020be2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8020798:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802079a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802079e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80207a2:	1e48      	subs	r0, r1, #1
 80207a4:	1e57      	subs	r7, r2, #1
 80207a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80207a8:	2b00      	cmp	r3, #0
 80207aa:	f340 80e3 	ble.w	8020974 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80207ae:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 80207b2:	ea4f 4325 	mov.w	r3, r5, asr #16
 80207b6:	d406      	bmi.n	80207c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80207b8:	4584      	cmp	ip, r0
 80207ba:	da04      	bge.n	80207c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80207bc:	2b00      	cmp	r3, #0
 80207be:	db02      	blt.n	80207c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80207c0:	42bb      	cmp	r3, r7
 80207c2:	f2c0 80d8 	blt.w	8020976 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80207c6:	f11c 0c01 	adds.w	ip, ip, #1
 80207ca:	f100 80c9 	bmi.w	8020960 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80207ce:	4561      	cmp	r1, ip
 80207d0:	f2c0 80c6 	blt.w	8020960 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80207d4:	3301      	adds	r3, #1
 80207d6:	f100 80c3 	bmi.w	8020960 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80207da:	429a      	cmp	r2, r3
 80207dc:	f2c0 80c0 	blt.w	8020960 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80207e0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80207e4:	4647      	mov	r7, r8
 80207e6:	f1bb 0f00 	cmp.w	fp, #0
 80207ea:	f340 80e3 	ble.w	80209b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80207ee:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80207f0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80207f2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80207f6:	689b      	ldr	r3, [r3, #8]
 80207f8:	ea5f 422a 	movs.w	r2, sl, asr #16
 80207fc:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020800:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8020804:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020808:	f100 8121 	bmi.w	8020a4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 802080c:	f103 39ff 	add.w	r9, r3, #4294967295
 8020810:	454a      	cmp	r2, r9
 8020812:	f280 811c 	bge.w	8020a4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8020816:	f1bc 0f00 	cmp.w	ip, #0
 802081a:	f2c0 8118 	blt.w	8020a4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 802081e:	f10e 39ff 	add.w	r9, lr, #4294967295
 8020822:	45cc      	cmp	ip, r9
 8020824:	f280 8113 	bge.w	8020a4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8020828:	b21b      	sxth	r3, r3
 802082a:	fb0c 2203 	mla	r2, ip, r3, r2
 802082e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020830:	eb04 0902 	add.w	r9, r4, r2
 8020834:	5ca2      	ldrb	r2, [r4, r2]
 8020836:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 802083a:	2800      	cmp	r0, #0
 802083c:	f000 80fe 	beq.w	8020a3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8020840:	f899 2001 	ldrb.w	r2, [r9, #1]
 8020844:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8020848:	9211      	str	r2, [sp, #68]	; 0x44
 802084a:	b151      	cbz	r1, 8020862 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802084c:	eb09 0203 	add.w	r2, r9, r3
 8020850:	f819 3003 	ldrb.w	r3, [r9, r3]
 8020854:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8020858:	930f      	str	r3, [sp, #60]	; 0x3c
 802085a:	7853      	ldrb	r3, [r2, #1]
 802085c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8020860:	9312      	str	r3, [sp, #72]	; 0x48
 8020862:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020864:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020866:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802086a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802086e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020872:	ea4c 0c03 	orr.w	ip, ip, r3
 8020876:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020878:	041b      	lsls	r3, r3, #16
 802087a:	fb10 f201 	smulbb	r2, r0, r1
 802087e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8020882:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020886:	10d2      	asrs	r2, r2, #3
 8020888:	4323      	orrs	r3, r4
 802088a:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 802088e:	4353      	muls	r3, r2
 8020890:	fb09 330c 	mla	r3, r9, ip, r3
 8020894:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8020898:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802089c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80208a0:	ea4c 0e0e 	orr.w	lr, ip, lr
 80208a4:	f1c1 0c10 	rsb	ip, r1, #16
 80208a8:	ebac 0c00 	sub.w	ip, ip, r0
 80208ac:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80208b0:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80208b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80208b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80208b8:	0418      	lsls	r0, r3, #16
 80208ba:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80208be:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80208c2:	4318      	orrs	r0, r3
 80208c4:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80208c8:	fb02 c200 	mla	r2, r2, r0, ip
 80208cc:	0d53      	lsrs	r3, r2, #21
 80208ce:	0952      	lsrs	r2, r2, #5
 80208d0:	8838      	ldrh	r0, [r7, #0]
 80208d2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80208d6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80208da:	431a      	orrs	r2, r3
 80208dc:	b292      	uxth	r2, r2
 80208de:	1201      	asrs	r1, r0, #8
 80208e0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80208e4:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80208e8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80208ec:	fb11 f104 	smulbb	r1, r1, r4
 80208f0:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80208f4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80208f8:	00c0      	lsls	r0, r0, #3
 80208fa:	fb0c 1c03 	mla	ip, ip, r3, r1
 80208fe:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8020902:	10d1      	asrs	r1, r2, #3
 8020904:	b2c0      	uxtb	r0, r0
 8020906:	00d2      	lsls	r2, r2, #3
 8020908:	b2d2      	uxtb	r2, r2
 802090a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802090e:	fb1e fe04 	smulbb	lr, lr, r4
 8020912:	fb10 f004 	smulbb	r0, r0, r4
 8020916:	fa1f fc8c 	uxth.w	ip, ip
 802091a:	fb01 e103 	mla	r1, r1, r3, lr
 802091e:	fb02 0303 	mla	r3, r2, r3, r0
 8020922:	b29a      	uxth	r2, r3
 8020924:	f10c 0301 	add.w	r3, ip, #1
 8020928:	b289      	uxth	r1, r1
 802092a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802092e:	1c53      	adds	r3, r2, #1
 8020930:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020934:	1c4a      	adds	r2, r1, #1
 8020936:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802093a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802093e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020942:	0949      	lsrs	r1, r1, #5
 8020944:	ea43 030c 	orr.w	r3, r3, ip
 8020948:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802094c:	430b      	orrs	r3, r1
 802094e:	803b      	strh	r3, [r7, #0]
 8020950:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020952:	449a      	add	sl, r3
 8020954:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020956:	3702      	adds	r7, #2
 8020958:	441d      	add	r5, r3
 802095a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802095e:	e742      	b.n	80207e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8020960:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020962:	449a      	add	sl, r3
 8020964:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020966:	441d      	add	r5, r3
 8020968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802096a:	3b01      	subs	r3, #1
 802096c:	9309      	str	r3, [sp, #36]	; 0x24
 802096e:	f108 0802 	add.w	r8, r8, #2
 8020972:	e718      	b.n	80207a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8020974:	d023      	beq.n	80209be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8020976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020978:	9825      	ldr	r0, [sp, #148]	; 0x94
 802097a:	3b01      	subs	r3, #1
 802097c:	fb00 a003 	mla	r0, r0, r3, sl
 8020980:	1400      	asrs	r0, r0, #16
 8020982:	f53f af2d 	bmi.w	80207e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020986:	3901      	subs	r1, #1
 8020988:	4288      	cmp	r0, r1
 802098a:	f6bf af29 	bge.w	80207e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802098e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8020990:	fb01 5303 	mla	r3, r1, r3, r5
 8020994:	141b      	asrs	r3, r3, #16
 8020996:	f53f af23 	bmi.w	80207e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802099a:	3a01      	subs	r2, #1
 802099c:	4293      	cmp	r3, r2
 802099e:	f6bf af1f 	bge.w	80207e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80209a2:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80209a6:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 80209aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80209ae:	f1be 0f00 	cmp.w	lr, #0
 80209b2:	dc6c      	bgt.n	8020a8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80209b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209b6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80209ba:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 80209be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80209c0:	2b00      	cmp	r3, #0
 80209c2:	f340 810e 	ble.w	8020be2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 80209c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80209ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80209ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80209d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80209d4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80209d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80209dc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80209e0:	eef0 6a62 	vmov.f32	s13, s5
 80209e4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80209e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80209ec:	ee77 2a62 	vsub.f32	s5, s14, s5
 80209f0:	ee16 aa90 	vmov	sl, s13
 80209f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80209f8:	eef0 6a43 	vmov.f32	s13, s6
 80209fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020a00:	ee12 2a90 	vmov	r2, s5
 8020a04:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020a08:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a0c:	ee13 2a10 	vmov	r2, s6
 8020a10:	9325      	str	r3, [sp, #148]	; 0x94
 8020a12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020a14:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a18:	9326      	str	r3, [sp, #152]	; 0x98
 8020a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020a1c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8020a1e:	3b01      	subs	r3, #1
 8020a20:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020a24:	930c      	str	r3, [sp, #48]	; 0x30
 8020a26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020a28:	bf08      	it	eq
 8020a2a:	4613      	moveq	r3, r2
 8020a2c:	ee16 5a90 	vmov	r5, s13
 8020a30:	9309      	str	r3, [sp, #36]	; 0x24
 8020a32:	eeb0 3a67 	vmov.f32	s6, s15
 8020a36:	eef0 2a47 	vmov.f32	s5, s14
 8020a3a:	e6a6      	b.n	802078a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020a3c:	2900      	cmp	r1, #0
 8020a3e:	f43f af10 	beq.w	8020862 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8020a42:	f819 3003 	ldrb.w	r3, [r9, r3]
 8020a46:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8020a4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8020a4c:	e709      	b.n	8020862 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8020a4e:	f112 0901 	adds.w	r9, r2, #1
 8020a52:	f53f af7d 	bmi.w	8020950 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8020a56:	454b      	cmp	r3, r9
 8020a58:	f6ff af7a 	blt.w	8020950 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8020a5c:	f11c 0901 	adds.w	r9, ip, #1
 8020a60:	f53f af76 	bmi.w	8020950 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8020a64:	45ce      	cmp	lr, r9
 8020a66:	f6ff af73 	blt.w	8020950 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8020a6a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020a6c:	9202      	str	r2, [sp, #8]
 8020a6e:	b21b      	sxth	r3, r3
 8020a70:	fa0f f28e 	sxth.w	r2, lr
 8020a74:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020a78:	e9cd c003 	strd	ip, r0, [sp, #12]
 8020a7c:	9201      	str	r2, [sp, #4]
 8020a7e:	9300      	str	r3, [sp, #0]
 8020a80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020a82:	9816      	ldr	r0, [sp, #88]	; 0x58
 8020a84:	4633      	mov	r3, r6
 8020a86:	4639      	mov	r1, r7
 8020a88:	f7ff fd8e 	bl	80205a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8020a8c:	e760      	b.n	8020950 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8020a8e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020a90:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020a92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8020a96:	ea4f 422a 	mov.w	r2, sl, asr #16
 8020a9a:	1429      	asrs	r1, r5, #16
 8020a9c:	fb03 2101 	mla	r1, r3, r1, r2
 8020aa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020aa2:	440a      	add	r2, r1
 8020aa4:	5c61      	ldrb	r1, [r4, r1]
 8020aa6:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8020aaa:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020aae:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8020ab2:	f1bc 0f00 	cmp.w	ip, #0
 8020ab6:	f000 808c 	beq.w	8020bd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8020aba:	7857      	ldrb	r7, [r2, #1]
 8020abc:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8020ac0:	9413      	str	r4, [sp, #76]	; 0x4c
 8020ac2:	b140      	cbz	r0, 8020ad6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8020ac4:	18d7      	adds	r7, r2, r3
 8020ac6:	5cd3      	ldrb	r3, [r2, r3]
 8020ac8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8020acc:	9310      	str	r3, [sp, #64]	; 0x40
 8020ace:	787b      	ldrb	r3, [r7, #1]
 8020ad0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8020ad4:	9314      	str	r3, [sp, #80]	; 0x50
 8020ad6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020ad8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020ada:	fb1c f200 	smulbb	r2, ip, r0
 8020ade:	041f      	lsls	r7, r3, #16
 8020ae0:	10d2      	asrs	r2, r2, #3
 8020ae2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020ae6:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8020aea:	431f      	orrs	r7, r3
 8020aec:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8020af0:	9317      	str	r3, [sp, #92]	; 0x5c
 8020af2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020af4:	041b      	lsls	r3, r3, #16
 8020af6:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 8020afa:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020afe:	ea43 030b 	orr.w	r3, r3, fp
 8020b02:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020b04:	4353      	muls	r3, r2
 8020b06:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8020b0a:	fb04 3707 	mla	r7, r4, r7, r3
 8020b0e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020b12:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8020b16:	ea43 0b01 	orr.w	fp, r3, r1
 8020b1a:	f1c0 0110 	rsb	r1, r0, #16
 8020b1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020b20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020b22:	eba1 0c0c 	sub.w	ip, r1, ip
 8020b26:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8020b2a:	fb0c 770b 	mla	r7, ip, fp, r7
 8020b2e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8020b32:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8020b36:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8020b3a:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8020b3e:	ea4c 0c0b 	orr.w	ip, ip, fp
 8020b42:	fb02 770c 	mla	r7, r2, ip, r7
 8020b46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020b48:	0d79      	lsrs	r1, r7, #21
 8020b4a:	097f      	lsrs	r7, r7, #5
 8020b4c:	8812      	ldrh	r2, [r2, #0]
 8020b4e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020b52:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8020b56:	430f      	orrs	r7, r1
 8020b58:	b2bb      	uxth	r3, r7
 8020b5a:	1211      	asrs	r1, r2, #8
 8020b5c:	1218      	asrs	r0, r3, #8
 8020b5e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020b62:	fb11 f104 	smulbb	r1, r1, r4
 8020b66:	10d7      	asrs	r7, r2, #3
 8020b68:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020b6c:	00d2      	lsls	r2, r2, #3
 8020b6e:	fb00 1009 	mla	r0, r0, r9, r1
 8020b72:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020b76:	10d9      	asrs	r1, r3, #3
 8020b78:	b2d2      	uxtb	r2, r2
 8020b7a:	00db      	lsls	r3, r3, #3
 8020b7c:	fb17 f704 	smulbb	r7, r7, r4
 8020b80:	fb12 f204 	smulbb	r2, r2, r4
 8020b84:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020b88:	b2db      	uxtb	r3, r3
 8020b8a:	b280      	uxth	r0, r0
 8020b8c:	fb01 7109 	mla	r1, r1, r9, r7
 8020b90:	fb03 2309 	mla	r3, r3, r9, r2
 8020b94:	b29b      	uxth	r3, r3
 8020b96:	b289      	uxth	r1, r1
 8020b98:	1c42      	adds	r2, r0, #1
 8020b9a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020b9e:	1c4f      	adds	r7, r1, #1
 8020ba0:	1c5a      	adds	r2, r3, #1
 8020ba2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020ba6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8020baa:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8020bae:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020bb2:	0949      	lsrs	r1, r1, #5
 8020bb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020bb6:	4310      	orrs	r0, r2
 8020bb8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020bbc:	4308      	orrs	r0, r1
 8020bbe:	f823 0b02 	strh.w	r0, [r3], #2
 8020bc2:	930e      	str	r3, [sp, #56]	; 0x38
 8020bc4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020bc6:	449a      	add	sl, r3
 8020bc8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020bca:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020bce:	441d      	add	r5, r3
 8020bd0:	e6ed      	b.n	80209ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 8020bd2:	2800      	cmp	r0, #0
 8020bd4:	f43f af7f 	beq.w	8020ad6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8020bd8:	5cd3      	ldrb	r3, [r2, r3]
 8020bda:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8020bde:	9310      	str	r3, [sp, #64]	; 0x40
 8020be0:	e779      	b.n	8020ad6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8020be2:	b019      	add	sp, #100	; 0x64
 8020be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020be8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8020be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020bec:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 8020bf0:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8020bf4:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 8020bf8:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8020bfc:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8020c00:	8808      	ldrh	r0, [r1, #0]
 8020c02:	fb08 470e 	mla	r7, r8, lr, r4
 8020c06:	f1b8 0f00 	cmp.w	r8, #0
 8020c0a:	eb02 0907 	add.w	r9, r2, r7
 8020c0e:	db67      	blt.n	8020ce0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8020c10:	45c2      	cmp	sl, r8
 8020c12:	dd65      	ble.n	8020ce0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8020c14:	2c00      	cmp	r4, #0
 8020c16:	db61      	blt.n	8020cdc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8020c18:	45a6      	cmp	lr, r4
 8020c1a:	dd5f      	ble.n	8020cdc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8020c1c:	5dd2      	ldrb	r2, [r2, r7]
 8020c1e:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8020c22:	1c62      	adds	r2, r4, #1
 8020c24:	d45f      	bmi.n	8020ce6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8020c26:	4596      	cmp	lr, r2
 8020c28:	dd5d      	ble.n	8020ce6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8020c2a:	2d00      	cmp	r5, #0
 8020c2c:	d05b      	beq.n	8020ce6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8020c2e:	f899 2001 	ldrb.w	r2, [r9, #1]
 8020c32:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8020c36:	f118 0801 	adds.w	r8, r8, #1
 8020c3a:	d458      	bmi.n	8020cee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8020c3c:	45c2      	cmp	sl, r8
 8020c3e:	dd56      	ble.n	8020cee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8020c40:	2e00      	cmp	r6, #0
 8020c42:	d054      	beq.n	8020cee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8020c44:	2c00      	cmp	r4, #0
 8020c46:	db50      	blt.n	8020cea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8020c48:	45a6      	cmp	lr, r4
 8020c4a:	dd4e      	ble.n	8020cea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8020c4c:	f819 200e 	ldrb.w	r2, [r9, lr]
 8020c50:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8020c54:	3401      	adds	r4, #1
 8020c56:	d407      	bmi.n	8020c68 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8020c58:	45a6      	cmp	lr, r4
 8020c5a:	dd05      	ble.n	8020c68 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8020c5c:	b125      	cbz	r5, 8020c68 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8020c5e:	44ce      	add	lr, r9
 8020c60:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8020c64:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8020c68:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8020c6c:	fb15 f406 	smulbb	r4, r5, r6
 8020c70:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020c74:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8020c78:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020c7c:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8020c80:	ea43 0c0c 	orr.w	ip, r3, ip
 8020c84:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020c88:	f1c6 0310 	rsb	r3, r6, #16
 8020c8c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8020c90:	1b5b      	subs	r3, r3, r5
 8020c92:	ea4e 0707 	orr.w	r7, lr, r7
 8020c96:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8020c9a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020c9e:	437d      	muls	r5, r7
 8020ca0:	fb03 5c0c 	mla	ip, r3, ip, r5
 8020ca4:	0403      	lsls	r3, r0, #16
 8020ca6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020caa:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020cae:	4318      	orrs	r0, r3
 8020cb0:	0413      	lsls	r3, r2, #16
 8020cb2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020cb6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020cba:	4313      	orrs	r3, r2
 8020cbc:	fb04 c000 	mla	r0, r4, r0, ip
 8020cc0:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8020cc4:	fb06 0003 	mla	r0, r6, r3, r0
 8020cc8:	0d43      	lsrs	r3, r0, #21
 8020cca:	0940      	lsrs	r0, r0, #5
 8020ccc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020cd0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020cd4:	4318      	orrs	r0, r3
 8020cd6:	8008      	strh	r0, [r1, #0]
 8020cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020cdc:	4684      	mov	ip, r0
 8020cde:	e7a0      	b.n	8020c22 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 8020ce0:	4607      	mov	r7, r0
 8020ce2:	4684      	mov	ip, r0
 8020ce4:	e7a7      	b.n	8020c36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8020ce6:	4607      	mov	r7, r0
 8020ce8:	e7a5      	b.n	8020c36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8020cea:	4602      	mov	r2, r0
 8020cec:	e7b2      	b.n	8020c54 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 8020cee:	4602      	mov	r2, r0
 8020cf0:	e7ba      	b.n	8020c68 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

08020cf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020cf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cf6:	b093      	sub	sp, #76	; 0x4c
 8020cf8:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8020cfc:	920f      	str	r2, [sp, #60]	; 0x3c
 8020cfe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020d00:	9108      	str	r1, [sp, #32]
 8020d02:	9306      	str	r3, [sp, #24]
 8020d04:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8020d08:	9010      	str	r0, [sp, #64]	; 0x40
 8020d0a:	6850      	ldr	r0, [r2, #4]
 8020d0c:	6812      	ldr	r2, [r2, #0]
 8020d0e:	fb00 1303 	mla	r3, r0, r3, r1
 8020d12:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8020d16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020d18:	681b      	ldr	r3, [r3, #0]
 8020d1a:	9307      	str	r3, [sp, #28]
 8020d1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020d1e:	685f      	ldr	r7, [r3, #4]
 8020d20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020d24:	3704      	adds	r7, #4
 8020d26:	9b08      	ldr	r3, [sp, #32]
 8020d28:	2b00      	cmp	r3, #0
 8020d2a:	dc03      	bgt.n	8020d34 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8020d2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020d2e:	2b00      	cmp	r3, #0
 8020d30:	f340 81b2 	ble.w	8021098 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8020d34:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020d36:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020d3a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020d3e:	1e48      	subs	r0, r1, #1
 8020d40:	f102 3cff 	add.w	ip, r2, #4294967295
 8020d44:	9b06      	ldr	r3, [sp, #24]
 8020d46:	2b00      	cmp	r3, #0
 8020d48:	f340 80a9 	ble.w	8020e9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8020d4c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8020d50:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020d54:	d406      	bmi.n	8020d64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020d56:	4586      	cmp	lr, r0
 8020d58:	da04      	bge.n	8020d64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020d5a:	2b00      	cmp	r3, #0
 8020d5c:	db02      	blt.n	8020d64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020d5e:	4563      	cmp	r3, ip
 8020d60:	f2c0 809e 	blt.w	8020ea0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8020d64:	f11e 0e01 	adds.w	lr, lr, #1
 8020d68:	f100 808f 	bmi.w	8020e8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8020d6c:	4571      	cmp	r1, lr
 8020d6e:	f2c0 808c 	blt.w	8020e8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8020d72:	3301      	adds	r3, #1
 8020d74:	f100 8089 	bmi.w	8020e8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8020d78:	429a      	cmp	r2, r3
 8020d7a:	f2c0 8086 	blt.w	8020e8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8020d7e:	f8dd b018 	ldr.w	fp, [sp, #24]
 8020d82:	46c8      	mov	r8, r9
 8020d84:	f1bb 0f00 	cmp.w	fp, #0
 8020d88:	f340 80a6 	ble.w	8020ed8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8020d8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8020d8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020d90:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8020d94:	689b      	ldr	r3, [r3, #8]
 8020d96:	1422      	asrs	r2, r4, #16
 8020d98:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8020d9c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8020da0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020da4:	f100 80e3 	bmi.w	8020f6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8020da8:	f103 3aff 	add.w	sl, r3, #4294967295
 8020dac:	4552      	cmp	r2, sl
 8020dae:	f280 80de 	bge.w	8020f6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8020db2:	f1bc 0f00 	cmp.w	ip, #0
 8020db6:	f2c0 80da 	blt.w	8020f6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8020dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8020dbe:	45d4      	cmp	ip, sl
 8020dc0:	f280 80d5 	bge.w	8020f6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8020dc4:	b21b      	sxth	r3, r3
 8020dc6:	fb0c 2203 	mla	r2, ip, r3, r2
 8020dca:	9d07      	ldr	r5, [sp, #28]
 8020dcc:	eb05 0a02 	add.w	sl, r5, r2
 8020dd0:	5caa      	ldrb	r2, [r5, r2]
 8020dd2:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8020dd6:	2800      	cmp	r0, #0
 8020dd8:	f000 80c0 	beq.w	8020f5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8020ddc:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8020de0:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8020de4:	920b      	str	r2, [sp, #44]	; 0x2c
 8020de6:	b151      	cbz	r1, 8020dfe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8020de8:	eb0a 0203 	add.w	r2, sl, r3
 8020dec:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8020df0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8020df4:	9309      	str	r3, [sp, #36]	; 0x24
 8020df6:	7853      	ldrb	r3, [r2, #1]
 8020df8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8020dfc:	930c      	str	r3, [sp, #48]	; 0x30
 8020dfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020e00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020e02:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8020e06:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8020e0a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020e0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8020e12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020e14:	041b      	lsls	r3, r3, #16
 8020e16:	fb10 f201 	smulbb	r2, r0, r1
 8020e1a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020e1e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8020e22:	10d2      	asrs	r2, r2, #3
 8020e24:	432b      	orrs	r3, r5
 8020e26:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8020e2a:	4353      	muls	r3, r2
 8020e2c:	fb0a 330c 	mla	r3, sl, ip, r3
 8020e30:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8020e34:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8020e38:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8020e3c:	ea4c 0e0e 	orr.w	lr, ip, lr
 8020e40:	f1c1 0c10 	rsb	ip, r1, #16
 8020e44:	ebac 0c00 	sub.w	ip, ip, r0
 8020e48:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8020e4c:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8020e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e52:	0418      	lsls	r0, r3, #16
 8020e54:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020e58:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020e5c:	4318      	orrs	r0, r3
 8020e5e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8020e62:	fb02 c200 	mla	r2, r2, r0, ip
 8020e66:	0d53      	lsrs	r3, r2, #21
 8020e68:	0952      	lsrs	r2, r2, #5
 8020e6a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020e6e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020e72:	431a      	orrs	r2, r3
 8020e74:	f8a8 2000 	strh.w	r2, [r8]
 8020e78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020e7a:	441c      	add	r4, r3
 8020e7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020e7e:	f108 0802 	add.w	r8, r8, #2
 8020e82:	441e      	add	r6, r3
 8020e84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020e88:	e77c      	b.n	8020d84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020e8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020e8c:	441c      	add	r4, r3
 8020e8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020e90:	441e      	add	r6, r3
 8020e92:	9b06      	ldr	r3, [sp, #24]
 8020e94:	3b01      	subs	r3, #1
 8020e96:	9306      	str	r3, [sp, #24]
 8020e98:	f109 0902 	add.w	r9, r9, #2
 8020e9c:	e752      	b.n	8020d44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020e9e:	d020      	beq.n	8020ee2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020ea0:	9b06      	ldr	r3, [sp, #24]
 8020ea2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020ea4:	3b01      	subs	r3, #1
 8020ea6:	fb00 4003 	mla	r0, r0, r3, r4
 8020eaa:	1400      	asrs	r0, r0, #16
 8020eac:	f53f af67 	bmi.w	8020d7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020eb0:	3901      	subs	r1, #1
 8020eb2:	4288      	cmp	r0, r1
 8020eb4:	f6bf af63 	bge.w	8020d7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020eb8:	9920      	ldr	r1, [sp, #128]	; 0x80
 8020eba:	fb01 6303 	mla	r3, r1, r3, r6
 8020ebe:	141b      	asrs	r3, r3, #16
 8020ec0:	f53f af5d 	bmi.w	8020d7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020ec4:	3a01      	subs	r2, #1
 8020ec6:	4293      	cmp	r3, r2
 8020ec8:	f6bf af59 	bge.w	8020d7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020ecc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8020ed0:	46ca      	mov	sl, r9
 8020ed2:	f1b8 0f00 	cmp.w	r8, #0
 8020ed6:	dc67      	bgt.n	8020fa8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8020ed8:	9b06      	ldr	r3, [sp, #24]
 8020eda:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8020ede:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8020ee2:	9b08      	ldr	r3, [sp, #32]
 8020ee4:	2b00      	cmp	r3, #0
 8020ee6:	f340 80d7 	ble.w	8021098 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8020eea:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020eee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020ef2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020ef6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020ef8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020efc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020f00:	eeb0 6a62 	vmov.f32	s12, s5
 8020f04:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020f08:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020f0c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020f10:	ee16 4a10 	vmov	r4, s12
 8020f14:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020f18:	eeb0 6a43 	vmov.f32	s12, s6
 8020f1c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020f20:	ee12 2a90 	vmov	r2, s5
 8020f24:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020f28:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f2c:	ee13 2a10 	vmov	r2, s6
 8020f30:	931f      	str	r3, [sp, #124]	; 0x7c
 8020f32:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020f34:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f38:	9320      	str	r3, [sp, #128]	; 0x80
 8020f3a:	9b08      	ldr	r3, [sp, #32]
 8020f3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020f3e:	3b01      	subs	r3, #1
 8020f40:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020f44:	9308      	str	r3, [sp, #32]
 8020f46:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020f48:	bf08      	it	eq
 8020f4a:	4613      	moveq	r3, r2
 8020f4c:	ee16 6a10 	vmov	r6, s12
 8020f50:	9306      	str	r3, [sp, #24]
 8020f52:	eeb0 3a67 	vmov.f32	s6, s15
 8020f56:	eef0 2a47 	vmov.f32	s5, s14
 8020f5a:	e6e4      	b.n	8020d26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8020f5c:	2900      	cmp	r1, #0
 8020f5e:	f43f af4e 	beq.w	8020dfe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8020f62:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8020f66:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8020f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8020f6c:	e747      	b.n	8020dfe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8020f6e:	f112 0a01 	adds.w	sl, r2, #1
 8020f72:	d481      	bmi.n	8020e78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020f74:	4553      	cmp	r3, sl
 8020f76:	f6ff af7f 	blt.w	8020e78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020f7a:	f11c 0a01 	adds.w	sl, ip, #1
 8020f7e:	f53f af7b 	bmi.w	8020e78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020f82:	45d6      	cmp	lr, sl
 8020f84:	f6ff af78 	blt.w	8020e78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020f88:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8020f8c:	b21b      	sxth	r3, r3
 8020f8e:	fa0f f28e 	sxth.w	r2, lr
 8020f92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8020f96:	9201      	str	r2, [sp, #4]
 8020f98:	9300      	str	r3, [sp, #0]
 8020f9a:	9a07      	ldr	r2, [sp, #28]
 8020f9c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020f9e:	463b      	mov	r3, r7
 8020fa0:	4641      	mov	r1, r8
 8020fa2:	f7ff fe21 	bl	8020be8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8020fa6:	e767      	b.n	8020e78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020fa8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020faa:	9d07      	ldr	r5, [sp, #28]
 8020fac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8020fb0:	1422      	asrs	r2, r4, #16
 8020fb2:	1431      	asrs	r1, r6, #16
 8020fb4:	fb03 2101 	mla	r1, r3, r1, r2
 8020fb8:	9a07      	ldr	r2, [sp, #28]
 8020fba:	440a      	add	r2, r1
 8020fbc:	5c69      	ldrb	r1, [r5, r1]
 8020fbe:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8020fc2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020fc6:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8020fca:	f1be 0f00 	cmp.w	lr, #0
 8020fce:	d05c      	beq.n	802108a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8020fd0:	f892 c001 	ldrb.w	ip, [r2, #1]
 8020fd4:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8020fd8:	950d      	str	r5, [sp, #52]	; 0x34
 8020fda:	b150      	cbz	r0, 8020ff2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8020fdc:	eb02 0c03 	add.w	ip, r2, r3
 8020fe0:	5cd3      	ldrb	r3, [r2, r3]
 8020fe2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8020fe6:	930a      	str	r3, [sp, #40]	; 0x28
 8020fe8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8020fec:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8020ff0:	930e      	str	r3, [sp, #56]	; 0x38
 8020ff2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020ff4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020ff6:	fb1e f200 	smulbb	r2, lr, r0
 8020ffa:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8020ffe:	10d2      	asrs	r2, r2, #3
 8021000:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021004:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021008:	ea4c 0c03 	orr.w	ip, ip, r3
 802100c:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8021010:	9311      	str	r3, [sp, #68]	; 0x44
 8021012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021014:	041b      	lsls	r3, r3, #16
 8021016:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 802101a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802101e:	ea43 030b 	orr.w	r3, r3, fp
 8021022:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021024:	4353      	muls	r3, r2
 8021026:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802102a:	fb05 3c0c 	mla	ip, r5, ip, r3
 802102e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021032:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8021036:	ea43 0b01 	orr.w	fp, r3, r1
 802103a:	f1c0 0110 	rsb	r1, r0, #16
 802103e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021040:	eba1 0e0e 	sub.w	lr, r1, lr
 8021044:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8021048:	fb0e cc0b 	mla	ip, lr, fp, ip
 802104c:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8021050:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8021054:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021058:	ea4b 0e0e 	orr.w	lr, fp, lr
 802105c:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8021060:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021064:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8021068:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802106c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021070:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8021074:	ea43 0c0c 	orr.w	ip, r3, ip
 8021078:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802107a:	f82a cb02 	strh.w	ip, [sl], #2
 802107e:	441c      	add	r4, r3
 8021080:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021082:	f108 38ff 	add.w	r8, r8, #4294967295
 8021086:	441e      	add	r6, r3
 8021088:	e723      	b.n	8020ed2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 802108a:	2800      	cmp	r0, #0
 802108c:	d0b1      	beq.n	8020ff2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802108e:	5cd3      	ldrb	r3, [r2, r3]
 8021090:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021094:	930a      	str	r3, [sp, #40]	; 0x28
 8021096:	e7ac      	b.n	8020ff2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8021098:	b013      	add	sp, #76	; 0x4c
 802109a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802109e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 802109e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210a2:	880d      	ldrh	r5, [r1, #0]
 80210a4:	b087      	sub	sp, #28
 80210a6:	10ef      	asrs	r7, r5, #3
 80210a8:	ea4f 2a25 	mov.w	sl, r5, asr #8
 80210ac:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80210b0:	00ed      	lsls	r5, r5, #3
 80210b2:	9701      	str	r7, [sp, #4]
 80210b4:	b2ed      	uxtb	r5, r5
 80210b6:	9502      	str	r5, [sp, #8]
 80210b8:	9d01      	ldr	r5, [sp, #4]
 80210ba:	9103      	str	r1, [sp, #12]
 80210bc:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 80210c0:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 80210c4:	9902      	ldr	r1, [sp, #8]
 80210c6:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80210ca:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 80210ce:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 80210d2:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 80210d6:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 80210da:	022d      	lsls	r5, r5, #8
 80210dc:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 80210e0:	fb06 0709 	mla	r7, r6, r9, r0
 80210e4:	430d      	orrs	r5, r1
 80210e6:	2e00      	cmp	r6, #0
 80210e8:	eb02 0c07 	add.w	ip, r2, r7
 80210ec:	9505      	str	r5, [sp, #20]
 80210ee:	f2c0 80b6 	blt.w	802125e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 80210f2:	45b3      	cmp	fp, r6
 80210f4:	f340 80b3 	ble.w	802125e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 80210f8:	2800      	cmp	r0, #0
 80210fa:	f2c0 80ae 	blt.w	802125a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 80210fe:	4581      	cmp	r9, r0
 8021100:	f340 80ab 	ble.w	802125a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8021104:	5dd7      	ldrb	r7, [r2, r7]
 8021106:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802110a:	441f      	add	r7, r3
 802110c:	1c42      	adds	r2, r0, #1
 802110e:	f100 80a9 	bmi.w	8021264 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8021112:	4591      	cmp	r9, r2
 8021114:	f340 80a6 	ble.w	8021264 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8021118:	2c00      	cmp	r4, #0
 802111a:	f000 80a3 	beq.w	8021264 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 802111e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8021122:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021126:	441d      	add	r5, r3
 8021128:	3601      	adds	r6, #1
 802112a:	f100 809f 	bmi.w	802126c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 802112e:	45b3      	cmp	fp, r6
 8021130:	f340 809c 	ble.w	802126c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8021134:	f1be 0f00 	cmp.w	lr, #0
 8021138:	f000 8098 	beq.w	802126c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 802113c:	2800      	cmp	r0, #0
 802113e:	f2c0 8093 	blt.w	8021268 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8021142:	4581      	cmp	r9, r0
 8021144:	f340 8090 	ble.w	8021268 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8021148:	f81c 6009 	ldrb.w	r6, [ip, r9]
 802114c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021150:	441e      	add	r6, r3
 8021152:	3001      	adds	r0, #1
 8021154:	f100 808d 	bmi.w	8021272 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8021158:	4581      	cmp	r9, r0
 802115a:	f340 808a 	ble.w	8021272 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 802115e:	2c00      	cmp	r4, #0
 8021160:	f000 8087 	beq.w	8021272 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8021164:	44e1      	add	r9, ip
 8021166:	f899 2001 	ldrb.w	r2, [r9, #1]
 802116a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802116e:	4413      	add	r3, r2
 8021170:	b2a4      	uxth	r4, r4
 8021172:	fa1f fe8e 	uxth.w	lr, lr
 8021176:	fb04 fb0e 	mul.w	fp, r4, lr
 802117a:	0124      	lsls	r4, r4, #4
 802117c:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 8021180:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 8021184:	eba4 040b 	sub.w	r4, r4, fp
 8021188:	fa1f f08e 	uxth.w	r0, lr
 802118c:	b2a2      	uxth	r2, r4
 802118e:	78ac      	ldrb	r4, [r5, #2]
 8021190:	f897 c002 	ldrb.w	ip, [r7, #2]
 8021194:	9901      	ldr	r1, [sp, #4]
 8021196:	eba9 0900 	sub.w	r9, r9, r0
 802119a:	fa1f f989 	uxth.w	r9, r9
 802119e:	4354      	muls	r4, r2
 80211a0:	fb09 440c 	mla	r4, r9, ip, r4
 80211a4:	f896 c002 	ldrb.w	ip, [r6, #2]
 80211a8:	fb00 440c 	mla	r4, r0, ip, r4
 80211ac:	f893 c002 	ldrb.w	ip, [r3, #2]
 80211b0:	fa1f fe88 	uxth.w	lr, r8
 80211b4:	ea6f 0808 	mvn.w	r8, r8
 80211b8:	fa5f f888 	uxtb.w	r8, r8
 80211bc:	fb0b 4c0c 	mla	ip, fp, ip, r4
 80211c0:	fb1a fa08 	smulbb	sl, sl, r8
 80211c4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80211c8:	fb0c ac0e 	mla	ip, ip, lr, sl
 80211cc:	f895 a001 	ldrb.w	sl, [r5, #1]
 80211d0:	787c      	ldrb	r4, [r7, #1]
 80211d2:	782d      	ldrb	r5, [r5, #0]
 80211d4:	783f      	ldrb	r7, [r7, #0]
 80211d6:	fb02 fa0a 	mul.w	sl, r2, sl
 80211da:	fb09 aa04 	mla	sl, r9, r4, sl
 80211de:	7874      	ldrb	r4, [r6, #1]
 80211e0:	436a      	muls	r2, r5
 80211e2:	7835      	ldrb	r5, [r6, #0]
 80211e4:	fb00 aa04 	mla	sl, r0, r4, sl
 80211e8:	fb09 2207 	mla	r2, r9, r7, r2
 80211ec:	785c      	ldrb	r4, [r3, #1]
 80211ee:	781b      	ldrb	r3, [r3, #0]
 80211f0:	fb00 2005 	mla	r0, r0, r5, r2
 80211f4:	fb0b a404 	mla	r4, fp, r4, sl
 80211f8:	fb0b 0b03 	mla	fp, fp, r3, r0
 80211fc:	9b02      	ldr	r3, [sp, #8]
 80211fe:	fb11 fa08 	smulbb	sl, r1, r8
 8021202:	fa1f fc8c 	uxth.w	ip, ip
 8021206:	fb13 f808 	smulbb	r8, r3, r8
 802120a:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 802120e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8021212:	fb04 a40e 	mla	r4, r4, lr, sl
 8021216:	f10c 0301 	add.w	r3, ip, #1
 802121a:	fb0b 8e0e 	mla	lr, fp, lr, r8
 802121e:	fa1f fe8e 	uxth.w	lr, lr
 8021222:	b2a4      	uxth	r4, r4
 8021224:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021228:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 802122c:	f104 0a01 	add.w	sl, r4, #1
 8021230:	f10e 0c01 	add.w	ip, lr, #1
 8021234:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021238:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 802123c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021240:	0964      	lsrs	r4, r4, #5
 8021242:	ea4c 0c03 	orr.w	ip, ip, r3
 8021246:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802124a:	9b03      	ldr	r3, [sp, #12]
 802124c:	ea4c 0c04 	orr.w	ip, ip, r4
 8021250:	f8a3 c000 	strh.w	ip, [r3]
 8021254:	b007      	add	sp, #28
 8021256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802125a:	af05      	add	r7, sp, #20
 802125c:	e756      	b.n	802110c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 802125e:	ad05      	add	r5, sp, #20
 8021260:	462f      	mov	r7, r5
 8021262:	e761      	b.n	8021128 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8021264:	ad05      	add	r5, sp, #20
 8021266:	e75f      	b.n	8021128 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8021268:	ae05      	add	r6, sp, #20
 802126a:	e772      	b.n	8021152 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 802126c:	ab05      	add	r3, sp, #20
 802126e:	461e      	mov	r6, r3
 8021270:	e77e      	b.n	8021170 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 8021272:	ab05      	add	r3, sp, #20
 8021274:	e77c      	b.n	8021170 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

08021276 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021276:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802127a:	b095      	sub	sp, #84	; 0x54
 802127c:	9212      	str	r2, [sp, #72]	; 0x48
 802127e:	9309      	str	r3, [sp, #36]	; 0x24
 8021280:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8021282:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8021286:	930f      	str	r3, [sp, #60]	; 0x3c
 8021288:	910e      	str	r1, [sp, #56]	; 0x38
 802128a:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 802128e:	9013      	str	r0, [sp, #76]	; 0x4c
 8021290:	6850      	ldr	r0, [r2, #4]
 8021292:	6812      	ldr	r2, [r2, #0]
 8021294:	fb00 1303 	mla	r3, r0, r3, r1
 8021298:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802129c:	930a      	str	r3, [sp, #40]	; 0x28
 802129e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80212a0:	681b      	ldr	r3, [r3, #0]
 80212a2:	930d      	str	r3, [sp, #52]	; 0x34
 80212a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80212a6:	685c      	ldr	r4, [r3, #4]
 80212a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80212aa:	43db      	mvns	r3, r3
 80212ac:	b2db      	uxtb	r3, r3
 80212ae:	3404      	adds	r4, #4
 80212b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80212b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80212b4:	2b00      	cmp	r3, #0
 80212b6:	dc03      	bgt.n	80212c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80212b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80212ba:	2b00      	cmp	r3, #0
 80212bc:	f340 8255 	ble.w	802176a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 80212c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80212c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80212c6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80212ca:	1e48      	subs	r0, r1, #1
 80212cc:	1e55      	subs	r5, r2, #1
 80212ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80212d0:	2b00      	cmp	r3, #0
 80212d2:	f340 80f9 	ble.w	80214c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80212d6:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80212d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80212da:	1436      	asrs	r6, r6, #16
 80212dc:	ea4f 4323 	mov.w	r3, r3, asr #16
 80212e0:	d406      	bmi.n	80212f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80212e2:	4286      	cmp	r6, r0
 80212e4:	da04      	bge.n	80212f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80212e6:	2b00      	cmp	r3, #0
 80212e8:	db02      	blt.n	80212f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80212ea:	42ab      	cmp	r3, r5
 80212ec:	f2c0 80ed 	blt.w	80214ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80212f0:	3601      	adds	r6, #1
 80212f2:	f100 80da 	bmi.w	80214aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80212f6:	42b1      	cmp	r1, r6
 80212f8:	f2c0 80d7 	blt.w	80214aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80212fc:	3301      	adds	r3, #1
 80212fe:	f100 80d4 	bmi.w	80214aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8021302:	429a      	cmp	r2, r3
 8021304:	f2c0 80d1 	blt.w	80214aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8021308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802130a:	9311      	str	r3, [sp, #68]	; 0x44
 802130c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802130e:	930c      	str	r3, [sp, #48]	; 0x30
 8021310:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021312:	2b00      	cmp	r3, #0
 8021314:	f340 80fa 	ble.w	802150c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8021318:	9826      	ldr	r0, [sp, #152]	; 0x98
 802131a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802131c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802131e:	68c6      	ldr	r6, [r0, #12]
 8021320:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8021322:	141d      	asrs	r5, r3, #16
 8021324:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8021328:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802132a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802132c:	1400      	asrs	r0, r0, #16
 802132e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8021332:	6892      	ldr	r2, [r2, #8]
 8021334:	f100 813e 	bmi.w	80215b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021338:	1e57      	subs	r7, r2, #1
 802133a:	42b8      	cmp	r0, r7
 802133c:	f280 813a 	bge.w	80215b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021340:	2d00      	cmp	r5, #0
 8021342:	f2c0 8137 	blt.w	80215b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021346:	1e77      	subs	r7, r6, #1
 8021348:	42bd      	cmp	r5, r7
 802134a:	f280 8133 	bge.w	80215b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802134e:	b212      	sxth	r2, r2
 8021350:	fb05 0002 	mla	r0, r5, r2, r0
 8021354:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021356:	f815 a000 	ldrb.w	sl, [r5, r0]
 802135a:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 802135e:	182e      	adds	r6, r5, r0
 8021360:	eb04 050a 	add.w	r5, r4, sl
 8021364:	2b00      	cmp	r3, #0
 8021366:	f000 8117 	beq.w	8021598 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802136a:	f896 c001 	ldrb.w	ip, [r6, #1]
 802136e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021372:	44a4      	add	ip, r4
 8021374:	2900      	cmp	r1, #0
 8021376:	f000 8117 	beq.w	80215a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802137a:	18b0      	adds	r0, r6, r2
 802137c:	5cb2      	ldrb	r2, [r6, r2]
 802137e:	7840      	ldrb	r0, [r0, #1]
 8021380:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021384:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021388:	4422      	add	r2, r4
 802138a:	4420      	add	r0, r4
 802138c:	b29b      	uxth	r3, r3
 802138e:	b289      	uxth	r1, r1
 8021390:	fb03 f901 	mul.w	r9, r3, r1
 8021394:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021398:	011b      	lsls	r3, r3, #4
 802139a:	b289      	uxth	r1, r1
 802139c:	f89c 7002 	ldrb.w	r7, [ip, #2]
 80213a0:	f895 b002 	ldrb.w	fp, [r5, #2]
 80213a4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80213a6:	f814 a00a 	ldrb.w	sl, [r4, sl]
 80213aa:	f8b6 e000 	ldrh.w	lr, [r6]
 80213ae:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 80213b2:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80213b6:	eba3 0309 	sub.w	r3, r3, r9
 80213ba:	b29b      	uxth	r3, r3
 80213bc:	eba8 0801 	sub.w	r8, r8, r1
 80213c0:	fa1f f888 	uxth.w	r8, r8
 80213c4:	435f      	muls	r7, r3
 80213c6:	fb08 770b 	mla	r7, r8, fp, r7
 80213ca:	f892 b002 	ldrb.w	fp, [r2, #2]
 80213ce:	9310      	str	r3, [sp, #64]	; 0x40
 80213d0:	fb01 770b 	mla	r7, r1, fp, r7
 80213d4:	f890 b002 	ldrb.w	fp, [r0, #2]
 80213d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80213da:	fb09 770b 	mla	r7, r9, fp, r7
 80213de:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 80213e2:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80213e6:	fb1b fb03 	smulbb	fp, fp, r3
 80213ea:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80213ee:	fb07 b706 	mla	r7, r7, r6, fp
 80213f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80213f4:	f895 b001 	ldrb.w	fp, [r5, #1]
 80213f8:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80213fc:	f89c c000 	ldrb.w	ip, [ip]
 8021400:	435d      	muls	r5, r3
 8021402:	fb08 550b 	mla	r5, r8, fp, r5
 8021406:	f892 b001 	ldrb.w	fp, [r2, #1]
 802140a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802140c:	fb01 550b 	mla	r5, r1, fp, r5
 8021410:	f890 b001 	ldrb.w	fp, [r0, #1]
 8021414:	fb09 550b 	mla	r5, r9, fp, r5
 8021418:	ea4f 0bee 	mov.w	fp, lr, asr #3
 802141c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8021420:	fb1b fb03 	smulbb	fp, fp, r3
 8021424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021426:	fb03 f30c 	mul.w	r3, r3, ip
 802142a:	f892 c000 	ldrb.w	ip, [r2]
 802142e:	fb08 330a 	mla	r3, r8, sl, r3
 8021432:	fb01 330c 	mla	r3, r1, ip, r3
 8021436:	f890 c000 	ldrb.w	ip, [r0]
 802143a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802143e:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021444:	fa5f fe8e 	uxtb.w	lr, lr
 8021448:	b2bf      	uxth	r7, r7
 802144a:	fb1e fe03 	smulbb	lr, lr, r3
 802144e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8021452:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8021456:	fb05 b506 	mla	r5, r5, r6, fp
 802145a:	1c7b      	adds	r3, r7, #1
 802145c:	fb0c e606 	mla	r6, ip, r6, lr
 8021460:	b2ad      	uxth	r5, r5
 8021462:	b2b6      	uxth	r6, r6
 8021464:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8021468:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 802146c:	f105 0b01 	add.w	fp, r5, #1
 8021470:	1c77      	adds	r7, r6, #1
 8021472:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8021476:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 802147a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802147e:	096d      	lsrs	r5, r5, #5
 8021480:	431f      	orrs	r7, r3
 8021482:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021488:	433d      	orrs	r5, r7
 802148a:	801d      	strh	r5, [r3, #0]
 802148c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802148e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021490:	3302      	adds	r3, #2
 8021492:	930c      	str	r3, [sp, #48]	; 0x30
 8021494:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021496:	4413      	add	r3, r2
 8021498:	931f      	str	r3, [sp, #124]	; 0x7c
 802149a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802149c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802149e:	4413      	add	r3, r2
 80214a0:	9320      	str	r3, [sp, #128]	; 0x80
 80214a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80214a4:	3b01      	subs	r3, #1
 80214a6:	9311      	str	r3, [sp, #68]	; 0x44
 80214a8:	e732      	b.n	8021310 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80214aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80214ac:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80214ae:	4433      	add	r3, r6
 80214b0:	931f      	str	r3, [sp, #124]	; 0x7c
 80214b2:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80214b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80214b6:	4433      	add	r3, r6
 80214b8:	9320      	str	r3, [sp, #128]	; 0x80
 80214ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80214bc:	3b01      	subs	r3, #1
 80214be:	9309      	str	r3, [sp, #36]	; 0x24
 80214c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80214c2:	3302      	adds	r3, #2
 80214c4:	930a      	str	r3, [sp, #40]	; 0x28
 80214c6:	e702      	b.n	80212ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80214c8:	d027      	beq.n	802151a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 80214ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80214cc:	9821      	ldr	r0, [sp, #132]	; 0x84
 80214ce:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80214d0:	3b01      	subs	r3, #1
 80214d2:	fb00 5003 	mla	r0, r0, r3, r5
 80214d6:	1400      	asrs	r0, r0, #16
 80214d8:	f53f af16 	bmi.w	8021308 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80214dc:	3901      	subs	r1, #1
 80214de:	4288      	cmp	r0, r1
 80214e0:	f6bf af12 	bge.w	8021308 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80214e4:	9922      	ldr	r1, [sp, #136]	; 0x88
 80214e6:	9820      	ldr	r0, [sp, #128]	; 0x80
 80214e8:	fb01 0303 	mla	r3, r1, r3, r0
 80214ec:	141b      	asrs	r3, r3, #16
 80214ee:	f53f af0b 	bmi.w	8021308 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80214f2:	3a01      	subs	r2, #1
 80214f4:	4293      	cmp	r3, r2
 80214f6:	f6bf af07 	bge.w	8021308 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80214fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80214fc:	9311      	str	r3, [sp, #68]	; 0x44
 80214fe:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8021502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021504:	930c      	str	r3, [sp, #48]	; 0x30
 8021506:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021508:	2b00      	cmp	r3, #0
 802150a:	dc70      	bgt.n	80215ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 802150c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802150e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021510:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021514:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021518:	930a      	str	r3, [sp, #40]	; 0x28
 802151a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802151c:	2b00      	cmp	r3, #0
 802151e:	f340 8124 	ble.w	802176a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8021522:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802152a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802152e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021530:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021534:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021538:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802153c:	eef0 6a62 	vmov.f32	s13, s5
 8021540:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021544:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021548:	ee77 2a62 	vsub.f32	s5, s14, s5
 802154c:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8021550:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021554:	eef0 6a43 	vmov.f32	s13, s6
 8021558:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802155c:	ee12 2a90 	vmov	r2, s5
 8021560:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021564:	fb92 f3f3 	sdiv	r3, r2, r3
 8021568:	ee13 2a10 	vmov	r2, s6
 802156c:	9321      	str	r3, [sp, #132]	; 0x84
 802156e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021570:	fb92 f3f3 	sdiv	r3, r2, r3
 8021574:	9322      	str	r3, [sp, #136]	; 0x88
 8021576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021578:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802157a:	3b01      	subs	r3, #1
 802157c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021580:	930e      	str	r3, [sp, #56]	; 0x38
 8021582:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021584:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8021588:	bf08      	it	eq
 802158a:	4613      	moveq	r3, r2
 802158c:	9309      	str	r3, [sp, #36]	; 0x24
 802158e:	eeb0 3a67 	vmov.f32	s6, s15
 8021592:	eef0 2a47 	vmov.f32	s5, s14
 8021596:	e68c      	b.n	80212b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021598:	b149      	cbz	r1, 80215ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 802159a:	5cb2      	ldrb	r2, [r6, r2]
 802159c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80215a0:	4422      	add	r2, r4
 80215a2:	4628      	mov	r0, r5
 80215a4:	46ac      	mov	ip, r5
 80215a6:	e6f1      	b.n	802138c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80215a8:	4628      	mov	r0, r5
 80215aa:	462a      	mov	r2, r5
 80215ac:	e6ee      	b.n	802138c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80215ae:	4628      	mov	r0, r5
 80215b0:	462a      	mov	r2, r5
 80215b2:	e7f7      	b.n	80215a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80215b4:	1c47      	adds	r7, r0, #1
 80215b6:	f53f af69 	bmi.w	802148c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80215ba:	42ba      	cmp	r2, r7
 80215bc:	f6ff af66 	blt.w	802148c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80215c0:	1c6f      	adds	r7, r5, #1
 80215c2:	f53f af63 	bmi.w	802148c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80215c6:	42be      	cmp	r6, r7
 80215c8:	f6ff af60 	blt.w	802148c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80215cc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80215ce:	9002      	str	r0, [sp, #8]
 80215d0:	b236      	sxth	r6, r6
 80215d2:	b212      	sxth	r2, r2
 80215d4:	e9cd 1705 	strd	r1, r7, [sp, #20]
 80215d8:	e9cd 5303 	strd	r5, r3, [sp, #12]
 80215dc:	9200      	str	r2, [sp, #0]
 80215de:	9601      	str	r6, [sp, #4]
 80215e0:	4623      	mov	r3, r4
 80215e2:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80215e6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80215e8:	f7ff fd59 	bl	802109e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 80215ec:	e74e      	b.n	802148c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80215ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80215f0:	9820      	ldr	r0, [sp, #128]	; 0x80
 80215f2:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80215f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80215f6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80215fa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80215fc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8021600:	142d      	asrs	r5, r5, #16
 8021602:	1400      	asrs	r0, r0, #16
 8021604:	fb02 5000 	mla	r0, r2, r0, r5
 8021608:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802160a:	f815 9000 	ldrb.w	r9, [r5, r0]
 802160e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8021612:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8021616:	182e      	adds	r6, r5, r0
 8021618:	eb04 0509 	add.w	r5, r4, r9
 802161c:	2b00      	cmp	r3, #0
 802161e:	f000 8096 	beq.w	802174e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8021622:	7877      	ldrb	r7, [r6, #1]
 8021624:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021628:	4427      	add	r7, r4
 802162a:	2900      	cmp	r1, #0
 802162c:	f000 8097 	beq.w	802175e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8021630:	18b0      	adds	r0, r6, r2
 8021632:	5cb2      	ldrb	r2, [r6, r2]
 8021634:	7840      	ldrb	r0, [r0, #1]
 8021636:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802163a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802163e:	4422      	add	r2, r4
 8021640:	4420      	add	r0, r4
 8021642:	b29b      	uxth	r3, r3
 8021644:	b289      	uxth	r1, r1
 8021646:	fb03 f801 	mul.w	r8, r3, r1
 802164a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802164c:	f895 b002 	ldrb.w	fp, [r5, #2]
 8021650:	f8b6 c000 	ldrh.w	ip, [r6]
 8021654:	78be      	ldrb	r6, [r7, #2]
 8021656:	f814 9009 	ldrb.w	r9, [r4, r9]
 802165a:	011b      	lsls	r3, r3, #4
 802165c:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8021660:	b289      	uxth	r1, r1
 8021662:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8021666:	eba3 0308 	sub.w	r3, r3, r8
 802166a:	b29b      	uxth	r3, r3
 802166c:	ebae 0e01 	sub.w	lr, lr, r1
 8021670:	fa1f fe8e 	uxth.w	lr, lr
 8021674:	435e      	muls	r6, r3
 8021676:	fb0e 660b 	mla	r6, lr, fp, r6
 802167a:	f892 b002 	ldrb.w	fp, [r2, #2]
 802167e:	9310      	str	r3, [sp, #64]	; 0x40
 8021680:	fb01 660b 	mla	r6, r1, fp, r6
 8021684:	f890 b002 	ldrb.w	fp, [r0, #2]
 8021688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802168a:	fb08 660b 	mla	r6, r8, fp, r6
 802168e:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8021692:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8021696:	fb1b fb03 	smulbb	fp, fp, r3
 802169a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802169e:	fb06 b60a 	mla	r6, r6, sl, fp
 80216a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80216a4:	f895 b001 	ldrb.w	fp, [r5, #1]
 80216a8:	787d      	ldrb	r5, [r7, #1]
 80216aa:	783f      	ldrb	r7, [r7, #0]
 80216ac:	435d      	muls	r5, r3
 80216ae:	fb0e 550b 	mla	r5, lr, fp, r5
 80216b2:	f892 b001 	ldrb.w	fp, [r2, #1]
 80216b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80216b8:	fb01 550b 	mla	r5, r1, fp, r5
 80216bc:	f890 b001 	ldrb.w	fp, [r0, #1]
 80216c0:	fb08 550b 	mla	r5, r8, fp, r5
 80216c4:	ea4f 0bec 	mov.w	fp, ip, asr #3
 80216c8:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80216cc:	fb1b fb03 	smulbb	fp, fp, r3
 80216d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80216d2:	437b      	muls	r3, r7
 80216d4:	7817      	ldrb	r7, [r2, #0]
 80216d6:	fb0e 3309 	mla	r3, lr, r9, r3
 80216da:	fb01 3307 	mla	r3, r1, r7, r3
 80216de:	7807      	ldrb	r7, [r0, #0]
 80216e0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80216e4:	fb08 3707 	mla	r7, r8, r7, r3
 80216e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80216ea:	fa5f fc8c 	uxtb.w	ip, ip
 80216ee:	fb1c fc03 	smulbb	ip, ip, r3
 80216f2:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80216f6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80216fa:	fb05 b50a 	mla	r5, r5, sl, fp
 80216fe:	fb07 c70a 	mla	r7, r7, sl, ip
 8021702:	b2b6      	uxth	r6, r6
 8021704:	b2ad      	uxth	r5, r5
 8021706:	b2bf      	uxth	r7, r7
 8021708:	1c73      	adds	r3, r6, #1
 802170a:	1c7a      	adds	r2, r7, #1
 802170c:	f105 0b01 	add.w	fp, r5, #1
 8021710:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8021714:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8021718:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 802171c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021720:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8021724:	096d      	lsrs	r5, r5, #5
 8021726:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021728:	4316      	orrs	r6, r2
 802172a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802172e:	432e      	orrs	r6, r5
 8021730:	f823 6b02 	strh.w	r6, [r3], #2
 8021734:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021736:	930c      	str	r3, [sp, #48]	; 0x30
 8021738:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802173a:	4413      	add	r3, r2
 802173c:	931f      	str	r3, [sp, #124]	; 0x7c
 802173e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8021740:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021742:	4413      	add	r3, r2
 8021744:	9320      	str	r3, [sp, #128]	; 0x80
 8021746:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021748:	3b01      	subs	r3, #1
 802174a:	9311      	str	r3, [sp, #68]	; 0x44
 802174c:	e6db      	b.n	8021506 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 802174e:	b149      	cbz	r1, 8021764 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8021750:	5cb2      	ldrb	r2, [r6, r2]
 8021752:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021756:	4422      	add	r2, r4
 8021758:	4628      	mov	r0, r5
 802175a:	462f      	mov	r7, r5
 802175c:	e771      	b.n	8021642 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 802175e:	4628      	mov	r0, r5
 8021760:	462a      	mov	r2, r5
 8021762:	e76e      	b.n	8021642 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8021764:	4628      	mov	r0, r5
 8021766:	462a      	mov	r2, r5
 8021768:	e7f7      	b.n	802175a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802176a:	b015      	add	sp, #84	; 0x54
 802176c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021770 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8021770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021774:	880f      	ldrh	r7, [r1, #0]
 8021776:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 802177a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 802177e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8021782:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8021786:	023c      	lsls	r4, r7, #8
 8021788:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 802178c:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 8021790:	017c      	lsls	r4, r7, #5
 8021792:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 8021796:	00ff      	lsls	r7, r7, #3
 8021798:	ea4b 0404 	orr.w	r4, fp, r4
 802179c:	b2ff      	uxtb	r7, r7
 802179e:	fb05 ca0e 	mla	sl, r5, lr, ip
 80217a2:	4327      	orrs	r7, r4
 80217a4:	2d00      	cmp	r5, #0
 80217a6:	eb02 080a 	add.w	r8, r2, sl
 80217aa:	9701      	str	r7, [sp, #4]
 80217ac:	db7e      	blt.n	80218ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 80217ae:	45a9      	cmp	r9, r5
 80217b0:	dd7c      	ble.n	80218ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 80217b2:	f1bc 0f00 	cmp.w	ip, #0
 80217b6:	db77      	blt.n	80218a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 80217b8:	45e6      	cmp	lr, ip
 80217ba:	dd75      	ble.n	80218a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 80217bc:	f812 700a 	ldrb.w	r7, [r2, sl]
 80217c0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80217c4:	441f      	add	r7, r3
 80217c6:	f11c 0201 	adds.w	r2, ip, #1
 80217ca:	d472      	bmi.n	80218b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 80217cc:	4596      	cmp	lr, r2
 80217ce:	dd70      	ble.n	80218b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 80217d0:	2800      	cmp	r0, #0
 80217d2:	d06e      	beq.n	80218b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 80217d4:	f898 4001 	ldrb.w	r4, [r8, #1]
 80217d8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80217dc:	441c      	add	r4, r3
 80217de:	3501      	adds	r5, #1
 80217e0:	d46b      	bmi.n	80218ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 80217e2:	45a9      	cmp	r9, r5
 80217e4:	dd69      	ble.n	80218ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 80217e6:	2e00      	cmp	r6, #0
 80217e8:	d067      	beq.n	80218ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 80217ea:	f1bc 0f00 	cmp.w	ip, #0
 80217ee:	db62      	blt.n	80218b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 80217f0:	45e6      	cmp	lr, ip
 80217f2:	dd60      	ble.n	80218b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 80217f4:	f818 500e 	ldrb.w	r5, [r8, lr]
 80217f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80217fc:	441d      	add	r5, r3
 80217fe:	f11c 0201 	adds.w	r2, ip, #1
 8021802:	d45d      	bmi.n	80218c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8021804:	4596      	cmp	lr, r2
 8021806:	dd5b      	ble.n	80218c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8021808:	2800      	cmp	r0, #0
 802180a:	d059      	beq.n	80218c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 802180c:	44c6      	add	lr, r8
 802180e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8021812:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021816:	4413      	add	r3, r2
 8021818:	b280      	uxth	r0, r0
 802181a:	b2b2      	uxth	r2, r6
 802181c:	fb00 f602 	mul.w	r6, r0, r2
 8021820:	0100      	lsls	r0, r0, #4
 8021822:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8021826:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 802182a:	1b80      	subs	r0, r0, r6
 802182c:	fa1f fc82 	uxth.w	ip, r2
 8021830:	b282      	uxth	r2, r0
 8021832:	78a0      	ldrb	r0, [r4, #2]
 8021834:	f897 e002 	ldrb.w	lr, [r7, #2]
 8021838:	f897 9000 	ldrb.w	r9, [r7]
 802183c:	787f      	ldrb	r7, [r7, #1]
 802183e:	eba8 080c 	sub.w	r8, r8, ip
 8021842:	fa1f f888 	uxth.w	r8, r8
 8021846:	4350      	muls	r0, r2
 8021848:	fb08 0e0e 	mla	lr, r8, lr, r0
 802184c:	78a8      	ldrb	r0, [r5, #2]
 802184e:	fb0c e000 	mla	r0, ip, r0, lr
 8021852:	f893 e002 	ldrb.w	lr, [r3, #2]
 8021856:	fb06 0e0e 	mla	lr, r6, lr, r0
 802185a:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 802185e:	f894 e000 	ldrb.w	lr, [r4]
 8021862:	fb02 fe0e 	mul.w	lr, r2, lr
 8021866:	fb08 e909 	mla	r9, r8, r9, lr
 802186a:	f895 e000 	ldrb.w	lr, [r5]
 802186e:	fb0c 990e 	mla	r9, ip, lr, r9
 8021872:	f893 e000 	ldrb.w	lr, [r3]
 8021876:	785b      	ldrb	r3, [r3, #1]
 8021878:	fb06 9e0e 	mla	lr, r6, lr, r9
 802187c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8021880:	ea4e 0e00 	orr.w	lr, lr, r0
 8021884:	7860      	ldrb	r0, [r4, #1]
 8021886:	4350      	muls	r0, r2
 8021888:	786a      	ldrb	r2, [r5, #1]
 802188a:	fb08 0007 	mla	r0, r8, r7, r0
 802188e:	fb0c 0202 	mla	r2, ip, r2, r0
 8021892:	fb06 2303 	mla	r3, r6, r3, r2
 8021896:	095b      	lsrs	r3, r3, #5
 8021898:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802189c:	ea4e 0303 	orr.w	r3, lr, r3
 80218a0:	800b      	strh	r3, [r1, #0]
 80218a2:	b003      	add	sp, #12
 80218a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218a8:	af01      	add	r7, sp, #4
 80218aa:	e78c      	b.n	80217c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 80218ac:	ac01      	add	r4, sp, #4
 80218ae:	4627      	mov	r7, r4
 80218b0:	e795      	b.n	80217de <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 80218b2:	ac01      	add	r4, sp, #4
 80218b4:	e793      	b.n	80217de <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 80218b6:	ad01      	add	r5, sp, #4
 80218b8:	e7a1      	b.n	80217fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 80218ba:	ab01      	add	r3, sp, #4
 80218bc:	461d      	mov	r5, r3
 80218be:	e7ab      	b.n	8021818 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 80218c0:	ab01      	add	r3, sp, #4
 80218c2:	e7a9      	b.n	8021818 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

080218c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80218c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218c8:	b08f      	sub	sp, #60	; 0x3c
 80218ca:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 80218ce:	920c      	str	r2, [sp, #48]	; 0x30
 80218d0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80218d2:	910a      	str	r1, [sp, #40]	; 0x28
 80218d4:	9306      	str	r3, [sp, #24]
 80218d6:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 80218da:	900d      	str	r0, [sp, #52]	; 0x34
 80218dc:	6850      	ldr	r0, [r2, #4]
 80218de:	6812      	ldr	r2, [r2, #0]
 80218e0:	fb00 1303 	mla	r3, r0, r3, r1
 80218e4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80218e8:	9307      	str	r3, [sp, #28]
 80218ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80218ec:	681b      	ldr	r3, [r3, #0]
 80218ee:	9308      	str	r3, [sp, #32]
 80218f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80218f2:	685c      	ldr	r4, [r3, #4]
 80218f4:	3404      	adds	r4, #4
 80218f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80218f8:	2b00      	cmp	r3, #0
 80218fa:	dc03      	bgt.n	8021904 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80218fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80218fe:	2b00      	cmp	r3, #0
 8021900:	f340 81d6 	ble.w	8021cb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8021904:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021906:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802190a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802190e:	1e48      	subs	r0, r1, #1
 8021910:	1e56      	subs	r6, r2, #1
 8021912:	9b06      	ldr	r3, [sp, #24]
 8021914:	2b00      	cmp	r3, #0
 8021916:	f340 80b7 	ble.w	8021a88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 802191a:	ea5f 472b 	movs.w	r7, fp, asr #16
 802191e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021922:	d406      	bmi.n	8021932 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021924:	4287      	cmp	r7, r0
 8021926:	da04      	bge.n	8021932 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021928:	2b00      	cmp	r3, #0
 802192a:	db02      	blt.n	8021932 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802192c:	42b3      	cmp	r3, r6
 802192e:	f2c0 80ac 	blt.w	8021a8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8021932:	3701      	adds	r7, #1
 8021934:	f100 809d 	bmi.w	8021a72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8021938:	42b9      	cmp	r1, r7
 802193a:	f2c0 809a 	blt.w	8021a72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 802193e:	3301      	adds	r3, #1
 8021940:	f100 8097 	bmi.w	8021a72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8021944:	429a      	cmp	r2, r3
 8021946:	f2c0 8094 	blt.w	8021a72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 802194a:	9b06      	ldr	r3, [sp, #24]
 802194c:	930b      	str	r3, [sp, #44]	; 0x2c
 802194e:	9b07      	ldr	r3, [sp, #28]
 8021950:	9309      	str	r3, [sp, #36]	; 0x24
 8021952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021954:	2b00      	cmp	r3, #0
 8021956:	f340 80b5 	ble.w	8021ac4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802195a:	9820      	ldr	r0, [sp, #128]	; 0x80
 802195c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802195e:	68c7      	ldr	r7, [r0, #12]
 8021960:	6892      	ldr	r2, [r2, #8]
 8021962:	ea5f 402b 	movs.w	r0, fp, asr #16
 8021966:	ea4f 4625 	mov.w	r6, r5, asr #16
 802196a:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802196e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021972:	f100 80fb 	bmi.w	8021b6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8021976:	f102 3cff 	add.w	ip, r2, #4294967295
 802197a:	4560      	cmp	r0, ip
 802197c:	f280 80f6 	bge.w	8021b6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8021980:	2e00      	cmp	r6, #0
 8021982:	f2c0 80f3 	blt.w	8021b6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8021986:	f107 3cff 	add.w	ip, r7, #4294967295
 802198a:	4566      	cmp	r6, ip
 802198c:	f280 80ee 	bge.w	8021b6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8021990:	b212      	sxth	r2, r2
 8021992:	fb06 0002 	mla	r0, r6, r2, r0
 8021996:	9e08      	ldr	r6, [sp, #32]
 8021998:	1837      	adds	r7, r6, r0
 802199a:	5c30      	ldrb	r0, [r6, r0]
 802199c:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 80219a0:	eb04 0c08 	add.w	ip, r4, r8
 80219a4:	2b00      	cmp	r3, #0
 80219a6:	f000 80d3 	beq.w	8021b50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80219aa:	787e      	ldrb	r6, [r7, #1]
 80219ac:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80219b0:	4426      	add	r6, r4
 80219b2:	2900      	cmp	r1, #0
 80219b4:	f000 80d4 	beq.w	8021b60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 80219b8:	18b8      	adds	r0, r7, r2
 80219ba:	5cba      	ldrb	r2, [r7, r2]
 80219bc:	7840      	ldrb	r0, [r0, #1]
 80219be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80219c2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80219c6:	4422      	add	r2, r4
 80219c8:	4420      	add	r0, r4
 80219ca:	b29b      	uxth	r3, r3
 80219cc:	b289      	uxth	r1, r1
 80219ce:	fb03 f901 	mul.w	r9, r3, r1
 80219d2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80219d6:	011b      	lsls	r3, r3, #4
 80219d8:	b289      	uxth	r1, r1
 80219da:	78b7      	ldrb	r7, [r6, #2]
 80219dc:	f89c a002 	ldrb.w	sl, [ip, #2]
 80219e0:	f89c c001 	ldrb.w	ip, [ip, #1]
 80219e4:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80219e8:	eba3 0309 	sub.w	r3, r3, r9
 80219ec:	b29b      	uxth	r3, r3
 80219ee:	ebae 0e01 	sub.w	lr, lr, r1
 80219f2:	fa1f fe8e 	uxth.w	lr, lr
 80219f6:	435f      	muls	r7, r3
 80219f8:	fb0e 770a 	mla	r7, lr, sl, r7
 80219fc:	f892 a002 	ldrb.w	sl, [r2, #2]
 8021a00:	fb01 770a 	mla	r7, r1, sl, r7
 8021a04:	f890 a002 	ldrb.w	sl, [r0, #2]
 8021a08:	fb09 7a0a 	mla	sl, r9, sl, r7
 8021a0c:	f814 7008 	ldrb.w	r7, [r4, r8]
 8021a10:	f896 8000 	ldrb.w	r8, [r6]
 8021a14:	7876      	ldrb	r6, [r6, #1]
 8021a16:	fb03 f808 	mul.w	r8, r3, r8
 8021a1a:	fb0e 8807 	mla	r8, lr, r7, r8
 8021a1e:	7817      	ldrb	r7, [r2, #0]
 8021a20:	fb01 8807 	mla	r8, r1, r7, r8
 8021a24:	7807      	ldrb	r7, [r0, #0]
 8021a26:	fb09 8707 	mla	r7, r9, r7, r8
 8021a2a:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8021a2e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021a32:	ea47 070a 	orr.w	r7, r7, sl
 8021a36:	4373      	muls	r3, r6
 8021a38:	f892 a001 	ldrb.w	sl, [r2, #1]
 8021a3c:	fb0e 330c 	mla	r3, lr, ip, r3
 8021a40:	fb01 310a 	mla	r1, r1, sl, r3
 8021a44:	f890 a001 	ldrb.w	sl, [r0, #1]
 8021a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021a4a:	fb09 1a0a 	mla	sl, r9, sl, r1
 8021a4e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021a52:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021a56:	ea47 070a 	orr.w	r7, r7, sl
 8021a5a:	801f      	strh	r7, [r3, #0]
 8021a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021a5e:	3302      	adds	r3, #2
 8021a60:	9309      	str	r3, [sp, #36]	; 0x24
 8021a62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021a64:	449b      	add	fp, r3
 8021a66:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021a68:	441d      	add	r5, r3
 8021a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021a6c:	3b01      	subs	r3, #1
 8021a6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8021a70:	e76f      	b.n	8021952 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021a72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021a74:	449b      	add	fp, r3
 8021a76:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021a78:	441d      	add	r5, r3
 8021a7a:	9b06      	ldr	r3, [sp, #24]
 8021a7c:	3b01      	subs	r3, #1
 8021a7e:	9306      	str	r3, [sp, #24]
 8021a80:	9b07      	ldr	r3, [sp, #28]
 8021a82:	3302      	adds	r3, #2
 8021a84:	9307      	str	r3, [sp, #28]
 8021a86:	e744      	b.n	8021912 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8021a88:	d023      	beq.n	8021ad2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8021a8a:	9b06      	ldr	r3, [sp, #24]
 8021a8c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8021a8e:	3b01      	subs	r3, #1
 8021a90:	fb00 b003 	mla	r0, r0, r3, fp
 8021a94:	1400      	asrs	r0, r0, #16
 8021a96:	f53f af58 	bmi.w	802194a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8021a9a:	3901      	subs	r1, #1
 8021a9c:	4288      	cmp	r0, r1
 8021a9e:	f6bf af54 	bge.w	802194a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8021aa2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8021aa4:	fb01 5303 	mla	r3, r1, r3, r5
 8021aa8:	141b      	asrs	r3, r3, #16
 8021aaa:	f53f af4e 	bmi.w	802194a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8021aae:	3a01      	subs	r2, #1
 8021ab0:	4293      	cmp	r3, r2
 8021ab2:	f6bf af4a 	bge.w	802194a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8021ab6:	9b06      	ldr	r3, [sp, #24]
 8021ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8021aba:	9b07      	ldr	r3, [sp, #28]
 8021abc:	930b      	str	r3, [sp, #44]	; 0x2c
 8021abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021ac0:	2b00      	cmp	r3, #0
 8021ac2:	dc70      	bgt.n	8021ba6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8021ac4:	9b06      	ldr	r3, [sp, #24]
 8021ac6:	9a07      	ldr	r2, [sp, #28]
 8021ac8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021acc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021ad0:	9307      	str	r3, [sp, #28]
 8021ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ad4:	2b00      	cmp	r3, #0
 8021ad6:	f340 80eb 	ble.w	8021cb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8021ada:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021ade:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021ae2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021ae6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021ae8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021aec:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021af0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021af4:	eef0 6a62 	vmov.f32	s13, s5
 8021af8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021afc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b00:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021b04:	ee16 ba90 	vmov	fp, s13
 8021b08:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021b0c:	eef0 6a43 	vmov.f32	s13, s6
 8021b10:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021b14:	ee12 2a90 	vmov	r2, s5
 8021b18:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021b1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b20:	ee13 2a10 	vmov	r2, s6
 8021b24:	931b      	str	r3, [sp, #108]	; 0x6c
 8021b26:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021b28:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b2c:	931c      	str	r3, [sp, #112]	; 0x70
 8021b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021b30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021b32:	3b01      	subs	r3, #1
 8021b34:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b38:	930a      	str	r3, [sp, #40]	; 0x28
 8021b3a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021b3c:	bf08      	it	eq
 8021b3e:	4613      	moveq	r3, r2
 8021b40:	ee16 5a90 	vmov	r5, s13
 8021b44:	9306      	str	r3, [sp, #24]
 8021b46:	eeb0 3a67 	vmov.f32	s6, s15
 8021b4a:	eef0 2a47 	vmov.f32	s5, s14
 8021b4e:	e6d2      	b.n	80218f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8021b50:	b149      	cbz	r1, 8021b66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021b52:	5cba      	ldrb	r2, [r7, r2]
 8021b54:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021b58:	4422      	add	r2, r4
 8021b5a:	4660      	mov	r0, ip
 8021b5c:	4666      	mov	r6, ip
 8021b5e:	e734      	b.n	80219ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8021b60:	4660      	mov	r0, ip
 8021b62:	4662      	mov	r2, ip
 8021b64:	e731      	b.n	80219ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8021b66:	4660      	mov	r0, ip
 8021b68:	4662      	mov	r2, ip
 8021b6a:	e7f7      	b.n	8021b5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8021b6c:	f110 0c01 	adds.w	ip, r0, #1
 8021b70:	f53f af74 	bmi.w	8021a5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021b74:	4562      	cmp	r2, ip
 8021b76:	f6ff af71 	blt.w	8021a5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021b7a:	f116 0c01 	adds.w	ip, r6, #1
 8021b7e:	f53f af6d 	bmi.w	8021a5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021b82:	4567      	cmp	r7, ip
 8021b84:	f6ff af6a 	blt.w	8021a5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021b88:	b23f      	sxth	r7, r7
 8021b8a:	b212      	sxth	r2, r2
 8021b8c:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8021b90:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8021b94:	9200      	str	r2, [sp, #0]
 8021b96:	9701      	str	r7, [sp, #4]
 8021b98:	4623      	mov	r3, r4
 8021b9a:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8021b9e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021ba0:	f7ff fde6 	bl	8021770 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8021ba4:	e75a      	b.n	8021a5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021ba6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8021ba8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8021bac:	ea4f 462b 	mov.w	r6, fp, asr #16
 8021bb0:	1428      	asrs	r0, r5, #16
 8021bb2:	fb02 6000 	mla	r0, r2, r0, r6
 8021bb6:	9e08      	ldr	r6, [sp, #32]
 8021bb8:	f816 8000 	ldrb.w	r8, [r6, r0]
 8021bbc:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8021bc0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021bc4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021bc8:	1837      	adds	r7, r6, r0
 8021bca:	eb04 0c08 	add.w	ip, r4, r8
 8021bce:	2b00      	cmp	r3, #0
 8021bd0:	d060      	beq.n	8021c94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 8021bd2:	787e      	ldrb	r6, [r7, #1]
 8021bd4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021bd8:	4426      	add	r6, r4
 8021bda:	2900      	cmp	r1, #0
 8021bdc:	d062      	beq.n	8021ca4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 8021bde:	18b8      	adds	r0, r7, r2
 8021be0:	5cba      	ldrb	r2, [r7, r2]
 8021be2:	7840      	ldrb	r0, [r0, #1]
 8021be4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021be8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021bec:	4422      	add	r2, r4
 8021bee:	4420      	add	r0, r4
 8021bf0:	b29b      	uxth	r3, r3
 8021bf2:	b289      	uxth	r1, r1
 8021bf4:	fb03 f901 	mul.w	r9, r3, r1
 8021bf8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021bfc:	011b      	lsls	r3, r3, #4
 8021bfe:	b289      	uxth	r1, r1
 8021c00:	78b7      	ldrb	r7, [r6, #2]
 8021c02:	f89c a002 	ldrb.w	sl, [ip, #2]
 8021c06:	f89c c001 	ldrb.w	ip, [ip, #1]
 8021c0a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8021c0e:	eba3 0309 	sub.w	r3, r3, r9
 8021c12:	b29b      	uxth	r3, r3
 8021c14:	ebae 0e01 	sub.w	lr, lr, r1
 8021c18:	fa1f fe8e 	uxth.w	lr, lr
 8021c1c:	435f      	muls	r7, r3
 8021c1e:	fb0e 770a 	mla	r7, lr, sl, r7
 8021c22:	f892 a002 	ldrb.w	sl, [r2, #2]
 8021c26:	fb01 770a 	mla	r7, r1, sl, r7
 8021c2a:	f890 a002 	ldrb.w	sl, [r0, #2]
 8021c2e:	fb09 7a0a 	mla	sl, r9, sl, r7
 8021c32:	f814 7008 	ldrb.w	r7, [r4, r8]
 8021c36:	f896 8000 	ldrb.w	r8, [r6]
 8021c3a:	7876      	ldrb	r6, [r6, #1]
 8021c3c:	fb03 f808 	mul.w	r8, r3, r8
 8021c40:	fb0e 8807 	mla	r8, lr, r7, r8
 8021c44:	7817      	ldrb	r7, [r2, #0]
 8021c46:	fb01 8807 	mla	r8, r1, r7, r8
 8021c4a:	7807      	ldrb	r7, [r0, #0]
 8021c4c:	fb09 8707 	mla	r7, r9, r7, r8
 8021c50:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8021c54:	4373      	muls	r3, r6
 8021c56:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021c5a:	7856      	ldrb	r6, [r2, #1]
 8021c5c:	ea47 070a 	orr.w	r7, r7, sl
 8021c60:	fb0e 330c 	mla	r3, lr, ip, r3
 8021c64:	f890 a001 	ldrb.w	sl, [r0, #1]
 8021c68:	fb01 3306 	mla	r3, r1, r6, r3
 8021c6c:	fb09 3a0a 	mla	sl, r9, sl, r3
 8021c70:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021c74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021c76:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021c7a:	ea47 070a 	orr.w	r7, r7, sl
 8021c7e:	f823 7b02 	strh.w	r7, [r3], #2
 8021c82:	930b      	str	r3, [sp, #44]	; 0x2c
 8021c84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021c86:	449b      	add	fp, r3
 8021c88:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021c8a:	441d      	add	r5, r3
 8021c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c8e:	3b01      	subs	r3, #1
 8021c90:	9309      	str	r3, [sp, #36]	; 0x24
 8021c92:	e714      	b.n	8021abe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8021c94:	b149      	cbz	r1, 8021caa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8021c96:	5cba      	ldrb	r2, [r7, r2]
 8021c98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021c9c:	4422      	add	r2, r4
 8021c9e:	4660      	mov	r0, ip
 8021ca0:	4666      	mov	r6, ip
 8021ca2:	e7a5      	b.n	8021bf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8021ca4:	4660      	mov	r0, ip
 8021ca6:	4662      	mov	r2, ip
 8021ca8:	e7a2      	b.n	8021bf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8021caa:	4660      	mov	r0, ip
 8021cac:	4662      	mov	r2, ip
 8021cae:	e7f7      	b.n	8021ca0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 8021cb0:	b00f      	add	sp, #60	; 0x3c
 8021cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021cb6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8021cb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cba:	b085      	sub	sp, #20
 8021cbc:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 8021cc0:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8021cc4:	9102      	str	r1, [sp, #8]
 8021cc6:	2c00      	cmp	r4, #0
 8021cc8:	fb04 710c 	mla	r1, r4, ip, r7
 8021ccc:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8021cd0:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8021cd4:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8021cd8:	eb02 0e01 	add.w	lr, r2, r1
 8021cdc:	f2c0 8122 	blt.w	8021f24 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8021ce0:	45a0      	cmp	r8, r4
 8021ce2:	f340 811f 	ble.w	8021f24 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8021ce6:	2f00      	cmp	r7, #0
 8021ce8:	f2c0 811a 	blt.w	8021f20 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8021cec:	45bc      	cmp	ip, r7
 8021cee:	f340 8117 	ble.w	8021f20 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8021cf2:	5c52      	ldrb	r2, [r2, r1]
 8021cf4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8021cf8:	1c7a      	adds	r2, r7, #1
 8021cfa:	f100 8116 	bmi.w	8021f2a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8021cfe:	4594      	cmp	ip, r2
 8021d00:	f340 8113 	ble.w	8021f2a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8021d04:	2e00      	cmp	r6, #0
 8021d06:	f000 8112 	beq.w	8021f2e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 8021d0a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8021d0e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021d12:	3401      	adds	r4, #1
 8021d14:	f100 810f 	bmi.w	8021f36 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8021d18:	45a0      	cmp	r8, r4
 8021d1a:	f340 810c 	ble.w	8021f36 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8021d1e:	2800      	cmp	r0, #0
 8021d20:	f000 810c 	beq.w	8021f3c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 8021d24:	2f00      	cmp	r7, #0
 8021d26:	f2c0 8104 	blt.w	8021f32 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8021d2a:	45bc      	cmp	ip, r7
 8021d2c:	f340 8101 	ble.w	8021f32 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8021d30:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8021d34:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8021d38:	3701      	adds	r7, #1
 8021d3a:	f100 8102 	bmi.w	8021f42 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8021d3e:	45bc      	cmp	ip, r7
 8021d40:	f340 80ff 	ble.w	8021f42 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8021d44:	2e00      	cmp	r6, #0
 8021d46:	f000 80fe 	beq.w	8021f46 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 8021d4a:	44f4      	add	ip, lr
 8021d4c:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8021d50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8021d54:	b2b6      	uxth	r6, r6
 8021d56:	b280      	uxth	r0, r0
 8021d58:	fb00 fe06 	mul.w	lr, r0, r6
 8021d5c:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8021d60:	0136      	lsls	r6, r6, #4
 8021d62:	eba6 070e 	sub.w	r7, r6, lr
 8021d66:	b280      	uxth	r0, r0
 8021d68:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8021d6c:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8021d70:	b2bf      	uxth	r7, r7
 8021d72:	1a1b      	subs	r3, r3, r0
 8021d74:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8021d78:	b29b      	uxth	r3, r3
 8021d7a:	fb0a f607 	mul.w	r6, sl, r7
 8021d7e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021d82:	fb0b 6603 	mla	r6, fp, r3, r6
 8021d86:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8021d8a:	fb00 6609 	mla	r6, r0, r9, r6
 8021d8e:	fb0e 6608 	mla	r6, lr, r8, r6
 8021d92:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021d96:	9600      	str	r6, [sp, #0]
 8021d98:	2e00      	cmp	r6, #0
 8021d9a:	f000 80be 	beq.w	8021f1a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 8021d9e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8021da2:	fb0b fc0c 	mul.w	ip, fp, ip
 8021da6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021daa:	fb0b f505 	mul.w	r5, fp, r5
 8021dae:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8021db2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8021db6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021dba:	44dc      	add	ip, fp
 8021dbc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021dc0:	9501      	str	r5, [sp, #4]
 8021dc2:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8021dc6:	9503      	str	r5, [sp, #12]
 8021dc8:	9d01      	ldr	r5, [sp, #4]
 8021dca:	9e02      	ldr	r6, [sp, #8]
 8021dcc:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8021dd0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8021dd4:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8021dd8:	fb0a fc0c 	mul.w	ip, sl, ip
 8021ddc:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8021de0:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8021de4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021de8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021dec:	4465      	add	r5, ip
 8021dee:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021df2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021df6:	fb09 fc0c 	mul.w	ip, r9, ip
 8021dfa:	fb09 f904 	mul.w	r9, r9, r4
 8021dfe:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8021e02:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8021e06:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8021e0a:	fb08 f404 	mul.w	r4, r8, r4
 8021e0e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8021e12:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021e16:	fb08 f802 	mul.w	r8, r8, r2
 8021e1a:	fb0a fa01 	mul.w	sl, sl, r1
 8021e1e:	0a22      	lsrs	r2, r4, #8
 8021e20:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8021e24:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021e28:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8021e2c:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8021e30:	4414      	add	r4, r2
 8021e32:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8021e36:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8021e3a:	0a2d      	lsrs	r5, r5, #8
 8021e3c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8021e40:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021e44:	9a03      	ldr	r2, [sp, #12]
 8021e46:	8836      	ldrh	r6, [r6, #0]
 8021e48:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8021e4c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021e50:	437d      	muls	r5, r7
 8021e52:	4461      	add	r1, ip
 8021e54:	0a24      	lsrs	r4, r4, #8
 8021e56:	fb02 5503 	mla	r5, r2, r3, r5
 8021e5a:	0a09      	lsrs	r1, r1, #8
 8021e5c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021e60:	fb04 540e 	mla	r4, r4, lr, r5
 8021e64:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8021e68:	fb01 4100 	mla	r1, r1, r0, r4
 8021e6c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021e70:	0a09      	lsrs	r1, r1, #8
 8021e72:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021e76:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8021e7a:	fb07 f70a 	mul.w	r7, r7, sl
 8021e7e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021e82:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8021e86:	fb03 7101 	mla	r1, r3, r1, r7
 8021e8a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021e8e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021e92:	fb0e 1e08 	mla	lr, lr, r8, r1
 8021e96:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8021e9a:	fb00 e101 	mla	r1, r0, r1, lr
 8021e9e:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8021ea2:	9a00      	ldr	r2, [sp, #0]
 8021ea4:	b287      	uxth	r7, r0
 8021ea6:	437a      	muls	r2, r7
 8021ea8:	0a09      	lsrs	r1, r1, #8
 8021eaa:	1c53      	adds	r3, r2, #1
 8021eac:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8021eb0:	4321      	orrs	r1, r4
 8021eb2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021eb6:	1235      	asrs	r5, r6, #8
 8021eb8:	0c0a      	lsrs	r2, r1, #16
 8021eba:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8021ebe:	b2db      	uxtb	r3, r3
 8021ec0:	fb12 f207 	smulbb	r2, r2, r7
 8021ec4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021ec8:	fb05 2503 	mla	r5, r5, r3, r2
 8021ecc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8021ed0:	10f2      	asrs	r2, r6, #3
 8021ed2:	b2c8      	uxtb	r0, r1
 8021ed4:	00f6      	lsls	r6, r6, #3
 8021ed6:	fb14 f407 	smulbb	r4, r4, r7
 8021eda:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021ede:	b2f6      	uxtb	r6, r6
 8021ee0:	fb10 f007 	smulbb	r0, r0, r7
 8021ee4:	fb02 4203 	mla	r2, r2, r3, r4
 8021ee8:	b2ad      	uxth	r5, r5
 8021eea:	fb06 0303 	mla	r3, r6, r3, r0
 8021eee:	b299      	uxth	r1, r3
 8021ef0:	b294      	uxth	r4, r2
 8021ef2:	1c6b      	adds	r3, r5, #1
 8021ef4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021ef8:	1c62      	adds	r2, r4, #1
 8021efa:	1c4b      	adds	r3, r1, #1
 8021efc:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021f00:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8021f04:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021f08:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021f0c:	0952      	lsrs	r2, r2, #5
 8021f0e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021f12:	432b      	orrs	r3, r5
 8021f14:	4313      	orrs	r3, r2
 8021f16:	9a02      	ldr	r2, [sp, #8]
 8021f18:	8013      	strh	r3, [r2, #0]
 8021f1a:	b005      	add	sp, #20
 8021f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f20:	2500      	movs	r5, #0
 8021f22:	e6e9      	b.n	8021cf8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 8021f24:	2100      	movs	r1, #0
 8021f26:	460d      	mov	r5, r1
 8021f28:	e6f3      	b.n	8021d12 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8021f2a:	2100      	movs	r1, #0
 8021f2c:	e6f1      	b.n	8021d12 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8021f2e:	4631      	mov	r1, r6
 8021f30:	e6ef      	b.n	8021d12 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8021f32:	2400      	movs	r4, #0
 8021f34:	e700      	b.n	8021d38 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8021f36:	2200      	movs	r2, #0
 8021f38:	4614      	mov	r4, r2
 8021f3a:	e70b      	b.n	8021d54 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8021f3c:	4602      	mov	r2, r0
 8021f3e:	4604      	mov	r4, r0
 8021f40:	e708      	b.n	8021d54 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8021f42:	2200      	movs	r2, #0
 8021f44:	e706      	b.n	8021d54 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8021f46:	4632      	mov	r2, r6
 8021f48:	e704      	b.n	8021d54 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

08021f4a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021f4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f4e:	b09f      	sub	sp, #124	; 0x7c
 8021f50:	921b      	str	r2, [sp, #108]	; 0x6c
 8021f52:	9309      	str	r3, [sp, #36]	; 0x24
 8021f54:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021f56:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8021f5a:	931c      	str	r3, [sp, #112]	; 0x70
 8021f5c:	9119      	str	r1, [sp, #100]	; 0x64
 8021f5e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8021f62:	901d      	str	r0, [sp, #116]	; 0x74
 8021f64:	6850      	ldr	r0, [r2, #4]
 8021f66:	6812      	ldr	r2, [r2, #0]
 8021f68:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8021f6a:	fb00 1303 	mla	r3, r0, r3, r1
 8021f6e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021f72:	930c      	str	r3, [sp, #48]	; 0x30
 8021f74:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021f76:	681b      	ldr	r3, [r3, #0]
 8021f78:	9312      	str	r3, [sp, #72]	; 0x48
 8021f7a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021f7c:	685e      	ldr	r6, [r3, #4]
 8021f7e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8021f82:	930d      	str	r3, [sp, #52]	; 0x34
 8021f84:	3604      	adds	r6, #4
 8021f86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021f88:	2b00      	cmp	r3, #0
 8021f8a:	dc03      	bgt.n	8021f94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021f8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021f8e:	2b00      	cmp	r3, #0
 8021f90:	f340 8388 	ble.w	80226a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 8021f94:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021f96:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021f9a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021f9e:	1e48      	subs	r0, r1, #1
 8021fa0:	1e57      	subs	r7, r2, #1
 8021fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021fa4:	2b00      	cmp	r3, #0
 8021fa6:	f340 8195 	ble.w	80222d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021faa:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8021fac:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021fb0:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021fb4:	d406      	bmi.n	8021fc4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021fb6:	4584      	cmp	ip, r0
 8021fb8:	da04      	bge.n	8021fc4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021fba:	2b00      	cmp	r3, #0
 8021fbc:	db02      	blt.n	8021fc4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021fbe:	42bb      	cmp	r3, r7
 8021fc0:	f2c0 8189 	blt.w	80222d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8021fc4:	f11c 0c01 	adds.w	ip, ip, #1
 8021fc8:	f100 8177 	bmi.w	80222ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021fcc:	4561      	cmp	r1, ip
 8021fce:	f2c0 8174 	blt.w	80222ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021fd2:	3301      	adds	r3, #1
 8021fd4:	f100 8171 	bmi.w	80222ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021fd8:	429a      	cmp	r2, r3
 8021fda:	f2c0 816e 	blt.w	80222ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021fe0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021fe2:	931a      	str	r3, [sp, #104]	; 0x68
 8021fe4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021fe6:	2b00      	cmp	r3, #0
 8021fe8:	f340 8193 	ble.w	8022312 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8021fec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021fee:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021ff2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021ff4:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8021ff8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021ffa:	141b      	asrs	r3, r3, #16
 8021ffc:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8022000:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022004:	f100 81d6 	bmi.w	80223b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8022008:	f100 38ff 	add.w	r8, r0, #4294967295
 802200c:	4543      	cmp	r3, r8
 802200e:	f280 81d1 	bge.w	80223b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8022012:	f1bc 0f00 	cmp.w	ip, #0
 8022016:	f2c0 81cd 	blt.w	80223b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 802201a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802201e:	45c4      	cmp	ip, r8
 8022020:	f280 81c8 	bge.w	80223b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8022024:	b200      	sxth	r0, r0
 8022026:	fb0c 3300 	mla	r3, ip, r0, r3
 802202a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802202c:	eb04 0803 	add.w	r8, r4, r3
 8022030:	5ce3      	ldrb	r3, [r4, r3]
 8022032:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8022036:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802203a:	2a00      	cmp	r2, #0
 802203c:	f000 81af 	beq.w	802239e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8022040:	f898 c001 	ldrb.w	ip, [r8, #1]
 8022044:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8022048:	940e      	str	r4, [sp, #56]	; 0x38
 802204a:	0e24      	lsrs	r4, r4, #24
 802204c:	9415      	str	r4, [sp, #84]	; 0x54
 802204e:	b179      	cbz	r1, 8022070 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8022050:	eb08 0c00 	add.w	ip, r8, r0
 8022054:	f818 0000 	ldrb.w	r0, [r8, r0]
 8022058:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802205c:	900a      	str	r0, [sp, #40]	; 0x28
 802205e:	0e00      	lsrs	r0, r0, #24
 8022060:	9013      	str	r0, [sp, #76]	; 0x4c
 8022062:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8022066:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802206a:	900f      	str	r0, [sp, #60]	; 0x3c
 802206c:	0e00      	lsrs	r0, r0, #24
 802206e:	9016      	str	r0, [sp, #88]	; 0x58
 8022070:	b292      	uxth	r2, r2
 8022072:	b289      	uxth	r1, r1
 8022074:	fb02 f901 	mul.w	r9, r2, r1
 8022078:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802207c:	0112      	lsls	r2, r2, #4
 802207e:	eba2 0809 	sub.w	r8, r2, r9
 8022082:	b289      	uxth	r1, r1
 8022084:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8022088:	9815      	ldr	r0, [sp, #84]	; 0x54
 802208a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802208c:	fa1f f888 	uxth.w	r8, r8
 8022090:	1a52      	subs	r2, r2, r1
 8022092:	b292      	uxth	r2, r2
 8022094:	fb08 f000 	mul.w	r0, r8, r0
 8022098:	fb02 000e 	mla	r0, r2, lr, r0
 802209c:	fb01 0004 	mla	r0, r1, r4, r0
 80220a0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80220a2:	fb09 0004 	mla	r0, r9, r4, r0
 80220a6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80220aa:	2800      	cmp	r0, #0
 80220ac:	f000 80fa 	beq.w	80222a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80220b0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80220b4:	d01b      	beq.n	80220ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80220b6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80220ba:	fb0e fa0a 	mul.w	sl, lr, sl
 80220be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80220c2:	fb0e fe03 	mul.w	lr, lr, r3
 80220c6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80220ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80220ce:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80220d2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80220d6:	4453      	add	r3, sl
 80220d8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80220dc:	0a1b      	lsrs	r3, r3, #8
 80220de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80220e2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80220e6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80220ea:	ea43 030c 	orr.w	r3, r3, ip
 80220ee:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80220f0:	2cff      	cmp	r4, #255	; 0xff
 80220f2:	d021      	beq.n	8022138 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80220f4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80220f6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80220fa:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80220fc:	fb04 fb0b 	mul.w	fp, r4, fp
 8022100:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022102:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022106:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022108:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802210c:	fb04 fa0a 	mul.w	sl, r4, sl
 8022110:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022114:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022118:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802211c:	44de      	add	lr, fp
 802211e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022122:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022126:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802212a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802212e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022132:	ea4e 040a 	orr.w	r4, lr, sl
 8022136:	940e      	str	r4, [sp, #56]	; 0x38
 8022138:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802213a:	2cff      	cmp	r4, #255	; 0xff
 802213c:	d021      	beq.n	8022182 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802213e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022140:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022144:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022146:	fb04 fb0b 	mul.w	fp, r4, fp
 802214a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802214c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022150:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022152:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022156:	fb04 fa0a 	mul.w	sl, r4, sl
 802215a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802215e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022162:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022166:	44de      	add	lr, fp
 8022168:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802216c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022170:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022174:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022178:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802217c:	ea4e 040a 	orr.w	r4, lr, sl
 8022180:	940a      	str	r4, [sp, #40]	; 0x28
 8022182:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022184:	2cff      	cmp	r4, #255	; 0xff
 8022186:	d021      	beq.n	80221cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8022188:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802218a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802218e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022190:	fb04 fb0b 	mul.w	fp, r4, fp
 8022194:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022196:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802219a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802219c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80221a0:	fb04 fa0a 	mul.w	sl, r4, sl
 80221a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80221a8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80221ac:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80221b0:	44de      	add	lr, fp
 80221b2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80221b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80221ba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80221be:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80221c2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80221c6:	ea4e 040a 	orr.w	r4, lr, sl
 80221ca:	940f      	str	r4, [sp, #60]	; 0x3c
 80221cc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80221ce:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80221d2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80221d4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80221d8:	fb08 fc0c 	mul.w	ip, r8, ip
 80221dc:	fb02 cc0e 	mla	ip, r2, lr, ip
 80221e0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80221e4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80221e6:	fb01 cc0e 	mla	ip, r1, lr, ip
 80221ea:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80221ee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80221f0:	fb09 cc0e 	mla	ip, r9, lr, ip
 80221f4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80221f8:	fb08 f80e 	mul.w	r8, r8, lr
 80221fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022200:	fb02 8303 	mla	r3, r2, r3, r8
 8022204:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022206:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022208:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802220c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802220e:	fb01 330a 	mla	r3, r1, sl, r3
 8022212:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8022216:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022218:	fb09 3901 	mla	r9, r9, r1, r3
 802221c:	4342      	muls	r2, r0
 802221e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022222:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022226:	883b      	ldrh	r3, [r7, #0]
 8022228:	1c50      	adds	r0, r2, #1
 802222a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802222e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022232:	ea4c 0c09 	orr.w	ip, ip, r9
 8022236:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802223a:	1219      	asrs	r1, r3, #8
 802223c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8022240:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022244:	b2c0      	uxtb	r0, r0
 8022246:	fb12 f204 	smulbb	r2, r2, r4
 802224a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802224e:	fb01 2100 	mla	r1, r1, r0, r2
 8022252:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8022256:	10da      	asrs	r2, r3, #3
 8022258:	fa5f fc8c 	uxtb.w	ip, ip
 802225c:	00db      	lsls	r3, r3, #3
 802225e:	fb1c fc04 	smulbb	ip, ip, r4
 8022262:	b2db      	uxtb	r3, r3
 8022264:	b289      	uxth	r1, r1
 8022266:	fb03 c300 	mla	r3, r3, r0, ip
 802226a:	fa1f fc83 	uxth.w	ip, r3
 802226e:	1c4b      	adds	r3, r1, #1
 8022270:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8022274:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022278:	fb1e fe04 	smulbb	lr, lr, r4
 802227c:	f10c 0301 	add.w	r3, ip, #1
 8022280:	fb02 e200 	mla	r2, r2, r0, lr
 8022284:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8022288:	b292      	uxth	r2, r2
 802228a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802228e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022292:	430b      	orrs	r3, r1
 8022294:	1c51      	adds	r1, r2, #1
 8022296:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802229a:	0952      	lsrs	r2, r2, #5
 802229c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80222a0:	4313      	orrs	r3, r2
 80222a2:	803b      	strh	r3, [r7, #0]
 80222a4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80222a6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80222a8:	441a      	add	r2, r3
 80222aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80222ac:	9229      	str	r2, [sp, #164]	; 0xa4
 80222ae:	441d      	add	r5, r3
 80222b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80222b2:	3b01      	subs	r3, #1
 80222b4:	3702      	adds	r7, #2
 80222b6:	931a      	str	r3, [sp, #104]	; 0x68
 80222b8:	e694      	b.n	8021fe4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80222ba:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80222bc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80222be:	441c      	add	r4, r3
 80222c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80222c2:	9429      	str	r4, [sp, #164]	; 0xa4
 80222c4:	441d      	add	r5, r3
 80222c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80222c8:	3b01      	subs	r3, #1
 80222ca:	9309      	str	r3, [sp, #36]	; 0x24
 80222cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80222ce:	3302      	adds	r3, #2
 80222d0:	930c      	str	r3, [sp, #48]	; 0x30
 80222d2:	e666      	b.n	8021fa2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80222d4:	d024      	beq.n	8022320 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d6>
 80222d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80222d8:	982b      	ldr	r0, [sp, #172]	; 0xac
 80222da:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80222dc:	3b01      	subs	r3, #1
 80222de:	fb00 4003 	mla	r0, r0, r3, r4
 80222e2:	1400      	asrs	r0, r0, #16
 80222e4:	f53f ae7b 	bmi.w	8021fde <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80222e8:	3901      	subs	r1, #1
 80222ea:	4288      	cmp	r0, r1
 80222ec:	f6bf ae77 	bge.w	8021fde <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80222f0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80222f2:	fb01 5303 	mla	r3, r1, r3, r5
 80222f6:	141b      	asrs	r3, r3, #16
 80222f8:	f53f ae71 	bmi.w	8021fde <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80222fc:	3a01      	subs	r2, #1
 80222fe:	4293      	cmp	r3, r2
 8022300:	f6bf ae6d 	bge.w	8021fde <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022304:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8022308:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 802230c:	f1bb 0f00 	cmp.w	fp, #0
 8022310:	dc70      	bgt.n	80223f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 8022312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022314:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802231a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802231e:	930c      	str	r3, [sp, #48]	; 0x30
 8022320:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022322:	2b00      	cmp	r3, #0
 8022324:	f340 81be 	ble.w	80226a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 8022328:	ee30 0a04 	vadd.f32	s0, s0, s8
 802232c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022330:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022334:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022336:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802233a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802233e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022342:	eef0 6a62 	vmov.f32	s13, s5
 8022346:	ee61 7a27 	vmul.f32	s15, s2, s15
 802234a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802234e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022352:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8022356:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802235a:	eef0 6a43 	vmov.f32	s13, s6
 802235e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022362:	ee12 2a90 	vmov	r2, s5
 8022366:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802236a:	fb92 f3f3 	sdiv	r3, r2, r3
 802236e:	ee13 2a10 	vmov	r2, s6
 8022372:	932b      	str	r3, [sp, #172]	; 0xac
 8022374:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022376:	fb92 f3f3 	sdiv	r3, r2, r3
 802237a:	932c      	str	r3, [sp, #176]	; 0xb0
 802237c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802237e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8022380:	3b01      	subs	r3, #1
 8022382:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022386:	9319      	str	r3, [sp, #100]	; 0x64
 8022388:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802238a:	bf08      	it	eq
 802238c:	4613      	moveq	r3, r2
 802238e:	ee16 5a90 	vmov	r5, s13
 8022392:	9309      	str	r3, [sp, #36]	; 0x24
 8022394:	eeb0 3a67 	vmov.f32	s6, s15
 8022398:	eef0 2a47 	vmov.f32	s5, s14
 802239c:	e5f3      	b.n	8021f86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802239e:	2900      	cmp	r1, #0
 80223a0:	f43f ae66 	beq.w	8022070 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80223a4:	f818 0000 	ldrb.w	r0, [r8, r0]
 80223a8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80223ac:	900a      	str	r0, [sp, #40]	; 0x28
 80223ae:	0e00      	lsrs	r0, r0, #24
 80223b0:	9013      	str	r0, [sp, #76]	; 0x4c
 80223b2:	e65d      	b.n	8022070 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80223b4:	f113 0801 	adds.w	r8, r3, #1
 80223b8:	f53f af74 	bmi.w	80222a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80223bc:	4540      	cmp	r0, r8
 80223be:	f6ff af71 	blt.w	80222a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80223c2:	f11c 0801 	adds.w	r8, ip, #1
 80223c6:	f53f af6d 	bmi.w	80222a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80223ca:	45c6      	cmp	lr, r8
 80223cc:	f6ff af6a 	blt.w	80222a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80223d0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80223d2:	9302      	str	r3, [sp, #8]
 80223d4:	b200      	sxth	r0, r0
 80223d6:	fa0f f38e 	sxth.w	r3, lr
 80223da:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80223de:	e9cd c203 	strd	ip, r2, [sp, #12]
 80223e2:	9301      	str	r3, [sp, #4]
 80223e4:	9000      	str	r0, [sp, #0]
 80223e6:	4633      	mov	r3, r6
 80223e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80223ea:	981d      	ldr	r0, [sp, #116]	; 0x74
 80223ec:	4639      	mov	r1, r7
 80223ee:	f7ff fc62 	bl	8021cb6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80223f2:	e757      	b.n	80222a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80223f4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80223f6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80223f8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80223fc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80223fe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022402:	1427      	asrs	r7, r4, #16
 8022404:	142b      	asrs	r3, r5, #16
 8022406:	fb01 7303 	mla	r3, r1, r3, r7
 802240a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802240c:	18e7      	adds	r7, r4, r3
 802240e:	5ce3      	ldrb	r3, [r4, r3]
 8022410:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8022414:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022418:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802241c:	2a00      	cmp	r2, #0
 802241e:	f000 8137 	beq.w	8022690 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 8022422:	f897 e001 	ldrb.w	lr, [r7, #1]
 8022426:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802242a:	9410      	str	r4, [sp, #64]	; 0x40
 802242c:	0e24      	lsrs	r4, r4, #24
 802242e:	9417      	str	r4, [sp, #92]	; 0x5c
 8022430:	b170      	cbz	r0, 8022450 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8022432:	eb07 0e01 	add.w	lr, r7, r1
 8022436:	5c79      	ldrb	r1, [r7, r1]
 8022438:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802243c:	910b      	str	r1, [sp, #44]	; 0x2c
 802243e:	0e09      	lsrs	r1, r1, #24
 8022440:	9114      	str	r1, [sp, #80]	; 0x50
 8022442:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8022446:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802244a:	9111      	str	r1, [sp, #68]	; 0x44
 802244c:	0e09      	lsrs	r1, r1, #24
 802244e:	9118      	str	r1, [sp, #96]	; 0x60
 8022450:	b292      	uxth	r2, r2
 8022452:	b280      	uxth	r0, r0
 8022454:	fb02 f800 	mul.w	r8, r2, r0
 8022458:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802245c:	0112      	lsls	r2, r2, #4
 802245e:	eba2 0e08 	sub.w	lr, r2, r8
 8022462:	b280      	uxth	r0, r0
 8022464:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8022468:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802246a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802246c:	fa1f fe8e 	uxth.w	lr, lr
 8022470:	1a12      	subs	r2, r2, r0
 8022472:	b292      	uxth	r2, r2
 8022474:	fb0e f101 	mul.w	r1, lr, r1
 8022478:	fb02 110c 	mla	r1, r2, ip, r1
 802247c:	fb00 1104 	mla	r1, r0, r4, r1
 8022480:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8022482:	fb08 1104 	mla	r1, r8, r4, r1
 8022486:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802248a:	2900      	cmp	r1, #0
 802248c:	f000 80f5 	beq.w	802267a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8022490:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022494:	d019      	beq.n	80224ca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 8022496:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802249a:	fb0c fa0a 	mul.w	sl, ip, sl
 802249e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80224a2:	fb0c fc03 	mul.w	ip, ip, r3
 80224a6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80224aa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80224ae:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80224b2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80224b6:	4453      	add	r3, sl
 80224b8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80224bc:	0a1b      	lsrs	r3, r3, #8
 80224be:	0a3f      	lsrs	r7, r7, #8
 80224c0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80224c4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80224c8:	433b      	orrs	r3, r7
 80224ca:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80224cc:	2cff      	cmp	r4, #255	; 0xff
 80224ce:	d020      	beq.n	8022512 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 80224d0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80224d2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80224d6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80224d8:	4367      	muls	r7, r4
 80224da:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80224dc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80224e0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80224e2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80224e6:	fb04 fa0a 	mul.w	sl, r4, sl
 80224ea:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80224ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80224f2:	44bc      	add	ip, r7
 80224f4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80224f8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80224fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022500:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022504:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022508:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802250c:	ea4c 040a 	orr.w	r4, ip, sl
 8022510:	9410      	str	r4, [sp, #64]	; 0x40
 8022512:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022514:	2cff      	cmp	r4, #255	; 0xff
 8022516:	d020      	beq.n	802255a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 8022518:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802251a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802251e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022520:	4367      	muls	r7, r4
 8022522:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022524:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022528:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802252a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802252e:	fb04 fa0a 	mul.w	sl, r4, sl
 8022532:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022536:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802253a:	44bc      	add	ip, r7
 802253c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022540:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022544:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022548:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802254c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022550:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022554:	ea4c 040a 	orr.w	r4, ip, sl
 8022558:	940b      	str	r4, [sp, #44]	; 0x2c
 802255a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802255c:	2cff      	cmp	r4, #255	; 0xff
 802255e:	d020      	beq.n	80225a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 8022560:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022562:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022566:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8022568:	4367      	muls	r7, r4
 802256a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802256c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022570:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8022572:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022576:	fb04 fa0a 	mul.w	sl, r4, sl
 802257a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802257e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022582:	44bc      	add	ip, r7
 8022584:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022588:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802258c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022590:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022594:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022598:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802259c:	ea4c 040a 	orr.w	r4, ip, sl
 80225a0:	9411      	str	r4, [sp, #68]	; 0x44
 80225a2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80225a4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80225a8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80225aa:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80225ae:	fb0e f707 	mul.w	r7, lr, r7
 80225b2:	fb02 770c 	mla	r7, r2, ip, r7
 80225b6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80225ba:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80225bc:	fb00 770c 	mla	r7, r0, ip, r7
 80225c0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80225c4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80225c6:	fb08 770c 	mla	r7, r8, ip, r7
 80225ca:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80225ce:	fb0e fe0c 	mul.w	lr, lr, ip
 80225d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80225d6:	fb02 e303 	mla	r3, r2, r3, lr
 80225da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80225dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80225de:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80225e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80225e4:	fb00 330a 	mla	r3, r0, sl, r3
 80225e8:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80225ec:	fb08 3c0c 	mla	ip, r8, ip, r3
 80225f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80225f2:	f8b9 0000 	ldrh.w	r0, [r9]
 80225f6:	434b      	muls	r3, r1
 80225f8:	0a3f      	lsrs	r7, r7, #8
 80225fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80225fe:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022602:	1c59      	adds	r1, r3, #1
 8022604:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022608:	ea47 070c 	orr.w	r7, r7, ip
 802260c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022610:	1202      	asrs	r2, r0, #8
 8022612:	0c3b      	lsrs	r3, r7, #16
 8022614:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8022618:	b2c9      	uxtb	r1, r1
 802261a:	fb13 f304 	smulbb	r3, r3, r4
 802261e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022622:	fb02 3201 	mla	r2, r2, r1, r3
 8022626:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 802262a:	10c3      	asrs	r3, r0, #3
 802262c:	b2ff      	uxtb	r7, r7
 802262e:	00c0      	lsls	r0, r0, #3
 8022630:	b292      	uxth	r2, r2
 8022632:	fb1c fc04 	smulbb	ip, ip, r4
 8022636:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802263a:	b2c0      	uxtb	r0, r0
 802263c:	fb17 f704 	smulbb	r7, r7, r4
 8022640:	fb03 c301 	mla	r3, r3, r1, ip
 8022644:	fb00 7001 	mla	r0, r0, r1, r7
 8022648:	f102 0c01 	add.w	ip, r2, #1
 802264c:	b280      	uxth	r0, r0
 802264e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022652:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8022656:	1c42      	adds	r2, r0, #1
 8022658:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802265c:	b29b      	uxth	r3, r3
 802265e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022662:	ea42 020c 	orr.w	r2, r2, ip
 8022666:	f103 0c01 	add.w	ip, r3, #1
 802266a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802266e:	095b      	lsrs	r3, r3, #5
 8022670:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022674:	431a      	orrs	r2, r3
 8022676:	f8a9 2000 	strh.w	r2, [r9]
 802267a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802267c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802267e:	441a      	add	r2, r3
 8022680:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022682:	9229      	str	r2, [sp, #164]	; 0xa4
 8022684:	f109 0902 	add.w	r9, r9, #2
 8022688:	441d      	add	r5, r3
 802268a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802268e:	e63d      	b.n	802230c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8022690:	2800      	cmp	r0, #0
 8022692:	f43f aedd 	beq.w	8022450 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8022696:	5c79      	ldrb	r1, [r7, r1]
 8022698:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802269c:	910b      	str	r1, [sp, #44]	; 0x2c
 802269e:	0e09      	lsrs	r1, r1, #24
 80226a0:	9114      	str	r1, [sp, #80]	; 0x50
 80226a2:	e6d5      	b.n	8022450 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 80226a4:	b01f      	add	sp, #124	; 0x7c
 80226a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080226aa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 80226aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226ae:	b089      	sub	sp, #36	; 0x24
 80226b0:	9101      	str	r1, [sp, #4]
 80226b2:	9801      	ldr	r0, [sp, #4]
 80226b4:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 80226b8:	8800      	ldrh	r0, [r0, #0]
 80226ba:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 80226be:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80226c2:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 80226c6:	1206      	asrs	r6, r0, #8
 80226c8:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 80226cc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80226d0:	9602      	str	r6, [sp, #8]
 80226d2:	10c6      	asrs	r6, r0, #3
 80226d4:	00c0      	lsls	r0, r0, #3
 80226d6:	b2c0      	uxtb	r0, r0
 80226d8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80226dc:	9004      	str	r0, [sp, #16]
 80226de:	2f00      	cmp	r7, #0
 80226e0:	fb07 100c 	mla	r0, r7, ip, r1
 80226e4:	9603      	str	r6, [sp, #12]
 80226e6:	eb02 0e00 	add.w	lr, r2, r0
 80226ea:	f2c0 810a 	blt.w	8022902 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 80226ee:	45b8      	cmp	r8, r7
 80226f0:	f340 8107 	ble.w	8022902 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 80226f4:	2900      	cmp	r1, #0
 80226f6:	f2c0 8102 	blt.w	80228fe <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 80226fa:	458c      	cmp	ip, r1
 80226fc:	f340 80ff 	ble.w	80228fe <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8022700:	5c12      	ldrb	r2, [r2, r0]
 8022702:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8022706:	1c4a      	adds	r2, r1, #1
 8022708:	f100 80fe 	bmi.w	8022908 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 802270c:	4594      	cmp	ip, r2
 802270e:	f340 80fb 	ble.w	8022908 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8022712:	2d00      	cmp	r5, #0
 8022714:	f000 80fa 	beq.w	802290c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8022718:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802271c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8022720:	3701      	adds	r7, #1
 8022722:	f100 80f7 	bmi.w	8022914 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8022726:	45b8      	cmp	r8, r7
 8022728:	f340 80f4 	ble.w	8022914 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 802272c:	2c00      	cmp	r4, #0
 802272e:	f000 80f4 	beq.w	802291a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8022732:	2900      	cmp	r1, #0
 8022734:	eb0e 020c 	add.w	r2, lr, ip
 8022738:	f2c0 80ea 	blt.w	8022910 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 802273c:	458c      	cmp	ip, r1
 802273e:	f340 80e7 	ble.w	8022910 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8022742:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8022746:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 802274a:	3101      	adds	r1, #1
 802274c:	f100 80e8 	bmi.w	8022920 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8022750:	458c      	cmp	ip, r1
 8022752:	f340 80e5 	ble.w	8022920 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8022756:	2d00      	cmp	r5, #0
 8022758:	f000 80e4 	beq.w	8022924 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 802275c:	7852      	ldrb	r2, [r2, #1]
 802275e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8022762:	0e0b      	lsrs	r3, r1, #24
 8022764:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8022768:	9300      	str	r3, [sp, #0]
 802276a:	b2a4      	uxth	r4, r4
 802276c:	b2ab      	uxth	r3, r5
 802276e:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8022772:	fb03 f904 	mul.w	r9, r3, r4
 8022776:	fb0a f505 	mul.w	r5, sl, r5
 802277a:	011b      	lsls	r3, r3, #4
 802277c:	eba3 0e09 	sub.w	lr, r3, r9
 8022780:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8022784:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8022788:	0a28      	lsrs	r0, r5, #8
 802278a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802278e:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8022792:	4405      	add	r5, r0
 8022794:	0a2d      	lsrs	r5, r5, #8
 8022796:	fb0a f303 	mul.w	r3, sl, r3
 802279a:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 802279e:	9005      	str	r0, [sp, #20]
 80227a0:	f503 7080 	add.w	r0, r3, #256	; 0x100
 80227a4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80227a8:	0a1b      	lsrs	r3, r3, #8
 80227aa:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80227ae:	9306      	str	r3, [sp, #24]
 80227b0:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 80227b4:	fb0b f303 	mul.w	r3, fp, r3
 80227b8:	0a1d      	lsrs	r5, r3, #8
 80227ba:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80227be:	ea4f 6817 	mov.w	r8, r7, lsr #24
 80227c2:	fb0b f606 	mul.w	r6, fp, r6
 80227c6:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80227ca:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80227ce:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80227d2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80227d6:	fb08 f707 	mul.w	r7, r8, r7
 80227da:	441d      	add	r5, r3
 80227dc:	f506 7380 	add.w	r3, r6, #256	; 0x100
 80227e0:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80227e4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80227e8:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80227ec:	fb08 fc0c 	mul.w	ip, r8, ip
 80227f0:	0a1b      	lsrs	r3, r3, #8
 80227f2:	9307      	str	r3, [sp, #28]
 80227f4:	ea4f 201c 	mov.w	r0, ip, lsr #8
 80227f8:	0e0b      	lsrs	r3, r1, #24
 80227fa:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 80227fe:	435f      	muls	r7, r3
 8022800:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022804:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022808:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 802280c:	4460      	add	r0, ip
 802280e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022812:	b2a4      	uxth	r4, r4
 8022814:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022818:	0a2d      	lsrs	r5, r5, #8
 802281a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802281e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022822:	fa1f fe8e 	uxth.w	lr, lr
 8022826:	4359      	muls	r1, r3
 8022828:	1b12      	subs	r2, r2, r4
 802282a:	9b05      	ldr	r3, [sp, #20]
 802282c:	44bc      	add	ip, r7
 802282e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022832:	b292      	uxth	r2, r2
 8022834:	fb05 f50e 	mul.w	r5, r5, lr
 8022838:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802283c:	fb03 5502 	mla	r5, r3, r2, r5
 8022840:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022844:	9b06      	ldr	r3, [sp, #24]
 8022846:	f501 7780 	add.w	r7, r1, #256	; 0x100
 802284a:	0a36      	lsrs	r6, r6, #8
 802284c:	0a00      	lsrs	r0, r0, #8
 802284e:	fb0c 5509 	mla	r5, ip, r9, r5
 8022852:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022856:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 802285a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802285e:	fb00 5504 	mla	r5, r0, r4, r5
 8022862:	fb0e f606 	mul.w	r6, lr, r6
 8022866:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 802286a:	0a09      	lsrs	r1, r1, #8
 802286c:	9b07      	ldr	r3, [sp, #28]
 802286e:	fb02 6000 	mla	r0, r2, r0, r6
 8022872:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8022876:	fb09 0001 	mla	r0, r9, r1, r0
 802287a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802287e:	fb0e fe0b 	mul.w	lr, lr, fp
 8022882:	fb04 0003 	mla	r0, r4, r3, r0
 8022886:	fb02 e20a 	mla	r2, r2, sl, lr
 802288a:	9b00      	ldr	r3, [sp, #0]
 802288c:	fb04 2408 	mla	r4, r4, r8, r2
 8022890:	fb09 4903 	mla	r9, r9, r3, r4
 8022894:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8022898:	9b02      	ldr	r3, [sp, #8]
 802289a:	9a04      	ldr	r2, [sp, #16]
 802289c:	fa5f f989 	uxtb.w	r9, r9
 80228a0:	fb03 f109 	mul.w	r1, r3, r9
 80228a4:	9b03      	ldr	r3, [sp, #12]
 80228a6:	0a2d      	lsrs	r5, r5, #8
 80228a8:	0a00      	lsrs	r0, r0, #8
 80228aa:	fb03 f309 	mul.w	r3, r3, r9
 80228ae:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80228b2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80228b6:	4305      	orrs	r5, r0
 80228b8:	fb02 f909 	mul.w	r9, r2, r9
 80228bc:	1c58      	adds	r0, r3, #1
 80228be:	1c4a      	adds	r2, r1, #1
 80228c0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80228c4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80228c8:	0a2b      	lsrs	r3, r5, #8
 80228ca:	0c2a      	lsrs	r2, r5, #16
 80228cc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80228d0:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80228d4:	00db      	lsls	r3, r3, #3
 80228d6:	0212      	lsls	r2, r2, #8
 80228d8:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80228dc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80228e0:	4313      	orrs	r3, r2
 80228e2:	f109 0201 	add.w	r2, r9, #1
 80228e6:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80228ea:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 80228ee:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80228f2:	431d      	orrs	r5, r3
 80228f4:	9b01      	ldr	r3, [sp, #4]
 80228f6:	801d      	strh	r5, [r3, #0]
 80228f8:	b009      	add	sp, #36	; 0x24
 80228fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228fe:	2000      	movs	r0, #0
 8022900:	e701      	b.n	8022706 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8022902:	2600      	movs	r6, #0
 8022904:	4630      	mov	r0, r6
 8022906:	e70b      	b.n	8022720 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8022908:	2600      	movs	r6, #0
 802290a:	e709      	b.n	8022720 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 802290c:	462e      	mov	r6, r5
 802290e:	e707      	b.n	8022720 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8022910:	2700      	movs	r7, #0
 8022912:	e71a      	b.n	802274a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8022914:	2100      	movs	r1, #0
 8022916:	460f      	mov	r7, r1
 8022918:	e723      	b.n	8022762 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 802291a:	4621      	mov	r1, r4
 802291c:	4627      	mov	r7, r4
 802291e:	e720      	b.n	8022762 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8022920:	2100      	movs	r1, #0
 8022922:	e71e      	b.n	8022762 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8022924:	4629      	mov	r1, r5
 8022926:	e71c      	b.n	8022762 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

08022928 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802292c:	b09b      	sub	sp, #108	; 0x6c
 802292e:	9218      	str	r2, [sp, #96]	; 0x60
 8022930:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022932:	9116      	str	r1, [sp, #88]	; 0x58
 8022934:	9307      	str	r3, [sp, #28]
 8022936:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802293a:	9019      	str	r0, [sp, #100]	; 0x64
 802293c:	6850      	ldr	r0, [r2, #4]
 802293e:	6812      	ldr	r2, [r2, #0]
 8022940:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8022942:	fb00 1303 	mla	r3, r0, r3, r1
 8022946:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802294a:	930a      	str	r3, [sp, #40]	; 0x28
 802294c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802294e:	681b      	ldr	r3, [r3, #0]
 8022950:	930f      	str	r3, [sp, #60]	; 0x3c
 8022952:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022954:	685e      	ldr	r6, [r3, #4]
 8022956:	3604      	adds	r6, #4
 8022958:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802295a:	2b00      	cmp	r3, #0
 802295c:	dc03      	bgt.n	8022966 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802295e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022960:	2b00      	cmp	r3, #0
 8022962:	f340 8373 	ble.w	802304c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8022966:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022968:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802296c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022970:	1e48      	subs	r0, r1, #1
 8022972:	1e57      	subs	r7, r2, #1
 8022974:	9b07      	ldr	r3, [sp, #28]
 8022976:	2b00      	cmp	r3, #0
 8022978:	f340 8190 	ble.w	8022c9c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802297c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802297e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8022982:	ea4f 4325 	mov.w	r3, r5, asr #16
 8022986:	d406      	bmi.n	8022996 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022988:	4584      	cmp	ip, r0
 802298a:	da04      	bge.n	8022996 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802298c:	2b00      	cmp	r3, #0
 802298e:	db02      	blt.n	8022996 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022990:	42bb      	cmp	r3, r7
 8022992:	f2c0 8184 	blt.w	8022c9e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8022996:	f11c 0c01 	adds.w	ip, ip, #1
 802299a:	f100 8172 	bmi.w	8022c82 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802299e:	4561      	cmp	r1, ip
 80229a0:	f2c0 816f 	blt.w	8022c82 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80229a4:	3301      	adds	r3, #1
 80229a6:	f100 816c 	bmi.w	8022c82 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80229aa:	429a      	cmp	r2, r3
 80229ac:	f2c0 8169 	blt.w	8022c82 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80229b0:	9b07      	ldr	r3, [sp, #28]
 80229b2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80229b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80229b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80229b8:	2b00      	cmp	r3, #0
 80229ba:	f340 818e 	ble.w	8022cda <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b2>
 80229be:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80229c0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80229c4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80229c6:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80229ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80229cc:	141b      	asrs	r3, r3, #16
 80229ce:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80229d2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80229d6:	f100 81d1 	bmi.w	8022d7c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 80229da:	f101 38ff 	add.w	r8, r1, #4294967295
 80229de:	4543      	cmp	r3, r8
 80229e0:	f280 81cc 	bge.w	8022d7c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 80229e4:	f1bc 0f00 	cmp.w	ip, #0
 80229e8:	f2c0 81c8 	blt.w	8022d7c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 80229ec:	f10e 38ff 	add.w	r8, lr, #4294967295
 80229f0:	45c4      	cmp	ip, r8
 80229f2:	f280 81c3 	bge.w	8022d7c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 80229f6:	b209      	sxth	r1, r1
 80229f8:	fb0c 3301 	mla	r3, ip, r1, r3
 80229fc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80229fe:	eb04 0803 	add.w	r8, r4, r3
 8022a02:	5ce3      	ldrb	r3, [r4, r3]
 8022a04:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8022a08:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8022a0c:	2a00      	cmp	r2, #0
 8022a0e:	f000 81aa 	beq.w	8022d66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43e>
 8022a12:	f898 c001 	ldrb.w	ip, [r8, #1]
 8022a16:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8022a1a:	940b      	str	r4, [sp, #44]	; 0x2c
 8022a1c:	0e24      	lsrs	r4, r4, #24
 8022a1e:	9412      	str	r4, [sp, #72]	; 0x48
 8022a20:	b178      	cbz	r0, 8022a42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8022a22:	eb08 0c01 	add.w	ip, r8, r1
 8022a26:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022a2a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022a2e:	9108      	str	r1, [sp, #32]
 8022a30:	0e09      	lsrs	r1, r1, #24
 8022a32:	9110      	str	r1, [sp, #64]	; 0x40
 8022a34:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8022a38:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022a3c:	910c      	str	r1, [sp, #48]	; 0x30
 8022a3e:	0e09      	lsrs	r1, r1, #24
 8022a40:	9113      	str	r1, [sp, #76]	; 0x4c
 8022a42:	b292      	uxth	r2, r2
 8022a44:	b280      	uxth	r0, r0
 8022a46:	fb02 f900 	mul.w	r9, r2, r0
 8022a4a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8022a4e:	0112      	lsls	r2, r2, #4
 8022a50:	eba2 0809 	sub.w	r8, r2, r9
 8022a54:	b280      	uxth	r0, r0
 8022a56:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8022a5a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022a5c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022a5e:	fa1f f888 	uxth.w	r8, r8
 8022a62:	1a12      	subs	r2, r2, r0
 8022a64:	b292      	uxth	r2, r2
 8022a66:	fb08 f101 	mul.w	r1, r8, r1
 8022a6a:	fb02 110e 	mla	r1, r2, lr, r1
 8022a6e:	fb00 1104 	mla	r1, r0, r4, r1
 8022a72:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022a74:	fb09 1104 	mla	r1, r9, r4, r1
 8022a78:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022a7c:	2900      	cmp	r1, #0
 8022a7e:	f000 80f5 	beq.w	8022c6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022a82:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022a86:	d01b      	beq.n	8022ac0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8022a88:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8022a8c:	fb0e fa0a 	mul.w	sl, lr, sl
 8022a90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022a94:	fb0e fe03 	mul.w	lr, lr, r3
 8022a98:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022a9c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022aa0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022aa4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8022aa8:	4453      	add	r3, sl
 8022aaa:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022aae:	0a1b      	lsrs	r3, r3, #8
 8022ab0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022ab4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022ab8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022abc:	ea43 030c 	orr.w	r3, r3, ip
 8022ac0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022ac2:	2cff      	cmp	r4, #255	; 0xff
 8022ac4:	d021      	beq.n	8022b0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8022ac6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022ac8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022acc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022ace:	fb04 fb0b 	mul.w	fp, r4, fp
 8022ad2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022ad4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022ad8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022ada:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022ade:	fb04 fa0a 	mul.w	sl, r4, sl
 8022ae2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022ae6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022aea:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022aee:	44de      	add	lr, fp
 8022af0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022af4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022af8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022afc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022b00:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022b04:	ea4e 040a 	orr.w	r4, lr, sl
 8022b08:	940b      	str	r4, [sp, #44]	; 0x2c
 8022b0a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022b0c:	2cff      	cmp	r4, #255	; 0xff
 8022b0e:	d021      	beq.n	8022b54 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8022b10:	9c08      	ldr	r4, [sp, #32]
 8022b12:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022b16:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022b18:	fb04 fb0b 	mul.w	fp, r4, fp
 8022b1c:	9c08      	ldr	r4, [sp, #32]
 8022b1e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022b22:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022b24:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022b28:	fb04 fa0a 	mul.w	sl, r4, sl
 8022b2c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022b30:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022b34:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022b38:	44de      	add	lr, fp
 8022b3a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022b3e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022b42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022b46:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022b4a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022b4e:	ea4e 040a 	orr.w	r4, lr, sl
 8022b52:	9408      	str	r4, [sp, #32]
 8022b54:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022b56:	2cff      	cmp	r4, #255	; 0xff
 8022b58:	d021      	beq.n	8022b9e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8022b5a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022b5c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022b60:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022b62:	fb04 fb0b 	mul.w	fp, r4, fp
 8022b66:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022b68:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022b6c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022b6e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022b72:	fb04 fa0a 	mul.w	sl, r4, sl
 8022b76:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022b7a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022b7e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022b82:	44de      	add	lr, fp
 8022b84:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022b88:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022b8c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022b90:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022b94:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022b98:	ea4e 040a 	orr.w	r4, lr, sl
 8022b9c:	940c      	str	r4, [sp, #48]	; 0x30
 8022b9e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022ba0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022ba4:	9c08      	ldr	r4, [sp, #32]
 8022ba6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8022baa:	fb08 fc0c 	mul.w	ip, r8, ip
 8022bae:	fb02 cc0e 	mla	ip, r2, lr, ip
 8022bb2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022bb6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022bb8:	fb00 cc0e 	mla	ip, r0, lr, ip
 8022bbc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022bc0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022bc2:	fb09 cc0e 	mla	ip, r9, lr, ip
 8022bc6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8022bca:	fb08 f80e 	mul.w	r8, r8, lr
 8022bce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022bd2:	fb02 8303 	mla	r3, r2, r3, r8
 8022bd6:	9a08      	ldr	r2, [sp, #32]
 8022bd8:	f8b7 8000 	ldrh.w	r8, [r7]
 8022bdc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8022be0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022be2:	fb00 330a 	mla	r3, r0, sl, r3
 8022be6:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8022bea:	fb09 3900 	mla	r9, r9, r0, r3
 8022bee:	43c9      	mvns	r1, r1
 8022bf0:	ea4f 2228 	mov.w	r2, r8, asr #8
 8022bf4:	fa5f fe81 	uxtb.w	lr, r1
 8022bf8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022bfc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022c00:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022c04:	fb02 f20e 	mul.w	r2, r2, lr
 8022c08:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022c0c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022c10:	ea4c 0c09 	orr.w	ip, ip, r9
 8022c14:	1c53      	adds	r3, r2, #1
 8022c16:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022c1a:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8022c1e:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8022c22:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022c26:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022c2a:	4a63      	ldr	r2, [pc, #396]	; (8022db8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8022c2c:	fb00 f00e 	mul.w	r0, r0, lr
 8022c30:	b2db      	uxtb	r3, r3
 8022c32:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8022c36:	1c43      	adds	r3, r0, #1
 8022c38:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022c3c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022c40:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8022c44:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022c48:	b2c9      	uxtb	r1, r1
 8022c4a:	00db      	lsls	r3, r3, #3
 8022c4c:	fb01 f10e 	mul.w	r1, r1, lr
 8022c50:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022c54:	4313      	orrs	r3, r2
 8022c56:	1c4a      	adds	r2, r1, #1
 8022c58:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022c5c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8022c60:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8022c64:	ea4c 0c03 	orr.w	ip, ip, r3
 8022c68:	f8a7 c000 	strh.w	ip, [r7]
 8022c6c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022c6e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8022c70:	441a      	add	r2, r3
 8022c72:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022c74:	9225      	str	r2, [sp, #148]	; 0x94
 8022c76:	441d      	add	r5, r3
 8022c78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022c7a:	3b01      	subs	r3, #1
 8022c7c:	3702      	adds	r7, #2
 8022c7e:	9317      	str	r3, [sp, #92]	; 0x5c
 8022c80:	e699      	b.n	80229b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022c82:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022c84:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8022c86:	441c      	add	r4, r3
 8022c88:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022c8a:	9425      	str	r4, [sp, #148]	; 0x94
 8022c8c:	441d      	add	r5, r3
 8022c8e:	9b07      	ldr	r3, [sp, #28]
 8022c90:	3b01      	subs	r3, #1
 8022c92:	9307      	str	r3, [sp, #28]
 8022c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022c96:	3302      	adds	r3, #2
 8022c98:	930a      	str	r3, [sp, #40]	; 0x28
 8022c9a:	e66b      	b.n	8022974 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8022c9c:	d024      	beq.n	8022ce8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8022c9e:	9b07      	ldr	r3, [sp, #28]
 8022ca0:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8022ca2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8022ca4:	3b01      	subs	r3, #1
 8022ca6:	fb00 4003 	mla	r0, r0, r3, r4
 8022caa:	1400      	asrs	r0, r0, #16
 8022cac:	f53f ae80 	bmi.w	80229b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8022cb0:	3901      	subs	r1, #1
 8022cb2:	4288      	cmp	r0, r1
 8022cb4:	f6bf ae7c 	bge.w	80229b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8022cb8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8022cba:	fb01 5303 	mla	r3, r1, r3, r5
 8022cbe:	141b      	asrs	r3, r3, #16
 8022cc0:	f53f ae76 	bmi.w	80229b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8022cc4:	3a01      	subs	r2, #1
 8022cc6:	4293      	cmp	r3, r2
 8022cc8:	f6bf ae72 	bge.w	80229b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8022ccc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8022cd0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8022cd4:	f1bb 0f00 	cmp.w	fp, #0
 8022cd8:	dc70      	bgt.n	8022dbc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8022cda:	9b07      	ldr	r3, [sp, #28]
 8022cdc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022ce2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8022ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8022ce8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022cea:	2b00      	cmp	r3, #0
 8022cec:	f340 81ae 	ble.w	802304c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8022cf0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022cf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022cf8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022cfc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022cfe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022d02:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022d06:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022d0a:	eef0 6a62 	vmov.f32	s13, s5
 8022d0e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022d12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022d16:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022d1a:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8022d1e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022d22:	eef0 6a43 	vmov.f32	s13, s6
 8022d26:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022d2a:	ee12 2a90 	vmov	r2, s5
 8022d2e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022d32:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d36:	ee13 2a10 	vmov	r2, s6
 8022d3a:	9327      	str	r3, [sp, #156]	; 0x9c
 8022d3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022d3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d42:	9328      	str	r3, [sp, #160]	; 0xa0
 8022d44:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022d46:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8022d48:	3b01      	subs	r3, #1
 8022d4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022d4e:	9316      	str	r3, [sp, #88]	; 0x58
 8022d50:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022d52:	bf08      	it	eq
 8022d54:	4613      	moveq	r3, r2
 8022d56:	ee16 5a90 	vmov	r5, s13
 8022d5a:	9307      	str	r3, [sp, #28]
 8022d5c:	eeb0 3a67 	vmov.f32	s6, s15
 8022d60:	eef0 2a47 	vmov.f32	s5, s14
 8022d64:	e5f8      	b.n	8022958 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8022d66:	2800      	cmp	r0, #0
 8022d68:	f43f ae6b 	beq.w	8022a42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8022d6c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022d70:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022d74:	9108      	str	r1, [sp, #32]
 8022d76:	0e09      	lsrs	r1, r1, #24
 8022d78:	9110      	str	r1, [sp, #64]	; 0x40
 8022d7a:	e662      	b.n	8022a42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8022d7c:	f113 0801 	adds.w	r8, r3, #1
 8022d80:	f53f af74 	bmi.w	8022c6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022d84:	4541      	cmp	r1, r8
 8022d86:	f6ff af71 	blt.w	8022c6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022d8a:	f11c 0801 	adds.w	r8, ip, #1
 8022d8e:	f53f af6d 	bmi.w	8022c6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022d92:	45c6      	cmp	lr, r8
 8022d94:	f6ff af6a 	blt.w	8022c6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022d98:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8022d9c:	b209      	sxth	r1, r1
 8022d9e:	fa0f f38e 	sxth.w	r3, lr
 8022da2:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8022da6:	9301      	str	r3, [sp, #4]
 8022da8:	9100      	str	r1, [sp, #0]
 8022daa:	4633      	mov	r3, r6
 8022dac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022dae:	9819      	ldr	r0, [sp, #100]	; 0x64
 8022db0:	4639      	mov	r1, r7
 8022db2:	f7ff fc7a 	bl	80226aa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8022db6:	e759      	b.n	8022c6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022db8:	fffff800 	.word	0xfffff800
 8022dbc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022dbe:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8022dc0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022dc4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022dc6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022dca:	1427      	asrs	r7, r4, #16
 8022dcc:	142b      	asrs	r3, r5, #16
 8022dce:	fb01 7303 	mla	r3, r1, r3, r7
 8022dd2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022dd4:	18e7      	adds	r7, r4, r3
 8022dd6:	5ce3      	ldrb	r3, [r4, r3]
 8022dd8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8022ddc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022de0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022de4:	2a00      	cmp	r2, #0
 8022de6:	f000 8127 	beq.w	8023038 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8022dea:	f897 e001 	ldrb.w	lr, [r7, #1]
 8022dee:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8022df2:	940d      	str	r4, [sp, #52]	; 0x34
 8022df4:	0e24      	lsrs	r4, r4, #24
 8022df6:	9414      	str	r4, [sp, #80]	; 0x50
 8022df8:	b170      	cbz	r0, 8022e18 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8022dfa:	eb07 0e01 	add.w	lr, r7, r1
 8022dfe:	5c79      	ldrb	r1, [r7, r1]
 8022e00:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022e04:	9109      	str	r1, [sp, #36]	; 0x24
 8022e06:	0e09      	lsrs	r1, r1, #24
 8022e08:	9111      	str	r1, [sp, #68]	; 0x44
 8022e0a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8022e0e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022e12:	910e      	str	r1, [sp, #56]	; 0x38
 8022e14:	0e09      	lsrs	r1, r1, #24
 8022e16:	9115      	str	r1, [sp, #84]	; 0x54
 8022e18:	b292      	uxth	r2, r2
 8022e1a:	b280      	uxth	r0, r0
 8022e1c:	fb02 f800 	mul.w	r8, r2, r0
 8022e20:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8022e24:	0112      	lsls	r2, r2, #4
 8022e26:	eba2 0e08 	sub.w	lr, r2, r8
 8022e2a:	b280      	uxth	r0, r0
 8022e2c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022e30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022e32:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022e34:	fa1f fe8e 	uxth.w	lr, lr
 8022e38:	1a09      	subs	r1, r1, r0
 8022e3a:	b289      	uxth	r1, r1
 8022e3c:	fb0e f202 	mul.w	r2, lr, r2
 8022e40:	fb01 220c 	mla	r2, r1, ip, r2
 8022e44:	fb00 2204 	mla	r2, r0, r4, r2
 8022e48:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022e4a:	fb08 2204 	mla	r2, r8, r4, r2
 8022e4e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022e52:	2a00      	cmp	r2, #0
 8022e54:	f000 80e5 	beq.w	8023022 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8022e58:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022e5c:	d019      	beq.n	8022e92 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 8022e5e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8022e62:	fb0c fa0a 	mul.w	sl, ip, sl
 8022e66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022e6a:	fb0c fc03 	mul.w	ip, ip, r3
 8022e6e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022e72:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022e76:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022e7a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8022e7e:	4453      	add	r3, sl
 8022e80:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022e84:	0a1b      	lsrs	r3, r3, #8
 8022e86:	0a3f      	lsrs	r7, r7, #8
 8022e88:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022e8c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022e90:	433b      	orrs	r3, r7
 8022e92:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022e94:	2cff      	cmp	r4, #255	; 0xff
 8022e96:	d020      	beq.n	8022eda <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8022e98:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022e9a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022e9e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022ea0:	4367      	muls	r7, r4
 8022ea2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022ea4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022ea8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022eaa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022eae:	fb04 fa0a 	mul.w	sl, r4, sl
 8022eb2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022eb6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022eba:	44bc      	add	ip, r7
 8022ebc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022ec0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022ec4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022ec8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022ecc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022ed0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022ed4:	ea4c 040a 	orr.w	r4, ip, sl
 8022ed8:	940d      	str	r4, [sp, #52]	; 0x34
 8022eda:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022edc:	2cff      	cmp	r4, #255	; 0xff
 8022ede:	d020      	beq.n	8022f22 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8022ee0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022ee2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022ee6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022ee8:	4367      	muls	r7, r4
 8022eea:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022eec:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022ef0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022ef2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022ef6:	fb04 fa0a 	mul.w	sl, r4, sl
 8022efa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022efe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f02:	44bc      	add	ip, r7
 8022f04:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022f08:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022f0c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f10:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022f14:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f18:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022f1c:	ea4c 040a 	orr.w	r4, ip, sl
 8022f20:	9409      	str	r4, [sp, #36]	; 0x24
 8022f22:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022f24:	2cff      	cmp	r4, #255	; 0xff
 8022f26:	d020      	beq.n	8022f6a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8022f28:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022f2a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022f2e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022f30:	4367      	muls	r7, r4
 8022f32:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022f34:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022f38:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022f3a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022f3e:	fb04 fa0a 	mul.w	sl, r4, sl
 8022f42:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022f46:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f4a:	44bc      	add	ip, r7
 8022f4c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022f50:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022f54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f58:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022f5c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f60:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022f64:	ea4c 040a 	orr.w	r4, ip, sl
 8022f68:	940e      	str	r4, [sp, #56]	; 0x38
 8022f6a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022f6c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022f70:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022f72:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022f76:	fb0e f707 	mul.w	r7, lr, r7
 8022f7a:	fb01 770c 	mla	r7, r1, ip, r7
 8022f7e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022f82:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022f84:	fb00 770c 	mla	r7, r0, ip, r7
 8022f88:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022f8c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022f8e:	fb08 770c 	mla	r7, r8, ip, r7
 8022f92:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8022f96:	fb0e fe0c 	mul.w	lr, lr, ip
 8022f9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022f9e:	fb01 e303 	mla	r3, r1, r3, lr
 8022fa2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022fa4:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8022fa8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022faa:	fb00 330a 	mla	r3, r0, sl, r3
 8022fae:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022fb2:	fb08 3c0c 	mla	ip, r8, ip, r3
 8022fb6:	f8b9 3000 	ldrh.w	r3, [r9]
 8022fba:	43d2      	mvns	r2, r2
 8022fbc:	1218      	asrs	r0, r3, #8
 8022fbe:	b2d2      	uxtb	r2, r2
 8022fc0:	10d9      	asrs	r1, r3, #3
 8022fc2:	0a3f      	lsrs	r7, r7, #8
 8022fc4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022fc8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022fcc:	00db      	lsls	r3, r3, #3
 8022fce:	4350      	muls	r0, r2
 8022fd0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022fd4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022fd8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022fdc:	b2db      	uxtb	r3, r3
 8022fde:	ea47 070c 	orr.w	r7, r7, ip
 8022fe2:	4351      	muls	r1, r2
 8022fe4:	4353      	muls	r3, r2
 8022fe6:	1c42      	adds	r2, r0, #1
 8022fe8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022fec:	0c3a      	lsrs	r2, r7, #16
 8022fee:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022ff2:	4a18      	ldr	r2, [pc, #96]	; (8023054 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8022ff4:	b2c0      	uxtb	r0, r0
 8022ff6:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8022ffa:	1c4a      	adds	r2, r1, #1
 8022ffc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023000:	0a3a      	lsrs	r2, r7, #8
 8023002:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023006:	00c9      	lsls	r1, r1, #3
 8023008:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802300c:	4301      	orrs	r1, r0
 802300e:	1c58      	adds	r0, r3, #1
 8023010:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023014:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8023018:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 802301c:	4308      	orrs	r0, r1
 802301e:	f8a9 0000 	strh.w	r0, [r9]
 8023022:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023024:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8023026:	441a      	add	r2, r3
 8023028:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802302a:	9225      	str	r2, [sp, #148]	; 0x94
 802302c:	f109 0902 	add.w	r9, r9, #2
 8023030:	441d      	add	r5, r3
 8023032:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023036:	e64d      	b.n	8022cd4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 8023038:	2800      	cmp	r0, #0
 802303a:	f43f aeed 	beq.w	8022e18 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802303e:	5c79      	ldrb	r1, [r7, r1]
 8023040:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023044:	9109      	str	r1, [sp, #36]	; 0x24
 8023046:	0e09      	lsrs	r1, r1, #24
 8023048:	9111      	str	r1, [sp, #68]	; 0x44
 802304a:	e6e5      	b.n	8022e18 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802304c:	b01b      	add	sp, #108	; 0x6c
 802304e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023052:	bf00      	nop
 8023054:	fffff800 	.word	0xfffff800

08023058 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8023058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802305c:	b085      	sub	sp, #20
 802305e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8023062:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8023066:	9103      	str	r1, [sp, #12]
 8023068:	fb00 7406 	mla	r4, r0, r6, r7
 802306c:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8023070:	2800      	cmp	r0, #0
 8023072:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8023076:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 802307a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802307e:	9501      	str	r5, [sp, #4]
 8023080:	eb03 0904 	add.w	r9, r3, r4
 8023084:	f2c0 8150 	blt.w	8023328 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8023088:	4583      	cmp	fp, r0
 802308a:	f340 814d 	ble.w	8023328 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 802308e:	2f00      	cmp	r7, #0
 8023090:	f2c0 8146 	blt.w	8023320 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8023094:	42be      	cmp	r6, r7
 8023096:	f340 8143 	ble.w	8023320 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 802309a:	f813 c004 	ldrb.w	ip, [r3, r4]
 802309e:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 80230a2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80230a6:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 80230aa:	4355      	muls	r5, r2
 80230ac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80230b0:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80230b4:	fb0c f203 	mul.w	r2, ip, r3
 80230b8:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80230bc:	f605 0501 	addw	r5, r5, #2049	; 0x801
 80230c0:	441d      	add	r5, r3
 80230c2:	f102 0320 	add.w	r3, r2, #32
 80230c6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80230ca:	0a1b      	lsrs	r3, r3, #8
 80230cc:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 80230d0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80230d4:	431c      	orrs	r4, r3
 80230d6:	1c7b      	adds	r3, r7, #1
 80230d8:	f100 812b 	bmi.w	8023332 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 80230dc:	429e      	cmp	r6, r3
 80230de:	f340 8128 	ble.w	8023332 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 80230e2:	2900      	cmp	r1, #0
 80230e4:	f000 8128 	beq.w	8023338 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 80230e8:	9a01      	ldr	r2, [sp, #4]
 80230ea:	f899 3001 	ldrb.w	r3, [r9, #1]
 80230ee:	8855      	ldrh	r5, [r2, #2]
 80230f0:	ea4f 08e3 	mov.w	r8, r3, asr #3
 80230f4:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 80230f8:	fb08 f802 	mul.w	r8, r8, r2
 80230fc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023100:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8023104:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8023108:	435d      	muls	r5, r3
 802310a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802310e:	44d0      	add	r8, sl
 8023110:	f105 0a20 	add.w	sl, r5, #32
 8023114:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8023118:	0a2d      	lsrs	r5, r5, #8
 802311a:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802311e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023122:	432a      	orrs	r2, r5
 8023124:	3001      	adds	r0, #1
 8023126:	f100 810d 	bmi.w	8023344 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 802312a:	4583      	cmp	fp, r0
 802312c:	f340 810a 	ble.w	8023344 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8023130:	f1be 0f00 	cmp.w	lr, #0
 8023134:	f000 810b 	beq.w	802334e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8023138:	2f00      	cmp	r7, #0
 802313a:	f2c0 8100 	blt.w	802333e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 802313e:	42be      	cmp	r6, r7
 8023140:	f340 80fd 	ble.w	802333e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8023144:	9801      	ldr	r0, [sp, #4]
 8023146:	f819 5006 	ldrb.w	r5, [r9, r6]
 802314a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 802314e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8023152:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8023156:	fb0a fa00 	mul.w	sl, sl, r0
 802315a:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802315e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8023162:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8023166:	fb05 f808 	mul.w	r8, r5, r8
 802316a:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 802316e:	4482      	add	sl, r0
 8023170:	f108 0020 	add.w	r0, r8, #32
 8023174:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8023178:	0a00      	lsrs	r0, r0, #8
 802317a:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 802317e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023182:	ea4b 0b00 	orr.w	fp, fp, r0
 8023186:	3701      	adds	r7, #1
 8023188:	f100 80e6 	bmi.w	8023358 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 802318c:	42be      	cmp	r6, r7
 802318e:	f340 80e3 	ble.w	8023358 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8023192:	2900      	cmp	r1, #0
 8023194:	f000 80e3 	beq.w	802335e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8023198:	3601      	adds	r6, #1
 802319a:	9801      	ldr	r0, [sp, #4]
 802319c:	f819 7006 	ldrb.w	r7, [r9, r6]
 80231a0:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80231a4:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80231a8:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 80231ac:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80231b0:	fb09 f906 	mul.w	r9, r9, r6
 80231b4:	fb07 f800 	mul.w	r8, r7, r0
 80231b8:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80231bc:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80231c0:	f609 0901 	addw	r9, r9, #2049	; 0x801
 80231c4:	44d1      	add	r9, sl
 80231c6:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80231ca:	f108 0020 	add.w	r0, r8, #32
 80231ce:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80231d2:	0a00      	lsrs	r0, r0, #8
 80231d4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80231d8:	4330      	orrs	r0, r6
 80231da:	b28e      	uxth	r6, r1
 80231dc:	fa1f f98e 	uxth.w	r9, lr
 80231e0:	fb06 f809 	mul.w	r8, r6, r9
 80231e4:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80231e8:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80231ec:	0136      	lsls	r6, r6, #4
 80231ee:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80231f2:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80231f6:	9601      	str	r6, [sp, #4]
 80231f8:	ea4a 0404 	orr.w	r4, sl, r4
 80231fc:	fa1f f689 	uxth.w	r6, r9
 8023200:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8023204:	fb11 f90e 	smulbb	r9, r1, lr
 8023208:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 802320c:	9602      	str	r6, [sp, #8]
 802320e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023212:	4626      	mov	r6, r4
 8023214:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023218:	f1ce 0410 	rsb	r4, lr, #16
 802321c:	1a64      	subs	r4, r4, r1
 802321e:	ea4a 0202 	orr.w	r2, sl, r2
 8023222:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8023226:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802322a:	434a      	muls	r2, r1
 802322c:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8023230:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023234:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023238:	fb04 2406 	mla	r4, r4, r6, r2
 802323c:	ea4a 0000 	orr.w	r0, sl, r0
 8023240:	fb09 4200 	mla	r2, r9, r0, r4
 8023244:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8023248:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802324c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8023250:	ea44 0b0b 	orr.w	fp, r4, fp
 8023254:	9c01      	ldr	r4, [sp, #4]
 8023256:	9e02      	ldr	r6, [sp, #8]
 8023258:	9903      	ldr	r1, [sp, #12]
 802325a:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 802325e:	1ba4      	subs	r4, r4, r6
 8023260:	9e01      	ldr	r6, [sp, #4]
 8023262:	8808      	ldrh	r0, [r1, #0]
 8023264:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8023268:	eba6 0608 	sub.w	r6, r6, r8
 802326c:	b2b6      	uxth	r6, r6
 802326e:	b2a4      	uxth	r4, r4
 8023270:	4373      	muls	r3, r6
 8023272:	fb0c 3304 	mla	r3, ip, r4, r3
 8023276:	9c02      	ldr	r4, [sp, #8]
 8023278:	fb04 3505 	mla	r5, r4, r5, r3
 802327c:	fb08 5707 	mla	r7, r8, r7, r5
 8023280:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8023284:	b289      	uxth	r1, r1
 8023286:	fb0e 2e0b 	mla	lr, lr, fp, r2
 802328a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802328e:	434f      	muls	r7, r1
 8023290:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8023294:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8023298:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802329c:	1c7b      	adds	r3, r7, #1
 802329e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80232a2:	ea42 0e0e 	orr.w	lr, r2, lr
 80232a6:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80232aa:	fa1f f28e 	uxth.w	r2, lr
 80232ae:	1203      	asrs	r3, r0, #8
 80232b0:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 80232b4:	b2ff      	uxtb	r7, r7
 80232b6:	1215      	asrs	r5, r2, #8
 80232b8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80232bc:	fb13 f307 	smulbb	r3, r3, r7
 80232c0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80232c4:	fb05 3501 	mla	r5, r5, r1, r3
 80232c8:	10c3      	asrs	r3, r0, #3
 80232ca:	10d4      	asrs	r4, r2, #3
 80232cc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80232d0:	fb13 f307 	smulbb	r3, r3, r7
 80232d4:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80232d8:	fb04 3401 	mla	r4, r4, r1, r3
 80232dc:	00c3      	lsls	r3, r0, #3
 80232de:	00d2      	lsls	r2, r2, #3
 80232e0:	b2db      	uxtb	r3, r3
 80232e2:	fb13 f307 	smulbb	r3, r3, r7
 80232e6:	b2d2      	uxtb	r2, r2
 80232e8:	fb02 3101 	mla	r1, r2, r1, r3
 80232ec:	b2ad      	uxth	r5, r5
 80232ee:	b289      	uxth	r1, r1
 80232f0:	b2a4      	uxth	r4, r4
 80232f2:	1c6b      	adds	r3, r5, #1
 80232f4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80232f8:	1c62      	adds	r2, r4, #1
 80232fa:	1c4b      	adds	r3, r1, #1
 80232fc:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023300:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8023304:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023308:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802330c:	0964      	lsrs	r4, r4, #5
 802330e:	432b      	orrs	r3, r5
 8023310:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8023314:	9a03      	ldr	r2, [sp, #12]
 8023316:	4323      	orrs	r3, r4
 8023318:	8013      	strh	r3, [r2, #0]
 802331a:	b005      	add	sp, #20
 802331c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023320:	f04f 0c00 	mov.w	ip, #0
 8023324:	4664      	mov	r4, ip
 8023326:	e6d6      	b.n	80230d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8023328:	2300      	movs	r3, #0
 802332a:	469c      	mov	ip, r3
 802332c:	461a      	mov	r2, r3
 802332e:	461c      	mov	r4, r3
 8023330:	e6f8      	b.n	8023124 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8023332:	2300      	movs	r3, #0
 8023334:	461a      	mov	r2, r3
 8023336:	e6f5      	b.n	8023124 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8023338:	460b      	mov	r3, r1
 802333a:	460a      	mov	r2, r1
 802333c:	e6f2      	b.n	8023124 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802333e:	2500      	movs	r5, #0
 8023340:	46ab      	mov	fp, r5
 8023342:	e720      	b.n	8023186 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8023344:	2700      	movs	r7, #0
 8023346:	463d      	mov	r5, r7
 8023348:	4638      	mov	r0, r7
 802334a:	46bb      	mov	fp, r7
 802334c:	e745      	b.n	80231da <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802334e:	4677      	mov	r7, lr
 8023350:	4675      	mov	r5, lr
 8023352:	4670      	mov	r0, lr
 8023354:	46f3      	mov	fp, lr
 8023356:	e740      	b.n	80231da <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8023358:	2700      	movs	r7, #0
 802335a:	4638      	mov	r0, r7
 802335c:	e73d      	b.n	80231da <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802335e:	460f      	mov	r7, r1
 8023360:	4608      	mov	r0, r1
 8023362:	e73a      	b.n	80231da <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08023364 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023368:	b097      	sub	sp, #92	; 0x5c
 802336a:	9214      	str	r2, [sp, #80]	; 0x50
 802336c:	9308      	str	r3, [sp, #32]
 802336e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8023370:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8023374:	9312      	str	r3, [sp, #72]	; 0x48
 8023376:	9111      	str	r1, [sp, #68]	; 0x44
 8023378:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802337c:	9015      	str	r0, [sp, #84]	; 0x54
 802337e:	6850      	ldr	r0, [r2, #4]
 8023380:	6812      	ldr	r2, [r2, #0]
 8023382:	fb00 1303 	mla	r3, r0, r3, r1
 8023386:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802338a:	9309      	str	r3, [sp, #36]	; 0x24
 802338c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802338e:	681b      	ldr	r3, [r3, #0]
 8023390:	930b      	str	r3, [sp, #44]	; 0x2c
 8023392:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023394:	685b      	ldr	r3, [r3, #4]
 8023396:	930c      	str	r3, [sp, #48]	; 0x30
 8023398:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 802339c:	930a      	str	r3, [sp, #40]	; 0x28
 802339e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80233a0:	2b00      	cmp	r3, #0
 80233a2:	dc03      	bgt.n	80233ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80233a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80233a6:	2b00      	cmp	r3, #0
 80233a8:	f340 83cb 	ble.w	8023b42 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 80233ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80233ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80233b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80233b6:	1e48      	subs	r0, r1, #1
 80233b8:	1e55      	subs	r5, r2, #1
 80233ba:	9b08      	ldr	r3, [sp, #32]
 80233bc:	2b00      	cmp	r3, #0
 80233be:	f340 81a3 	ble.w	8023708 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 80233c2:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80233c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80233c6:	1436      	asrs	r6, r6, #16
 80233c8:	ea4f 4323 	mov.w	r3, r3, asr #16
 80233cc:	d406      	bmi.n	80233dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80233ce:	4286      	cmp	r6, r0
 80233d0:	da04      	bge.n	80233dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80233d2:	2b00      	cmp	r3, #0
 80233d4:	db02      	blt.n	80233dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80233d6:	42ab      	cmp	r3, r5
 80233d8:	f2c0 8197 	blt.w	802370a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80233dc:	3601      	adds	r6, #1
 80233de:	f100 8184 	bmi.w	80236ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80233e2:	42b1      	cmp	r1, r6
 80233e4:	f2c0 8181 	blt.w	80236ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80233e8:	3301      	adds	r3, #1
 80233ea:	f100 817e 	bmi.w	80236ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80233ee:	429a      	cmp	r2, r3
 80233f0:	f2c0 817b 	blt.w	80236ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80233f4:	9b08      	ldr	r3, [sp, #32]
 80233f6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80233f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80233fa:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80233fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023400:	2b00      	cmp	r3, #0
 8023402:	f340 81a4 	ble.w	802374e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8023406:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8023408:	9d21      	ldr	r5, [sp, #132]	; 0x84
 802340a:	1418      	asrs	r0, r3, #16
 802340c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802340e:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8023412:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8023414:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8023418:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802341a:	142d      	asrs	r5, r5, #16
 802341c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8023420:	f100 81f8 	bmi.w	8023814 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8023424:	f102 3eff 	add.w	lr, r2, #4294967295
 8023428:	4575      	cmp	r5, lr
 802342a:	f280 81f3 	bge.w	8023814 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802342e:	2800      	cmp	r0, #0
 8023430:	f2c0 81f0 	blt.w	8023814 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8023434:	f103 3eff 	add.w	lr, r3, #4294967295
 8023438:	4570      	cmp	r0, lr
 802343a:	f280 81eb 	bge.w	8023814 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802343e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023440:	b212      	sxth	r2, r2
 8023442:	fb00 5002 	mla	r0, r0, r2, r5
 8023446:	fa1f fe81 	uxth.w	lr, r1
 802344a:	eb03 0a00 	add.w	sl, r3, r0
 802344e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8023452:	f813 9000 	ldrb.w	r9, [r3, r0]
 8023456:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802345a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802345e:	b29b      	uxth	r3, r3
 8023460:	f1bc 0f00 	cmp.w	ip, #0
 8023464:	f000 81b9 	beq.w	80237da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8023468:	f81a 4002 	ldrb.w	r4, [sl, r2]
 802346c:	940d      	str	r4, [sp, #52]	; 0x34
 802346e:	eb0a 0b02 	add.w	fp, sl, r2
 8023472:	fa1f fa8c 	uxth.w	sl, ip
 8023476:	fb0a fe0e 	mul.w	lr, sl, lr
 802347a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802347e:	fa1f fa8a 	uxth.w	sl, sl
 8023482:	eba5 050e 	sub.w	r5, r5, lr
 8023486:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802348a:	940e      	str	r4, [sp, #56]	; 0x38
 802348c:	eba3 030a 	sub.w	r3, r3, sl
 8023490:	b2ad      	uxth	r5, r5
 8023492:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023494:	b29b      	uxth	r3, r3
 8023496:	fb08 f505 	mul.w	r5, r8, r5
 802349a:	fb09 5303 	mla	r3, r9, r3, r5
 802349e:	fb0a 3304 	mla	r3, sl, r4, r3
 80234a2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80234a4:	fb0e 3304 	mla	r3, lr, r4, r3
 80234a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80234ac:	2b00      	cmp	r3, #0
 80234ae:	f000 810f 	beq.w	80236d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80234b2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80234b4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80234b8:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80234bc:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80234c0:	f000 8190 	beq.w	80237e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 80234c4:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80234c8:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80234cc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80234d0:	fb09 f000 	mul.w	r0, r9, r0
 80234d4:	fb0a fe0e 	mul.w	lr, sl, lr
 80234d8:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80234dc:	f100 0b20 	add.w	fp, r0, #32
 80234e0:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80234e4:	44ce      	add	lr, r9
 80234e6:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80234ea:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80234ee:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80234f2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80234f6:	ea4e 0909 	orr.w	r9, lr, r9
 80234fa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80234fe:	8868      	ldrh	r0, [r5, #2]
 8023500:	d019      	beq.n	8023536 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8023502:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8023506:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802350a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802350e:	fb08 f800 	mul.w	r8, r8, r0
 8023512:	fb0a fe0e 	mul.w	lr, sl, lr
 8023516:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802351a:	f108 0b20 	add.w	fp, r8, #32
 802351e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8023522:	4486      	add	lr, r0
 8023524:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8023528:	0a00      	lsrs	r0, r0, #8
 802352a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802352e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023532:	ea4e 0000 	orr.w	r0, lr, r0
 8023536:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802353a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802353e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8023542:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8023546:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802354a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802354e:	ea4e 0909 	orr.w	r9, lr, r9
 8023552:	ea4a 0000 	orr.w	r0, sl, r0
 8023556:	f1bc 0f00 	cmp.w	ip, #0
 802355a:	f000 8145 	beq.w	80237e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 802355e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8023562:	3a01      	subs	r2, #1
 8023564:	0052      	lsls	r2, r2, #1
 8023566:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023568:	3202      	adds	r2, #2
 802356a:	2cff      	cmp	r4, #255	; 0xff
 802356c:	eb05 0e02 	add.w	lr, r5, r2
 8023570:	5aaa      	ldrh	r2, [r5, r2]
 8023572:	d018      	beq.n	80235a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8023574:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8023578:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802357c:	fb04 fa02 	mul.w	sl, r4, r2
 8023580:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8023584:	fb08 f805 	mul.w	r8, r8, r5
 8023588:	f10a 0520 	add.w	r5, sl, #32
 802358c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8023590:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8023594:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023598:	4442      	add	r2, r8
 802359a:	0a2d      	lsrs	r5, r5, #8
 802359c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80235a0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80235a4:	432a      	orrs	r2, r5
 80235a6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80235a8:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80235ac:	2cff      	cmp	r4, #255	; 0xff
 80235ae:	d01a      	beq.n	80235e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 80235b0:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80235b4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80235b8:	fb04 fa05 	mul.w	sl, r4, r5
 80235bc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80235c0:	fb08 f80e 	mul.w	r8, r8, lr
 80235c4:	f10a 0e20 	add.w	lr, sl, #32
 80235c8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80235cc:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80235d0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80235d4:	4445      	add	r5, r8
 80235d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80235da:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80235de:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80235e2:	ea45 050e 	orr.w	r5, r5, lr
 80235e6:	fb1c fe01 	smulbb	lr, ip, r1
 80235ea:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80235ee:	f1cc 0810 	rsb	r8, ip, #16
 80235f2:	eba8 0801 	sub.w	r8, r8, r1
 80235f6:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80235fa:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80235fe:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8023602:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8023606:	4341      	muls	r1, r0
 8023608:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802360c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023610:	ea4a 0202 	orr.w	r2, sl, r2
 8023614:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8023618:	fb09 1108 	mla	r1, r9, r8, r1
 802361c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023620:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8023624:	fb0c 1102 	mla	r1, ip, r2, r1
 8023628:	ea4b 0505 	orr.w	r5, fp, r5
 802362c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8023630:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8023634:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8023638:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802363c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023640:	ea42 0e0e 	orr.w	lr, r2, lr
 8023644:	fa1f f28e 	uxth.w	r2, lr
 8023648:	2bff      	cmp	r3, #255	; 0xff
 802364a:	d103      	bne.n	8023654 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 802364c:	9912      	ldr	r1, [sp, #72]	; 0x48
 802364e:	29ff      	cmp	r1, #255	; 0xff
 8023650:	f000 80de 	beq.w	8023810 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8023654:	990a      	ldr	r1, [sp, #40]	; 0x28
 8023656:	8838      	ldrh	r0, [r7, #0]
 8023658:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802365a:	434b      	muls	r3, r1
 802365c:	f103 0c01 	add.w	ip, r3, #1
 8023660:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8023664:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8023668:	fa5f fc83 	uxtb.w	ip, r3
 802366c:	1203      	asrs	r3, r0, #8
 802366e:	1215      	asrs	r5, r2, #8
 8023670:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8023674:	fb13 f30c 	smulbb	r3, r3, ip
 8023678:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802367c:	fb05 3501 	mla	r5, r5, r1, r3
 8023680:	10c3      	asrs	r3, r0, #3
 8023682:	10d1      	asrs	r1, r2, #3
 8023684:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8023688:	fb13 f30c 	smulbb	r3, r3, ip
 802368c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023690:	fb01 3104 	mla	r1, r1, r4, r3
 8023694:	00c3      	lsls	r3, r0, #3
 8023696:	00d2      	lsls	r2, r2, #3
 8023698:	b2db      	uxtb	r3, r3
 802369a:	b2d2      	uxtb	r2, r2
 802369c:	fb13 f30c 	smulbb	r3, r3, ip
 80236a0:	b2ad      	uxth	r5, r5
 80236a2:	fb02 3304 	mla	r3, r2, r4, r3
 80236a6:	b29a      	uxth	r2, r3
 80236a8:	1c6b      	adds	r3, r5, #1
 80236aa:	b289      	uxth	r1, r1
 80236ac:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80236b0:	1c53      	adds	r3, r2, #1
 80236b2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80236b6:	1c4a      	adds	r2, r1, #1
 80236b8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80236bc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80236c0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80236c4:	0949      	lsrs	r1, r1, #5
 80236c6:	432b      	orrs	r3, r5
 80236c8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80236cc:	430b      	orrs	r3, r1
 80236ce:	803b      	strh	r3, [r7, #0]
 80236d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80236d2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80236d4:	4413      	add	r3, r2
 80236d6:	9321      	str	r3, [sp, #132]	; 0x84
 80236d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80236da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80236dc:	441a      	add	r2, r3
 80236de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80236e0:	9222      	str	r2, [sp, #136]	; 0x88
 80236e2:	3b01      	subs	r3, #1
 80236e4:	3702      	adds	r7, #2
 80236e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80236e8:	e689      	b.n	80233fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80236ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80236ec:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80236ee:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80236f0:	4433      	add	r3, r6
 80236f2:	9321      	str	r3, [sp, #132]	; 0x84
 80236f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80236f6:	441c      	add	r4, r3
 80236f8:	9b08      	ldr	r3, [sp, #32]
 80236fa:	9422      	str	r4, [sp, #136]	; 0x88
 80236fc:	3b01      	subs	r3, #1
 80236fe:	9308      	str	r3, [sp, #32]
 8023700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023702:	3302      	adds	r3, #2
 8023704:	9309      	str	r3, [sp, #36]	; 0x24
 8023706:	e658      	b.n	80233ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8023708:	d028      	beq.n	802375c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802370a:	9b08      	ldr	r3, [sp, #32]
 802370c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802370e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8023710:	3b01      	subs	r3, #1
 8023712:	fb00 5003 	mla	r0, r0, r3, r5
 8023716:	1400      	asrs	r0, r0, #16
 8023718:	f53f ae6c 	bmi.w	80233f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802371c:	3901      	subs	r1, #1
 802371e:	4288      	cmp	r0, r1
 8023720:	f6bf ae68 	bge.w	80233f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023724:	9924      	ldr	r1, [sp, #144]	; 0x90
 8023726:	9822      	ldr	r0, [sp, #136]	; 0x88
 8023728:	fb01 0303 	mla	r3, r1, r3, r0
 802372c:	141b      	asrs	r3, r3, #16
 802372e:	f53f ae61 	bmi.w	80233f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023732:	3a01      	subs	r2, #1
 8023734:	4293      	cmp	r3, r2
 8023736:	f6bf ae5d 	bge.w	80233f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802373a:	9b08      	ldr	r3, [sp, #32]
 802373c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8023740:	9313      	str	r3, [sp, #76]	; 0x4c
 8023742:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8023746:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023748:	2b00      	cmp	r3, #0
 802374a:	f300 8082 	bgt.w	8023852 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 802374e:	9b08      	ldr	r3, [sp, #32]
 8023750:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023756:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802375a:	9309      	str	r3, [sp, #36]	; 0x24
 802375c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802375e:	2b00      	cmp	r3, #0
 8023760:	f340 81ef 	ble.w	8023b42 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8023764:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023768:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802376c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023770:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023772:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023776:	ee31 1a05 	vadd.f32	s2, s2, s10
 802377a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802377e:	eef0 6a62 	vmov.f32	s13, s5
 8023782:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023786:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802378a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802378e:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8023792:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023796:	eef0 6a43 	vmov.f32	s13, s6
 802379a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802379e:	ee12 2a90 	vmov	r2, s5
 80237a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80237a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80237aa:	ee13 2a10 	vmov	r2, s6
 80237ae:	9323      	str	r3, [sp, #140]	; 0x8c
 80237b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80237b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80237b6:	9324      	str	r3, [sp, #144]	; 0x90
 80237b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80237ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80237bc:	3b01      	subs	r3, #1
 80237be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80237c2:	9311      	str	r3, [sp, #68]	; 0x44
 80237c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80237c6:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 80237ca:	bf08      	it	eq
 80237cc:	4613      	moveq	r3, r2
 80237ce:	9308      	str	r3, [sp, #32]
 80237d0:	eeb0 3a67 	vmov.f32	s6, s15
 80237d4:	eef0 2a47 	vmov.f32	s5, s14
 80237d8:	e5e1      	b.n	802339e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80237da:	fb08 f505 	mul.w	r5, r8, r5
 80237de:	fb09 5303 	mla	r3, r9, r3, r5
 80237e2:	e661      	b.n	80234a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 80237e4:	4681      	mov	r9, r0
 80237e6:	e688      	b.n	80234fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80237e8:	f1c1 0210 	rsb	r2, r1, #16
 80237ec:	4341      	muls	r1, r0
 80237ee:	fb09 1902 	mla	r9, r9, r2, r1
 80237f2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80237f6:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80237fa:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80237fe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023802:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8023806:	ea42 0909 	orr.w	r9, r2, r9
 802380a:	fa1f f289 	uxth.w	r2, r9
 802380e:	e71b      	b.n	8023648 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8023810:	803a      	strh	r2, [r7, #0]
 8023812:	e75d      	b.n	80236d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8023814:	f115 0e01 	adds.w	lr, r5, #1
 8023818:	f53f af5a 	bmi.w	80236d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802381c:	4572      	cmp	r2, lr
 802381e:	f6ff af57 	blt.w	80236d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8023822:	f110 0e01 	adds.w	lr, r0, #1
 8023826:	f53f af53 	bmi.w	80236d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802382a:	4573      	cmp	r3, lr
 802382c:	f6ff af50 	blt.w	80236d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8023830:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023832:	9502      	str	r5, [sp, #8]
 8023834:	b21b      	sxth	r3, r3
 8023836:	b212      	sxth	r2, r2
 8023838:	e9cd 0103 	strd	r0, r1, [sp, #12]
 802383c:	9301      	str	r3, [sp, #4]
 802383e:	9200      	str	r2, [sp, #0]
 8023840:	e9cd c405 	strd	ip, r4, [sp, #20]
 8023844:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8023848:	4639      	mov	r1, r7
 802384a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802384c:	f7ff fc04 	bl	8023058 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8023850:	e73e      	b.n	80236d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8023852:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023854:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023858:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802385a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802385e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023860:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023864:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8023866:	141f      	asrs	r7, r3, #16
 8023868:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802386a:	141b      	asrs	r3, r3, #16
 802386c:	fb01 3707 	mla	r7, r1, r7, r3
 8023870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023872:	fa1f fc82 	uxth.w	ip, r2
 8023876:	eb03 0a07 	add.w	sl, r3, r7
 802387a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802387e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8023882:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8023886:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802388a:	b29b      	uxth	r3, r3
 802388c:	2d00      	cmp	r5, #0
 802388e:	f000 813d 	beq.w	8023b0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8023892:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8023896:	940f      	str	r4, [sp, #60]	; 0x3c
 8023898:	eb0a 0b01 	add.w	fp, sl, r1
 802389c:	fa1f fa85 	uxth.w	sl, r5
 80238a0:	fb0a fc0c 	mul.w	ip, sl, ip
 80238a4:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80238a8:	fa1f fa8a 	uxth.w	sl, sl
 80238ac:	eba0 000c 	sub.w	r0, r0, ip
 80238b0:	eba3 030a 	sub.w	r3, r3, sl
 80238b4:	b280      	uxth	r0, r0
 80238b6:	fb08 f000 	mul.w	r0, r8, r0
 80238ba:	b29b      	uxth	r3, r3
 80238bc:	fb09 0303 	mla	r3, r9, r3, r0
 80238c0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80238c2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80238c6:	9410      	str	r4, [sp, #64]	; 0x40
 80238c8:	fb0a 3300 	mla	r3, sl, r0, r3
 80238cc:	fb0c 3304 	mla	r3, ip, r4, r3
 80238d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80238d4:	2b00      	cmp	r3, #0
 80238d6:	f000 810b 	beq.w	8023af0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 80238da:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80238dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80238de:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80238e2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80238e6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80238ea:	f000 8114 	beq.w	8023b16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 80238ee:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80238f2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80238f6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80238fa:	fb09 f707 	mul.w	r7, r9, r7
 80238fe:	fb0a fc0c 	mul.w	ip, sl, ip
 8023902:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8023906:	f107 0b20 	add.w	fp, r7, #32
 802390a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802390e:	44cc      	add	ip, r9
 8023910:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8023914:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023918:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802391c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8023920:	ea4c 0909 	orr.w	r9, ip, r9
 8023924:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023928:	8847      	ldrh	r7, [r0, #2]
 802392a:	d019      	beq.n	8023960 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 802392c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8023930:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8023934:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023938:	fb08 f807 	mul.w	r8, r8, r7
 802393c:	fb0a fc0c 	mul.w	ip, sl, ip
 8023940:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8023944:	f108 0b20 	add.w	fp, r8, #32
 8023948:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802394c:	44bc      	add	ip, r7
 802394e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8023952:	0a3f      	lsrs	r7, r7, #8
 8023954:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8023958:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802395c:	ea4c 0707 	orr.w	r7, ip, r7
 8023960:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8023964:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8023968:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802396c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8023970:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023974:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023978:	ea4c 0909 	orr.w	r9, ip, r9
 802397c:	ea4a 0707 	orr.w	r7, sl, r7
 8023980:	2d00      	cmp	r5, #0
 8023982:	f000 80ca 	beq.w	8023b1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8023986:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802398a:	3901      	subs	r1, #1
 802398c:	0049      	lsls	r1, r1, #1
 802398e:	3102      	adds	r1, #2
 8023990:	eb00 0c01 	add.w	ip, r0, r1
 8023994:	5a41      	ldrh	r1, [r0, r1]
 8023996:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023998:	28ff      	cmp	r0, #255	; 0xff
 802399a:	d019      	beq.n	80239d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 802399c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802399e:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80239a2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80239a6:	fb04 fa01 	mul.w	sl, r4, r1
 80239aa:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80239ae:	fb08 f800 	mul.w	r8, r8, r0
 80239b2:	f10a 0020 	add.w	r0, sl, #32
 80239b6:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80239ba:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80239be:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80239c2:	4441      	add	r1, r8
 80239c4:	0a00      	lsrs	r0, r0, #8
 80239c6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80239ca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80239ce:	4301      	orrs	r1, r0
 80239d0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80239d2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80239d6:	2cff      	cmp	r4, #255	; 0xff
 80239d8:	d01a      	beq.n	8023a10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 80239da:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80239de:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80239e2:	fb04 fa00 	mul.w	sl, r4, r0
 80239e6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80239ea:	fb08 f80c 	mul.w	r8, r8, ip
 80239ee:	f10a 0c20 	add.w	ip, sl, #32
 80239f2:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80239f6:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80239fa:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80239fe:	4440      	add	r0, r8
 8023a00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023a04:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8023a08:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8023a0c:	ea40 000c 	orr.w	r0, r0, ip
 8023a10:	fb15 fc02 	smulbb	ip, r5, r2
 8023a14:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8023a18:	f1c5 0810 	rsb	r8, r5, #16
 8023a1c:	eba8 0802 	sub.w	r8, r8, r2
 8023a20:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8023a24:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8023a28:	437a      	muls	r2, r7
 8023a2a:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8023a2e:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8023a32:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023a36:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023a3a:	fb09 2208 	mla	r2, r9, r8, r2
 8023a3e:	ea4a 0101 	orr.w	r1, sl, r1
 8023a42:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8023a46:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023a4a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023a4e:	fb05 2201 	mla	r2, r5, r1, r2
 8023a52:	ea4b 0000 	orr.w	r0, fp, r0
 8023a56:	fb0c 2200 	mla	r2, ip, r0, r2
 8023a5a:	0d57      	lsrs	r7, r2, #21
 8023a5c:	0952      	lsrs	r2, r2, #5
 8023a5e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023a62:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023a66:	433a      	orrs	r2, r7
 8023a68:	2bff      	cmp	r3, #255	; 0xff
 8023a6a:	b292      	uxth	r2, r2
 8023a6c:	d102      	bne.n	8023a74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8023a6e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8023a70:	29ff      	cmp	r1, #255	; 0xff
 8023a72:	d063      	beq.n	8023b3c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 8023a74:	980a      	ldr	r0, [sp, #40]	; 0x28
 8023a76:	f8be 1000 	ldrh.w	r1, [lr]
 8023a7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023a7c:	4343      	muls	r3, r0
 8023a7e:	1c58      	adds	r0, r3, #1
 8023a80:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8023a84:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8023a88:	1208      	asrs	r0, r1, #8
 8023a8a:	b2db      	uxtb	r3, r3
 8023a8c:	1215      	asrs	r5, r2, #8
 8023a8e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023a92:	fb10 f003 	smulbb	r0, r0, r3
 8023a96:	10cf      	asrs	r7, r1, #3
 8023a98:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023a9c:	00c9      	lsls	r1, r1, #3
 8023a9e:	fb05 0504 	mla	r5, r5, r4, r0
 8023aa2:	b2c9      	uxtb	r1, r1
 8023aa4:	10d0      	asrs	r0, r2, #3
 8023aa6:	00d2      	lsls	r2, r2, #3
 8023aa8:	fb11 f103 	smulbb	r1, r1, r3
 8023aac:	b2d2      	uxtb	r2, r2
 8023aae:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8023ab2:	fb02 1204 	mla	r2, r2, r4, r1
 8023ab6:	fb17 f703 	smulbb	r7, r7, r3
 8023aba:	b2ad      	uxth	r5, r5
 8023abc:	b292      	uxth	r2, r2
 8023abe:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023ac2:	fb00 7004 	mla	r0, r0, r4, r7
 8023ac6:	1c6b      	adds	r3, r5, #1
 8023ac8:	1c57      	adds	r7, r2, #1
 8023aca:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023ace:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8023ad2:	b280      	uxth	r0, r0
 8023ad4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023ad8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023adc:	433d      	orrs	r5, r7
 8023ade:	1c47      	adds	r7, r0, #1
 8023ae0:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8023ae4:	097f      	lsrs	r7, r7, #5
 8023ae6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023aea:	433d      	orrs	r5, r7
 8023aec:	f8ae 5000 	strh.w	r5, [lr]
 8023af0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023af2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8023af4:	4413      	add	r3, r2
 8023af6:	9321      	str	r3, [sp, #132]	; 0x84
 8023af8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8023afa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023afc:	441a      	add	r2, r3
 8023afe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023b00:	9222      	str	r2, [sp, #136]	; 0x88
 8023b02:	3b01      	subs	r3, #1
 8023b04:	f10e 0e02 	add.w	lr, lr, #2
 8023b08:	9313      	str	r3, [sp, #76]	; 0x4c
 8023b0a:	e61c      	b.n	8023746 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8023b0c:	fb08 f000 	mul.w	r0, r8, r0
 8023b10:	fb09 0303 	mla	r3, r9, r3, r0
 8023b14:	e6dc      	b.n	80238d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 8023b16:	46b9      	mov	r9, r7
 8023b18:	e704      	b.n	8023924 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 8023b1a:	f1c2 0110 	rsb	r1, r2, #16
 8023b1e:	437a      	muls	r2, r7
 8023b20:	fb09 2901 	mla	r9, r9, r1, r2
 8023b24:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8023b28:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8023b2c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8023b30:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023b34:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023b38:	4302      	orrs	r2, r0
 8023b3a:	e795      	b.n	8023a68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8023b3c:	f8ae 2000 	strh.w	r2, [lr]
 8023b40:	e7d6      	b.n	8023af0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 8023b42:	b017      	add	sp, #92	; 0x5c
 8023b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023b48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8023b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b4c:	b085      	sub	sp, #20
 8023b4e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8023b52:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8023b56:	9103      	str	r1, [sp, #12]
 8023b58:	fb00 7406 	mla	r4, r0, r6, r7
 8023b5c:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8023b60:	2800      	cmp	r0, #0
 8023b62:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8023b66:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8023b6a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8023b6e:	9501      	str	r5, [sp, #4]
 8023b70:	eb02 0904 	add.w	r9, r2, r4
 8023b74:	f2c0 8141 	blt.w	8023dfa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8023b78:	4583      	cmp	fp, r0
 8023b7a:	f340 813e 	ble.w	8023dfa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8023b7e:	2f00      	cmp	r7, #0
 8023b80:	f2c0 8137 	blt.w	8023df2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8023b84:	42be      	cmp	r6, r7
 8023b86:	f340 8134 	ble.w	8023df2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8023b8a:	f812 c004 	ldrb.w	ip, [r2, r4]
 8023b8e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8023b92:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8023b96:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8023b9a:	4355      	muls	r5, r2
 8023b9c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023ba0:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8023ba4:	fb0c f203 	mul.w	r2, ip, r3
 8023ba8:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8023bac:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8023bb0:	441d      	add	r5, r3
 8023bb2:	f102 0320 	add.w	r3, r2, #32
 8023bb6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023bba:	0a1b      	lsrs	r3, r3, #8
 8023bbc:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8023bc0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023bc4:	431c      	orrs	r4, r3
 8023bc6:	1c7b      	adds	r3, r7, #1
 8023bc8:	f100 811c 	bmi.w	8023e04 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8023bcc:	429e      	cmp	r6, r3
 8023bce:	f340 8119 	ble.w	8023e04 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8023bd2:	2900      	cmp	r1, #0
 8023bd4:	f000 8119 	beq.w	8023e0a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8023bd8:	9a01      	ldr	r2, [sp, #4]
 8023bda:	f899 3001 	ldrb.w	r3, [r9, #1]
 8023bde:	8855      	ldrh	r5, [r2, #2]
 8023be0:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8023be4:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8023be8:	fb08 f802 	mul.w	r8, r8, r2
 8023bec:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023bf0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8023bf4:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8023bf8:	435d      	muls	r5, r3
 8023bfa:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023bfe:	44d0      	add	r8, sl
 8023c00:	f105 0a20 	add.w	sl, r5, #32
 8023c04:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8023c08:	0a2d      	lsrs	r5, r5, #8
 8023c0a:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8023c0e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023c12:	432a      	orrs	r2, r5
 8023c14:	3001      	adds	r0, #1
 8023c16:	f100 80fe 	bmi.w	8023e16 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8023c1a:	4583      	cmp	fp, r0
 8023c1c:	f340 80fb 	ble.w	8023e16 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8023c20:	f1be 0f00 	cmp.w	lr, #0
 8023c24:	f000 80fc 	beq.w	8023e20 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8023c28:	2f00      	cmp	r7, #0
 8023c2a:	f2c0 80f1 	blt.w	8023e10 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8023c2e:	42be      	cmp	r6, r7
 8023c30:	f340 80ee 	ble.w	8023e10 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8023c34:	9801      	ldr	r0, [sp, #4]
 8023c36:	f819 5006 	ldrb.w	r5, [r9, r6]
 8023c3a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8023c3e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8023c42:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8023c46:	fb0a fa00 	mul.w	sl, sl, r0
 8023c4a:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8023c4e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8023c52:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8023c56:	fb05 f808 	mul.w	r8, r5, r8
 8023c5a:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8023c5e:	4482      	add	sl, r0
 8023c60:	f108 0020 	add.w	r0, r8, #32
 8023c64:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8023c68:	0a00      	lsrs	r0, r0, #8
 8023c6a:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8023c6e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023c72:	ea4b 0b00 	orr.w	fp, fp, r0
 8023c76:	3701      	adds	r7, #1
 8023c78:	f100 80d7 	bmi.w	8023e2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8023c7c:	42be      	cmp	r6, r7
 8023c7e:	f340 80d4 	ble.w	8023e2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8023c82:	2900      	cmp	r1, #0
 8023c84:	f000 80d4 	beq.w	8023e30 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8023c88:	3601      	adds	r6, #1
 8023c8a:	9801      	ldr	r0, [sp, #4]
 8023c8c:	f819 7006 	ldrb.w	r7, [r9, r6]
 8023c90:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8023c94:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8023c98:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8023c9c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023ca0:	fb09 f906 	mul.w	r9, r9, r6
 8023ca4:	fb07 f800 	mul.w	r8, r7, r0
 8023ca8:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8023cac:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8023cb0:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8023cb4:	44d1      	add	r9, sl
 8023cb6:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8023cba:	f108 0020 	add.w	r0, r8, #32
 8023cbe:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8023cc2:	0a00      	lsrs	r0, r0, #8
 8023cc4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023cc8:	4330      	orrs	r0, r6
 8023cca:	b28e      	uxth	r6, r1
 8023ccc:	fa1f f98e 	uxth.w	r9, lr
 8023cd0:	fb06 f809 	mul.w	r8, r6, r9
 8023cd4:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8023cd8:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8023cdc:	0136      	lsls	r6, r6, #4
 8023cde:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023ce2:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8023ce6:	9601      	str	r6, [sp, #4]
 8023ce8:	ea4a 0404 	orr.w	r4, sl, r4
 8023cec:	fa1f f689 	uxth.w	r6, r9
 8023cf0:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8023cf4:	fb11 f90e 	smulbb	r9, r1, lr
 8023cf8:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8023cfc:	9602      	str	r6, [sp, #8]
 8023cfe:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023d02:	4626      	mov	r6, r4
 8023d04:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023d08:	f1ce 0410 	rsb	r4, lr, #16
 8023d0c:	1a64      	subs	r4, r4, r1
 8023d0e:	ea4a 0202 	orr.w	r2, sl, r2
 8023d12:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8023d16:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8023d1a:	434a      	muls	r2, r1
 8023d1c:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8023d20:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023d24:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023d28:	fb04 2406 	mla	r4, r4, r6, r2
 8023d2c:	ea4a 0000 	orr.w	r0, sl, r0
 8023d30:	fb09 4200 	mla	r2, r9, r0, r4
 8023d34:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8023d38:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8023d3c:	9801      	ldr	r0, [sp, #4]
 8023d3e:	9903      	ldr	r1, [sp, #12]
 8023d40:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8023d44:	ea44 0b0b 	orr.w	fp, r4, fp
 8023d48:	9c02      	ldr	r4, [sp, #8]
 8023d4a:	8809      	ldrh	r1, [r1, #0]
 8023d4c:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8023d50:	1b00      	subs	r0, r0, r4
 8023d52:	9c01      	ldr	r4, [sp, #4]
 8023d54:	eba4 0608 	sub.w	r6, r4, r8
 8023d58:	b2b6      	uxth	r6, r6
 8023d5a:	b280      	uxth	r0, r0
 8023d5c:	4373      	muls	r3, r6
 8023d5e:	fb0c 3300 	mla	r3, ip, r0, r3
 8023d62:	9802      	ldr	r0, [sp, #8]
 8023d64:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8023d68:	fb00 3505 	mla	r5, r0, r5, r3
 8023d6c:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8023d70:	fb08 5707 	mla	r7, r8, r7, r5
 8023d74:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8023d78:	120b      	asrs	r3, r1, #8
 8023d7a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8023d7e:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8023d82:	b2ff      	uxtb	r7, r7
 8023d84:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023d88:	10c8      	asrs	r0, r1, #3
 8023d8a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023d8e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8023d92:	00c9      	lsls	r1, r1, #3
 8023d94:	437b      	muls	r3, r7
 8023d96:	ea42 0e0e 	orr.w	lr, r2, lr
 8023d9a:	b2c9      	uxtb	r1, r1
 8023d9c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023da0:	fa1f f28e 	uxth.w	r2, lr
 8023da4:	4378      	muls	r0, r7
 8023da6:	434f      	muls	r7, r1
 8023da8:	1c59      	adds	r1, r3, #1
 8023daa:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023dae:	1213      	asrs	r3, r2, #8
 8023db0:	f023 0307 	bic.w	r3, r3, #7
 8023db4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023db8:	1c41      	adds	r1, r0, #1
 8023dba:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8023dbe:	10d1      	asrs	r1, r2, #3
 8023dc0:	f021 0103 	bic.w	r1, r1, #3
 8023dc4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8023dc8:	021b      	lsls	r3, r3, #8
 8023dca:	00c9      	lsls	r1, r1, #3
 8023dcc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023dd0:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8023dd4:	430b      	orrs	r3, r1
 8023dd6:	1c79      	adds	r1, r7, #1
 8023dd8:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8023ddc:	00d2      	lsls	r2, r2, #3
 8023dde:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8023de2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023de6:	431a      	orrs	r2, r3
 8023de8:	9b03      	ldr	r3, [sp, #12]
 8023dea:	801a      	strh	r2, [r3, #0]
 8023dec:	b005      	add	sp, #20
 8023dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023df2:	f04f 0c00 	mov.w	ip, #0
 8023df6:	4664      	mov	r4, ip
 8023df8:	e6e5      	b.n	8023bc6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 8023dfa:	2300      	movs	r3, #0
 8023dfc:	469c      	mov	ip, r3
 8023dfe:	461a      	mov	r2, r3
 8023e00:	461c      	mov	r4, r3
 8023e02:	e707      	b.n	8023c14 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8023e04:	2300      	movs	r3, #0
 8023e06:	461a      	mov	r2, r3
 8023e08:	e704      	b.n	8023c14 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8023e0a:	460b      	mov	r3, r1
 8023e0c:	460a      	mov	r2, r1
 8023e0e:	e701      	b.n	8023c14 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8023e10:	2500      	movs	r5, #0
 8023e12:	46ab      	mov	fp, r5
 8023e14:	e72f      	b.n	8023c76 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8023e16:	2700      	movs	r7, #0
 8023e18:	463d      	mov	r5, r7
 8023e1a:	4638      	mov	r0, r7
 8023e1c:	46bb      	mov	fp, r7
 8023e1e:	e754      	b.n	8023cca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8023e20:	4677      	mov	r7, lr
 8023e22:	4675      	mov	r5, lr
 8023e24:	4670      	mov	r0, lr
 8023e26:	46f3      	mov	fp, lr
 8023e28:	e74f      	b.n	8023cca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8023e2a:	2700      	movs	r7, #0
 8023e2c:	4638      	mov	r0, r7
 8023e2e:	e74c      	b.n	8023cca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8023e30:	460f      	mov	r7, r1
 8023e32:	4608      	mov	r0, r1
 8023e34:	e749      	b.n	8023cca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08023e38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e3c:	b093      	sub	sp, #76	; 0x4c
 8023e3e:	9210      	str	r2, [sp, #64]	; 0x40
 8023e40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8023e42:	910e      	str	r1, [sp, #56]	; 0x38
 8023e44:	9306      	str	r3, [sp, #24]
 8023e46:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8023e4a:	9011      	str	r0, [sp, #68]	; 0x44
 8023e4c:	6850      	ldr	r0, [r2, #4]
 8023e4e:	6812      	ldr	r2, [r2, #0]
 8023e50:	fb00 1303 	mla	r3, r0, r3, r1
 8023e54:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023e58:	9307      	str	r3, [sp, #28]
 8023e5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e5c:	681b      	ldr	r3, [r3, #0]
 8023e5e:	9308      	str	r3, [sp, #32]
 8023e60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e62:	685b      	ldr	r3, [r3, #4]
 8023e64:	9309      	str	r3, [sp, #36]	; 0x24
 8023e66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023e68:	2b00      	cmp	r3, #0
 8023e6a:	dc03      	bgt.n	8023e74 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8023e6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023e6e:	2b00      	cmp	r3, #0
 8023e70:	f340 83b4 	ble.w	80245dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8023e74:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e76:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023e7a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023e7e:	1e48      	subs	r0, r1, #1
 8023e80:	1e55      	subs	r5, r2, #1
 8023e82:	9b06      	ldr	r3, [sp, #24]
 8023e84:	2b00      	cmp	r3, #0
 8023e86:	f340 8163 	ble.w	8024150 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8023e8a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8023e8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023e8e:	1436      	asrs	r6, r6, #16
 8023e90:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023e94:	d406      	bmi.n	8023ea4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023e96:	4286      	cmp	r6, r0
 8023e98:	da04      	bge.n	8023ea4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023e9a:	2b00      	cmp	r3, #0
 8023e9c:	db02      	blt.n	8023ea4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023e9e:	42ab      	cmp	r3, r5
 8023ea0:	f2c0 8157 	blt.w	8024152 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023ea4:	3601      	adds	r6, #1
 8023ea6:	f100 8144 	bmi.w	8024132 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8023eaa:	42b1      	cmp	r1, r6
 8023eac:	f2c0 8141 	blt.w	8024132 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8023eb0:	3301      	adds	r3, #1
 8023eb2:	f100 813e 	bmi.w	8024132 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8023eb6:	429a      	cmp	r2, r3
 8023eb8:	f2c0 813b 	blt.w	8024132 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8023ebc:	9b06      	ldr	r3, [sp, #24]
 8023ebe:	9f07      	ldr	r7, [sp, #28]
 8023ec0:	930f      	str	r3, [sp, #60]	; 0x3c
 8023ec2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8023ec6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023ec8:	2b00      	cmp	r3, #0
 8023eca:	f340 8164 	ble.w	8024196 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8023ece:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023ed0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8023ed2:	1418      	asrs	r0, r3, #16
 8023ed4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023ed6:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8023eda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023edc:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8023ee0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023ee2:	142d      	asrs	r5, r5, #16
 8023ee4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8023ee8:	f100 81ee 	bmi.w	80242c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8023eec:	f102 3eff 	add.w	lr, r2, #4294967295
 8023ef0:	4575      	cmp	r5, lr
 8023ef2:	f280 81e9 	bge.w	80242c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8023ef6:	2800      	cmp	r0, #0
 8023ef8:	f2c0 81e6 	blt.w	80242c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8023efc:	f103 3eff 	add.w	lr, r3, #4294967295
 8023f00:	4570      	cmp	r0, lr
 8023f02:	f280 81e1 	bge.w	80242c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8023f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f08:	b212      	sxth	r2, r2
 8023f0a:	fb00 5002 	mla	r0, r0, r2, r5
 8023f0e:	fa1f fe81 	uxth.w	lr, r1
 8023f12:	eb03 0a00 	add.w	sl, r3, r0
 8023f16:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8023f1a:	f813 9000 	ldrb.w	r9, [r3, r0]
 8023f1e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8023f22:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8023f26:	b29b      	uxth	r3, r3
 8023f28:	f1bc 0f00 	cmp.w	ip, #0
 8023f2c:	f000 8179 	beq.w	8024222 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8023f30:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8023f34:	940a      	str	r4, [sp, #40]	; 0x28
 8023f36:	eb0a 0b02 	add.w	fp, sl, r2
 8023f3a:	fa1f fa8c 	uxth.w	sl, ip
 8023f3e:	fb0a fe0e 	mul.w	lr, sl, lr
 8023f42:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8023f46:	fa1f fa8a 	uxth.w	sl, sl
 8023f4a:	eba5 050e 	sub.w	r5, r5, lr
 8023f4e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8023f52:	940b      	str	r4, [sp, #44]	; 0x2c
 8023f54:	eba3 030a 	sub.w	r3, r3, sl
 8023f58:	b2ad      	uxth	r5, r5
 8023f5a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023f5c:	b29b      	uxth	r3, r3
 8023f5e:	fb08 f505 	mul.w	r5, r8, r5
 8023f62:	fb09 5303 	mla	r3, r9, r3, r5
 8023f66:	fb0a 3304 	mla	r3, sl, r4, r3
 8023f6a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023f6c:	fb0e 3304 	mla	r3, lr, r4, r3
 8023f70:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023f74:	2b00      	cmp	r3, #0
 8023f76:	f000 80cf 	beq.w	8024118 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8023f7a:	9c08      	ldr	r4, [sp, #32]
 8023f7c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023f80:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8023f84:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8023f88:	f000 8150 	beq.w	802422c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8023f8c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8023f90:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8023f94:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023f98:	fb09 f000 	mul.w	r0, r9, r0
 8023f9c:	fb0a fe0e 	mul.w	lr, sl, lr
 8023fa0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8023fa4:	f100 0b20 	add.w	fp, r0, #32
 8023fa8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8023fac:	44ce      	add	lr, r9
 8023fae:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8023fb2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023fb6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8023fba:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8023fbe:	ea4e 0909 	orr.w	r9, lr, r9
 8023fc2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023fc6:	8868      	ldrh	r0, [r5, #2]
 8023fc8:	d019      	beq.n	8023ffe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8023fca:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8023fce:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8023fd2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023fd6:	fb08 f800 	mul.w	r8, r8, r0
 8023fda:	fb0a fe0e 	mul.w	lr, sl, lr
 8023fde:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8023fe2:	f108 0b20 	add.w	fp, r8, #32
 8023fe6:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8023fea:	4486      	add	lr, r0
 8023fec:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8023ff0:	0a00      	lsrs	r0, r0, #8
 8023ff2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8023ff6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023ffa:	ea4e 0000 	orr.w	r0, lr, r0
 8023ffe:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8024002:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8024006:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802400a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802400e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024012:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024016:	ea4e 0909 	orr.w	r9, lr, r9
 802401a:	ea4a 0000 	orr.w	r0, sl, r0
 802401e:	f1bc 0f00 	cmp.w	ip, #0
 8024022:	f000 8105 	beq.w	8024230 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8024026:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802402a:	3a01      	subs	r2, #1
 802402c:	0052      	lsls	r2, r2, #1
 802402e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024030:	3202      	adds	r2, #2
 8024032:	2cff      	cmp	r4, #255	; 0xff
 8024034:	eb05 0e02 	add.w	lr, r5, r2
 8024038:	5aaa      	ldrh	r2, [r5, r2]
 802403a:	d018      	beq.n	802406e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802403c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8024040:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024044:	fb04 fa02 	mul.w	sl, r4, r2
 8024048:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802404c:	fb08 f805 	mul.w	r8, r8, r5
 8024050:	f10a 0520 	add.w	r5, sl, #32
 8024054:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8024058:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 802405c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024060:	4442      	add	r2, r8
 8024062:	0a2d      	lsrs	r5, r5, #8
 8024064:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8024068:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802406c:	432a      	orrs	r2, r5
 802406e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024070:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8024074:	2cff      	cmp	r4, #255	; 0xff
 8024076:	d01a      	beq.n	80240ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8024078:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 802407c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024080:	fb04 fa05 	mul.w	sl, r4, r5
 8024084:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024088:	fb08 f80e 	mul.w	r8, r8, lr
 802408c:	f10a 0e20 	add.w	lr, sl, #32
 8024090:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8024094:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8024098:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802409c:	4445      	add	r5, r8
 802409e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80240a2:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80240a6:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80240aa:	ea45 050e 	orr.w	r5, r5, lr
 80240ae:	fb1c fe01 	smulbb	lr, ip, r1
 80240b2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80240b6:	f1cc 0810 	rsb	r8, ip, #16
 80240ba:	eba8 0801 	sub.w	r8, r8, r1
 80240be:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80240c2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80240c6:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80240ca:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80240ce:	4341      	muls	r1, r0
 80240d0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80240d4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80240d8:	ea4a 0202 	orr.w	r2, sl, r2
 80240dc:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80240e0:	fb09 1108 	mla	r1, r9, r8, r1
 80240e4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80240e8:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80240ec:	fb0c 1102 	mla	r1, ip, r2, r1
 80240f0:	ea4b 0505 	orr.w	r5, fp, r5
 80240f4:	fb0e 1e05 	mla	lr, lr, r5, r1
 80240f8:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80240fc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024100:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024104:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024108:	ea42 0e0e 	orr.w	lr, r2, lr
 802410c:	fa1f f28e 	uxth.w	r2, lr
 8024110:	2bff      	cmp	r3, #255	; 0xff
 8024112:	f040 80a1 	bne.w	8024258 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8024116:	803a      	strh	r2, [r7, #0]
 8024118:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802411a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802411c:	4413      	add	r3, r2
 802411e:	931d      	str	r3, [sp, #116]	; 0x74
 8024120:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8024122:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024124:	441a      	add	r2, r3
 8024126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024128:	921e      	str	r2, [sp, #120]	; 0x78
 802412a:	3b01      	subs	r3, #1
 802412c:	3702      	adds	r7, #2
 802412e:	930f      	str	r3, [sp, #60]	; 0x3c
 8024130:	e6c9      	b.n	8023ec6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024132:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8024134:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8024136:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8024138:	4433      	add	r3, r6
 802413a:	931d      	str	r3, [sp, #116]	; 0x74
 802413c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802413e:	441c      	add	r4, r3
 8024140:	9b06      	ldr	r3, [sp, #24]
 8024142:	941e      	str	r4, [sp, #120]	; 0x78
 8024144:	3b01      	subs	r3, #1
 8024146:	9306      	str	r3, [sp, #24]
 8024148:	9b07      	ldr	r3, [sp, #28]
 802414a:	3302      	adds	r3, #2
 802414c:	9307      	str	r3, [sp, #28]
 802414e:	e698      	b.n	8023e82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8024150:	d028      	beq.n	80241a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8024152:	9b06      	ldr	r3, [sp, #24]
 8024154:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8024156:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8024158:	3b01      	subs	r3, #1
 802415a:	fb00 5003 	mla	r0, r0, r3, r5
 802415e:	1400      	asrs	r0, r0, #16
 8024160:	f53f aeac 	bmi.w	8023ebc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8024164:	3901      	subs	r1, #1
 8024166:	4288      	cmp	r0, r1
 8024168:	f6bf aea8 	bge.w	8023ebc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802416c:	9920      	ldr	r1, [sp, #128]	; 0x80
 802416e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8024170:	fb01 0303 	mla	r3, r1, r3, r0
 8024174:	141b      	asrs	r3, r3, #16
 8024176:	f53f aea1 	bmi.w	8023ebc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802417a:	3a01      	subs	r2, #1
 802417c:	4293      	cmp	r3, r2
 802417e:	f6bf ae9d 	bge.w	8023ebc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8024182:	9b06      	ldr	r3, [sp, #24]
 8024184:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8024188:	930f      	str	r3, [sp, #60]	; 0x3c
 802418a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802418e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024190:	2b00      	cmp	r3, #0
 8024192:	f300 80b6 	bgt.w	8024302 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 8024196:	9b06      	ldr	r3, [sp, #24]
 8024198:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802419c:	9b07      	ldr	r3, [sp, #28]
 802419e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80241a2:	9307      	str	r3, [sp, #28]
 80241a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80241a6:	2b00      	cmp	r3, #0
 80241a8:	f340 8218 	ble.w	80245dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 80241ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 80241b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80241b4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80241b8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80241ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80241be:	ee31 1a05 	vadd.f32	s2, s2, s10
 80241c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80241c6:	eef0 6a62 	vmov.f32	s13, s5
 80241ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 80241ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80241d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80241d6:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80241da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80241de:	eef0 6a43 	vmov.f32	s13, s6
 80241e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80241e6:	ee12 2a90 	vmov	r2, s5
 80241ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80241ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80241f2:	ee13 2a10 	vmov	r2, s6
 80241f6:	931f      	str	r3, [sp, #124]	; 0x7c
 80241f8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80241fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80241fe:	9320      	str	r3, [sp, #128]	; 0x80
 8024200:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024202:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024204:	3b01      	subs	r3, #1
 8024206:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802420a:	930e      	str	r3, [sp, #56]	; 0x38
 802420c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802420e:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8024212:	bf08      	it	eq
 8024214:	4613      	moveq	r3, r2
 8024216:	9306      	str	r3, [sp, #24]
 8024218:	eeb0 3a67 	vmov.f32	s6, s15
 802421c:	eef0 2a47 	vmov.f32	s5, s14
 8024220:	e621      	b.n	8023e66 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8024222:	fb08 f505 	mul.w	r5, r8, r5
 8024226:	fb09 5303 	mla	r3, r9, r3, r5
 802422a:	e6a1      	b.n	8023f70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 802422c:	4681      	mov	r9, r0
 802422e:	e6c8      	b.n	8023fc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8024230:	f1c1 0210 	rsb	r2, r1, #16
 8024234:	4341      	muls	r1, r0
 8024236:	fb09 1902 	mla	r9, r9, r2, r1
 802423a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802423e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8024242:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8024246:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802424a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802424e:	ea42 0909 	orr.w	r9, r2, r9
 8024252:	fa1f f289 	uxth.w	r2, r9
 8024256:	e75b      	b.n	8024110 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8024258:	f8b7 c000 	ldrh.w	ip, [r7]
 802425c:	43db      	mvns	r3, r3
 802425e:	ea4f 202c 	mov.w	r0, ip, asr #8
 8024262:	fa5f fe83 	uxtb.w	lr, r3
 8024266:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802426a:	fb00 f00e 	mul.w	r0, r0, lr
 802426e:	1c41      	adds	r1, r0, #1
 8024270:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8024274:	1211      	asrs	r1, r2, #8
 8024276:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802427a:	f021 0107 	bic.w	r1, r1, #7
 802427e:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8024282:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8024286:	48d7      	ldr	r0, [pc, #860]	; (80245e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8024288:	fb05 f50e 	mul.w	r5, r5, lr
 802428c:	b2c9      	uxtb	r1, r1
 802428e:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8024292:	1c69      	adds	r1, r5, #1
 8024294:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8024298:	10d1      	asrs	r1, r2, #3
 802429a:	f021 0103 	bic.w	r1, r1, #3
 802429e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80242a2:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80242a6:	b2db      	uxtb	r3, r3
 80242a8:	00c9      	lsls	r1, r1, #3
 80242aa:	fb03 f30e 	mul.w	r3, r3, lr
 80242ae:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80242b2:	4301      	orrs	r1, r0
 80242b4:	1c58      	adds	r0, r3, #1
 80242b6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80242ba:	00d2      	lsls	r2, r2, #3
 80242bc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80242c0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80242c4:	430a      	orrs	r2, r1
 80242c6:	e726      	b.n	8024116 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 80242c8:	f115 0e01 	adds.w	lr, r5, #1
 80242cc:	f53f af24 	bmi.w	8024118 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80242d0:	4572      	cmp	r2, lr
 80242d2:	f6ff af21 	blt.w	8024118 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80242d6:	f110 0e01 	adds.w	lr, r0, #1
 80242da:	f53f af1d 	bmi.w	8024118 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80242de:	4573      	cmp	r3, lr
 80242e0:	f6ff af1a 	blt.w	8024118 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80242e4:	b21b      	sxth	r3, r3
 80242e6:	b212      	sxth	r2, r2
 80242e8:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80242ec:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80242f0:	9301      	str	r3, [sp, #4]
 80242f2:	9200      	str	r2, [sp, #0]
 80242f4:	4639      	mov	r1, r7
 80242f6:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80242fa:	9811      	ldr	r0, [sp, #68]	; 0x44
 80242fc:	f7ff fc24 	bl	8023b48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8024300:	e70a      	b.n	8024118 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8024302:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8024304:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024308:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802430a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802430e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024310:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024314:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024316:	141f      	asrs	r7, r3, #16
 8024318:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802431a:	141b      	asrs	r3, r3, #16
 802431c:	fb01 3707 	mla	r7, r1, r7, r3
 8024320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024322:	fa1f fc82 	uxth.w	ip, r2
 8024326:	eb03 0a07 	add.w	sl, r3, r7
 802432a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802432e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8024332:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8024336:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802433a:	b29b      	uxth	r3, r3
 802433c:	2d00      	cmp	r5, #0
 802433e:	f000 80fe 	beq.w	802453e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8024342:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8024346:	940c      	str	r4, [sp, #48]	; 0x30
 8024348:	eb0a 0b01 	add.w	fp, sl, r1
 802434c:	fa1f fa85 	uxth.w	sl, r5
 8024350:	fb0a fc0c 	mul.w	ip, sl, ip
 8024354:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8024358:	fa1f fa8a 	uxth.w	sl, sl
 802435c:	eba0 000c 	sub.w	r0, r0, ip
 8024360:	eba3 030a 	sub.w	r3, r3, sl
 8024364:	b280      	uxth	r0, r0
 8024366:	fb08 f000 	mul.w	r0, r8, r0
 802436a:	b29b      	uxth	r3, r3
 802436c:	fb09 0303 	mla	r3, r9, r3, r0
 8024370:	980c      	ldr	r0, [sp, #48]	; 0x30
 8024372:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8024376:	940d      	str	r4, [sp, #52]	; 0x34
 8024378:	fb0a 3300 	mla	r3, sl, r0, r3
 802437c:	fb0c 3304 	mla	r3, ip, r4, r3
 8024380:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024384:	2b00      	cmp	r3, #0
 8024386:	f000 80cc 	beq.w	8024522 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 802438a:	9808      	ldr	r0, [sp, #32]
 802438c:	9c08      	ldr	r4, [sp, #32]
 802438e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024392:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8024396:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802439a:	f000 80d5 	beq.w	8024548 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 802439e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80243a2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80243a6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80243aa:	fb09 f707 	mul.w	r7, r9, r7
 80243ae:	fb0a fc0c 	mul.w	ip, sl, ip
 80243b2:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80243b6:	f107 0b20 	add.w	fp, r7, #32
 80243ba:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80243be:	44cc      	add	ip, r9
 80243c0:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80243c4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80243c8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80243cc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80243d0:	ea4c 0909 	orr.w	r9, ip, r9
 80243d4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80243d8:	8847      	ldrh	r7, [r0, #2]
 80243da:	d019      	beq.n	8024410 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 80243dc:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80243e0:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80243e4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80243e8:	fb08 f807 	mul.w	r8, r8, r7
 80243ec:	fb0a fc0c 	mul.w	ip, sl, ip
 80243f0:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80243f4:	f108 0b20 	add.w	fp, r8, #32
 80243f8:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80243fc:	44bc      	add	ip, r7
 80243fe:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8024402:	0a3f      	lsrs	r7, r7, #8
 8024404:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8024408:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802440c:	ea4c 0707 	orr.w	r7, ip, r7
 8024410:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8024414:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8024418:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802441c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8024420:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024424:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8024428:	ea4c 0909 	orr.w	r9, ip, r9
 802442c:	ea4a 0707 	orr.w	r7, sl, r7
 8024430:	2d00      	cmp	r5, #0
 8024432:	f000 808b 	beq.w	802454c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8024436:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802443a:	3901      	subs	r1, #1
 802443c:	0049      	lsls	r1, r1, #1
 802443e:	3102      	adds	r1, #2
 8024440:	eb00 0c01 	add.w	ip, r0, r1
 8024444:	5a41      	ldrh	r1, [r0, r1]
 8024446:	980c      	ldr	r0, [sp, #48]	; 0x30
 8024448:	28ff      	cmp	r0, #255	; 0xff
 802444a:	d019      	beq.n	8024480 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 802444c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802444e:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8024452:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024456:	fb04 fa01 	mul.w	sl, r4, r1
 802445a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802445e:	fb08 f800 	mul.w	r8, r8, r0
 8024462:	f10a 0020 	add.w	r0, sl, #32
 8024466:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802446a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802446e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024472:	4441      	add	r1, r8
 8024474:	0a00      	lsrs	r0, r0, #8
 8024476:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802447a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802447e:	4301      	orrs	r1, r0
 8024480:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024482:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8024486:	2cff      	cmp	r4, #255	; 0xff
 8024488:	d01a      	beq.n	80244c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 802448a:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 802448e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024492:	fb04 fa00 	mul.w	sl, r4, r0
 8024496:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802449a:	fb08 f80c 	mul.w	r8, r8, ip
 802449e:	f10a 0c20 	add.w	ip, sl, #32
 80244a2:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80244a6:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80244aa:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80244ae:	4440      	add	r0, r8
 80244b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80244b4:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80244b8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80244bc:	ea40 000c 	orr.w	r0, r0, ip
 80244c0:	fb15 fc02 	smulbb	ip, r5, r2
 80244c4:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80244c8:	f1c5 0810 	rsb	r8, r5, #16
 80244cc:	eba8 0802 	sub.w	r8, r8, r2
 80244d0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80244d4:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80244d8:	437a      	muls	r2, r7
 80244da:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80244de:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80244e2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80244e6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80244ea:	fb09 2208 	mla	r2, r9, r8, r2
 80244ee:	ea4a 0101 	orr.w	r1, sl, r1
 80244f2:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80244f6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80244fa:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80244fe:	fb05 2201 	mla	r2, r5, r1, r2
 8024502:	ea4b 0000 	orr.w	r0, fp, r0
 8024506:	fb0c 2200 	mla	r2, ip, r0, r2
 802450a:	0d57      	lsrs	r7, r2, #21
 802450c:	0952      	lsrs	r2, r2, #5
 802450e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8024512:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024516:	433a      	orrs	r2, r7
 8024518:	2bff      	cmp	r3, #255	; 0xff
 802451a:	b292      	uxth	r2, r2
 802451c:	d127      	bne.n	802456e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 802451e:	f8ae 2000 	strh.w	r2, [lr]
 8024522:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8024524:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8024526:	4413      	add	r3, r2
 8024528:	931d      	str	r3, [sp, #116]	; 0x74
 802452a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 802452c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802452e:	441a      	add	r2, r3
 8024530:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024532:	921e      	str	r2, [sp, #120]	; 0x78
 8024534:	3b01      	subs	r3, #1
 8024536:	f10e 0e02 	add.w	lr, lr, #2
 802453a:	930f      	str	r3, [sp, #60]	; 0x3c
 802453c:	e627      	b.n	802418e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802453e:	fb08 f000 	mul.w	r0, r8, r0
 8024542:	fb09 0303 	mla	r3, r9, r3, r0
 8024546:	e71b      	b.n	8024380 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 8024548:	46b9      	mov	r9, r7
 802454a:	e743      	b.n	80243d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 802454c:	f1c2 0110 	rsb	r1, r2, #16
 8024550:	437a      	muls	r2, r7
 8024552:	fb09 2901 	mla	r9, r9, r1, r2
 8024556:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802455a:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802455e:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8024562:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024566:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802456a:	4302      	orrs	r2, r0
 802456c:	e7d4      	b.n	8024518 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 802456e:	f8be 7000 	ldrh.w	r7, [lr]
 8024572:	4c1c      	ldr	r4, [pc, #112]	; (80245e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8024574:	43db      	mvns	r3, r3
 8024576:	1238      	asrs	r0, r7, #8
 8024578:	fa5f fc83 	uxtb.w	ip, r3
 802457c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024580:	10fd      	asrs	r5, r7, #3
 8024582:	fb00 f00c 	mul.w	r0, r0, ip
 8024586:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802458a:	fb05 f10c 	mul.w	r1, r5, ip
 802458e:	1c45      	adds	r5, r0, #1
 8024590:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024594:	1215      	asrs	r5, r2, #8
 8024596:	f025 0507 	bic.w	r5, r5, #7
 802459a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802459e:	1c4d      	adds	r5, r1, #1
 80245a0:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80245a4:	10d1      	asrs	r1, r2, #3
 80245a6:	f021 0103 	bic.w	r1, r1, #3
 80245aa:	00fb      	lsls	r3, r7, #3
 80245ac:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80245b0:	b2db      	uxtb	r3, r3
 80245b2:	b2c0      	uxtb	r0, r0
 80245b4:	00c9      	lsls	r1, r1, #3
 80245b6:	fb03 f30c 	mul.w	r3, r3, ip
 80245ba:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80245be:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 80245c2:	4308      	orrs	r0, r1
 80245c4:	1c59      	adds	r1, r3, #1
 80245c6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80245ca:	00d2      	lsls	r2, r2, #3
 80245cc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80245d0:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80245d4:	4318      	orrs	r0, r3
 80245d6:	f8ae 0000 	strh.w	r0, [lr]
 80245da:	e7a2      	b.n	8024522 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 80245dc:	b013      	add	sp, #76	; 0x4c
 80245de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80245e2:	bf00      	nop
 80245e4:	fffff800 	.word	0xfffff800

080245e8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 80245e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80245ec:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 80245f0:	fb05 4c03 	mla	ip, r5, r3, r4
 80245f4:	2d00      	cmp	r5, #0
 80245f6:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 80245fa:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80245fe:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8024602:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8024606:	8808      	ldrh	r0, [r1, #0]
 8024608:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 802460c:	f2c0 80a7 	blt.w	802475e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8024610:	45aa      	cmp	sl, r5
 8024612:	f340 80a4 	ble.w	802475e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8024616:	2c00      	cmp	r4, #0
 8024618:	f2c0 809f 	blt.w	802475a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 802461c:	42a3      	cmp	r3, r4
 802461e:	f340 809c 	ble.w	802475a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8024622:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8024626:	1c62      	adds	r2, r4, #1
 8024628:	f100 809c 	bmi.w	8024764 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802462c:	4293      	cmp	r3, r2
 802462e:	f340 8099 	ble.w	8024764 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8024632:	f1b9 0f00 	cmp.w	r9, #0
 8024636:	f000 8095 	beq.w	8024764 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802463a:	f8be c002 	ldrh.w	ip, [lr, #2]
 802463e:	3501      	adds	r5, #1
 8024640:	f100 8094 	bmi.w	802476c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8024644:	45aa      	cmp	sl, r5
 8024646:	f340 8091 	ble.w	802476c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802464a:	2f00      	cmp	r7, #0
 802464c:	f000 808e 	beq.w	802476c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8024650:	2c00      	cmp	r4, #0
 8024652:	f2c0 8089 	blt.w	8024768 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8024656:	42a3      	cmp	r3, r4
 8024658:	f340 8086 	ble.w	8024768 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 802465c:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8024660:	3401      	adds	r4, #1
 8024662:	f100 8086 	bmi.w	8024772 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8024666:	42a3      	cmp	r3, r4
 8024668:	f340 8083 	ble.w	8024772 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802466c:	f1b9 0f00 	cmp.w	r9, #0
 8024670:	d07f      	beq.n	8024772 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8024672:	3301      	adds	r3, #1
 8024674:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8024678:	ea4f 4408 	mov.w	r4, r8, lsl #16
 802467c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8024680:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8024684:	fb19 fe07 	smulbb	lr, r9, r7
 8024688:	ea44 0808 	orr.w	r8, r4, r8
 802468c:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8024690:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8024694:	f1c7 0210 	rsb	r2, r7, #16
 8024698:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802469c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80246a0:	ea44 0c0c 	orr.w	ip, r4, ip
 80246a4:	eba2 0209 	sub.w	r2, r2, r9
 80246a8:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 80246ac:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 80246b0:	fb04 f40c 	mul.w	r4, r4, ip
 80246b4:	fb02 4808 	mla	r8, r2, r8, r4
 80246b8:	041a      	lsls	r2, r3, #16
 80246ba:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80246be:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80246c2:	4313      	orrs	r3, r2
 80246c4:	042a      	lsls	r2, r5, #16
 80246c6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80246ca:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80246ce:	fb0e 8303 	mla	r3, lr, r3, r8
 80246d2:	432a      	orrs	r2, r5
 80246d4:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 80246d8:	fb07 3202 	mla	r2, r7, r2, r3
 80246dc:	0d53      	lsrs	r3, r2, #21
 80246de:	0952      	lsrs	r2, r2, #5
 80246e0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80246e4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80246e8:	431a      	orrs	r2, r3
 80246ea:	b293      	uxth	r3, r2
 80246ec:	b2b4      	uxth	r4, r6
 80246ee:	1202      	asrs	r2, r0, #8
 80246f0:	43f6      	mvns	r6, r6
 80246f2:	b2f6      	uxtb	r6, r6
 80246f4:	121d      	asrs	r5, r3, #8
 80246f6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80246fa:	fb12 f206 	smulbb	r2, r2, r6
 80246fe:	10c7      	asrs	r7, r0, #3
 8024700:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8024704:	00c0      	lsls	r0, r0, #3
 8024706:	fb05 2504 	mla	r5, r5, r4, r2
 802470a:	b2c0      	uxtb	r0, r0
 802470c:	10da      	asrs	r2, r3, #3
 802470e:	00db      	lsls	r3, r3, #3
 8024710:	b2db      	uxtb	r3, r3
 8024712:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8024716:	fb10 f006 	smulbb	r0, r0, r6
 802471a:	b2ad      	uxth	r5, r5
 802471c:	fb03 0004 	mla	r0, r3, r4, r0
 8024720:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024724:	fb17 f706 	smulbb	r7, r7, r6
 8024728:	b280      	uxth	r0, r0
 802472a:	1c6b      	adds	r3, r5, #1
 802472c:	fb02 7204 	mla	r2, r2, r4, r7
 8024730:	b292      	uxth	r2, r2
 8024732:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024736:	1c43      	adds	r3, r0, #1
 8024738:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802473c:	1c50      	adds	r0, r2, #1
 802473e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8024742:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8024746:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802474a:	0952      	lsrs	r2, r2, #5
 802474c:	432b      	orrs	r3, r5
 802474e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024752:	4313      	orrs	r3, r2
 8024754:	800b      	strh	r3, [r1, #0]
 8024756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802475a:	4680      	mov	r8, r0
 802475c:	e763      	b.n	8024626 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 802475e:	4684      	mov	ip, r0
 8024760:	4680      	mov	r8, r0
 8024762:	e76c      	b.n	802463e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8024764:	4684      	mov	ip, r0
 8024766:	e76a      	b.n	802463e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8024768:	4605      	mov	r5, r0
 802476a:	e779      	b.n	8024660 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 802476c:	4603      	mov	r3, r0
 802476e:	4605      	mov	r5, r0
 8024770:	e782      	b.n	8024678 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8024772:	4603      	mov	r3, r0
 8024774:	e780      	b.n	8024678 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08024776 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024776:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802477a:	b093      	sub	sp, #76	; 0x4c
 802477c:	461d      	mov	r5, r3
 802477e:	9210      	str	r2, [sp, #64]	; 0x40
 8024780:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024782:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 8024786:	920b      	str	r2, [sp, #44]	; 0x2c
 8024788:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 802478c:	910a      	str	r1, [sp, #40]	; 0x28
 802478e:	6859      	ldr	r1, [r3, #4]
 8024790:	681b      	ldr	r3, [r3, #0]
 8024792:	9011      	str	r0, [sp, #68]	; 0x44
 8024794:	fb01 2707 	mla	r7, r1, r7, r2
 8024798:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 802479c:	9307      	str	r3, [sp, #28]
 802479e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80247a0:	681b      	ldr	r3, [r3, #0]
 80247a2:	9309      	str	r3, [sp, #36]	; 0x24
 80247a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80247a6:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 80247aa:	43db      	mvns	r3, r3
 80247ac:	b2db      	uxtb	r3, r3
 80247ae:	9308      	str	r3, [sp, #32]
 80247b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80247b2:	2b00      	cmp	r3, #0
 80247b4:	dc03      	bgt.n	80247be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80247b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80247b8:	2b00      	cmp	r3, #0
 80247ba:	f340 8203 	ble.w	8024bc4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80247be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80247c0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80247c4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80247c8:	1e48      	subs	r0, r1, #1
 80247ca:	f102 3cff 	add.w	ip, r2, #4294967295
 80247ce:	2d00      	cmp	r5, #0
 80247d0:	f340 80da 	ble.w	8024988 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80247d4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80247d8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80247dc:	d406      	bmi.n	80247ec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80247de:	4586      	cmp	lr, r0
 80247e0:	da04      	bge.n	80247ec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80247e2:	2b00      	cmp	r3, #0
 80247e4:	db02      	blt.n	80247ec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80247e6:	4563      	cmp	r3, ip
 80247e8:	f2c0 80cf 	blt.w	802498a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80247ec:	f11e 0e01 	adds.w	lr, lr, #1
 80247f0:	f100 80c1 	bmi.w	8024976 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80247f4:	4571      	cmp	r1, lr
 80247f6:	f2c0 80be 	blt.w	8024976 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80247fa:	3301      	adds	r3, #1
 80247fc:	f100 80bb 	bmi.w	8024976 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8024800:	429a      	cmp	r2, r3
 8024802:	f2c0 80b8 	blt.w	8024976 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8024806:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802480a:	46a9      	mov	r9, r5
 802480c:	f1b9 0f00 	cmp.w	r9, #0
 8024810:	f340 80d8 	ble.w	80249c4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8024814:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024816:	1421      	asrs	r1, r4, #16
 8024818:	ea4f 4026 	mov.w	r0, r6, asr #16
 802481c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024820:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8024824:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8024828:	f100 8111 	bmi.w	8024a4e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802482c:	f10e 3aff 	add.w	sl, lr, #4294967295
 8024830:	4551      	cmp	r1, sl
 8024832:	f280 810c 	bge.w	8024a4e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8024836:	2800      	cmp	r0, #0
 8024838:	f2c0 8109 	blt.w	8024a4e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802483c:	f103 3aff 	add.w	sl, r3, #4294967295
 8024840:	4550      	cmp	r0, sl
 8024842:	f280 8104 	bge.w	8024a4e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8024846:	fa0f f38e 	sxth.w	r3, lr
 802484a:	fb00 1103 	mla	r1, r0, r3, r1
 802484e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024850:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8024854:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8024858:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 802485c:	f1bc 0f00 	cmp.w	ip, #0
 8024860:	d007      	beq.n	8024872 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8024862:	005b      	lsls	r3, r3, #1
 8024864:	eb0a 0003 	add.w	r0, sl, r3
 8024868:	f83a 3003 	ldrh.w	r3, [sl, r3]
 802486c:	930c      	str	r3, [sp, #48]	; 0x30
 802486e:	8843      	ldrh	r3, [r0, #2]
 8024870:	930d      	str	r3, [sp, #52]	; 0x34
 8024872:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8024876:	fb12 f30c 	smulbb	r3, r2, ip
 802487a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802487e:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8024882:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024886:	10db      	asrs	r3, r3, #3
 8024888:	ea40 000e 	orr.w	r0, r0, lr
 802488c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024890:	f1cc 0e10 	rsb	lr, ip, #16
 8024894:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024898:	ebae 0e02 	sub.w	lr, lr, r2
 802489c:	ea4a 0101 	orr.w	r1, sl, r1
 80248a0:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80248a4:	4351      	muls	r1, r2
 80248a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80248a8:	9f08      	ldr	r7, [sp, #32]
 80248aa:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80248ae:	fb0e 1e00 	mla	lr, lr, r0, r1
 80248b2:	0410      	lsls	r0, r2, #16
 80248b4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80248b8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80248bc:	4310      	orrs	r0, r2
 80248be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80248c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80248c2:	0412      	lsls	r2, r2, #16
 80248c4:	fb03 e000 	mla	r0, r3, r0, lr
 80248c8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80248cc:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80248d0:	ea42 020e 	orr.w	r2, r2, lr
 80248d4:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80248d8:	fb03 0302 	mla	r3, r3, r2, r0
 80248dc:	0d5a      	lsrs	r2, r3, #21
 80248de:	095b      	lsrs	r3, r3, #5
 80248e0:	f8b8 0000 	ldrh.w	r0, [r8]
 80248e4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80248e8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80248ec:	4313      	orrs	r3, r2
 80248ee:	b29b      	uxth	r3, r3
 80248f0:	1201      	asrs	r1, r0, #8
 80248f2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80248f6:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80248fa:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80248fe:	fb11 f107 	smulbb	r1, r1, r7
 8024902:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8024906:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802490a:	00c0      	lsls	r0, r0, #3
 802490c:	fb0c 1c02 	mla	ip, ip, r2, r1
 8024910:	b2c0      	uxtb	r0, r0
 8024912:	10d9      	asrs	r1, r3, #3
 8024914:	00db      	lsls	r3, r3, #3
 8024916:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802491a:	b2db      	uxtb	r3, r3
 802491c:	fb10 f007 	smulbb	r0, r0, r7
 8024920:	fa1f fc8c 	uxth.w	ip, ip
 8024924:	fb03 0302 	mla	r3, r3, r2, r0
 8024928:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802492c:	fb1e fe07 	smulbb	lr, lr, r7
 8024930:	fb01 e102 	mla	r1, r1, r2, lr
 8024934:	b29a      	uxth	r2, r3
 8024936:	f10c 0301 	add.w	r3, ip, #1
 802493a:	b289      	uxth	r1, r1
 802493c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024940:	1c53      	adds	r3, r2, #1
 8024942:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024946:	1c4a      	adds	r2, r1, #1
 8024948:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802494c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8024950:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024954:	0949      	lsrs	r1, r1, #5
 8024956:	ea43 030c 	orr.w	r3, r3, ip
 802495a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802495e:	430b      	orrs	r3, r1
 8024960:	f8a8 3000 	strh.w	r3, [r8]
 8024964:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024966:	441c      	add	r4, r3
 8024968:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802496a:	f108 0802 	add.w	r8, r8, #2
 802496e:	441e      	add	r6, r3
 8024970:	f109 39ff 	add.w	r9, r9, #4294967295
 8024974:	e74a      	b.n	802480c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024976:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024978:	441c      	add	r4, r3
 802497a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802497c:	441e      	add	r6, r3
 802497e:	9b07      	ldr	r3, [sp, #28]
 8024980:	3302      	adds	r3, #2
 8024982:	3d01      	subs	r5, #1
 8024984:	9307      	str	r3, [sp, #28]
 8024986:	e722      	b.n	80247ce <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024988:	d022      	beq.n	80249d0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802498a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802498c:	1e6b      	subs	r3, r5, #1
 802498e:	fb00 4003 	mla	r0, r0, r3, r4
 8024992:	1400      	asrs	r0, r0, #16
 8024994:	f53f af37 	bmi.w	8024806 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024998:	3901      	subs	r1, #1
 802499a:	4288      	cmp	r0, r1
 802499c:	f6bf af33 	bge.w	8024806 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80249a0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80249a2:	fb01 6303 	mla	r3, r1, r3, r6
 80249a6:	141b      	asrs	r3, r3, #16
 80249a8:	f53f af2d 	bmi.w	8024806 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80249ac:	3a01      	subs	r2, #1
 80249ae:	4293      	cmp	r3, r2
 80249b0:	f6bf af29 	bge.w	8024806 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80249b4:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80249b8:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 80249bc:	46a8      	mov	r8, r5
 80249be:	f1b8 0f00 	cmp.w	r8, #0
 80249c2:	dc5e      	bgt.n	8024a82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80249c4:	9b07      	ldr	r3, [sp, #28]
 80249c6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80249ca:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80249ce:	9307      	str	r3, [sp, #28]
 80249d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80249d2:	2b00      	cmp	r3, #0
 80249d4:	f340 80f6 	ble.w	8024bc4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80249d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80249dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80249e0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80249e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80249e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80249ea:	ee31 1a05 	vadd.f32	s2, s2, s10
 80249ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80249f2:	eef0 6a62 	vmov.f32	s13, s5
 80249f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80249fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80249fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024a02:	ee16 4a90 	vmov	r4, s13
 8024a06:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024a0a:	eef0 6a43 	vmov.f32	s13, s6
 8024a0e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024a12:	ee12 2a90 	vmov	r2, s5
 8024a16:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024a1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a1e:	ee13 2a10 	vmov	r2, s6
 8024a22:	931f      	str	r3, [sp, #124]	; 0x7c
 8024a24:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024a26:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a2a:	9320      	str	r3, [sp, #128]	; 0x80
 8024a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024a30:	3b01      	subs	r3, #1
 8024a32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024a36:	930a      	str	r3, [sp, #40]	; 0x28
 8024a38:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024a3a:	ee16 6a90 	vmov	r6, s13
 8024a3e:	bf14      	ite	ne
 8024a40:	461d      	movne	r5, r3
 8024a42:	4615      	moveq	r5, r2
 8024a44:	eeb0 3a67 	vmov.f32	s6, s15
 8024a48:	eef0 2a47 	vmov.f32	s5, s14
 8024a4c:	e6b0      	b.n	80247b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8024a4e:	f111 0a01 	adds.w	sl, r1, #1
 8024a52:	d487      	bmi.n	8024964 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8024a54:	45d6      	cmp	lr, sl
 8024a56:	db85      	blt.n	8024964 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8024a58:	f110 0a01 	adds.w	sl, r0, #1
 8024a5c:	d482      	bmi.n	8024964 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8024a5e:	4553      	cmp	r3, sl
 8024a60:	db80      	blt.n	8024964 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8024a62:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8024a64:	9101      	str	r1, [sp, #4]
 8024a66:	b21b      	sxth	r3, r3
 8024a68:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8024a6c:	9300      	str	r3, [sp, #0]
 8024a6e:	e9cd c704 	strd	ip, r7, [sp, #16]
 8024a72:	fa0f f38e 	sxth.w	r3, lr
 8024a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024a78:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024a7a:	4641      	mov	r1, r8
 8024a7c:	f7ff fdb4 	bl	80245e8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8024a80:	e770      	b.n	8024964 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8024a82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024a84:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024a86:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024a8a:	1430      	asrs	r0, r6, #16
 8024a8c:	1423      	asrs	r3, r4, #16
 8024a8e:	fb01 3000 	mla	r0, r1, r0, r3
 8024a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024a94:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8024a98:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8024a9c:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8024aa0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024aa4:	8858      	ldrh	r0, [r3, #2]
 8024aa6:	f1be 0f00 	cmp.w	lr, #0
 8024aaa:	d00b      	beq.n	8024ac4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8024aac:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8024ab0:	3901      	subs	r1, #1
 8024ab2:	0049      	lsls	r1, r1, #1
 8024ab4:	3102      	adds	r1, #2
 8024ab6:	eb03 0b01 	add.w	fp, r3, r1
 8024aba:	5a5b      	ldrh	r3, [r3, r1]
 8024abc:	930e      	str	r3, [sp, #56]	; 0x38
 8024abe:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8024ac2:	930f      	str	r3, [sp, #60]	; 0x3c
 8024ac4:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8024ac8:	fb12 f30e 	smulbb	r3, r2, lr
 8024acc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024ad0:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8024ad4:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8024ad8:	10db      	asrs	r3, r3, #3
 8024ada:	ea41 010c 	orr.w	r1, r1, ip
 8024ade:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024ae2:	f1ce 0c10 	rsb	ip, lr, #16
 8024ae6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024aea:	ebac 0c02 	sub.w	ip, ip, r2
 8024aee:	ea4b 0000 	orr.w	r0, fp, r0
 8024af2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8024af6:	4350      	muls	r0, r2
 8024af8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024afa:	9f08      	ldr	r7, [sp, #32]
 8024afc:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8024b00:	fb0c 0c01 	mla	ip, ip, r1, r0
 8024b04:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8024b08:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8024b0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024b0e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8024b10:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024b14:	0412      	lsls	r2, r2, #16
 8024b16:	ea4b 0101 	orr.w	r1, fp, r1
 8024b1a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024b1e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024b22:	fb03 c101 	mla	r1, r3, r1, ip
 8024b26:	4302      	orrs	r2, r0
 8024b28:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8024b2c:	fb03 1202 	mla	r2, r3, r2, r1
 8024b30:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8024b34:	0952      	lsrs	r2, r2, #5
 8024b36:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8024b3a:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8024b3e:	f8b9 2000 	ldrh.w	r2, [r9]
 8024b42:	ea4b 0303 	orr.w	r3, fp, r3
 8024b46:	b29b      	uxth	r3, r3
 8024b48:	1211      	asrs	r1, r2, #8
 8024b4a:	1218      	asrs	r0, r3, #8
 8024b4c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024b50:	fb11 f107 	smulbb	r1, r1, r7
 8024b54:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8024b58:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024b5c:	00d2      	lsls	r2, r2, #3
 8024b5e:	fb00 100a 	mla	r0, r0, sl, r1
 8024b62:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8024b66:	10d9      	asrs	r1, r3, #3
 8024b68:	b2d2      	uxtb	r2, r2
 8024b6a:	00db      	lsls	r3, r3, #3
 8024b6c:	fb1c fc07 	smulbb	ip, ip, r7
 8024b70:	fb12 f207 	smulbb	r2, r2, r7
 8024b74:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024b78:	b2db      	uxtb	r3, r3
 8024b7a:	b280      	uxth	r0, r0
 8024b7c:	fb01 c10a 	mla	r1, r1, sl, ip
 8024b80:	fb03 230a 	mla	r3, r3, sl, r2
 8024b84:	b29b      	uxth	r3, r3
 8024b86:	b289      	uxth	r1, r1
 8024b88:	1c42      	adds	r2, r0, #1
 8024b8a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024b8e:	f101 0c01 	add.w	ip, r1, #1
 8024b92:	1c5a      	adds	r2, r3, #1
 8024b94:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024b98:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8024b9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024b9e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8024ba2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024ba6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024baa:	4310      	orrs	r0, r2
 8024bac:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8024bb0:	441c      	add	r4, r3
 8024bb2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024bb4:	ea40 000c 	orr.w	r0, r0, ip
 8024bb8:	f829 0b02 	strh.w	r0, [r9], #2
 8024bbc:	441e      	add	r6, r3
 8024bbe:	f108 38ff 	add.w	r8, r8, #4294967295
 8024bc2:	e6fc      	b.n	80249be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8024bc4:	b013      	add	sp, #76	; 0x4c
 8024bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024bca <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8024bca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024bce:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8024bd2:	fb0e 4703 	mla	r7, lr, r3, r4
 8024bd6:	f1be 0f00 	cmp.w	lr, #0
 8024bda:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8024bde:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8024be2:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8024be6:	8808      	ldrh	r0, [r1, #0]
 8024be8:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8024bec:	db60      	blt.n	8024cb0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8024bee:	45f1      	cmp	r9, lr
 8024bf0:	dd5e      	ble.n	8024cb0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8024bf2:	2c00      	cmp	r4, #0
 8024bf4:	db5a      	blt.n	8024cac <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8024bf6:	42a3      	cmp	r3, r4
 8024bf8:	dd58      	ble.n	8024cac <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8024bfa:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8024bfe:	1c62      	adds	r2, r4, #1
 8024c00:	d459      	bmi.n	8024cb6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8024c02:	4293      	cmp	r3, r2
 8024c04:	dd57      	ble.n	8024cb6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8024c06:	2d00      	cmp	r5, #0
 8024c08:	d055      	beq.n	8024cb6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8024c0a:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8024c0e:	f11e 0e01 	adds.w	lr, lr, #1
 8024c12:	d454      	bmi.n	8024cbe <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8024c14:	45f1      	cmp	r9, lr
 8024c16:	dd52      	ble.n	8024cbe <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8024c18:	2e00      	cmp	r6, #0
 8024c1a:	d050      	beq.n	8024cbe <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8024c1c:	2c00      	cmp	r4, #0
 8024c1e:	db4c      	blt.n	8024cba <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8024c20:	42a3      	cmp	r3, r4
 8024c22:	dd4a      	ble.n	8024cba <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8024c24:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8024c28:	3401      	adds	r4, #1
 8024c2a:	d405      	bmi.n	8024c38 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8024c2c:	42a3      	cmp	r3, r4
 8024c2e:	dd03      	ble.n	8024c38 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8024c30:	b115      	cbz	r5, 8024c38 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8024c32:	3301      	adds	r3, #1
 8024c34:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8024c38:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8024c3c:	fb15 f406 	smulbb	r4, r5, r6
 8024c40:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024c44:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8024c48:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024c4c:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8024c50:	ea43 0c0c 	orr.w	ip, r3, ip
 8024c54:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8024c58:	f1c6 0310 	rsb	r3, r6, #16
 8024c5c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8024c60:	1b5b      	subs	r3, r3, r5
 8024c62:	ea4e 0707 	orr.w	r7, lr, r7
 8024c66:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8024c6a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8024c6e:	437d      	muls	r5, r7
 8024c70:	fb03 5c0c 	mla	ip, r3, ip, r5
 8024c74:	0403      	lsls	r3, r0, #16
 8024c76:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024c7a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024c7e:	4318      	orrs	r0, r3
 8024c80:	0413      	lsls	r3, r2, #16
 8024c82:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024c86:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024c8a:	4313      	orrs	r3, r2
 8024c8c:	fb04 c000 	mla	r0, r4, r0, ip
 8024c90:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8024c94:	fb06 0003 	mla	r0, r6, r3, r0
 8024c98:	0d43      	lsrs	r3, r0, #21
 8024c9a:	0940      	lsrs	r0, r0, #5
 8024c9c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024ca0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024ca4:	4318      	orrs	r0, r3
 8024ca6:	8008      	strh	r0, [r1, #0]
 8024ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024cac:	4684      	mov	ip, r0
 8024cae:	e7a6      	b.n	8024bfe <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8024cb0:	4607      	mov	r7, r0
 8024cb2:	4684      	mov	ip, r0
 8024cb4:	e7ab      	b.n	8024c0e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8024cb6:	4607      	mov	r7, r0
 8024cb8:	e7a9      	b.n	8024c0e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8024cba:	4602      	mov	r2, r0
 8024cbc:	e7b4      	b.n	8024c28 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8024cbe:	4602      	mov	r2, r0
 8024cc0:	e7ba      	b.n	8024c38 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08024cc2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024cc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024cc6:	b08f      	sub	sp, #60	; 0x3c
 8024cc8:	461d      	mov	r5, r3
 8024cca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8024ccc:	920c      	str	r2, [sp, #48]	; 0x30
 8024cce:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 8024cd2:	9107      	str	r1, [sp, #28]
 8024cd4:	6859      	ldr	r1, [r3, #4]
 8024cd6:	681b      	ldr	r3, [r3, #0]
 8024cd8:	900d      	str	r0, [sp, #52]	; 0x34
 8024cda:	fb01 2707 	mla	r7, r1, r7, r2
 8024cde:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8024ce2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024ce4:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8024ce8:	f8d3 8000 	ldr.w	r8, [r3]
 8024cec:	9b07      	ldr	r3, [sp, #28]
 8024cee:	2b00      	cmp	r3, #0
 8024cf0:	dc03      	bgt.n	8024cfa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8024cf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024cf4:	2b00      	cmp	r3, #0
 8024cf6:	f340 8181 	ble.w	8024ffc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8024cfa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024cfc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024d00:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024d04:	1e48      	subs	r0, r1, #1
 8024d06:	f102 3cff 	add.w	ip, r2, #4294967295
 8024d0a:	2d00      	cmp	r5, #0
 8024d0c:	f340 809b 	ble.w	8024e46 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8024d10:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024d14:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024d18:	d406      	bmi.n	8024d28 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8024d1a:	4586      	cmp	lr, r0
 8024d1c:	da04      	bge.n	8024d28 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8024d1e:	2b00      	cmp	r3, #0
 8024d20:	db02      	blt.n	8024d28 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8024d22:	4563      	cmp	r3, ip
 8024d24:	f2c0 8090 	blt.w	8024e48 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024d28:	f11e 0e01 	adds.w	lr, lr, #1
 8024d2c:	f100 8084 	bmi.w	8024e38 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8024d30:	4571      	cmp	r1, lr
 8024d32:	f2c0 8081 	blt.w	8024e38 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8024d36:	3301      	adds	r3, #1
 8024d38:	d47e      	bmi.n	8024e38 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8024d3a:	429a      	cmp	r2, r3
 8024d3c:	db7c      	blt.n	8024e38 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8024d3e:	46aa      	mov	sl, r5
 8024d40:	46b9      	mov	r9, r7
 8024d42:	f1ba 0f00 	cmp.w	sl, #0
 8024d46:	f340 8099 	ble.w	8024e7c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024d4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024d4c:	1421      	asrs	r1, r4, #16
 8024d4e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8024d52:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024d56:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8024d5a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8024d5e:	f100 80d0 	bmi.w	8024f02 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8024d62:	f10e 3bff 	add.w	fp, lr, #4294967295
 8024d66:	4559      	cmp	r1, fp
 8024d68:	f280 80cb 	bge.w	8024f02 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8024d6c:	2800      	cmp	r0, #0
 8024d6e:	f2c0 80c8 	blt.w	8024f02 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8024d72:	f103 3bff 	add.w	fp, r3, #4294967295
 8024d76:	4558      	cmp	r0, fp
 8024d78:	f280 80c3 	bge.w	8024f02 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8024d7c:	fa0f fe8e 	sxth.w	lr, lr
 8024d80:	fb00 110e 	mla	r1, r0, lr, r1
 8024d84:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8024d88:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8024d8c:	8841      	ldrh	r1, [r0, #2]
 8024d8e:	f1bc 0f00 	cmp.w	ip, #0
 8024d92:	d00b      	beq.n	8024dac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8024d94:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8024d98:	3b01      	subs	r3, #1
 8024d9a:	005b      	lsls	r3, r3, #1
 8024d9c:	3302      	adds	r3, #2
 8024d9e:	eb00 0e03 	add.w	lr, r0, r3
 8024da2:	5ac3      	ldrh	r3, [r0, r3]
 8024da4:	9308      	str	r3, [sp, #32]
 8024da6:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8024daa:	9309      	str	r3, [sp, #36]	; 0x24
 8024dac:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8024db0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024db4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8024db8:	ea40 000b 	orr.w	r0, r0, fp
 8024dbc:	fb12 f30c 	smulbb	r3, r2, ip
 8024dc0:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8024dc4:	10db      	asrs	r3, r3, #3
 8024dc6:	f1cc 0e10 	rsb	lr, ip, #16
 8024dca:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024dce:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024dd2:	ebae 0e02 	sub.w	lr, lr, r2
 8024dd6:	ea4b 0101 	orr.w	r1, fp, r1
 8024dda:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8024dde:	4351      	muls	r1, r2
 8024de0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024de2:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8024de6:	fb0e 1e00 	mla	lr, lr, r0, r1
 8024dea:	0410      	lsls	r0, r2, #16
 8024dec:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024df0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024df4:	4310      	orrs	r0, r2
 8024df6:	9a08      	ldr	r2, [sp, #32]
 8024df8:	9908      	ldr	r1, [sp, #32]
 8024dfa:	0412      	lsls	r2, r2, #16
 8024dfc:	fb03 e000 	mla	r0, r3, r0, lr
 8024e00:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024e04:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8024e08:	ea42 020e 	orr.w	r2, r2, lr
 8024e0c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8024e10:	fb03 0302 	mla	r3, r3, r2, r0
 8024e14:	0d5a      	lsrs	r2, r3, #21
 8024e16:	095b      	lsrs	r3, r3, #5
 8024e18:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024e1c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024e20:	4313      	orrs	r3, r2
 8024e22:	f8a9 3000 	strh.w	r3, [r9]
 8024e26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024e28:	441c      	add	r4, r3
 8024e2a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024e2c:	f109 0902 	add.w	r9, r9, #2
 8024e30:	441e      	add	r6, r3
 8024e32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024e36:	e784      	b.n	8024d42 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8024e38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024e3a:	441c      	add	r4, r3
 8024e3c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024e3e:	3d01      	subs	r5, #1
 8024e40:	441e      	add	r6, r3
 8024e42:	3702      	adds	r7, #2
 8024e44:	e761      	b.n	8024d0a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8024e46:	d01d      	beq.n	8024e84 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8024e48:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8024e4a:	1e6b      	subs	r3, r5, #1
 8024e4c:	fb00 4003 	mla	r0, r0, r3, r4
 8024e50:	1400      	asrs	r0, r0, #16
 8024e52:	f53f af74 	bmi.w	8024d3e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024e56:	3901      	subs	r1, #1
 8024e58:	4288      	cmp	r0, r1
 8024e5a:	f6bf af70 	bge.w	8024d3e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024e5e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8024e60:	fb01 6303 	mla	r3, r1, r3, r6
 8024e64:	141b      	asrs	r3, r3, #16
 8024e66:	f53f af6a 	bmi.w	8024d3e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024e6a:	3a01      	subs	r2, #1
 8024e6c:	4293      	cmp	r3, r2
 8024e6e:	f6bf af66 	bge.w	8024d3e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024e72:	46a9      	mov	r9, r5
 8024e74:	46ba      	mov	sl, r7
 8024e76:	f1b9 0f00 	cmp.w	r9, #0
 8024e7a:	dc5a      	bgt.n	8024f32 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 8024e7c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8024e80:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8024e84:	9b07      	ldr	r3, [sp, #28]
 8024e86:	2b00      	cmp	r3, #0
 8024e88:	f340 80b8 	ble.w	8024ffc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8024e8c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024e90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024e94:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024e98:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024e9a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024e9e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024ea2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024ea6:	eef0 6a62 	vmov.f32	s13, s5
 8024eaa:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024eae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024eb2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024eb6:	ee16 4a90 	vmov	r4, s13
 8024eba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024ebe:	eef0 6a43 	vmov.f32	s13, s6
 8024ec2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024ec6:	ee12 2a90 	vmov	r2, s5
 8024eca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024ece:	fb92 f3f3 	sdiv	r3, r2, r3
 8024ed2:	ee13 2a10 	vmov	r2, s6
 8024ed6:	931b      	str	r3, [sp, #108]	; 0x6c
 8024ed8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024eda:	fb92 f3f3 	sdiv	r3, r2, r3
 8024ede:	931c      	str	r3, [sp, #112]	; 0x70
 8024ee0:	9b07      	ldr	r3, [sp, #28]
 8024ee2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024ee4:	3b01      	subs	r3, #1
 8024ee6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024eea:	9307      	str	r3, [sp, #28]
 8024eec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024eee:	ee16 6a90 	vmov	r6, s13
 8024ef2:	bf14      	ite	ne
 8024ef4:	461d      	movne	r5, r3
 8024ef6:	4615      	moveq	r5, r2
 8024ef8:	eeb0 3a67 	vmov.f32	s6, s15
 8024efc:	eef0 2a47 	vmov.f32	s5, s14
 8024f00:	e6f4      	b.n	8024cec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8024f02:	f111 0b01 	adds.w	fp, r1, #1
 8024f06:	d48e      	bmi.n	8024e26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8024f08:	45de      	cmp	lr, fp
 8024f0a:	db8c      	blt.n	8024e26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8024f0c:	f110 0b01 	adds.w	fp, r0, #1
 8024f10:	d489      	bmi.n	8024e26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8024f12:	455b      	cmp	r3, fp
 8024f14:	db87      	blt.n	8024e26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8024f16:	b21b      	sxth	r3, r3
 8024f18:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8024f1c:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8024f20:	9300      	str	r3, [sp, #0]
 8024f22:	4642      	mov	r2, r8
 8024f24:	fa0f f38e 	sxth.w	r3, lr
 8024f28:	4649      	mov	r1, r9
 8024f2a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024f2c:	f7ff fe4d 	bl	8024bca <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8024f30:	e779      	b.n	8024e26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8024f32:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024f34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8024f38:	1420      	asrs	r0, r4, #16
 8024f3a:	1431      	asrs	r1, r6, #16
 8024f3c:	fb03 0101 	mla	r1, r3, r1, r0
 8024f40:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8024f44:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8024f48:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8024f4c:	8841      	ldrh	r1, [r0, #2]
 8024f4e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024f52:	f1be 0f00 	cmp.w	lr, #0
 8024f56:	d00b      	beq.n	8024f70 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8024f58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8024f5c:	3b01      	subs	r3, #1
 8024f5e:	005b      	lsls	r3, r3, #1
 8024f60:	3302      	adds	r3, #2
 8024f62:	eb00 0b03 	add.w	fp, r0, r3
 8024f66:	5ac3      	ldrh	r3, [r0, r3]
 8024f68:	930a      	str	r3, [sp, #40]	; 0x28
 8024f6a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8024f6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8024f70:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8024f74:	fb12 f30e 	smulbb	r3, r2, lr
 8024f78:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024f7c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8024f80:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024f84:	10db      	asrs	r3, r3, #3
 8024f86:	ea40 000c 	orr.w	r0, r0, ip
 8024f8a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024f8e:	f1ce 0c10 	rsb	ip, lr, #16
 8024f92:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024f96:	ebac 0c02 	sub.w	ip, ip, r2
 8024f9a:	ea4b 0101 	orr.w	r1, fp, r1
 8024f9e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8024fa2:	4351      	muls	r1, r2
 8024fa4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024fa6:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8024faa:	fb0c 1c00 	mla	ip, ip, r0, r1
 8024fae:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8024fb2:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8024fb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024fb8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8024fba:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024fbe:	0412      	lsls	r2, r2, #16
 8024fc0:	ea4b 0000 	orr.w	r0, fp, r0
 8024fc4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024fc8:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8024fcc:	fb03 c000 	mla	r0, r3, r0, ip
 8024fd0:	ea42 0b0b 	orr.w	fp, r2, fp
 8024fd4:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8024fd8:	fb03 000b 	mla	r0, r3, fp, r0
 8024fdc:	0d43      	lsrs	r3, r0, #21
 8024fde:	0940      	lsrs	r0, r0, #5
 8024fe0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024fe4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024fe8:	4318      	orrs	r0, r3
 8024fea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024fec:	f82a 0b02 	strh.w	r0, [sl], #2
 8024ff0:	441c      	add	r4, r3
 8024ff2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024ff4:	f109 39ff 	add.w	r9, r9, #4294967295
 8024ff8:	441e      	add	r6, r3
 8024ffa:	e73c      	b.n	8024e76 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8024ffc:	b00f      	add	sp, #60	; 0x3c
 8024ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025002 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8025002:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025006:	b085      	sub	sp, #20
 8025008:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 802500c:	9102      	str	r1, [sp, #8]
 802500e:	2c00      	cmp	r4, #0
 8025010:	fb04 7103 	mla	r1, r4, r3, r7
 8025014:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8025018:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802501c:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8025020:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8025024:	f2c0 811b 	blt.w	802525e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8025028:	45a6      	cmp	lr, r4
 802502a:	f340 8118 	ble.w	802525e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 802502e:	2f00      	cmp	r7, #0
 8025030:	f2c0 8113 	blt.w	802525a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8025034:	42bb      	cmp	r3, r7
 8025036:	f340 8110 	ble.w	802525a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 802503a:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 802503e:	1c7a      	adds	r2, r7, #1
 8025040:	f100 8110 	bmi.w	8025264 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8025044:	4293      	cmp	r3, r2
 8025046:	f340 810d 	ble.w	8025264 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 802504a:	2e00      	cmp	r6, #0
 802504c:	f000 810c 	beq.w	8025268 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8025050:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8025054:	3401      	adds	r4, #1
 8025056:	f100 810b 	bmi.w	8025270 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 802505a:	45a6      	cmp	lr, r4
 802505c:	f340 8108 	ble.w	8025270 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8025060:	2800      	cmp	r0, #0
 8025062:	f000 8108 	beq.w	8025276 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8025066:	2f00      	cmp	r7, #0
 8025068:	f2c0 8100 	blt.w	802526c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 802506c:	42bb      	cmp	r3, r7
 802506e:	f340 80fd 	ble.w	802526c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8025072:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8025076:	3701      	adds	r7, #1
 8025078:	f100 8100 	bmi.w	802527c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 802507c:	42bb      	cmp	r3, r7
 802507e:	f340 80fd 	ble.w	802527c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8025082:	2e00      	cmp	r6, #0
 8025084:	f000 80fc 	beq.w	8025280 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8025088:	3301      	adds	r3, #1
 802508a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802508e:	b2b6      	uxth	r6, r6
 8025090:	b280      	uxth	r0, r0
 8025092:	fb00 fe06 	mul.w	lr, r0, r6
 8025096:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802509a:	0136      	lsls	r6, r6, #4
 802509c:	eba6 070e 	sub.w	r7, r6, lr
 80250a0:	b280      	uxth	r0, r0
 80250a2:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80250a6:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80250aa:	b2bf      	uxth	r7, r7
 80250ac:	1a1b      	subs	r3, r3, r0
 80250ae:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80250b2:	b29b      	uxth	r3, r3
 80250b4:	fb0a f607 	mul.w	r6, sl, r7
 80250b8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80250bc:	fb0b 6603 	mla	r6, fp, r3, r6
 80250c0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80250c4:	fb00 6609 	mla	r6, r0, r9, r6
 80250c8:	fb0e 6608 	mla	r6, lr, r8, r6
 80250cc:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80250d0:	9600      	str	r6, [sp, #0]
 80250d2:	2e00      	cmp	r6, #0
 80250d4:	f000 80be 	beq.w	8025254 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 80250d8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80250dc:	fb0b fc0c 	mul.w	ip, fp, ip
 80250e0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80250e4:	fb0b f505 	mul.w	r5, fp, r5
 80250e8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80250ec:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80250f0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80250f4:	44dc      	add	ip, fp
 80250f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80250fa:	9501      	str	r5, [sp, #4]
 80250fc:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8025100:	9503      	str	r5, [sp, #12]
 8025102:	9d01      	ldr	r5, [sp, #4]
 8025104:	9e02      	ldr	r6, [sp, #8]
 8025106:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802510a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802510e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8025112:	fb0a fc0c 	mul.w	ip, sl, ip
 8025116:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802511a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802511e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025122:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025126:	4465      	add	r5, ip
 8025128:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802512c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025130:	fb09 fc0c 	mul.w	ip, r9, ip
 8025134:	fb09 f904 	mul.w	r9, r9, r4
 8025138:	f509 7480 	add.w	r4, r9, #256	; 0x100
 802513c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8025140:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8025144:	fb08 f404 	mul.w	r4, r8, r4
 8025148:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802514c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025150:	fb08 f802 	mul.w	r8, r8, r2
 8025154:	fb0a fa01 	mul.w	sl, sl, r1
 8025158:	0a22      	lsrs	r2, r4, #8
 802515a:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802515e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025162:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8025166:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802516a:	4414      	add	r4, r2
 802516c:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8025170:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8025174:	0a2d      	lsrs	r5, r5, #8
 8025176:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802517a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802517e:	9a03      	ldr	r2, [sp, #12]
 8025180:	8836      	ldrh	r6, [r6, #0]
 8025182:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025186:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802518a:	437d      	muls	r5, r7
 802518c:	4461      	add	r1, ip
 802518e:	0a24      	lsrs	r4, r4, #8
 8025190:	fb02 5503 	mla	r5, r2, r3, r5
 8025194:	0a09      	lsrs	r1, r1, #8
 8025196:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802519a:	fb04 540e 	mla	r4, r4, lr, r5
 802519e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80251a2:	fb01 4100 	mla	r1, r1, r0, r4
 80251a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80251aa:	0a09      	lsrs	r1, r1, #8
 80251ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80251b0:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80251b4:	fb07 f70a 	mul.w	r7, r7, sl
 80251b8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80251bc:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80251c0:	fb03 7101 	mla	r1, r3, r1, r7
 80251c4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80251c8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80251cc:	fb0e 1e08 	mla	lr, lr, r8, r1
 80251d0:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80251d4:	fb00 e101 	mla	r1, r0, r1, lr
 80251d8:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80251dc:	9a00      	ldr	r2, [sp, #0]
 80251de:	b287      	uxth	r7, r0
 80251e0:	437a      	muls	r2, r7
 80251e2:	0a09      	lsrs	r1, r1, #8
 80251e4:	1c53      	adds	r3, r2, #1
 80251e6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80251ea:	4321      	orrs	r1, r4
 80251ec:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80251f0:	1235      	asrs	r5, r6, #8
 80251f2:	0c0a      	lsrs	r2, r1, #16
 80251f4:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80251f8:	b2db      	uxtb	r3, r3
 80251fa:	fb12 f207 	smulbb	r2, r2, r7
 80251fe:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8025202:	fb05 2503 	mla	r5, r5, r3, r2
 8025206:	f3c1 2407 	ubfx	r4, r1, #8, #8
 802520a:	10f2      	asrs	r2, r6, #3
 802520c:	b2c8      	uxtb	r0, r1
 802520e:	00f6      	lsls	r6, r6, #3
 8025210:	fb14 f407 	smulbb	r4, r4, r7
 8025214:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025218:	b2f6      	uxtb	r6, r6
 802521a:	fb10 f007 	smulbb	r0, r0, r7
 802521e:	fb02 4203 	mla	r2, r2, r3, r4
 8025222:	b2ad      	uxth	r5, r5
 8025224:	fb06 0303 	mla	r3, r6, r3, r0
 8025228:	b299      	uxth	r1, r3
 802522a:	b294      	uxth	r4, r2
 802522c:	1c6b      	adds	r3, r5, #1
 802522e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025232:	1c62      	adds	r2, r4, #1
 8025234:	1c4b      	adds	r3, r1, #1
 8025236:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802523a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802523e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8025242:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025246:	0952      	lsrs	r2, r2, #5
 8025248:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802524c:	432b      	orrs	r3, r5
 802524e:	4313      	orrs	r3, r2
 8025250:	9a02      	ldr	r2, [sp, #8]
 8025252:	8013      	strh	r3, [r2, #0]
 8025254:	b005      	add	sp, #20
 8025256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802525a:	2500      	movs	r5, #0
 802525c:	e6ef      	b.n	802503e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 802525e:	2100      	movs	r1, #0
 8025260:	460d      	mov	r5, r1
 8025262:	e6f7      	b.n	8025054 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8025264:	2100      	movs	r1, #0
 8025266:	e6f5      	b.n	8025054 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8025268:	4631      	mov	r1, r6
 802526a:	e6f3      	b.n	8025054 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802526c:	2400      	movs	r4, #0
 802526e:	e702      	b.n	8025076 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8025270:	2200      	movs	r2, #0
 8025272:	4614      	mov	r4, r2
 8025274:	e70b      	b.n	802508e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8025276:	4602      	mov	r2, r0
 8025278:	4604      	mov	r4, r0
 802527a:	e708      	b.n	802508e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802527c:	2200      	movs	r2, #0
 802527e:	e706      	b.n	802508e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8025280:	4632      	mov	r2, r6
 8025282:	e704      	b.n	802508e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08025284 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025288:	b09d      	sub	sp, #116	; 0x74
 802528a:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 802528e:	9219      	str	r2, [sp, #100]	; 0x64
 8025290:	9307      	str	r3, [sp, #28]
 8025292:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025294:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8025298:	931a      	str	r3, [sp, #104]	; 0x68
 802529a:	9117      	str	r1, [sp, #92]	; 0x5c
 802529c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80252a0:	901b      	str	r0, [sp, #108]	; 0x6c
 80252a2:	6850      	ldr	r0, [r2, #4]
 80252a4:	6812      	ldr	r2, [r2, #0]
 80252a6:	fb00 1303 	mla	r3, r0, r3, r1
 80252aa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80252ae:	930a      	str	r3, [sp, #40]	; 0x28
 80252b0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80252b2:	681b      	ldr	r3, [r3, #0]
 80252b4:	9310      	str	r3, [sp, #64]	; 0x40
 80252b6:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80252ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80252bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80252be:	2b00      	cmp	r3, #0
 80252c0:	dc03      	bgt.n	80252ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80252c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80252c4:	2b00      	cmp	r3, #0
 80252c6:	f340 8375 	ble.w	80259b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80252ca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80252cc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80252d0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80252d4:	1e48      	subs	r0, r1, #1
 80252d6:	1e57      	subs	r7, r2, #1
 80252d8:	9b07      	ldr	r3, [sp, #28]
 80252da:	2b00      	cmp	r3, #0
 80252dc:	f340 818e 	ble.w	80255fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 80252e0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80252e4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80252e8:	d406      	bmi.n	80252f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80252ea:	4584      	cmp	ip, r0
 80252ec:	da04      	bge.n	80252f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80252ee:	2b00      	cmp	r3, #0
 80252f0:	db02      	blt.n	80252f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80252f2:	42bb      	cmp	r3, r7
 80252f4:	f2c0 8183 	blt.w	80255fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80252f8:	f11c 0c01 	adds.w	ip, ip, #1
 80252fc:	f100 8173 	bmi.w	80255e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025300:	4561      	cmp	r1, ip
 8025302:	f2c0 8170 	blt.w	80255e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025306:	3301      	adds	r3, #1
 8025308:	f100 816d 	bmi.w	80255e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802530c:	429a      	cmp	r2, r3
 802530e:	f2c0 816a 	blt.w	80255e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025312:	9b07      	ldr	r3, [sp, #28]
 8025314:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8025316:	9318      	str	r3, [sp, #96]	; 0x60
 8025318:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802531a:	2b00      	cmp	r3, #0
 802531c:	f340 818c 	ble.w	8025638 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8025320:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8025322:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025324:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8025328:	689b      	ldr	r3, [r3, #8]
 802532a:	1422      	asrs	r2, r4, #16
 802532c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8025330:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8025334:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025338:	f100 81cd 	bmi.w	80256d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802533c:	f103 38ff 	add.w	r8, r3, #4294967295
 8025340:	4542      	cmp	r2, r8
 8025342:	f280 81c8 	bge.w	80256d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025346:	f1bc 0f00 	cmp.w	ip, #0
 802534a:	f2c0 81c4 	blt.w	80256d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802534e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025352:	45c4      	cmp	ip, r8
 8025354:	f280 81bf 	bge.w	80256d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025358:	b21b      	sxth	r3, r3
 802535a:	fb0c 2203 	mla	r2, ip, r3, r2
 802535e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025360:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8025364:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8025368:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802536c:	2800      	cmp	r0, #0
 802536e:	f000 81a9 	beq.w	80256c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8025372:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8025376:	950c      	str	r5, [sp, #48]	; 0x30
 8025378:	0e2d      	lsrs	r5, r5, #24
 802537a:	9513      	str	r5, [sp, #76]	; 0x4c
 802537c:	b181      	cbz	r1, 80253a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802537e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8025382:	3b01      	subs	r3, #1
 8025384:	009b      	lsls	r3, r3, #2
 8025386:	3304      	adds	r3, #4
 8025388:	eb08 0c03 	add.w	ip, r8, r3
 802538c:	f858 3003 	ldr.w	r3, [r8, r3]
 8025390:	9308      	str	r3, [sp, #32]
 8025392:	0e1b      	lsrs	r3, r3, #24
 8025394:	9311      	str	r3, [sp, #68]	; 0x44
 8025396:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802539a:	930d      	str	r3, [sp, #52]	; 0x34
 802539c:	0e1b      	lsrs	r3, r3, #24
 802539e:	9314      	str	r3, [sp, #80]	; 0x50
 80253a0:	b280      	uxth	r0, r0
 80253a2:	b289      	uxth	r1, r1
 80253a4:	fb00 f901 	mul.w	r9, r0, r1
 80253a8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80253ac:	0100      	lsls	r0, r0, #4
 80253ae:	eba0 0809 	sub.w	r8, r0, r9
 80253b2:	b289      	uxth	r1, r1
 80253b4:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80253b8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80253ba:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80253bc:	fa1f f888 	uxth.w	r8, r8
 80253c0:	1a5b      	subs	r3, r3, r1
 80253c2:	b29b      	uxth	r3, r3
 80253c4:	fb08 f000 	mul.w	r0, r8, r0
 80253c8:	fb03 000e 	mla	r0, r3, lr, r0
 80253cc:	fb01 0005 	mla	r0, r1, r5, r0
 80253d0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80253d2:	fb09 0005 	mla	r0, r9, r5, r0
 80253d6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80253da:	2800      	cmp	r0, #0
 80253dc:	f000 80fa 	beq.w	80255d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80253e0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80253e4:	d01b      	beq.n	802541e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80253e6:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80253ea:	fb0e fa0a 	mul.w	sl, lr, sl
 80253ee:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80253f2:	fb0e fe02 	mul.w	lr, lr, r2
 80253f6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80253fa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80253fe:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025402:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8025406:	4452      	add	r2, sl
 8025408:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802540c:	0a12      	lsrs	r2, r2, #8
 802540e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025412:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025416:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802541a:	ea42 020c 	orr.w	r2, r2, ip
 802541e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025420:	2dff      	cmp	r5, #255	; 0xff
 8025422:	d021      	beq.n	8025468 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8025424:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025426:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802542a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802542c:	fb05 fb0b 	mul.w	fp, r5, fp
 8025430:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025432:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025436:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025438:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802543c:	fb05 fa0a 	mul.w	sl, r5, sl
 8025440:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025444:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025448:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802544c:	44de      	add	lr, fp
 802544e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025452:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025456:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802545a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802545e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025462:	ea4e 050a 	orr.w	r5, lr, sl
 8025466:	950c      	str	r5, [sp, #48]	; 0x30
 8025468:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802546a:	2dff      	cmp	r5, #255	; 0xff
 802546c:	d021      	beq.n	80254b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 802546e:	9d08      	ldr	r5, [sp, #32]
 8025470:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8025474:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025476:	fb05 fb0b 	mul.w	fp, r5, fp
 802547a:	9d08      	ldr	r5, [sp, #32]
 802547c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025480:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025482:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025486:	fb05 fa0a 	mul.w	sl, r5, sl
 802548a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802548e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025492:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025496:	44de      	add	lr, fp
 8025498:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802549c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80254a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80254a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80254a8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80254ac:	ea4e 050a 	orr.w	r5, lr, sl
 80254b0:	9508      	str	r5, [sp, #32]
 80254b2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80254b4:	2dff      	cmp	r5, #255	; 0xff
 80254b6:	d021      	beq.n	80254fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80254b8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80254ba:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80254be:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80254c0:	fb05 fb0b 	mul.w	fp, r5, fp
 80254c4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80254c6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80254ca:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80254cc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80254d0:	fb05 fa0a 	mul.w	sl, r5, sl
 80254d4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80254d8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80254dc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80254e0:	44de      	add	lr, fp
 80254e2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80254e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80254ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80254ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80254f2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80254f6:	ea4e 050a 	orr.w	r5, lr, sl
 80254fa:	950d      	str	r5, [sp, #52]	; 0x34
 80254fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80254fe:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8025502:	9d08      	ldr	r5, [sp, #32]
 8025504:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8025508:	fb08 fc0c 	mul.w	ip, r8, ip
 802550c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8025510:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8025514:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025516:	fb01 cc0e 	mla	ip, r1, lr, ip
 802551a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802551e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025520:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025524:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8025528:	fb08 f80e 	mul.w	r8, r8, lr
 802552c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025530:	fb03 8202 	mla	r2, r3, r2, r8
 8025534:	9b08      	ldr	r3, [sp, #32]
 8025536:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8025538:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 802553c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802553e:	fb01 220a 	mla	r2, r1, sl, r2
 8025542:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8025546:	fb09 2901 	mla	r9, r9, r1, r2
 802554a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802554c:	883b      	ldrh	r3, [r7, #0]
 802554e:	4342      	muls	r2, r0
 8025550:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025554:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025558:	1c50      	adds	r0, r2, #1
 802555a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802555e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025562:	ea4c 0c09 	orr.w	ip, ip, r9
 8025566:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802556a:	1219      	asrs	r1, r3, #8
 802556c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8025570:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8025574:	b2c0      	uxtb	r0, r0
 8025576:	fb12 f205 	smulbb	r2, r2, r5
 802557a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802557e:	fb01 2100 	mla	r1, r1, r0, r2
 8025582:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8025586:	10da      	asrs	r2, r3, #3
 8025588:	fa5f fc8c 	uxtb.w	ip, ip
 802558c:	00db      	lsls	r3, r3, #3
 802558e:	fb1c fc05 	smulbb	ip, ip, r5
 8025592:	b2db      	uxtb	r3, r3
 8025594:	b289      	uxth	r1, r1
 8025596:	fb03 c300 	mla	r3, r3, r0, ip
 802559a:	fa1f fc83 	uxth.w	ip, r3
 802559e:	1c4b      	adds	r3, r1, #1
 80255a0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80255a4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80255a8:	fb1e fe05 	smulbb	lr, lr, r5
 80255ac:	f10c 0301 	add.w	r3, ip, #1
 80255b0:	fb02 e200 	mla	r2, r2, r0, lr
 80255b4:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80255b8:	b292      	uxth	r2, r2
 80255ba:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80255be:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80255c2:	430b      	orrs	r3, r1
 80255c4:	1c51      	adds	r1, r2, #1
 80255c6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80255ca:	0952      	lsrs	r2, r2, #5
 80255cc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80255d0:	4313      	orrs	r3, r2
 80255d2:	803b      	strh	r3, [r7, #0]
 80255d4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80255d6:	441c      	add	r4, r3
 80255d8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80255da:	441e      	add	r6, r3
 80255dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80255de:	3b01      	subs	r3, #1
 80255e0:	3702      	adds	r7, #2
 80255e2:	9318      	str	r3, [sp, #96]	; 0x60
 80255e4:	e698      	b.n	8025318 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80255e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80255e8:	441c      	add	r4, r3
 80255ea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80255ec:	441e      	add	r6, r3
 80255ee:	9b07      	ldr	r3, [sp, #28]
 80255f0:	3b01      	subs	r3, #1
 80255f2:	9307      	str	r3, [sp, #28]
 80255f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80255f6:	3302      	adds	r3, #2
 80255f8:	930a      	str	r3, [sp, #40]	; 0x28
 80255fa:	e66d      	b.n	80252d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80255fc:	d023      	beq.n	8025646 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80255fe:	9b07      	ldr	r3, [sp, #28]
 8025600:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8025602:	3b01      	subs	r3, #1
 8025604:	fb00 4003 	mla	r0, r0, r3, r4
 8025608:	1400      	asrs	r0, r0, #16
 802560a:	f53f ae82 	bmi.w	8025312 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802560e:	3901      	subs	r1, #1
 8025610:	4288      	cmp	r0, r1
 8025612:	f6bf ae7e 	bge.w	8025312 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025616:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8025618:	fb01 6303 	mla	r3, r1, r3, r6
 802561c:	141b      	asrs	r3, r3, #16
 802561e:	f53f ae78 	bmi.w	8025312 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025622:	3a01      	subs	r2, #1
 8025624:	4293      	cmp	r3, r2
 8025626:	f6bf ae74 	bge.w	8025312 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802562a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802562e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8025632:	f1bb 0f00 	cmp.w	fp, #0
 8025636:	dc6c      	bgt.n	8025712 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8025638:	9b07      	ldr	r3, [sp, #28]
 802563a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802563e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025640:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8025644:	930a      	str	r3, [sp, #40]	; 0x28
 8025646:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025648:	2b00      	cmp	r3, #0
 802564a:	f340 81b3 	ble.w	80259b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802564e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025652:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025656:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802565a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802565c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025660:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025664:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025668:	eef0 6a62 	vmov.f32	s13, s5
 802566c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025670:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025674:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025678:	ee16 4a90 	vmov	r4, s13
 802567c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025680:	eef0 6a43 	vmov.f32	s13, s6
 8025684:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025688:	ee12 2a90 	vmov	r2, s5
 802568c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025690:	fb92 f3f3 	sdiv	r3, r2, r3
 8025694:	ee13 2a10 	vmov	r2, s6
 8025698:	9329      	str	r3, [sp, #164]	; 0xa4
 802569a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802569c:	fb92 f3f3 	sdiv	r3, r2, r3
 80256a0:	932a      	str	r3, [sp, #168]	; 0xa8
 80256a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80256a4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80256a6:	3b01      	subs	r3, #1
 80256a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80256ac:	9317      	str	r3, [sp, #92]	; 0x5c
 80256ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80256b0:	bf08      	it	eq
 80256b2:	4613      	moveq	r3, r2
 80256b4:	ee16 6a90 	vmov	r6, s13
 80256b8:	9307      	str	r3, [sp, #28]
 80256ba:	eeb0 3a67 	vmov.f32	s6, s15
 80256be:	eef0 2a47 	vmov.f32	s5, s14
 80256c2:	e5fb      	b.n	80252bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80256c4:	2900      	cmp	r1, #0
 80256c6:	f43f ae6b 	beq.w	80253a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80256ca:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80256ce:	9308      	str	r3, [sp, #32]
 80256d0:	0e1b      	lsrs	r3, r3, #24
 80256d2:	9311      	str	r3, [sp, #68]	; 0x44
 80256d4:	e664      	b.n	80253a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80256d6:	f112 0801 	adds.w	r8, r2, #1
 80256da:	f53f af7b 	bmi.w	80255d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80256de:	4543      	cmp	r3, r8
 80256e0:	f6ff af78 	blt.w	80255d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80256e4:	f11c 0801 	adds.w	r8, ip, #1
 80256e8:	f53f af74 	bmi.w	80255d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80256ec:	45c6      	cmp	lr, r8
 80256ee:	f6ff af71 	blt.w	80255d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80256f2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80256f4:	9201      	str	r2, [sp, #4]
 80256f6:	fa0f f28e 	sxth.w	r2, lr
 80256fa:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80256fe:	e9cd c002 	strd	ip, r0, [sp, #8]
 8025702:	9200      	str	r2, [sp, #0]
 8025704:	b21b      	sxth	r3, r3
 8025706:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025708:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802570a:	4639      	mov	r1, r7
 802570c:	f7ff fc79 	bl	8025002 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8025710:	e760      	b.n	80255d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8025712:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025714:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025716:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802571a:	1427      	asrs	r7, r4, #16
 802571c:	1433      	asrs	r3, r6, #16
 802571e:	fb01 7303 	mla	r3, r1, r3, r7
 8025722:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8025726:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802572a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802572e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025732:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025736:	2a00      	cmp	r2, #0
 8025738:	f000 8133 	beq.w	80259a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 802573c:	687d      	ldr	r5, [r7, #4]
 802573e:	950e      	str	r5, [sp, #56]	; 0x38
 8025740:	0e2d      	lsrs	r5, r5, #24
 8025742:	9515      	str	r5, [sp, #84]	; 0x54
 8025744:	b178      	cbz	r0, 8025766 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8025746:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 802574a:	3901      	subs	r1, #1
 802574c:	0089      	lsls	r1, r1, #2
 802574e:	3104      	adds	r1, #4
 8025750:	eb07 0e01 	add.w	lr, r7, r1
 8025754:	5879      	ldr	r1, [r7, r1]
 8025756:	9109      	str	r1, [sp, #36]	; 0x24
 8025758:	0e09      	lsrs	r1, r1, #24
 802575a:	9112      	str	r1, [sp, #72]	; 0x48
 802575c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8025760:	910f      	str	r1, [sp, #60]	; 0x3c
 8025762:	0e09      	lsrs	r1, r1, #24
 8025764:	9116      	str	r1, [sp, #88]	; 0x58
 8025766:	b292      	uxth	r2, r2
 8025768:	b280      	uxth	r0, r0
 802576a:	fb02 f800 	mul.w	r8, r2, r0
 802576e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8025772:	0112      	lsls	r2, r2, #4
 8025774:	eba2 0e08 	sub.w	lr, r2, r8
 8025778:	b280      	uxth	r0, r0
 802577a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802577e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8025780:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025782:	fa1f fe8e 	uxth.w	lr, lr
 8025786:	1a12      	subs	r2, r2, r0
 8025788:	b292      	uxth	r2, r2
 802578a:	fb0e f101 	mul.w	r1, lr, r1
 802578e:	fb02 110c 	mla	r1, r2, ip, r1
 8025792:	fb00 1105 	mla	r1, r0, r5, r1
 8025796:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8025798:	fb08 1105 	mla	r1, r8, r5, r1
 802579c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80257a0:	2900      	cmp	r1, #0
 80257a2:	f000 80f5 	beq.w	8025990 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 80257a6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80257aa:	d019      	beq.n	80257e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 80257ac:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80257b0:	fb0c fa0a 	mul.w	sl, ip, sl
 80257b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80257b8:	fb0c fc03 	mul.w	ip, ip, r3
 80257bc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80257c0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80257c4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80257c8:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80257cc:	4453      	add	r3, sl
 80257ce:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80257d2:	0a1b      	lsrs	r3, r3, #8
 80257d4:	0a3f      	lsrs	r7, r7, #8
 80257d6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80257da:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80257de:	433b      	orrs	r3, r7
 80257e0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80257e2:	2dff      	cmp	r5, #255	; 0xff
 80257e4:	d020      	beq.n	8025828 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 80257e6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80257e8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80257ec:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80257ee:	436f      	muls	r7, r5
 80257f0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80257f2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80257f6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80257f8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80257fc:	fb05 fa0a 	mul.w	sl, r5, sl
 8025800:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025804:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025808:	44bc      	add	ip, r7
 802580a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802580e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025812:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025816:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802581a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802581e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025822:	ea4c 050a 	orr.w	r5, ip, sl
 8025826:	950e      	str	r5, [sp, #56]	; 0x38
 8025828:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802582a:	2dff      	cmp	r5, #255	; 0xff
 802582c:	d020      	beq.n	8025870 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 802582e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8025830:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8025834:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025836:	436f      	muls	r7, r5
 8025838:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802583a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802583e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025840:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025844:	fb05 fa0a 	mul.w	sl, r5, sl
 8025848:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802584c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025850:	44bc      	add	ip, r7
 8025852:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025856:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802585a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802585e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025862:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025866:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802586a:	ea4c 050a 	orr.w	r5, ip, sl
 802586e:	9509      	str	r5, [sp, #36]	; 0x24
 8025870:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8025872:	2dff      	cmp	r5, #255	; 0xff
 8025874:	d020      	beq.n	80258b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8025876:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025878:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802587c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802587e:	436f      	muls	r7, r5
 8025880:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025882:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025886:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8025888:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802588c:	fb05 fa0a 	mul.w	sl, r5, sl
 8025890:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025894:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025898:	44bc      	add	ip, r7
 802589a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802589e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80258a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80258a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80258aa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80258ae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80258b2:	ea4c 050a 	orr.w	r5, ip, sl
 80258b6:	950f      	str	r5, [sp, #60]	; 0x3c
 80258b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80258ba:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80258be:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80258c0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80258c4:	fb0e f707 	mul.w	r7, lr, r7
 80258c8:	fb02 770c 	mla	r7, r2, ip, r7
 80258cc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80258d0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80258d2:	fb00 770c 	mla	r7, r0, ip, r7
 80258d6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80258da:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80258dc:	fb08 770c 	mla	r7, r8, ip, r7
 80258e0:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80258e4:	fb0e fe0c 	mul.w	lr, lr, ip
 80258e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80258ec:	fb02 e303 	mla	r3, r2, r3, lr
 80258f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80258f2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80258f4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80258f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80258fa:	fb00 330a 	mla	r3, r0, sl, r3
 80258fe:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8025902:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025908:	f8b9 0000 	ldrh.w	r0, [r9]
 802590c:	4359      	muls	r1, r3
 802590e:	0a3f      	lsrs	r7, r7, #8
 8025910:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025914:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025918:	1c4b      	adds	r3, r1, #1
 802591a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802591e:	ea47 070c 	orr.w	r7, r7, ip
 8025922:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8025926:	1202      	asrs	r2, r0, #8
 8025928:	0c3b      	lsrs	r3, r7, #16
 802592a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802592e:	b2c9      	uxtb	r1, r1
 8025930:	fb13 f305 	smulbb	r3, r3, r5
 8025934:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8025938:	fb02 3201 	mla	r2, r2, r1, r3
 802593c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8025940:	10c3      	asrs	r3, r0, #3
 8025942:	b2ff      	uxtb	r7, r7
 8025944:	00c0      	lsls	r0, r0, #3
 8025946:	b2c0      	uxtb	r0, r0
 8025948:	fb17 f705 	smulbb	r7, r7, r5
 802594c:	fb00 7001 	mla	r0, r0, r1, r7
 8025950:	b292      	uxth	r2, r2
 8025952:	fb1c fc05 	smulbb	ip, ip, r5
 8025956:	b280      	uxth	r0, r0
 8025958:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802595c:	fb03 c301 	mla	r3, r3, r1, ip
 8025960:	1c51      	adds	r1, r2, #1
 8025962:	f100 0c01 	add.w	ip, r0, #1
 8025966:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802596a:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 802596e:	b29b      	uxth	r3, r3
 8025970:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8025974:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8025978:	ea4c 0202 	orr.w	r2, ip, r2
 802597c:	f103 0c01 	add.w	ip, r3, #1
 8025980:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8025984:	095b      	lsrs	r3, r3, #5
 8025986:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802598a:	431a      	orrs	r2, r3
 802598c:	f8a9 2000 	strh.w	r2, [r9]
 8025990:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025992:	441c      	add	r4, r3
 8025994:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025996:	f109 0902 	add.w	r9, r9, #2
 802599a:	441e      	add	r6, r3
 802599c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80259a0:	e647      	b.n	8025632 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80259a2:	2800      	cmp	r0, #0
 80259a4:	f43f aedf 	beq.w	8025766 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80259a8:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80259ac:	9109      	str	r1, [sp, #36]	; 0x24
 80259ae:	0e09      	lsrs	r1, r1, #24
 80259b0:	9112      	str	r1, [sp, #72]	; 0x48
 80259b2:	e6d8      	b.n	8025766 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80259b4:	b01d      	add	sp, #116	; 0x74
 80259b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080259ba <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 80259ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80259be:	b085      	sub	sp, #20
 80259c0:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 80259c4:	9102      	str	r1, [sp, #8]
 80259c6:	2c00      	cmp	r4, #0
 80259c8:	fb04 7103 	mla	r1, r4, r3, r7
 80259cc:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 80259d0:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80259d4:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80259d8:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80259dc:	f2c0 810c 	blt.w	8025bf8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 80259e0:	45a6      	cmp	lr, r4
 80259e2:	f340 8109 	ble.w	8025bf8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 80259e6:	2f00      	cmp	r7, #0
 80259e8:	f2c0 8104 	blt.w	8025bf4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 80259ec:	42bb      	cmp	r3, r7
 80259ee:	f340 8101 	ble.w	8025bf4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 80259f2:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80259f6:	1c7a      	adds	r2, r7, #1
 80259f8:	f100 8101 	bmi.w	8025bfe <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80259fc:	4293      	cmp	r3, r2
 80259fe:	f340 80fe 	ble.w	8025bfe <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8025a02:	2e00      	cmp	r6, #0
 8025a04:	f000 80fd 	beq.w	8025c02 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8025a08:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8025a0c:	3401      	adds	r4, #1
 8025a0e:	f100 80fc 	bmi.w	8025c0a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8025a12:	45a6      	cmp	lr, r4
 8025a14:	f340 80f9 	ble.w	8025c0a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8025a18:	2800      	cmp	r0, #0
 8025a1a:	f000 80f9 	beq.w	8025c10 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8025a1e:	2f00      	cmp	r7, #0
 8025a20:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8025a24:	f2c0 80ef 	blt.w	8025c06 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8025a28:	42bb      	cmp	r3, r7
 8025a2a:	f340 80ec 	ble.w	8025c06 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8025a2e:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8025a32:	3701      	adds	r7, #1
 8025a34:	f100 80ef 	bmi.w	8025c16 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8025a38:	42bb      	cmp	r3, r7
 8025a3a:	f340 80ec 	ble.w	8025c16 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8025a3e:	2e00      	cmp	r6, #0
 8025a40:	f000 80eb 	beq.w	8025c1a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8025a44:	6852      	ldr	r2, [r2, #4]
 8025a46:	b2b6      	uxth	r6, r6
 8025a48:	b280      	uxth	r0, r0
 8025a4a:	fb00 fe06 	mul.w	lr, r0, r6
 8025a4e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8025a52:	0136      	lsls	r6, r6, #4
 8025a54:	eba6 070e 	sub.w	r7, r6, lr
 8025a58:	b280      	uxth	r0, r0
 8025a5a:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8025a5e:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8025a62:	b2bf      	uxth	r7, r7
 8025a64:	1a1b      	subs	r3, r3, r0
 8025a66:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8025a6a:	b29b      	uxth	r3, r3
 8025a6c:	fb07 f60a 	mul.w	r6, r7, sl
 8025a70:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025a74:	fb0b 6603 	mla	r6, fp, r3, r6
 8025a78:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8025a7c:	fb00 6609 	mla	r6, r0, r9, r6
 8025a80:	fb0e 6608 	mla	r6, lr, r8, r6
 8025a84:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025a88:	9600      	str	r6, [sp, #0]
 8025a8a:	2e00      	cmp	r6, #0
 8025a8c:	f000 80af 	beq.w	8025bee <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8025a90:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8025a94:	fb0b fc0c 	mul.w	ip, fp, ip
 8025a98:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8025a9c:	fb0b f505 	mul.w	r5, fp, r5
 8025aa0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8025aa4:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8025aa8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025aac:	44dc      	add	ip, fp
 8025aae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025ab2:	9501      	str	r5, [sp, #4]
 8025ab4:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8025ab8:	9503      	str	r5, [sp, #12]
 8025aba:	9d01      	ldr	r5, [sp, #4]
 8025abc:	9e02      	ldr	r6, [sp, #8]
 8025abe:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8025ac2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8025ac6:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8025aca:	fb0a fc0c 	mul.w	ip, sl, ip
 8025ace:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8025ad2:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8025ad6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025ada:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025ade:	4465      	add	r5, ip
 8025ae0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025ae4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025ae8:	fb09 fc0c 	mul.w	ip, r9, ip
 8025aec:	fb09 f904 	mul.w	r9, r9, r4
 8025af0:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8025af4:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8025af8:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8025afc:	fb08 f404 	mul.w	r4, r8, r4
 8025b00:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8025b04:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025b08:	fb08 f802 	mul.w	r8, r8, r2
 8025b0c:	fb0a fa01 	mul.w	sl, sl, r1
 8025b10:	0a22      	lsrs	r2, r4, #8
 8025b12:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8025b16:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025b1a:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8025b1e:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8025b22:	4414      	add	r4, r2
 8025b24:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8025b28:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8025b2c:	0a2d      	lsrs	r5, r5, #8
 8025b2e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8025b32:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025b36:	9a03      	ldr	r2, [sp, #12]
 8025b38:	8836      	ldrh	r6, [r6, #0]
 8025b3a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025b3e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025b42:	437d      	muls	r5, r7
 8025b44:	4461      	add	r1, ip
 8025b46:	0a24      	lsrs	r4, r4, #8
 8025b48:	fb02 5503 	mla	r5, r2, r3, r5
 8025b4c:	0a09      	lsrs	r1, r1, #8
 8025b4e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025b52:	fb04 540e 	mla	r4, r4, lr, r5
 8025b56:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025b5a:	fb01 4100 	mla	r1, r1, r0, r4
 8025b5e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025b62:	0a09      	lsrs	r1, r1, #8
 8025b64:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025b68:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8025b6c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025b70:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8025b74:	fb07 f70a 	mul.w	r7, r7, sl
 8025b78:	fb03 7101 	mla	r1, r3, r1, r7
 8025b7c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025b80:	9b00      	ldr	r3, [sp, #0]
 8025b82:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8025b86:	fb0e 1e08 	mla	lr, lr, r8, r1
 8025b8a:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8025b8e:	fb00 e101 	mla	r1, r0, r1, lr
 8025b92:	43da      	mvns	r2, r3
 8025b94:	1233      	asrs	r3, r6, #8
 8025b96:	b2d2      	uxtb	r2, r2
 8025b98:	10f0      	asrs	r0, r6, #3
 8025b9a:	0a09      	lsrs	r1, r1, #8
 8025b9c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8025ba0:	00f6      	lsls	r6, r6, #3
 8025ba2:	4353      	muls	r3, r2
 8025ba4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8025ba8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025bac:	b2f6      	uxtb	r6, r6
 8025bae:	4321      	orrs	r1, r4
 8025bb0:	4350      	muls	r0, r2
 8025bb2:	4356      	muls	r6, r2
 8025bb4:	1c5a      	adds	r2, r3, #1
 8025bb6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025bba:	0c0b      	lsrs	r3, r1, #16
 8025bbc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025bc0:	1c42      	adds	r2, r0, #1
 8025bc2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025bc6:	0a0a      	lsrs	r2, r1, #8
 8025bc8:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8025bcc:	021b      	lsls	r3, r3, #8
 8025bce:	00d2      	lsls	r2, r2, #3
 8025bd0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025bd4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8025bd8:	4313      	orrs	r3, r2
 8025bda:	1c72      	adds	r2, r6, #1
 8025bdc:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8025be0:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8025be4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8025be8:	4319      	orrs	r1, r3
 8025bea:	9b02      	ldr	r3, [sp, #8]
 8025bec:	8019      	strh	r1, [r3, #0]
 8025bee:	b005      	add	sp, #20
 8025bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025bf4:	2500      	movs	r5, #0
 8025bf6:	e6fe      	b.n	80259f6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8025bf8:	2100      	movs	r1, #0
 8025bfa:	460d      	mov	r5, r1
 8025bfc:	e706      	b.n	8025a0c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8025bfe:	2100      	movs	r1, #0
 8025c00:	e704      	b.n	8025a0c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8025c02:	4631      	mov	r1, r6
 8025c04:	e702      	b.n	8025a0c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8025c06:	2400      	movs	r4, #0
 8025c08:	e713      	b.n	8025a32 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8025c0a:	2200      	movs	r2, #0
 8025c0c:	4614      	mov	r4, r2
 8025c0e:	e71a      	b.n	8025a46 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8025c10:	4602      	mov	r2, r0
 8025c12:	4604      	mov	r4, r0
 8025c14:	e717      	b.n	8025a46 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8025c16:	2200      	movs	r2, #0
 8025c18:	e715      	b.n	8025a46 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8025c1a:	4632      	mov	r2, r6
 8025c1c:	e713      	b.n	8025a46 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

08025c20 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c24:	b09b      	sub	sp, #108	; 0x6c
 8025c26:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8025c2a:	9218      	str	r2, [sp, #96]	; 0x60
 8025c2c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025c2e:	9116      	str	r1, [sp, #88]	; 0x58
 8025c30:	9307      	str	r3, [sp, #28]
 8025c32:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8025c36:	9019      	str	r0, [sp, #100]	; 0x64
 8025c38:	6850      	ldr	r0, [r2, #4]
 8025c3a:	6812      	ldr	r2, [r2, #0]
 8025c3c:	fb00 1303 	mla	r3, r0, r3, r1
 8025c40:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025c44:	930a      	str	r3, [sp, #40]	; 0x28
 8025c46:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025c48:	681b      	ldr	r3, [r3, #0]
 8025c4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8025c4c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025c4e:	2b00      	cmp	r3, #0
 8025c50:	dc03      	bgt.n	8025c5a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025c52:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025c54:	2b00      	cmp	r3, #0
 8025c56:	f340 8386 	ble.w	8026366 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 8025c5a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025c5c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025c60:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025c64:	1e48      	subs	r0, r1, #1
 8025c66:	1e57      	subs	r7, r2, #1
 8025c68:	9b07      	ldr	r3, [sp, #28]
 8025c6a:	2b00      	cmp	r3, #0
 8025c6c:	f340 8166 	ble.w	8025f3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8025c70:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025c74:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025c78:	d406      	bmi.n	8025c88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8025c7a:	4584      	cmp	ip, r0
 8025c7c:	da04      	bge.n	8025c88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8025c7e:	2b00      	cmp	r3, #0
 8025c80:	db02      	blt.n	8025c88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8025c82:	42bb      	cmp	r3, r7
 8025c84:	f2c0 815b 	blt.w	8025f3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8025c88:	f11c 0c01 	adds.w	ip, ip, #1
 8025c8c:	f100 814b 	bmi.w	8025f26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8025c90:	4561      	cmp	r1, ip
 8025c92:	f2c0 8148 	blt.w	8025f26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8025c96:	3301      	adds	r3, #1
 8025c98:	f100 8145 	bmi.w	8025f26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8025c9c:	429a      	cmp	r2, r3
 8025c9e:	f2c0 8142 	blt.w	8025f26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8025ca2:	9b07      	ldr	r3, [sp, #28]
 8025ca4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8025ca6:	9317      	str	r3, [sp, #92]	; 0x5c
 8025ca8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025caa:	2b00      	cmp	r3, #0
 8025cac:	f340 8165 	ble.w	8025f7a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8025cb0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8025cb2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025cb4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8025cb8:	689b      	ldr	r3, [r3, #8]
 8025cba:	1422      	asrs	r2, r4, #16
 8025cbc:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8025cc0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8025cc4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025cc8:	f100 81d5 	bmi.w	8026076 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8025ccc:	f103 38ff 	add.w	r8, r3, #4294967295
 8025cd0:	4542      	cmp	r2, r8
 8025cd2:	f280 81d0 	bge.w	8026076 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8025cd6:	f1bc 0f00 	cmp.w	ip, #0
 8025cda:	f2c0 81cc 	blt.w	8026076 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8025cde:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025ce2:	45c4      	cmp	ip, r8
 8025ce4:	f280 81c7 	bge.w	8026076 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8025ce8:	b21b      	sxth	r3, r3
 8025cea:	fb0c 2203 	mla	r2, ip, r3, r2
 8025cee:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025cf0:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8025cf4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8025cf8:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8025cfc:	2900      	cmp	r1, #0
 8025cfe:	f000 8182 	beq.w	8026006 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8025d02:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8025d06:	950b      	str	r5, [sp, #44]	; 0x2c
 8025d08:	0e2d      	lsrs	r5, r5, #24
 8025d0a:	9512      	str	r5, [sp, #72]	; 0x48
 8025d0c:	b180      	cbz	r0, 8025d30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8025d0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8025d12:	3b01      	subs	r3, #1
 8025d14:	009b      	lsls	r3, r3, #2
 8025d16:	3304      	adds	r3, #4
 8025d18:	eb08 0c03 	add.w	ip, r8, r3
 8025d1c:	f858 3003 	ldr.w	r3, [r8, r3]
 8025d20:	9308      	str	r3, [sp, #32]
 8025d22:	0e1b      	lsrs	r3, r3, #24
 8025d24:	9310      	str	r3, [sp, #64]	; 0x40
 8025d26:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8025d2a:	930c      	str	r3, [sp, #48]	; 0x30
 8025d2c:	0e1b      	lsrs	r3, r3, #24
 8025d2e:	9313      	str	r3, [sp, #76]	; 0x4c
 8025d30:	b289      	uxth	r1, r1
 8025d32:	b280      	uxth	r0, r0
 8025d34:	fb01 f900 	mul.w	r9, r1, r0
 8025d38:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025d3c:	0109      	lsls	r1, r1, #4
 8025d3e:	eba1 0809 	sub.w	r8, r1, r9
 8025d42:	b280      	uxth	r0, r0
 8025d44:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8025d48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025d4a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025d4c:	fa1f f888 	uxth.w	r8, r8
 8025d50:	1a09      	subs	r1, r1, r0
 8025d52:	b289      	uxth	r1, r1
 8025d54:	fb08 f303 	mul.w	r3, r8, r3
 8025d58:	fb01 330e 	mla	r3, r1, lr, r3
 8025d5c:	fb00 3305 	mla	r3, r0, r5, r3
 8025d60:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025d62:	fb09 3305 	mla	r3, r9, r5, r3
 8025d66:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025d6a:	2b00      	cmp	r3, #0
 8025d6c:	f000 80d2 	beq.w	8025f14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8025d70:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025d74:	d01b      	beq.n	8025dae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8025d76:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8025d7a:	fb0e fa0a 	mul.w	sl, lr, sl
 8025d7e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025d82:	fb0e fe02 	mul.w	lr, lr, r2
 8025d86:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8025d8a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025d8e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025d92:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8025d96:	4452      	add	r2, sl
 8025d98:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025d9c:	0a12      	lsrs	r2, r2, #8
 8025d9e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025da2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025da6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025daa:	ea42 020c 	orr.w	r2, r2, ip
 8025dae:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025db0:	2dff      	cmp	r5, #255	; 0xff
 8025db2:	d021      	beq.n	8025df8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8025db4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8025db6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8025dba:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025dbc:	fb05 fb0b 	mul.w	fp, r5, fp
 8025dc0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8025dc2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025dc6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025dc8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025dcc:	fb05 fa0a 	mul.w	sl, r5, sl
 8025dd0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025dd4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025dd8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025ddc:	44de      	add	lr, fp
 8025dde:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025de2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025de6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025dea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025dee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025df2:	ea4e 050a 	orr.w	r5, lr, sl
 8025df6:	950b      	str	r5, [sp, #44]	; 0x2c
 8025df8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025dfa:	2dff      	cmp	r5, #255	; 0xff
 8025dfc:	d021      	beq.n	8025e42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8025dfe:	9d08      	ldr	r5, [sp, #32]
 8025e00:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8025e04:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025e06:	fb05 fb0b 	mul.w	fp, r5, fp
 8025e0a:	9d08      	ldr	r5, [sp, #32]
 8025e0c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8025e10:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025e12:	fb05 fa0e 	mul.w	sl, r5, lr
 8025e16:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025e1a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025e1e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025e22:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025e26:	44de      	add	lr, fp
 8025e28:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025e2c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025e30:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025e34:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025e38:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025e3c:	ea4e 050a 	orr.w	r5, lr, sl
 8025e40:	9508      	str	r5, [sp, #32]
 8025e42:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025e44:	2dff      	cmp	r5, #255	; 0xff
 8025e46:	d021      	beq.n	8025e8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8025e48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025e4a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8025e4e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025e50:	fb05 fb0b 	mul.w	fp, r5, fp
 8025e54:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025e56:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025e5a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025e5c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025e60:	fb05 fa0a 	mul.w	sl, r5, sl
 8025e64:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025e68:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025e6c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025e70:	44de      	add	lr, fp
 8025e72:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025e76:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025e7a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025e7e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025e82:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025e86:	ea4e 050a 	orr.w	r5, lr, sl
 8025e8a:	950c      	str	r5, [sp, #48]	; 0x30
 8025e8c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8025e8e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8025e92:	9d08      	ldr	r5, [sp, #32]
 8025e94:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8025e98:	fb08 fc0c 	mul.w	ip, r8, ip
 8025e9c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8025ea0:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8025ea4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025ea6:	fb00 cc0e 	mla	ip, r0, lr, ip
 8025eaa:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8025eae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8025eb0:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025eb4:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8025eb8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025ebc:	fb08 f80e 	mul.w	r8, r8, lr
 8025ec0:	fb01 8202 	mla	r2, r1, r2, r8
 8025ec4:	9908      	ldr	r1, [sp, #32]
 8025ec6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8025eca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025ecc:	fb00 220a 	mla	r2, r0, sl, r2
 8025ed0:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8025ed4:	fb09 2900 	mla	r9, r9, r0, r2
 8025ed8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025edc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025ee0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025ee4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025ee8:	ea4c 0c09 	orr.w	ip, ip, r9
 8025eec:	2bff      	cmp	r3, #255	; 0xff
 8025eee:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8025ef2:	f040 8091 	bne.w	8026018 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8025ef6:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8025efa:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8025efe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025f02:	f022 0207 	bic.w	r2, r2, #7
 8025f06:	431a      	orrs	r2, r3
 8025f08:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8025f0c:	ea4c 0c02 	orr.w	ip, ip, r2
 8025f10:	f8a7 c000 	strh.w	ip, [r7]
 8025f14:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025f16:	441c      	add	r4, r3
 8025f18:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025f1a:	441e      	add	r6, r3
 8025f1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025f1e:	3b01      	subs	r3, #1
 8025f20:	3702      	adds	r7, #2
 8025f22:	9317      	str	r3, [sp, #92]	; 0x5c
 8025f24:	e6c0      	b.n	8025ca8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8025f26:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025f28:	441c      	add	r4, r3
 8025f2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025f2c:	441e      	add	r6, r3
 8025f2e:	9b07      	ldr	r3, [sp, #28]
 8025f30:	3b01      	subs	r3, #1
 8025f32:	9307      	str	r3, [sp, #28]
 8025f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025f36:	3302      	adds	r3, #2
 8025f38:	930a      	str	r3, [sp, #40]	; 0x28
 8025f3a:	e695      	b.n	8025c68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025f3c:	d024      	beq.n	8025f88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8025f3e:	9b07      	ldr	r3, [sp, #28]
 8025f40:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8025f42:	3b01      	subs	r3, #1
 8025f44:	fb00 4003 	mla	r0, r0, r3, r4
 8025f48:	1400      	asrs	r0, r0, #16
 8025f4a:	f53f aeaa 	bmi.w	8025ca2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8025f4e:	3901      	subs	r1, #1
 8025f50:	4288      	cmp	r0, r1
 8025f52:	f6bf aea6 	bge.w	8025ca2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8025f56:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8025f58:	fb01 6303 	mla	r3, r1, r3, r6
 8025f5c:	141b      	asrs	r3, r3, #16
 8025f5e:	f53f aea0 	bmi.w	8025ca2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8025f62:	3a01      	subs	r2, #1
 8025f64:	4293      	cmp	r3, r2
 8025f66:	f6bf ae9c 	bge.w	8025ca2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8025f6a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8025f6e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8025f72:	f1bb 0f00 	cmp.w	fp, #0
 8025f76:	f300 809a 	bgt.w	80260ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8025f7a:	9b07      	ldr	r3, [sp, #28]
 8025f7c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8025f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025f82:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8025f86:	930a      	str	r3, [sp, #40]	; 0x28
 8025f88:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025f8a:	2b00      	cmp	r3, #0
 8025f8c:	f340 81eb 	ble.w	8026366 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 8025f90:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025f94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025f98:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025f9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025f9e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025fa2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025fa6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025faa:	eef0 6a62 	vmov.f32	s13, s5
 8025fae:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025fb2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025fb6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025fba:	ee16 4a90 	vmov	r4, s13
 8025fbe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025fc2:	eef0 6a43 	vmov.f32	s13, s6
 8025fc6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025fca:	ee12 2a90 	vmov	r2, s5
 8025fce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025fd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8025fd6:	ee13 2a10 	vmov	r2, s6
 8025fda:	9327      	str	r3, [sp, #156]	; 0x9c
 8025fdc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025fde:	fb92 f3f3 	sdiv	r3, r2, r3
 8025fe2:	9328      	str	r3, [sp, #160]	; 0xa0
 8025fe4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025fe6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8025fe8:	3b01      	subs	r3, #1
 8025fea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025fee:	9316      	str	r3, [sp, #88]	; 0x58
 8025ff0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025ff2:	bf08      	it	eq
 8025ff4:	4613      	moveq	r3, r2
 8025ff6:	ee16 6a90 	vmov	r6, s13
 8025ffa:	9307      	str	r3, [sp, #28]
 8025ffc:	eeb0 3a67 	vmov.f32	s6, s15
 8026000:	eef0 2a47 	vmov.f32	s5, s14
 8026004:	e622      	b.n	8025c4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8026006:	2800      	cmp	r0, #0
 8026008:	f43f ae92 	beq.w	8025d30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802600c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8026010:	9308      	str	r3, [sp, #32]
 8026012:	0e1b      	lsrs	r3, r3, #24
 8026014:	9310      	str	r3, [sp, #64]	; 0x40
 8026016:	e68b      	b.n	8025d30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8026018:	8839      	ldrh	r1, [r7, #0]
 802601a:	4dd4      	ldr	r5, [pc, #848]	; (802636c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 802601c:	43db      	mvns	r3, r3
 802601e:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8026022:	fa5f f883 	uxtb.w	r8, r3
 8026026:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802602a:	fb0e fe08 	mul.w	lr, lr, r8
 802602e:	10c8      	asrs	r0, r1, #3
 8026030:	00cb      	lsls	r3, r1, #3
 8026032:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026036:	f10e 0101 	add.w	r1, lr, #1
 802603a:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 802603e:	fb00 f008 	mul.w	r0, r0, r8
 8026042:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8026046:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 802604a:	f100 0e01 	add.w	lr, r0, #1
 802604e:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8026052:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8026056:	b2db      	uxtb	r3, r3
 8026058:	b2c9      	uxtb	r1, r1
 802605a:	00d2      	lsls	r2, r2, #3
 802605c:	fb03 f308 	mul.w	r3, r3, r8
 8026060:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8026064:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026068:	430a      	orrs	r2, r1
 802606a:	1c59      	adds	r1, r3, #1
 802606c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8026070:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8026074:	e748      	b.n	8025f08 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8026076:	f112 0801 	adds.w	r8, r2, #1
 802607a:	f53f af4b 	bmi.w	8025f14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802607e:	4543      	cmp	r3, r8
 8026080:	f6ff af48 	blt.w	8025f14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8026084:	f11c 0801 	adds.w	r8, ip, #1
 8026088:	f53f af44 	bmi.w	8025f14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802608c:	45c6      	cmp	lr, r8
 802608e:	f6ff af41 	blt.w	8025f14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8026092:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8026096:	fa0f f28e 	sxth.w	r2, lr
 802609a:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802609e:	9200      	str	r2, [sp, #0]
 80260a0:	b21b      	sxth	r3, r3
 80260a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80260a4:	9819      	ldr	r0, [sp, #100]	; 0x64
 80260a6:	4639      	mov	r1, r7
 80260a8:	f7ff fc87 	bl	80259ba <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 80260ac:	e732      	b.n	8025f14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80260ae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80260b0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80260b2:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 80260b6:	1421      	asrs	r1, r4, #16
 80260b8:	1433      	asrs	r3, r6, #16
 80260ba:	fb07 1303 	mla	r3, r7, r3, r1
 80260be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80260c0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80260c4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80260c8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80260cc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80260d0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80260d4:	2a00      	cmp	r2, #0
 80260d6:	f000 8107 	beq.w	80262e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c8>
 80260da:	684d      	ldr	r5, [r1, #4]
 80260dc:	950d      	str	r5, [sp, #52]	; 0x34
 80260de:	0e2d      	lsrs	r5, r5, #24
 80260e0:	9514      	str	r5, [sp, #80]	; 0x50
 80260e2:	b178      	cbz	r0, 8026104 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80260e4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80260e8:	3f01      	subs	r7, #1
 80260ea:	00bf      	lsls	r7, r7, #2
 80260ec:	3704      	adds	r7, #4
 80260ee:	eb01 0e07 	add.w	lr, r1, r7
 80260f2:	59c9      	ldr	r1, [r1, r7]
 80260f4:	9109      	str	r1, [sp, #36]	; 0x24
 80260f6:	0e09      	lsrs	r1, r1, #24
 80260f8:	9111      	str	r1, [sp, #68]	; 0x44
 80260fa:	f8de 1004 	ldr.w	r1, [lr, #4]
 80260fe:	910e      	str	r1, [sp, #56]	; 0x38
 8026100:	0e09      	lsrs	r1, r1, #24
 8026102:	9115      	str	r1, [sp, #84]	; 0x54
 8026104:	b292      	uxth	r2, r2
 8026106:	b280      	uxth	r0, r0
 8026108:	fb02 f900 	mul.w	r9, r2, r0
 802610c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026110:	0112      	lsls	r2, r2, #4
 8026112:	eba2 0e09 	sub.w	lr, r2, r9
 8026116:	b280      	uxth	r0, r0
 8026118:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802611c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802611e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026120:	fa1f fe8e 	uxth.w	lr, lr
 8026124:	1a09      	subs	r1, r1, r0
 8026126:	b289      	uxth	r1, r1
 8026128:	fb0e f202 	mul.w	r2, lr, r2
 802612c:	fb01 220c 	mla	r2, r1, ip, r2
 8026130:	fb00 2205 	mla	r2, r0, r5, r2
 8026134:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8026136:	fb09 2205 	mla	r2, r9, r5, r2
 802613a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802613e:	2a00      	cmp	r2, #0
 8026140:	f000 80c9 	beq.w	80262d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 8026144:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026148:	d019      	beq.n	802617e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 802614a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802614e:	fb0c fa0a 	mul.w	sl, ip, sl
 8026152:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026156:	fb0c fc03 	mul.w	ip, ip, r3
 802615a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802615e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026162:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026166:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802616a:	4453      	add	r3, sl
 802616c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026170:	0a1b      	lsrs	r3, r3, #8
 8026172:	0a3f      	lsrs	r7, r7, #8
 8026174:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026178:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802617c:	433b      	orrs	r3, r7
 802617e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8026180:	2dff      	cmp	r5, #255	; 0xff
 8026182:	d020      	beq.n	80261c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8026184:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026186:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802618a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802618c:	436f      	muls	r7, r5
 802618e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026190:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026194:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8026196:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802619a:	fb05 fa0a 	mul.w	sl, r5, sl
 802619e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80261a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80261a6:	44bc      	add	ip, r7
 80261a8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80261ac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80261b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80261b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80261b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80261bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80261c0:	ea4c 050a 	orr.w	r5, ip, sl
 80261c4:	950d      	str	r5, [sp, #52]	; 0x34
 80261c6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80261c8:	2dff      	cmp	r5, #255	; 0xff
 80261ca:	d020      	beq.n	802620e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 80261cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80261ce:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80261d2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80261d4:	436f      	muls	r7, r5
 80261d6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80261d8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80261dc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80261de:	fb05 fa0c 	mul.w	sl, r5, ip
 80261e2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80261e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80261ea:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80261ee:	44bc      	add	ip, r7
 80261f0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80261f4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80261f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80261fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026200:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026204:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026208:	ea4c 050a 	orr.w	r5, ip, sl
 802620c:	9509      	str	r5, [sp, #36]	; 0x24
 802620e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8026210:	2dff      	cmp	r5, #255	; 0xff
 8026212:	d020      	beq.n	8026256 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8026214:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026216:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802621a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802621c:	436f      	muls	r7, r5
 802621e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026220:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026224:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8026226:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802622a:	fb05 fa0a 	mul.w	sl, r5, sl
 802622e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026232:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026236:	44bc      	add	ip, r7
 8026238:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802623c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026240:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026244:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026248:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802624c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026250:	ea4c 050a 	orr.w	r5, ip, sl
 8026254:	950e      	str	r5, [sp, #56]	; 0x38
 8026256:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026258:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802625c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802625e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8026262:	fb0e f707 	mul.w	r7, lr, r7
 8026266:	fb01 770c 	mla	r7, r1, ip, r7
 802626a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802626e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026270:	fb00 770c 	mla	r7, r0, ip, r7
 8026274:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8026278:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802627a:	fb09 770c 	mla	r7, r9, ip, r7
 802627e:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8026282:	fb0e fe0c 	mul.w	lr, lr, ip
 8026286:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802628a:	fb01 e303 	mla	r3, r1, r3, lr
 802628e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8026290:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8026294:	990e      	ldr	r1, [sp, #56]	; 0x38
 8026296:	fb00 330a 	mla	r3, r0, sl, r3
 802629a:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802629e:	fb09 3c0c 	mla	ip, r9, ip, r3
 80262a2:	0a3f      	lsrs	r7, r7, #8
 80262a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80262a8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80262ac:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80262b0:	ea47 070c 	orr.w	r7, r7, ip
 80262b4:	2aff      	cmp	r2, #255	; 0xff
 80262b6:	ea4f 2317 	mov.w	r3, r7, lsr #8
 80262ba:	d11e      	bne.n	80262fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6da>
 80262bc:	097a      	lsrs	r2, r7, #5
 80262be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80262c2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80262c6:	f023 0307 	bic.w	r3, r3, #7
 80262ca:	4313      	orrs	r3, r2
 80262cc:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80262d0:	431f      	orrs	r7, r3
 80262d2:	f8a8 7000 	strh.w	r7, [r8]
 80262d6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80262d8:	441c      	add	r4, r3
 80262da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80262dc:	f108 0802 	add.w	r8, r8, #2
 80262e0:	441e      	add	r6, r3
 80262e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80262e6:	e644      	b.n	8025f72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80262e8:	2800      	cmp	r0, #0
 80262ea:	f43f af0b 	beq.w	8026104 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80262ee:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80262f2:	9109      	str	r1, [sp, #36]	; 0x24
 80262f4:	0e09      	lsrs	r1, r1, #24
 80262f6:	9111      	str	r1, [sp, #68]	; 0x44
 80262f8:	e704      	b.n	8026104 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80262fa:	f8b8 1000 	ldrh.w	r1, [r8]
 80262fe:	43d2      	mvns	r2, r2
 8026300:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8026304:	fa5f fe82 	uxtb.w	lr, r2
 8026308:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802630c:	fb0c fc0e 	mul.w	ip, ip, lr
 8026310:	10c8      	asrs	r0, r1, #3
 8026312:	00ca      	lsls	r2, r1, #3
 8026314:	f10c 0101 	add.w	r1, ip, #1
 8026318:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802631c:	0c39      	lsrs	r1, r7, #16
 802631e:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8026322:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026326:	4911      	ldr	r1, [pc, #68]	; (802636c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 8026328:	fb00 f00e 	mul.w	r0, r0, lr
 802632c:	fa5f fc8c 	uxtb.w	ip, ip
 8026330:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8026334:	b2d2      	uxtb	r2, r2
 8026336:	1c41      	adds	r1, r0, #1
 8026338:	fb02 f20e 	mul.w	r2, r2, lr
 802633c:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8026340:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8026344:	1c51      	adds	r1, r2, #1
 8026346:	00c0      	lsls	r0, r0, #3
 8026348:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802634c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026350:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8026354:	ea4c 0c00 	orr.w	ip, ip, r0
 8026358:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802635c:	ea47 0c0c 	orr.w	ip, r7, ip
 8026360:	f8a8 c000 	strh.w	ip, [r8]
 8026364:	e7b7      	b.n	80262d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 8026366:	b01b      	add	sp, #108	; 0x6c
 8026368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802636c:	fffff800 	.word	0xfffff800

08026370 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8026370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026374:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8026378:	2d00      	cmp	r5, #0
 802637a:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802637e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8026382:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8026386:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802638a:	fb05 0e03 	mla	lr, r5, r3, r0
 802638e:	f2c0 808c 	blt.w	80264aa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8026392:	45a9      	cmp	r9, r5
 8026394:	f340 8089 	ble.w	80264aa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8026398:	2800      	cmp	r0, #0
 802639a:	f2c0 8084 	blt.w	80264a6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802639e:	4580      	cmp	r8, r0
 80263a0:	f340 8081 	ble.w	80264a6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 80263a4:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80263a8:	f01e 0f01 	tst.w	lr, #1
 80263ac:	5d16      	ldrb	r6, [r2, r4]
 80263ae:	bf0c      	ite	eq
 80263b0:	f006 060f 	andeq.w	r6, r6, #15
 80263b4:	1136      	asrne	r6, r6, #4
 80263b6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80263ba:	b2f6      	uxtb	r6, r6
 80263bc:	1c44      	adds	r4, r0, #1
 80263be:	d477      	bmi.n	80264b0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 80263c0:	45a0      	cmp	r8, r4
 80263c2:	dd75      	ble.n	80264b0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 80263c4:	2f00      	cmp	r7, #0
 80263c6:	d075      	beq.n	80264b4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 80263c8:	f10e 0a01 	add.w	sl, lr, #1
 80263cc:	ea4f 045a 	mov.w	r4, sl, lsr #1
 80263d0:	f01a 0f01 	tst.w	sl, #1
 80263d4:	5d14      	ldrb	r4, [r2, r4]
 80263d6:	bf0c      	ite	eq
 80263d8:	f004 040f 	andeq.w	r4, r4, #15
 80263dc:	1124      	asrne	r4, r4, #4
 80263de:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80263e2:	b2e4      	uxtb	r4, r4
 80263e4:	3501      	adds	r5, #1
 80263e6:	d469      	bmi.n	80264bc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80263e8:	45a9      	cmp	r9, r5
 80263ea:	dd67      	ble.n	80264bc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80263ec:	f1bc 0f00 	cmp.w	ip, #0
 80263f0:	d067      	beq.n	80264c2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 80263f2:	2800      	cmp	r0, #0
 80263f4:	db60      	blt.n	80264b8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80263f6:	4580      	cmp	r8, r0
 80263f8:	dd5e      	ble.n	80264b8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80263fa:	eb03 090e 	add.w	r9, r3, lr
 80263fe:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8026402:	f019 0f01 	tst.w	r9, #1
 8026406:	5d55      	ldrb	r5, [r2, r5]
 8026408:	bf0c      	ite	eq
 802640a:	f005 050f 	andeq.w	r5, r5, #15
 802640e:	112d      	asrne	r5, r5, #4
 8026410:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8026414:	b2ed      	uxtb	r5, r5
 8026416:	3001      	adds	r0, #1
 8026418:	d456      	bmi.n	80264c8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802641a:	4580      	cmp	r8, r0
 802641c:	dd54      	ble.n	80264c8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802641e:	2f00      	cmp	r7, #0
 8026420:	d054      	beq.n	80264cc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8026422:	3301      	adds	r3, #1
 8026424:	449e      	add	lr, r3
 8026426:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802642a:	f01e 0f01 	tst.w	lr, #1
 802642e:	5cd0      	ldrb	r0, [r2, r3]
 8026430:	bf0c      	ite	eq
 8026432:	f000 000f 	andeq.w	r0, r0, #15
 8026436:	1100      	asrne	r0, r0, #4
 8026438:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802643c:	b2c3      	uxtb	r3, r0
 802643e:	b2ba      	uxth	r2, r7
 8026440:	fa1f fc8c 	uxth.w	ip, ip
 8026444:	fb02 f00c 	mul.w	r0, r2, ip
 8026448:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802644c:	0112      	lsls	r2, r2, #4
 802644e:	fa1f fc8c 	uxth.w	ip, ip
 8026452:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8026456:	1a12      	subs	r2, r2, r0
 8026458:	eba7 070c 	sub.w	r7, r7, ip
 802645c:	b292      	uxth	r2, r2
 802645e:	b2bf      	uxth	r7, r7
 8026460:	4362      	muls	r2, r4
 8026462:	fb06 2207 	mla	r2, r6, r7, r2
 8026466:	fb0c 2505 	mla	r5, ip, r5, r2
 802646a:	fb00 5303 	mla	r3, r0, r3, r5
 802646e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026472:	b1b3      	cbz	r3, 80264a2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8026474:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8026478:	435a      	muls	r2, r3
 802647a:	1c53      	adds	r3, r2, #1
 802647c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026480:	4a2d      	ldr	r2, [pc, #180]	; (8026538 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8026482:	121b      	asrs	r3, r3, #8
 8026484:	6812      	ldr	r2, [r2, #0]
 8026486:	2bff      	cmp	r3, #255	; 0xff
 8026488:	ea4f 2612 	mov.w	r6, r2, lsr #8
 802648c:	d120      	bne.n	80264d0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 802648e:	4b2b      	ldr	r3, [pc, #172]	; (802653c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8026490:	0950      	lsrs	r0, r2, #5
 8026492:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026496:	4033      	ands	r3, r6
 8026498:	4318      	orrs	r0, r3
 802649a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802649e:	4302      	orrs	r2, r0
 80264a0:	800a      	strh	r2, [r1, #0]
 80264a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80264a6:	2600      	movs	r6, #0
 80264a8:	e788      	b.n	80263bc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 80264aa:	2400      	movs	r4, #0
 80264ac:	4626      	mov	r6, r4
 80264ae:	e799      	b.n	80263e4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80264b0:	2400      	movs	r4, #0
 80264b2:	e797      	b.n	80263e4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80264b4:	463c      	mov	r4, r7
 80264b6:	e795      	b.n	80263e4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80264b8:	2500      	movs	r5, #0
 80264ba:	e7ac      	b.n	8026416 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 80264bc:	2300      	movs	r3, #0
 80264be:	461d      	mov	r5, r3
 80264c0:	e7bd      	b.n	802643e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80264c2:	4663      	mov	r3, ip
 80264c4:	4665      	mov	r5, ip
 80264c6:	e7ba      	b.n	802643e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80264c8:	2300      	movs	r3, #0
 80264ca:	e7b8      	b.n	802643e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80264cc:	463b      	mov	r3, r7
 80264ce:	e7b6      	b.n	802643e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80264d0:	880d      	ldrh	r5, [r1, #0]
 80264d2:	b29f      	uxth	r7, r3
 80264d4:	122c      	asrs	r4, r5, #8
 80264d6:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80264da:	43db      	mvns	r3, r3
 80264dc:	b2db      	uxtb	r3, r3
 80264de:	fb10 f007 	smulbb	r0, r0, r7
 80264e2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80264e6:	fb04 0403 	mla	r4, r4, r3, r0
 80264ea:	b2f6      	uxtb	r6, r6
 80264ec:	10e8      	asrs	r0, r5, #3
 80264ee:	b2d2      	uxtb	r2, r2
 80264f0:	00ed      	lsls	r5, r5, #3
 80264f2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80264f6:	fb12 f207 	smulbb	r2, r2, r7
 80264fa:	fb16 f607 	smulbb	r6, r6, r7
 80264fe:	b2ed      	uxtb	r5, r5
 8026500:	b2a4      	uxth	r4, r4
 8026502:	fb00 6603 	mla	r6, r0, r3, r6
 8026506:	fb05 2303 	mla	r3, r5, r3, r2
 802650a:	b29a      	uxth	r2, r3
 802650c:	1c63      	adds	r3, r4, #1
 802650e:	b2b0      	uxth	r0, r6
 8026510:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8026514:	1c53      	adds	r3, r2, #1
 8026516:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802651a:	1c42      	adds	r2, r0, #1
 802651c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026520:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8026524:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026528:	0940      	lsrs	r0, r0, #5
 802652a:	4323      	orrs	r3, r4
 802652c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026530:	4303      	orrs	r3, r0
 8026532:	800b      	strh	r3, [r1, #0]
 8026534:	e7b5      	b.n	80264a2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8026536:	bf00      	nop
 8026538:	2000c44c 	.word	0x2000c44c
 802653c:	00fff800 	.word	0x00fff800

08026540 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026544:	b097      	sub	sp, #92	; 0x5c
 8026546:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 802654a:	9214      	str	r2, [sp, #80]	; 0x50
 802654c:	9309      	str	r3, [sp, #36]	; 0x24
 802654e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8026550:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8026554:	910d      	str	r1, [sp, #52]	; 0x34
 8026556:	930f      	str	r3, [sp, #60]	; 0x3c
 8026558:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802655c:	9015      	str	r0, [sp, #84]	; 0x54
 802655e:	6850      	ldr	r0, [r2, #4]
 8026560:	6812      	ldr	r2, [r2, #0]
 8026562:	fb00 1303 	mla	r3, r0, r3, r1
 8026566:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802656a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802656c:	689b      	ldr	r3, [r3, #8]
 802656e:	3301      	adds	r3, #1
 8026570:	f023 0301 	bic.w	r3, r3, #1
 8026574:	930a      	str	r3, [sp, #40]	; 0x28
 8026576:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026578:	681f      	ldr	r7, [r3, #0]
 802657a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802657c:	2b00      	cmp	r3, #0
 802657e:	dc03      	bgt.n	8026588 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026580:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026582:	2b00      	cmp	r3, #0
 8026584:	f340 8287 	ble.w	8026a96 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8026588:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802658a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802658e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026592:	1e48      	subs	r0, r1, #1
 8026594:	f102 3cff 	add.w	ip, r2, #4294967295
 8026598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802659a:	2b00      	cmp	r3, #0
 802659c:	f340 80c4 	ble.w	8026728 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80265a0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80265a4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80265a8:	d406      	bmi.n	80265b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80265aa:	4586      	cmp	lr, r0
 80265ac:	da04      	bge.n	80265b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80265ae:	2b00      	cmp	r3, #0
 80265b0:	db02      	blt.n	80265b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80265b2:	4563      	cmp	r3, ip
 80265b4:	f2c0 80b9 	blt.w	802672a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80265b8:	f11e 0e01 	adds.w	lr, lr, #1
 80265bc:	f100 80aa 	bmi.w	8026714 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80265c0:	4571      	cmp	r1, lr
 80265c2:	f2c0 80a7 	blt.w	8026714 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80265c6:	3301      	adds	r3, #1
 80265c8:	f100 80a4 	bmi.w	8026714 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80265cc:	429a      	cmp	r2, r3
 80265ce:	f2c0 80a1 	blt.w	8026714 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80265d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80265d4:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 80265d8:	930e      	str	r3, [sp, #56]	; 0x38
 80265da:	46c8      	mov	r8, r9
 80265dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80265de:	2b00      	cmp	r3, #0
 80265e0:	f340 80c3 	ble.w	802676a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80265e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80265e6:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80265ea:	1423      	asrs	r3, r4, #16
 80265ec:	ea4f 4026 	mov.w	r0, r6, asr #16
 80265f0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80265f4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80265f8:	f100 814d 	bmi.w	8026896 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80265fc:	f10c 3bff 	add.w	fp, ip, #4294967295
 8026600:	455b      	cmp	r3, fp
 8026602:	f280 8148 	bge.w	8026896 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026606:	2800      	cmp	r0, #0
 8026608:	f2c0 8145 	blt.w	8026896 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802660c:	f10e 3bff 	add.w	fp, lr, #4294967295
 8026610:	4558      	cmp	r0, fp
 8026612:	f280 8140 	bge.w	8026896 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026616:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026618:	fb00 3305 	mla	r3, r0, r5, r3
 802661c:	0858      	lsrs	r0, r3, #1
 802661e:	07dd      	lsls	r5, r3, #31
 8026620:	f817 c000 	ldrb.w	ip, [r7, r0]
 8026624:	bf54      	ite	pl
 8026626:	f00c 0c0f 	andpl.w	ip, ip, #15
 802662a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802662e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026632:	fa5f fc8c 	uxtb.w	ip, ip
 8026636:	2a00      	cmp	r2, #0
 8026638:	f000 80db 	beq.w	80267f2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 802663c:	1c58      	adds	r0, r3, #1
 802663e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8026642:	07c0      	lsls	r0, r0, #31
 8026644:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8026648:	bf54      	ite	pl
 802664a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802664e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8026652:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8026656:	fa5f f08e 	uxtb.w	r0, lr
 802665a:	9010      	str	r0, [sp, #64]	; 0x40
 802665c:	b1c9      	cbz	r1, 8026692 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802665e:	4453      	add	r3, sl
 8026660:	0858      	lsrs	r0, r3, #1
 8026662:	07dd      	lsls	r5, r3, #31
 8026664:	5c38      	ldrb	r0, [r7, r0]
 8026666:	bf54      	ite	pl
 8026668:	f000 000f 	andpl.w	r0, r0, #15
 802666c:	1100      	asrmi	r0, r0, #4
 802666e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026672:	3301      	adds	r3, #1
 8026674:	b2c0      	uxtb	r0, r0
 8026676:	900b      	str	r0, [sp, #44]	; 0x2c
 8026678:	0858      	lsrs	r0, r3, #1
 802667a:	07dd      	lsls	r5, r3, #31
 802667c:	f817 e000 	ldrb.w	lr, [r7, r0]
 8026680:	bf54      	ite	pl
 8026682:	f00e 030f 	andpl.w	r3, lr, #15
 8026686:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802668a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802668e:	b2db      	uxtb	r3, r3
 8026690:	9311      	str	r3, [sp, #68]	; 0x44
 8026692:	b292      	uxth	r2, r2
 8026694:	b289      	uxth	r1, r1
 8026696:	fb02 f301 	mul.w	r3, r2, r1
 802669a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802669e:	0112      	lsls	r2, r2, #4
 80266a0:	b289      	uxth	r1, r1
 80266a2:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80266a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80266a8:	1ad2      	subs	r2, r2, r3
 80266aa:	1a40      	subs	r0, r0, r1
 80266ac:	b292      	uxth	r2, r2
 80266ae:	436a      	muls	r2, r5
 80266b0:	b280      	uxth	r0, r0
 80266b2:	fb0c 2c00 	mla	ip, ip, r0, r2
 80266b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80266b8:	fb01 c102 	mla	r1, r1, r2, ip
 80266bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80266be:	fb03 1302 	mla	r3, r3, r2, r1
 80266c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80266c6:	b1db      	cbz	r3, 8026700 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 80266c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80266ca:	4353      	muls	r3, r2
 80266cc:	1c5a      	adds	r2, r3, #1
 80266ce:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80266d2:	4ac6      	ldr	r2, [pc, #792]	; (80269ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 80266d4:	121b      	asrs	r3, r3, #8
 80266d6:	6812      	ldr	r2, [r2, #0]
 80266d8:	2bff      	cmp	r3, #255	; 0xff
 80266da:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80266de:	f040 8099 	bne.w	8026814 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 80266e2:	0953      	lsrs	r3, r2, #5
 80266e4:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 80266e8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80266ec:	f02c 0c07 	bic.w	ip, ip, #7
 80266f0:	ea43 0c0c 	orr.w	ip, r3, ip
 80266f4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80266f8:	ea4c 0202 	orr.w	r2, ip, r2
 80266fc:	f8a8 2000 	strh.w	r2, [r8]
 8026700:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8026702:	441c      	add	r4, r3
 8026704:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026706:	441e      	add	r6, r3
 8026708:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802670a:	3b01      	subs	r3, #1
 802670c:	f108 0802 	add.w	r8, r8, #2
 8026710:	930e      	str	r3, [sp, #56]	; 0x38
 8026712:	e763      	b.n	80265dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8026714:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8026716:	441c      	add	r4, r3
 8026718:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802671a:	441e      	add	r6, r3
 802671c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802671e:	3b01      	subs	r3, #1
 8026720:	9309      	str	r3, [sp, #36]	; 0x24
 8026722:	f109 0902 	add.w	r9, r9, #2
 8026726:	e737      	b.n	8026598 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8026728:	d024      	beq.n	8026774 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802672a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802672c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802672e:	3b01      	subs	r3, #1
 8026730:	fb00 4003 	mla	r0, r0, r3, r4
 8026734:	1400      	asrs	r0, r0, #16
 8026736:	f53f af4c 	bmi.w	80265d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802673a:	3901      	subs	r1, #1
 802673c:	4288      	cmp	r0, r1
 802673e:	f6bf af48 	bge.w	80265d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026742:	9924      	ldr	r1, [sp, #144]	; 0x90
 8026744:	fb01 6303 	mla	r3, r1, r3, r6
 8026748:	141b      	asrs	r3, r3, #16
 802674a:	f53f af42 	bmi.w	80265d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802674e:	3a01      	subs	r2, #1
 8026750:	4293      	cmp	r3, r2
 8026752:	f6bf af3e 	bge.w	80265d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026756:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802675a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802675e:	930e      	str	r3, [sp, #56]	; 0x38
 8026760:	46c8      	mov	r8, r9
 8026762:	f1bb 0f00 	cmp.w	fp, #0
 8026766:	f300 80b7 	bgt.w	80268d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 802676a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802676c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8026770:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8026774:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026776:	2b00      	cmp	r3, #0
 8026778:	f340 818d 	ble.w	8026a96 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 802677c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026780:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026784:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026788:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802678a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802678e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026792:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026796:	eef0 6a62 	vmov.f32	s13, s5
 802679a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802679e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80267a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80267a6:	ee16 4a90 	vmov	r4, s13
 80267aa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80267ae:	eef0 6a43 	vmov.f32	s13, s6
 80267b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80267b6:	ee12 2a90 	vmov	r2, s5
 80267ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80267be:	fb92 f3f3 	sdiv	r3, r2, r3
 80267c2:	ee13 2a10 	vmov	r2, s6
 80267c6:	9323      	str	r3, [sp, #140]	; 0x8c
 80267c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80267ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80267ce:	9324      	str	r3, [sp, #144]	; 0x90
 80267d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80267d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80267d4:	3b01      	subs	r3, #1
 80267d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80267da:	930d      	str	r3, [sp, #52]	; 0x34
 80267dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80267de:	bf08      	it	eq
 80267e0:	4613      	moveq	r3, r2
 80267e2:	ee16 6a90 	vmov	r6, s13
 80267e6:	9309      	str	r3, [sp, #36]	; 0x24
 80267e8:	eeb0 3a67 	vmov.f32	s6, s15
 80267ec:	eef0 2a47 	vmov.f32	s5, s14
 80267f0:	e6c3      	b.n	802657a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80267f2:	2900      	cmp	r1, #0
 80267f4:	f43f af4d 	beq.w	8026692 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80267f8:	eb0a 0003 	add.w	r0, sl, r3
 80267fc:	0843      	lsrs	r3, r0, #1
 80267fe:	07c0      	lsls	r0, r0, #31
 8026800:	5cfb      	ldrb	r3, [r7, r3]
 8026802:	bf54      	ite	pl
 8026804:	f003 030f 	andpl.w	r3, r3, #15
 8026808:	111b      	asrmi	r3, r3, #4
 802680a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802680e:	b2db      	uxtb	r3, r3
 8026810:	930b      	str	r3, [sp, #44]	; 0x2c
 8026812:	e73e      	b.n	8026692 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8026814:	f8b8 e000 	ldrh.w	lr, [r8]
 8026818:	fa1f fb83 	uxth.w	fp, r3
 802681c:	ea4f 202e 	mov.w	r0, lr, asr #8
 8026820:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8026824:	43db      	mvns	r3, r3
 8026826:	b2db      	uxtb	r3, r3
 8026828:	fb11 f10b 	smulbb	r1, r1, fp
 802682c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026830:	fb00 1003 	mla	r0, r0, r3, r1
 8026834:	fa5f fc8c 	uxtb.w	ip, ip
 8026838:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802683c:	b2d2      	uxtb	r2, r2
 802683e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8026842:	b280      	uxth	r0, r0
 8026844:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026848:	fb1c fc0b 	smulbb	ip, ip, fp
 802684c:	fa5f fe8e 	uxtb.w	lr, lr
 8026850:	fb12 fb0b 	smulbb	fp, r2, fp
 8026854:	fb01 cc03 	mla	ip, r1, r3, ip
 8026858:	fb0e bb03 	mla	fp, lr, r3, fp
 802685c:	1c43      	adds	r3, r0, #1
 802685e:	fa1f fc8c 	uxth.w	ip, ip
 8026862:	fa1f fb8b 	uxth.w	fp, fp
 8026866:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802686a:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 802686e:	f10c 0101 	add.w	r1, ip, #1
 8026872:	f10b 0001 	add.w	r0, fp, #1
 8026876:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802687a:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802687e:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8026882:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8026886:	4318      	orrs	r0, r3
 8026888:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802688c:	ea40 000c 	orr.w	r0, r0, ip
 8026890:	f8a8 0000 	strh.w	r0, [r8]
 8026894:	e734      	b.n	8026700 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8026896:	f113 0b01 	adds.w	fp, r3, #1
 802689a:	f53f af31 	bmi.w	8026700 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802689e:	45dc      	cmp	ip, fp
 80268a0:	f6ff af2e 	blt.w	8026700 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 80268a4:	f110 0b01 	adds.w	fp, r0, #1
 80268a8:	f53f af2a 	bmi.w	8026700 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 80268ac:	45de      	cmp	lr, fp
 80268ae:	f6ff af27 	blt.w	8026700 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 80268b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80268b4:	9302      	str	r3, [sp, #8]
 80268b6:	fa0f f38e 	sxth.w	r3, lr
 80268ba:	9301      	str	r3, [sp, #4]
 80268bc:	fa0f f38c 	sxth.w	r3, ip
 80268c0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80268c4:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80268c8:	9300      	str	r3, [sp, #0]
 80268ca:	463a      	mov	r2, r7
 80268cc:	4653      	mov	r3, sl
 80268ce:	4641      	mov	r1, r8
 80268d0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80268d2:	f7ff fd4d 	bl	8026370 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 80268d6:	e713      	b.n	8026700 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 80268d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80268da:	1422      	asrs	r2, r4, #16
 80268dc:	1433      	asrs	r3, r6, #16
 80268de:	fb05 2303 	mla	r3, r5, r3, r2
 80268e2:	085a      	lsrs	r2, r3, #1
 80268e4:	07dd      	lsls	r5, r3, #31
 80268e6:	5cba      	ldrb	r2, [r7, r2]
 80268e8:	bf54      	ite	pl
 80268ea:	f002 020f 	andpl.w	r2, r2, #15
 80268ee:	1112      	asrmi	r2, r2, #4
 80268f0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80268f4:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80268f8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80268fc:	b2d2      	uxtb	r2, r2
 80268fe:	2900      	cmp	r1, #0
 8026900:	d076      	beq.n	80269f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8026902:	f103 0e01 	add.w	lr, r3, #1
 8026906:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802690a:	f01e 0f01 	tst.w	lr, #1
 802690e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026912:	bf0c      	ite	eq
 8026914:	f00c 0c0f 	andeq.w	ip, ip, #15
 8026918:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802691c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026920:	fa5f f58c 	uxtb.w	r5, ip
 8026924:	9512      	str	r5, [sp, #72]	; 0x48
 8026926:	b300      	cbz	r0, 802696a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8026928:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802692a:	442b      	add	r3, r5
 802692c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026930:	07dd      	lsls	r5, r3, #31
 8026932:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026936:	bf54      	ite	pl
 8026938:	f00c 0c0f 	andpl.w	ip, ip, #15
 802693c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026940:	3301      	adds	r3, #1
 8026942:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026946:	fa5f f58c 	uxtb.w	r5, ip
 802694a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802694e:	950c      	str	r5, [sp, #48]	; 0x30
 8026950:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026954:	07dd      	lsls	r5, r3, #31
 8026956:	bf54      	ite	pl
 8026958:	f00c 0c0f 	andpl.w	ip, ip, #15
 802695c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026960:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026964:	fa5f f38c 	uxtb.w	r3, ip
 8026968:	9313      	str	r3, [sp, #76]	; 0x4c
 802696a:	b289      	uxth	r1, r1
 802696c:	b280      	uxth	r0, r0
 802696e:	fb01 f300 	mul.w	r3, r1, r0
 8026972:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8026976:	0109      	lsls	r1, r1, #4
 8026978:	b280      	uxth	r0, r0
 802697a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802697e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026980:	1ac9      	subs	r1, r1, r3
 8026982:	ebac 0c00 	sub.w	ip, ip, r0
 8026986:	b289      	uxth	r1, r1
 8026988:	4369      	muls	r1, r5
 802698a:	fa1f fc8c 	uxth.w	ip, ip
 802698e:	fb02 120c 	mla	r2, r2, ip, r1
 8026992:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026994:	fb00 2001 	mla	r0, r0, r1, r2
 8026998:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802699a:	fb03 0302 	mla	r3, r3, r2, r0
 802699e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80269a2:	b1d3      	cbz	r3, 80269da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 80269a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80269a6:	4353      	muls	r3, r2
 80269a8:	1c5a      	adds	r2, r3, #1
 80269aa:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80269ae:	4a0f      	ldr	r2, [pc, #60]	; (80269ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 80269b0:	121b      	asrs	r3, r3, #8
 80269b2:	6812      	ldr	r2, [r2, #0]
 80269b4:	2bff      	cmp	r3, #255	; 0xff
 80269b6:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80269ba:	d12d      	bne.n	8026a18 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80269bc:	0953      	lsrs	r3, r2, #5
 80269be:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 80269c2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80269c6:	f02c 0c07 	bic.w	ip, ip, #7
 80269ca:	ea43 0c0c 	orr.w	ip, r3, ip
 80269ce:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80269d2:	ea4c 0202 	orr.w	r2, ip, r2
 80269d6:	f8a8 2000 	strh.w	r2, [r8]
 80269da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80269dc:	441c      	add	r4, r3
 80269de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80269e0:	f108 0802 	add.w	r8, r8, #2
 80269e4:	441e      	add	r6, r3
 80269e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80269ea:	e6ba      	b.n	8026762 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 80269ec:	2000c44c 	.word	0x2000c44c
 80269f0:	2800      	cmp	r0, #0
 80269f2:	d0ba      	beq.n	802696a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80269f4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80269f6:	442b      	add	r3, r5
 80269f8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80269fc:	07db      	lsls	r3, r3, #31
 80269fe:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026a02:	bf54      	ite	pl
 8026a04:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026a08:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026a0c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026a10:	fa5f f38c 	uxtb.w	r3, ip
 8026a14:	930c      	str	r3, [sp, #48]	; 0x30
 8026a16:	e7a8      	b.n	802696a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8026a18:	f8b8 e000 	ldrh.w	lr, [r8]
 8026a1c:	fa1f fa83 	uxth.w	sl, r3
 8026a20:	ea4f 202e 	mov.w	r0, lr, asr #8
 8026a24:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8026a28:	43db      	mvns	r3, r3
 8026a2a:	b2db      	uxtb	r3, r3
 8026a2c:	fb11 f10a 	smulbb	r1, r1, sl
 8026a30:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026a34:	fb00 1003 	mla	r0, r0, r3, r1
 8026a38:	b2d2      	uxtb	r2, r2
 8026a3a:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8026a3e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8026a42:	fa5f fe8e 	uxtb.w	lr, lr
 8026a46:	fb12 f20a 	smulbb	r2, r2, sl
 8026a4a:	fb0e 2203 	mla	r2, lr, r3, r2
 8026a4e:	fa5f fc8c 	uxtb.w	ip, ip
 8026a52:	b280      	uxth	r0, r0
 8026a54:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026a58:	b292      	uxth	r2, r2
 8026a5a:	fb1c fc0a 	smulbb	ip, ip, sl
 8026a5e:	fb01 cc03 	mla	ip, r1, r3, ip
 8026a62:	1c43      	adds	r3, r0, #1
 8026a64:	1c51      	adds	r1, r2, #1
 8026a66:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8026a6a:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8026a6e:	fa1f fc8c 	uxth.w	ip, ip
 8026a72:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8026a76:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8026a7a:	4308      	orrs	r0, r1
 8026a7c:	f10c 0101 	add.w	r1, ip, #1
 8026a80:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8026a84:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8026a88:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8026a8c:	ea40 000c 	orr.w	r0, r0, ip
 8026a90:	f8a8 0000 	strh.w	r0, [r8]
 8026a94:	e7a1      	b.n	80269da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8026a96:	b017      	add	sp, #92	; 0x5c
 8026a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026a9c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8026a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026aa0:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8026aa4:	2d00      	cmp	r5, #0
 8026aa6:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8026aaa:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8026aae:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8026ab2:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8026ab6:	fb05 0e03 	mla	lr, r5, r3, r0
 8026aba:	f2c0 80b0 	blt.w	8026c1e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8026abe:	45a9      	cmp	r9, r5
 8026ac0:	f340 80ad 	ble.w	8026c1e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8026ac4:	2800      	cmp	r0, #0
 8026ac6:	f2c0 80a8 	blt.w	8026c1a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8026aca:	4580      	cmp	r8, r0
 8026acc:	f340 80a5 	ble.w	8026c1a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8026ad0:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8026ad4:	f01e 0f01 	tst.w	lr, #1
 8026ad8:	5d16      	ldrb	r6, [r2, r4]
 8026ada:	bf0c      	ite	eq
 8026adc:	f006 060f 	andeq.w	r6, r6, #15
 8026ae0:	1136      	asrne	r6, r6, #4
 8026ae2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8026ae6:	b2f6      	uxtb	r6, r6
 8026ae8:	1c44      	adds	r4, r0, #1
 8026aea:	f100 809b 	bmi.w	8026c24 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8026aee:	45a0      	cmp	r8, r4
 8026af0:	f340 8098 	ble.w	8026c24 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8026af4:	2f00      	cmp	r7, #0
 8026af6:	f000 8097 	beq.w	8026c28 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8026afa:	f10e 0a01 	add.w	sl, lr, #1
 8026afe:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8026b02:	f01a 0f01 	tst.w	sl, #1
 8026b06:	5d14      	ldrb	r4, [r2, r4]
 8026b08:	bf0c      	ite	eq
 8026b0a:	f004 040f 	andeq.w	r4, r4, #15
 8026b0e:	1124      	asrne	r4, r4, #4
 8026b10:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8026b14:	b2e4      	uxtb	r4, r4
 8026b16:	3501      	adds	r5, #1
 8026b18:	f100 808a 	bmi.w	8026c30 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8026b1c:	45a9      	cmp	r9, r5
 8026b1e:	f340 8087 	ble.w	8026c30 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8026b22:	f1bc 0f00 	cmp.w	ip, #0
 8026b26:	f000 8086 	beq.w	8026c36 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8026b2a:	2800      	cmp	r0, #0
 8026b2c:	db7e      	blt.n	8026c2c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8026b2e:	4580      	cmp	r8, r0
 8026b30:	dd7c      	ble.n	8026c2c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8026b32:	eb03 090e 	add.w	r9, r3, lr
 8026b36:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8026b3a:	f019 0f01 	tst.w	r9, #1
 8026b3e:	5d55      	ldrb	r5, [r2, r5]
 8026b40:	bf0c      	ite	eq
 8026b42:	f005 050f 	andeq.w	r5, r5, #15
 8026b46:	112d      	asrne	r5, r5, #4
 8026b48:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8026b4c:	b2ed      	uxtb	r5, r5
 8026b4e:	3001      	adds	r0, #1
 8026b50:	d474      	bmi.n	8026c3c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8026b52:	4580      	cmp	r8, r0
 8026b54:	dd72      	ble.n	8026c3c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8026b56:	2f00      	cmp	r7, #0
 8026b58:	d072      	beq.n	8026c40 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8026b5a:	3301      	adds	r3, #1
 8026b5c:	449e      	add	lr, r3
 8026b5e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8026b62:	f01e 0f01 	tst.w	lr, #1
 8026b66:	5cd0      	ldrb	r0, [r2, r3]
 8026b68:	bf0c      	ite	eq
 8026b6a:	f000 000f 	andeq.w	r0, r0, #15
 8026b6e:	1100      	asrne	r0, r0, #4
 8026b70:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026b74:	b2c3      	uxtb	r3, r0
 8026b76:	b2ba      	uxth	r2, r7
 8026b78:	fa1f fc8c 	uxth.w	ip, ip
 8026b7c:	fb02 f00c 	mul.w	r0, r2, ip
 8026b80:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8026b84:	0112      	lsls	r2, r2, #4
 8026b86:	fa1f fc8c 	uxth.w	ip, ip
 8026b8a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8026b8e:	1a12      	subs	r2, r2, r0
 8026b90:	eba7 070c 	sub.w	r7, r7, ip
 8026b94:	b292      	uxth	r2, r2
 8026b96:	b2bf      	uxth	r7, r7
 8026b98:	4362      	muls	r2, r4
 8026b9a:	fb06 2207 	mla	r2, r6, r7, r2
 8026b9e:	fb0c 2505 	mla	r5, ip, r5, r2
 8026ba2:	fb00 5303 	mla	r3, r0, r3, r5
 8026ba6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026baa:	b3a3      	cbz	r3, 8026c16 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8026bac:	4a25      	ldr	r2, [pc, #148]	; (8026c44 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8026bae:	880e      	ldrh	r6, [r1, #0]
 8026bb0:	6815      	ldr	r5, [r2, #0]
 8026bb2:	1234      	asrs	r4, r6, #8
 8026bb4:	b29a      	uxth	r2, r3
 8026bb6:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8026bba:	43db      	mvns	r3, r3
 8026bbc:	b2db      	uxtb	r3, r3
 8026bbe:	fb10 f002 	smulbb	r0, r0, r2
 8026bc2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8026bc6:	fb04 0403 	mla	r4, r4, r3, r0
 8026bca:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8026bce:	10f0      	asrs	r0, r6, #3
 8026bd0:	b2ed      	uxtb	r5, r5
 8026bd2:	00f6      	lsls	r6, r6, #3
 8026bd4:	fb17 f702 	smulbb	r7, r7, r2
 8026bd8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026bdc:	fb15 f202 	smulbb	r2, r5, r2
 8026be0:	b2f6      	uxtb	r6, r6
 8026be2:	b2a4      	uxth	r4, r4
 8026be4:	fb00 7003 	mla	r0, r0, r3, r7
 8026be8:	fb06 2303 	mla	r3, r6, r3, r2
 8026bec:	b29a      	uxth	r2, r3
 8026bee:	1c63      	adds	r3, r4, #1
 8026bf0:	b280      	uxth	r0, r0
 8026bf2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8026bf6:	1c53      	adds	r3, r2, #1
 8026bf8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026bfc:	1c42      	adds	r2, r0, #1
 8026bfe:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026c02:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8026c06:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026c0a:	0940      	lsrs	r0, r0, #5
 8026c0c:	4323      	orrs	r3, r4
 8026c0e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026c12:	4303      	orrs	r3, r0
 8026c14:	800b      	strh	r3, [r1, #0]
 8026c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026c1a:	2600      	movs	r6, #0
 8026c1c:	e764      	b.n	8026ae8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8026c1e:	2400      	movs	r4, #0
 8026c20:	4626      	mov	r6, r4
 8026c22:	e778      	b.n	8026b16 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8026c24:	2400      	movs	r4, #0
 8026c26:	e776      	b.n	8026b16 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8026c28:	463c      	mov	r4, r7
 8026c2a:	e774      	b.n	8026b16 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8026c2c:	2500      	movs	r5, #0
 8026c2e:	e78e      	b.n	8026b4e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8026c30:	2300      	movs	r3, #0
 8026c32:	461d      	mov	r5, r3
 8026c34:	e79f      	b.n	8026b76 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8026c36:	4663      	mov	r3, ip
 8026c38:	4665      	mov	r5, ip
 8026c3a:	e79c      	b.n	8026b76 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8026c3c:	2300      	movs	r3, #0
 8026c3e:	e79a      	b.n	8026b76 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8026c40:	463b      	mov	r3, r7
 8026c42:	e798      	b.n	8026b76 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8026c44:	2000c44c 	.word	0x2000c44c

08026c48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026c4c:	b093      	sub	sp, #76	; 0x4c
 8026c4e:	461d      	mov	r5, r3
 8026c50:	920c      	str	r2, [sp, #48]	; 0x30
 8026c52:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8026c54:	9107      	str	r1, [sp, #28]
 8026c56:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8026c5a:	9011      	str	r0, [sp, #68]	; 0x44
 8026c5c:	6850      	ldr	r0, [r2, #4]
 8026c5e:	6812      	ldr	r2, [r2, #0]
 8026c60:	fb00 1303 	mla	r3, r0, r3, r1
 8026c64:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8026c68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026c6a:	689b      	ldr	r3, [r3, #8]
 8026c6c:	3301      	adds	r3, #1
 8026c6e:	f023 0301 	bic.w	r3, r3, #1
 8026c72:	9306      	str	r3, [sp, #24]
 8026c74:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026c76:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8026c7a:	681f      	ldr	r7, [r3, #0]
 8026c7c:	9b07      	ldr	r3, [sp, #28]
 8026c7e:	2b00      	cmp	r3, #0
 8026c80:	dc03      	bgt.n	8026c8a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8026c82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026c84:	2b00      	cmp	r3, #0
 8026c86:	f340 8267 	ble.w	8027158 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8026c8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026c8c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026c90:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026c94:	1e48      	subs	r0, r1, #1
 8026c96:	f102 3cff 	add.w	ip, r2, #4294967295
 8026c9a:	2d00      	cmp	r5, #0
 8026c9c:	f340 80b8 	ble.w	8026e10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8026ca0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026ca4:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026ca8:	d406      	bmi.n	8026cb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8026caa:	4586      	cmp	lr, r0
 8026cac:	da04      	bge.n	8026cb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8026cae:	2b00      	cmp	r3, #0
 8026cb0:	db02      	blt.n	8026cb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8026cb2:	4563      	cmp	r3, ip
 8026cb4:	f2c0 80ad 	blt.w	8026e12 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8026cb8:	f11e 0e01 	adds.w	lr, lr, #1
 8026cbc:	f100 80a0 	bmi.w	8026e00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8026cc0:	4571      	cmp	r1, lr
 8026cc2:	f2c0 809d 	blt.w	8026e00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8026cc6:	3301      	adds	r3, #1
 8026cc8:	f100 809a 	bmi.w	8026e00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8026ccc:	429a      	cmp	r2, r3
 8026cce:	f2c0 8097 	blt.w	8026e00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8026cd2:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8026cd6:	9509      	str	r5, [sp, #36]	; 0x24
 8026cd8:	46c8      	mov	r8, r9
 8026cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026cdc:	2b00      	cmp	r3, #0
 8026cde:	f340 80b6 	ble.w	8026e4e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026ce2:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8026ce6:	9308      	str	r3, [sp, #32]
 8026ce8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026cea:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8026cee:	1423      	asrs	r3, r4, #16
 8026cf0:	ea4f 4026 	mov.w	r0, r6, asr #16
 8026cf4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026cf8:	f100 813e 	bmi.w	8026f78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8026cfc:	f10c 3bff 	add.w	fp, ip, #4294967295
 8026d00:	455b      	cmp	r3, fp
 8026d02:	f280 8139 	bge.w	8026f78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8026d06:	2800      	cmp	r0, #0
 8026d08:	f2c0 8136 	blt.w	8026f78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8026d0c:	f10e 3bff 	add.w	fp, lr, #4294967295
 8026d10:	4558      	cmp	r0, fp
 8026d12:	f280 8131 	bge.w	8026f78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8026d16:	9a06      	ldr	r2, [sp, #24]
 8026d18:	fb00 3302 	mla	r3, r0, r2, r3
 8026d1c:	0858      	lsrs	r0, r3, #1
 8026d1e:	07da      	lsls	r2, r3, #31
 8026d20:	f817 c000 	ldrb.w	ip, [r7, r0]
 8026d24:	9a08      	ldr	r2, [sp, #32]
 8026d26:	bf54      	ite	pl
 8026d28:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026d2c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026d30:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026d34:	fa5f fc8c 	uxtb.w	ip, ip
 8026d38:	2a00      	cmp	r2, #0
 8026d3a:	f000 80cb 	beq.w	8026ed4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8026d3e:	1c58      	adds	r0, r3, #1
 8026d40:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8026d44:	07c0      	lsls	r0, r0, #31
 8026d46:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8026d4a:	bf54      	ite	pl
 8026d4c:	f00e 0e0f 	andpl.w	lr, lr, #15
 8026d50:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8026d54:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8026d58:	fa5f fe8e 	uxtb.w	lr, lr
 8026d5c:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8026d60:	b1b9      	cbz	r1, 8026d92 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8026d62:	4453      	add	r3, sl
 8026d64:	0858      	lsrs	r0, r3, #1
 8026d66:	07da      	lsls	r2, r3, #31
 8026d68:	5c38      	ldrb	r0, [r7, r0]
 8026d6a:	bf54      	ite	pl
 8026d6c:	f000 000f 	andpl.w	r0, r0, #15
 8026d70:	1100      	asrmi	r0, r0, #4
 8026d72:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026d76:	b2c0      	uxtb	r0, r0
 8026d78:	900a      	str	r0, [sp, #40]	; 0x28
 8026d7a:	1c58      	adds	r0, r3, #1
 8026d7c:	0843      	lsrs	r3, r0, #1
 8026d7e:	07c2      	lsls	r2, r0, #31
 8026d80:	5cfb      	ldrb	r3, [r7, r3]
 8026d82:	bf54      	ite	pl
 8026d84:	f003 030f 	andpl.w	r3, r3, #15
 8026d88:	111b      	asrmi	r3, r3, #4
 8026d8a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026d8e:	b2db      	uxtb	r3, r3
 8026d90:	930e      	str	r3, [sp, #56]	; 0x38
 8026d92:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8026d96:	b289      	uxth	r1, r1
 8026d98:	fb02 f301 	mul.w	r3, r2, r1
 8026d9c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8026da0:	0112      	lsls	r2, r2, #4
 8026da2:	b289      	uxth	r1, r1
 8026da4:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8026da8:	1a40      	subs	r0, r0, r1
 8026daa:	fa1f fe80 	uxth.w	lr, r0
 8026dae:	1ad2      	subs	r2, r2, r3
 8026db0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8026db2:	b292      	uxth	r2, r2
 8026db4:	4342      	muls	r2, r0
 8026db6:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8026dba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026dbc:	fb01 c102 	mla	r1, r1, r2, ip
 8026dc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026dc2:	fb03 1302 	mla	r3, r3, r2, r1
 8026dc6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026dca:	2bff      	cmp	r3, #255	; 0xff
 8026dcc:	f040 8093 	bne.w	8026ef6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8026dd0:	4bbe      	ldr	r3, [pc, #760]	; (80270cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8026dd2:	681a      	ldr	r2, [r3, #0]
 8026dd4:	4bbe      	ldr	r3, [pc, #760]	; (80270d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8026dd6:	0951      	lsrs	r1, r2, #5
 8026dd8:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8026ddc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026de0:	430b      	orrs	r3, r1
 8026de2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8026de6:	4313      	orrs	r3, r2
 8026de8:	f8a8 3000 	strh.w	r3, [r8]
 8026dec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026dee:	441c      	add	r4, r3
 8026df0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026df2:	441e      	add	r6, r3
 8026df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026df6:	3b01      	subs	r3, #1
 8026df8:	f108 0802 	add.w	r8, r8, #2
 8026dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8026dfe:	e76c      	b.n	8026cda <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026e00:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026e02:	441c      	add	r4, r3
 8026e04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026e06:	3d01      	subs	r5, #1
 8026e08:	441e      	add	r6, r3
 8026e0a:	f109 0902 	add.w	r9, r9, #2
 8026e0e:	e744      	b.n	8026c9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8026e10:	d021      	beq.n	8026e56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8026e12:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8026e14:	1e6b      	subs	r3, r5, #1
 8026e16:	fb00 4003 	mla	r0, r0, r3, r4
 8026e1a:	1400      	asrs	r0, r0, #16
 8026e1c:	f53f af59 	bmi.w	8026cd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026e20:	3901      	subs	r1, #1
 8026e22:	4288      	cmp	r0, r1
 8026e24:	f6bf af55 	bge.w	8026cd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026e28:	9920      	ldr	r1, [sp, #128]	; 0x80
 8026e2a:	fb01 6303 	mla	r3, r1, r3, r6
 8026e2e:	141b      	asrs	r3, r3, #16
 8026e30:	f53f af4f 	bmi.w	8026cd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026e34:	3a01      	subs	r2, #1
 8026e36:	4293      	cmp	r3, r2
 8026e38:	f6bf af4b 	bge.w	8026cd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026e3c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8026e40:	9308      	str	r3, [sp, #32]
 8026e42:	46a8      	mov	r8, r5
 8026e44:	46ce      	mov	lr, r9
 8026e46:	f1b8 0f00 	cmp.w	r8, #0
 8026e4a:	f300 80b5 	bgt.w	8026fb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8026e4e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8026e52:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8026e56:	9b07      	ldr	r3, [sp, #28]
 8026e58:	2b00      	cmp	r3, #0
 8026e5a:	f340 817d 	ble.w	8027158 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8026e5e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026e62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026e66:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026e6a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026e6c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026e70:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026e74:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026e78:	eef0 6a62 	vmov.f32	s13, s5
 8026e7c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026e80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026e84:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026e88:	ee16 4a90 	vmov	r4, s13
 8026e8c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026e90:	eef0 6a43 	vmov.f32	s13, s6
 8026e94:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026e98:	ee12 2a90 	vmov	r2, s5
 8026e9c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026ea0:	fb92 f3f3 	sdiv	r3, r2, r3
 8026ea4:	ee13 2a10 	vmov	r2, s6
 8026ea8:	931f      	str	r3, [sp, #124]	; 0x7c
 8026eaa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026eac:	fb92 f3f3 	sdiv	r3, r2, r3
 8026eb0:	9320      	str	r3, [sp, #128]	; 0x80
 8026eb2:	9b07      	ldr	r3, [sp, #28]
 8026eb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026eb6:	3b01      	subs	r3, #1
 8026eb8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026ebc:	9307      	str	r3, [sp, #28]
 8026ebe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026ec0:	ee16 6a90 	vmov	r6, s13
 8026ec4:	bf14      	ite	ne
 8026ec6:	461d      	movne	r5, r3
 8026ec8:	4615      	moveq	r5, r2
 8026eca:	eeb0 3a67 	vmov.f32	s6, s15
 8026ece:	eef0 2a47 	vmov.f32	s5, s14
 8026ed2:	e6d3      	b.n	8026c7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8026ed4:	2900      	cmp	r1, #0
 8026ed6:	f43f af5c 	beq.w	8026d92 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8026eda:	eb0a 0003 	add.w	r0, sl, r3
 8026ede:	0843      	lsrs	r3, r0, #1
 8026ee0:	07c0      	lsls	r0, r0, #31
 8026ee2:	5cfb      	ldrb	r3, [r7, r3]
 8026ee4:	bf54      	ite	pl
 8026ee6:	f003 030f 	andpl.w	r3, r3, #15
 8026eea:	111b      	asrmi	r3, r3, #4
 8026eec:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026ef0:	b2db      	uxtb	r3, r3
 8026ef2:	930a      	str	r3, [sp, #40]	; 0x28
 8026ef4:	e74d      	b.n	8026d92 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8026ef6:	2b00      	cmp	r3, #0
 8026ef8:	f43f af78 	beq.w	8026dec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8026efc:	4a73      	ldr	r2, [pc, #460]	; (80270cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8026efe:	f8b8 c000 	ldrh.w	ip, [r8]
 8026f02:	6810      	ldr	r0, [r2, #0]
 8026f04:	fa1f fe83 	uxth.w	lr, r3
 8026f08:	ea4f 212c 	mov.w	r1, ip, asr #8
 8026f0c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8026f10:	43db      	mvns	r3, r3
 8026f12:	b2db      	uxtb	r3, r3
 8026f14:	fb12 f20e 	smulbb	r2, r2, lr
 8026f18:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026f1c:	fb01 2103 	mla	r1, r1, r3, r2
 8026f20:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8026f24:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8026f28:	b2c0      	uxtb	r0, r0
 8026f2a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8026f2e:	fb1b fb0e 	smulbb	fp, fp, lr
 8026f32:	b289      	uxth	r1, r1
 8026f34:	fb10 fe0e 	smulbb	lr, r0, lr
 8026f38:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026f3c:	fa5f fc8c 	uxtb.w	ip, ip
 8026f40:	fb02 b203 	mla	r2, r2, r3, fp
 8026f44:	1c48      	adds	r0, r1, #1
 8026f46:	fb0c e303 	mla	r3, ip, r3, lr
 8026f4a:	b292      	uxth	r2, r2
 8026f4c:	b29b      	uxth	r3, r3
 8026f4e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8026f52:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8026f56:	f102 0b01 	add.w	fp, r2, #1
 8026f5a:	1c59      	adds	r1, r3, #1
 8026f5c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026f60:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8026f64:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8026f68:	0952      	lsrs	r2, r2, #5
 8026f6a:	4301      	orrs	r1, r0
 8026f6c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026f70:	4311      	orrs	r1, r2
 8026f72:	f8a8 1000 	strh.w	r1, [r8]
 8026f76:	e739      	b.n	8026dec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8026f78:	f113 0b01 	adds.w	fp, r3, #1
 8026f7c:	f53f af36 	bmi.w	8026dec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8026f80:	45dc      	cmp	ip, fp
 8026f82:	f6ff af33 	blt.w	8026dec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8026f86:	f110 0b01 	adds.w	fp, r0, #1
 8026f8a:	f53f af2f 	bmi.w	8026dec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8026f8e:	45de      	cmp	lr, fp
 8026f90:	f6ff af2c 	blt.w	8026dec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8026f94:	9a08      	ldr	r2, [sp, #32]
 8026f96:	9302      	str	r3, [sp, #8]
 8026f98:	fa0f f38e 	sxth.w	r3, lr
 8026f9c:	9301      	str	r3, [sp, #4]
 8026f9e:	fa0f f38c 	sxth.w	r3, ip
 8026fa2:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8026fa6:	9105      	str	r1, [sp, #20]
 8026fa8:	9300      	str	r3, [sp, #0]
 8026faa:	463a      	mov	r2, r7
 8026fac:	4653      	mov	r3, sl
 8026fae:	4641      	mov	r1, r8
 8026fb0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026fb2:	f7ff fd73 	bl	8026a9c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8026fb6:	e719      	b.n	8026dec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8026fb8:	9906      	ldr	r1, [sp, #24]
 8026fba:	1422      	asrs	r2, r4, #16
 8026fbc:	1433      	asrs	r3, r6, #16
 8026fbe:	fb01 2303 	mla	r3, r1, r3, r2
 8026fc2:	085a      	lsrs	r2, r3, #1
 8026fc4:	07d9      	lsls	r1, r3, #31
 8026fc6:	5cba      	ldrb	r2, [r7, r2]
 8026fc8:	bf54      	ite	pl
 8026fca:	f002 020f 	andpl.w	r2, r2, #15
 8026fce:	1112      	asrmi	r2, r2, #4
 8026fd0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8026fd4:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8026fd8:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026fdc:	b2d2      	uxtb	r2, r2
 8026fde:	2800      	cmp	r0, #0
 8026fe0:	d062      	beq.n	80270a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8026fe2:	f103 0a01 	add.w	sl, r3, #1
 8026fe6:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8026fea:	f01a 0f01 	tst.w	sl, #1
 8026fee:	5c79      	ldrb	r1, [r7, r1]
 8026ff0:	bf0c      	ite	eq
 8026ff2:	f001 010f 	andeq.w	r1, r1, #15
 8026ff6:	1109      	asrne	r1, r1, #4
 8026ff8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026ffc:	b2c9      	uxtb	r1, r1
 8026ffe:	910f      	str	r1, [sp, #60]	; 0x3c
 8027000:	f1bc 0f00 	cmp.w	ip, #0
 8027004:	d019      	beq.n	802703a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8027006:	9908      	ldr	r1, [sp, #32]
 8027008:	440b      	add	r3, r1
 802700a:	0859      	lsrs	r1, r3, #1
 802700c:	f013 0f01 	tst.w	r3, #1
 8027010:	5c79      	ldrb	r1, [r7, r1]
 8027012:	bf0c      	ite	eq
 8027014:	f001 010f 	andeq.w	r1, r1, #15
 8027018:	1109      	asrne	r1, r1, #4
 802701a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802701e:	b2c9      	uxtb	r1, r1
 8027020:	3301      	adds	r3, #1
 8027022:	910b      	str	r1, [sp, #44]	; 0x2c
 8027024:	0859      	lsrs	r1, r3, #1
 8027026:	07db      	lsls	r3, r3, #31
 8027028:	5c79      	ldrb	r1, [r7, r1]
 802702a:	bf54      	ite	pl
 802702c:	f001 010f 	andpl.w	r1, r1, #15
 8027030:	1109      	asrmi	r1, r1, #4
 8027032:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8027036:	b2c9      	uxtb	r1, r1
 8027038:	9110      	str	r1, [sp, #64]	; 0x40
 802703a:	b280      	uxth	r0, r0
 802703c:	fa1f fc8c 	uxth.w	ip, ip
 8027040:	fb00 f30c 	mul.w	r3, r0, ip
 8027044:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8027048:	0100      	lsls	r0, r0, #4
 802704a:	fa1f fc8c 	uxth.w	ip, ip
 802704e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8027052:	eba1 010c 	sub.w	r1, r1, ip
 8027056:	fa1f fa81 	uxth.w	sl, r1
 802705a:	1ac0      	subs	r0, r0, r3
 802705c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802705e:	b280      	uxth	r0, r0
 8027060:	4348      	muls	r0, r1
 8027062:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8027064:	fb02 020a 	mla	r2, r2, sl, r0
 8027068:	fb0c 2c01 	mla	ip, ip, r1, r2
 802706c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802706e:	fb03 c302 	mla	r3, r3, r2, ip
 8027072:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027076:	2bff      	cmp	r3, #255	; 0xff
 8027078:	d12c      	bne.n	80270d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 802707a:	4b14      	ldr	r3, [pc, #80]	; (80270cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802707c:	681a      	ldr	r2, [r3, #0]
 802707e:	4b14      	ldr	r3, [pc, #80]	; (80270d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8027080:	0951      	lsrs	r1, r2, #5
 8027082:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8027086:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802708a:	430b      	orrs	r3, r1
 802708c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027090:	4313      	orrs	r3, r2
 8027092:	f8ae 3000 	strh.w	r3, [lr]
 8027096:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8027098:	441c      	add	r4, r3
 802709a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802709c:	f10e 0e02 	add.w	lr, lr, #2
 80270a0:	441e      	add	r6, r3
 80270a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80270a6:	e6ce      	b.n	8026e46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 80270a8:	f1bc 0f00 	cmp.w	ip, #0
 80270ac:	d0c5      	beq.n	802703a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80270ae:	9908      	ldr	r1, [sp, #32]
 80270b0:	440b      	add	r3, r1
 80270b2:	0859      	lsrs	r1, r3, #1
 80270b4:	07db      	lsls	r3, r3, #31
 80270b6:	5c79      	ldrb	r1, [r7, r1]
 80270b8:	bf54      	ite	pl
 80270ba:	f001 010f 	andpl.w	r1, r1, #15
 80270be:	1109      	asrmi	r1, r1, #4
 80270c0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80270c4:	b2c9      	uxtb	r1, r1
 80270c6:	910b      	str	r1, [sp, #44]	; 0x2c
 80270c8:	e7b7      	b.n	802703a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80270ca:	bf00      	nop
 80270cc:	2000c44c 	.word	0x2000c44c
 80270d0:	fffff800 	.word	0xfffff800
 80270d4:	2b00      	cmp	r3, #0
 80270d6:	d0de      	beq.n	8027096 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80270d8:	4a21      	ldr	r2, [pc, #132]	; (8027160 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 80270da:	f8be c000 	ldrh.w	ip, [lr]
 80270de:	6810      	ldr	r0, [r2, #0]
 80270e0:	fa1f fa83 	uxth.w	sl, r3
 80270e4:	ea4f 212c 	mov.w	r1, ip, asr #8
 80270e8:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80270ec:	43db      	mvns	r3, r3
 80270ee:	b2db      	uxtb	r3, r3
 80270f0:	fb12 f20a 	smulbb	r2, r2, sl
 80270f4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80270f8:	fb01 2103 	mla	r1, r1, r3, r2
 80270fc:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8027100:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8027104:	b2c0      	uxtb	r0, r0
 8027106:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802710a:	fa5f fc8c 	uxtb.w	ip, ip
 802710e:	fb10 f00a 	smulbb	r0, r0, sl
 8027112:	fb0c 0003 	mla	r0, ip, r3, r0
 8027116:	b289      	uxth	r1, r1
 8027118:	fb1b fb0a 	smulbb	fp, fp, sl
 802711c:	b280      	uxth	r0, r0
 802711e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8027122:	fb02 b203 	mla	r2, r2, r3, fp
 8027126:	1c4b      	adds	r3, r1, #1
 8027128:	f100 0b01 	add.w	fp, r0, #1
 802712c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027130:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8027134:	b292      	uxth	r2, r2
 8027136:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802713a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802713e:	ea4b 0101 	orr.w	r1, fp, r1
 8027142:	f102 0b01 	add.w	fp, r2, #1
 8027146:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802714a:	0952      	lsrs	r2, r2, #5
 802714c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027150:	4311      	orrs	r1, r2
 8027152:	f8ae 1000 	strh.w	r1, [lr]
 8027156:	e79e      	b.n	8027096 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8027158:	b013      	add	sp, #76	; 0x4c
 802715a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802715e:	bf00      	nop
 8027160:	2000c44c 	.word	0x2000c44c

08027164 <CRC_Lock>:
 8027164:	b530      	push	{r4, r5, lr}
 8027166:	4a20      	ldr	r2, [pc, #128]	; (80271e8 <CRC_Lock+0x84>)
 8027168:	6813      	ldr	r3, [r2, #0]
 802716a:	f023 0301 	bic.w	r3, r3, #1
 802716e:	6013      	str	r3, [r2, #0]
 8027170:	4b1e      	ldr	r3, [pc, #120]	; (80271ec <CRC_Lock+0x88>)
 8027172:	681a      	ldr	r2, [r3, #0]
 8027174:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8027178:	4022      	ands	r2, r4
 802717a:	f24c 2540 	movw	r5, #49728	; 0xc240
 802717e:	42aa      	cmp	r2, r5
 8027180:	d005      	beq.n	802718e <CRC_Lock+0x2a>
 8027182:	681b      	ldr	r3, [r3, #0]
 8027184:	f24c 2270 	movw	r2, #49776	; 0xc270
 8027188:	4023      	ands	r3, r4
 802718a:	4293      	cmp	r3, r2
 802718c:	d124      	bne.n	80271d8 <CRC_Lock+0x74>
 802718e:	4b18      	ldr	r3, [pc, #96]	; (80271f0 <CRC_Lock+0x8c>)
 8027190:	681b      	ldr	r3, [r3, #0]
 8027192:	bb0b      	cbnz	r3, 80271d8 <CRC_Lock+0x74>
 8027194:	4b17      	ldr	r3, [pc, #92]	; (80271f4 <CRC_Lock+0x90>)
 8027196:	681a      	ldr	r2, [r3, #0]
 8027198:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802719c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80271a0:	d00d      	beq.n	80271be <CRC_Lock+0x5a>
 80271a2:	681a      	ldr	r2, [r3, #0]
 80271a4:	f240 4483 	movw	r4, #1155	; 0x483
 80271a8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80271ac:	42a2      	cmp	r2, r4
 80271ae:	d006      	beq.n	80271be <CRC_Lock+0x5a>
 80271b0:	681b      	ldr	r3, [r3, #0]
 80271b2:	f240 4285 	movw	r2, #1157	; 0x485
 80271b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80271ba:	4293      	cmp	r3, r2
 80271bc:	d10c      	bne.n	80271d8 <CRC_Lock+0x74>
 80271be:	4b0e      	ldr	r3, [pc, #56]	; (80271f8 <CRC_Lock+0x94>)
 80271c0:	2201      	movs	r2, #1
 80271c2:	601a      	str	r2, [r3, #0]
 80271c4:	681a      	ldr	r2, [r3, #0]
 80271c6:	2a00      	cmp	r2, #0
 80271c8:	d1fc      	bne.n	80271c4 <CRC_Lock+0x60>
 80271ca:	4b0c      	ldr	r3, [pc, #48]	; (80271fc <CRC_Lock+0x98>)
 80271cc:	6018      	str	r0, [r3, #0]
 80271ce:	6818      	ldr	r0, [r3, #0]
 80271d0:	1a43      	subs	r3, r0, r1
 80271d2:	4258      	negs	r0, r3
 80271d4:	4158      	adcs	r0, r3
 80271d6:	bd30      	pop	{r4, r5, pc}
 80271d8:	4b09      	ldr	r3, [pc, #36]	; (8027200 <CRC_Lock+0x9c>)
 80271da:	2201      	movs	r2, #1
 80271dc:	601a      	str	r2, [r3, #0]
 80271de:	681a      	ldr	r2, [r3, #0]
 80271e0:	2a00      	cmp	r2, #0
 80271e2:	d1fc      	bne.n	80271de <CRC_Lock+0x7a>
 80271e4:	4b07      	ldr	r3, [pc, #28]	; (8027204 <CRC_Lock+0xa0>)
 80271e6:	e7f1      	b.n	80271cc <CRC_Lock+0x68>
 80271e8:	e0002000 	.word	0xe0002000
 80271ec:	e000ed00 	.word	0xe000ed00
 80271f0:	e0042000 	.word	0xe0042000
 80271f4:	5c001000 	.word	0x5c001000
 80271f8:	58024c08 	.word	0x58024c08
 80271fc:	58024c00 	.word	0x58024c00
 8027200:	40023008 	.word	0x40023008
 8027204:	40023000 	.word	0x40023000

08027208 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8027208:	6101      	str	r1, [r0, #16]
 802720a:	4770      	bx	lr

0802720c <_ZN8touchgfx8Gestures4tickEv>:
 802720c:	7b83      	ldrb	r3, [r0, #14]
 802720e:	b14b      	cbz	r3, 8027224 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8027210:	8903      	ldrh	r3, [r0, #8]
 8027212:	3301      	adds	r3, #1
 8027214:	b29b      	uxth	r3, r3
 8027216:	2b07      	cmp	r3, #7
 8027218:	8103      	strh	r3, [r0, #8]
 802721a:	bf81      	itttt	hi
 802721c:	2300      	movhi	r3, #0
 802721e:	8143      	strhhi	r3, [r0, #10]
 8027220:	8183      	strhhi	r3, [r0, #12]
 8027222:	7383      	strbhi	r3, [r0, #14]
 8027224:	4770      	bx	lr
	...

08027228 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8027228:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802722c:	4698      	mov	r8, r3
 802722e:	8883      	ldrh	r3, [r0, #4]
 8027230:	f8ad 3006 	strh.w	r3, [sp, #6]
 8027234:	eba8 0303 	sub.w	r3, r8, r3
 8027238:	b21b      	sxth	r3, r3
 802723a:	4604      	mov	r4, r0
 802723c:	2b00      	cmp	r3, #0
 802723e:	4617      	mov	r7, r2
 8027240:	4a18      	ldr	r2, [pc, #96]	; (80272a4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8027242:	9200      	str	r2, [sp, #0]
 8027244:	bfb8      	it	lt
 8027246:	425b      	neglt	r3, r3
 8027248:	8aa2      	ldrh	r2, [r4, #20]
 802724a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802724e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8027252:	b21b      	sxth	r3, r3
 8027254:	460e      	mov	r6, r1
 8027256:	4293      	cmp	r3, r2
 8027258:	88c1      	ldrh	r1, [r0, #6]
 802725a:	f8ad 1008 	strh.w	r1, [sp, #8]
 802725e:	f04f 0000 	mov.w	r0, #0
 8027262:	f88d 0004 	strb.w	r0, [sp, #4]
 8027266:	f8ad 500c 	strh.w	r5, [sp, #12]
 802726a:	dc07      	bgt.n	802727c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 802726c:	1a69      	subs	r1, r5, r1
 802726e:	b209      	sxth	r1, r1
 8027270:	2900      	cmp	r1, #0
 8027272:	bfb8      	it	lt
 8027274:	4249      	neglt	r1, r1
 8027276:	b209      	sxth	r1, r1
 8027278:	428a      	cmp	r2, r1
 802727a:	da10      	bge.n	802729e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 802727c:	6920      	ldr	r0, [r4, #16]
 802727e:	6803      	ldr	r3, [r0, #0]
 8027280:	4669      	mov	r1, sp
 8027282:	685b      	ldr	r3, [r3, #4]
 8027284:	4798      	blx	r3
 8027286:	eba8 0606 	sub.w	r6, r8, r6
 802728a:	2300      	movs	r3, #0
 802728c:	1bef      	subs	r7, r5, r7
 802728e:	2001      	movs	r0, #1
 8027290:	8123      	strh	r3, [r4, #8]
 8027292:	8166      	strh	r6, [r4, #10]
 8027294:	81a7      	strh	r7, [r4, #12]
 8027296:	f8a4 8004 	strh.w	r8, [r4, #4]
 802729a:	80e5      	strh	r5, [r4, #6]
 802729c:	73a0      	strb	r0, [r4, #14]
 802729e:	b004      	add	sp, #16
 80272a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80272a4:	0802ed7c 	.word	0x0802ed7c

080272a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80272a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80272aa:	461e      	mov	r6, r3
 80272ac:	1e4b      	subs	r3, r1, #1
 80272ae:	2b01      	cmp	r3, #1
 80272b0:	b085      	sub	sp, #20
 80272b2:	4604      	mov	r4, r0
 80272b4:	460d      	mov	r5, r1
 80272b6:	4617      	mov	r7, r2
 80272b8:	d84b      	bhi.n	8027352 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80272ba:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80272be:	1cd3      	adds	r3, r2, #3
 80272c0:	b29b      	uxth	r3, r3
 80272c2:	2b06      	cmp	r3, #6
 80272c4:	d916      	bls.n	80272f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80272c6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8027368 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80272ca:	f8cd c004 	str.w	ip, [sp, #4]
 80272ce:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80272d2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80272d6:	6900      	ldr	r0, [r0, #16]
 80272d8:	f8ad 100c 	strh.w	r1, [sp, #12]
 80272dc:	f04f 0c00 	mov.w	ip, #0
 80272e0:	f88d c008 	strb.w	ip, [sp, #8]
 80272e4:	f8ad 200a 	strh.w	r2, [sp, #10]
 80272e8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80272ec:	6803      	ldr	r3, [r0, #0]
 80272ee:	a901      	add	r1, sp, #4
 80272f0:	689b      	ldr	r3, [r3, #8]
 80272f2:	4798      	blx	r3
 80272f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80272f8:	1cd3      	adds	r3, r2, #3
 80272fa:	b29b      	uxth	r3, r3
 80272fc:	2b06      	cmp	r3, #6
 80272fe:	d916      	bls.n	802732e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8027300:	f8df c064 	ldr.w	ip, [pc, #100]	; 8027368 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8027304:	f8cd c004 	str.w	ip, [sp, #4]
 8027308:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802730c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8027310:	6920      	ldr	r0, [r4, #16]
 8027312:	f8ad 100c 	strh.w	r1, [sp, #12]
 8027316:	f04f 0c01 	mov.w	ip, #1
 802731a:	f88d c008 	strb.w	ip, [sp, #8]
 802731e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8027322:	f8ad 300e 	strh.w	r3, [sp, #14]
 8027326:	6803      	ldr	r3, [r0, #0]
 8027328:	a901      	add	r1, sp, #4
 802732a:	689b      	ldr	r3, [r3, #8]
 802732c:	4798      	blx	r3
 802732e:	4b0d      	ldr	r3, [pc, #52]	; (8027364 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8027330:	9301      	str	r3, [sp, #4]
 8027332:	6920      	ldr	r0, [r4, #16]
 8027334:	f88d 5008 	strb.w	r5, [sp, #8]
 8027338:	2300      	movs	r3, #0
 802733a:	f8ad 700a 	strh.w	r7, [sp, #10]
 802733e:	f8ad 600c 	strh.w	r6, [sp, #12]
 8027342:	f8ad 300e 	strh.w	r3, [sp, #14]
 8027346:	6803      	ldr	r3, [r0, #0]
 8027348:	a901      	add	r1, sp, #4
 802734a:	681b      	ldr	r3, [r3, #0]
 802734c:	4798      	blx	r3
 802734e:	b005      	add	sp, #20
 8027350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027352:	2900      	cmp	r1, #0
 8027354:	d1eb      	bne.n	802732e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8027356:	80a2      	strh	r2, [r4, #4]
 8027358:	80c6      	strh	r6, [r0, #6]
 802735a:	60a1      	str	r1, [r4, #8]
 802735c:	81a1      	strh	r1, [r4, #12]
 802735e:	73a1      	strb	r1, [r4, #14]
 8027360:	e7e5      	b.n	802732e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8027362:	bf00      	nop
 8027364:	0802ed68 	.word	0x0802ed68
 8027368:	0802ed90 	.word	0x0802ed90

0802736c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 802736c:	10c9      	asrs	r1, r1, #3
 802736e:	2900      	cmp	r1, #0
 8027370:	bfb8      	it	lt
 8027372:	4249      	neglt	r1, r1
 8027374:	2801      	cmp	r0, #1
 8027376:	d108      	bne.n	802738a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8027378:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802737c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8027380:	4601      	mov	r1, r0
 8027382:	dd02      	ble.n	802738a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8027384:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8027388:	4770      	bx	lr
 802738a:	29ff      	cmp	r1, #255	; 0xff
 802738c:	bfa8      	it	ge
 802738e:	21ff      	movge	r1, #255	; 0xff
 8027390:	4608      	mov	r0, r1
 8027392:	4770      	bx	lr

08027394 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8027394:	b410      	push	{r4}
 8027396:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802739a:	429c      	cmp	r4, r3
 802739c:	d803      	bhi.n	80273a6 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802739e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80273a2:	f7ef b89f 	b.w	80164e4 <_ZN8touchgfx7Outline6lineToEii>
 80273a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80273aa:	4770      	bx	lr

080273ac <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 80273ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80273b0:	b08b      	sub	sp, #44	; 0x2c
 80273b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80273b6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80273ba:	9308      	str	r3, [sp, #32]
 80273bc:	4606      	mov	r6, r0
 80273be:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80273c2:	9309      	str	r3, [sp, #36]	; 0x24
 80273c4:	468a      	mov	sl, r1
 80273c6:	f7ef f9fa 	bl	80167be <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 80273ca:	68b5      	ldr	r5, [r6, #8]
 80273cc:	4604      	mov	r4, r0
 80273ce:	2d00      	cmp	r5, #0
 80273d0:	d044      	beq.n	802745c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80273d2:	6873      	ldr	r3, [r6, #4]
 80273d4:	42ab      	cmp	r3, r5
 80273d6:	d33d      	bcc.n	8027454 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 80273d8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80273dc:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 80273e0:	eb02 0b03 	add.w	fp, r2, r3
 80273e4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80273e8:	fb02 1203 	mla	r2, r2, r3, r1
 80273ec:	9205      	str	r2, [sp, #20]
 80273ee:	1e6a      	subs	r2, r5, #1
 80273f0:	9204      	str	r2, [sp, #16]
 80273f2:	f04f 0800 	mov.w	r8, #0
 80273f6:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 80273fa:	f9b4 7000 	ldrsh.w	r7, [r4]
 80273fe:	454b      	cmp	r3, r9
 8027400:	463a      	mov	r2, r7
 8027402:	d008      	beq.n	8027416 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8027404:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 8027408:	eb03 0b09 	add.w	fp, r3, r9
 802740c:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8027410:	fb03 1309 	mla	r3, r3, r9, r1
 8027414:	9305      	str	r3, [sp, #20]
 8027416:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802741a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802741e:	4498      	add	r8, r3
 8027420:	9b04      	ldr	r3, [sp, #16]
 8027422:	3b01      	subs	r3, #1
 8027424:	9304      	str	r3, [sp, #16]
 8027426:	9b04      	ldr	r3, [sp, #16]
 8027428:	3301      	adds	r3, #1
 802742a:	d015      	beq.n	8027458 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 802742c:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8027430:	42bb      	cmp	r3, r7
 8027432:	d117      	bne.n	8027464 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8027434:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8027438:	9b04      	ldr	r3, [sp, #16]
 802743a:	4548      	cmp	r0, r9
 802743c:	f103 33ff 	add.w	r3, r3, #4294967295
 8027440:	d17f      	bne.n	8027542 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x196>
 8027442:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8027446:	4401      	add	r1, r0
 8027448:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802744c:	4480      	add	r8, r0
 802744e:	e7e9      	b.n	8027424 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8027450:	461f      	mov	r7, r3
 8027452:	e044      	b.n	80274de <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x132>
 8027454:	2000      	movs	r0, #0
 8027456:	e002      	b.n	802745e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8027458:	2900      	cmp	r1, #0
 802745a:	d16f      	bne.n	802753c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x190>
 802745c:	2001      	movs	r0, #1
 802745e:	b00b      	add	sp, #44	; 0x2c
 8027460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027464:	2900      	cmp	r1, #0
 8027466:	d030      	beq.n	80274ca <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11e>
 8027468:	2f00      	cmp	r7, #0
 802746a:	db29      	blt.n	80274c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x114>
 802746c:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8027470:	42bb      	cmp	r3, r7
 8027472:	dd25      	ble.n	80274c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x114>
 8027474:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8027478:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 802747c:	f7ff ff76 	bl	802736c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 8027480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027482:	fb10 f003 	smulbb	r0, r0, r3
 8027486:	b280      	uxth	r0, r0
 8027488:	1c41      	adds	r1, r0, #1
 802748a:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802748e:	1209      	asrs	r1, r1, #8
 8027490:	f011 0fff 	tst.w	r1, #255	; 0xff
 8027494:	d014      	beq.n	80274c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x114>
 8027496:	9808      	ldr	r0, [sp, #32]
 8027498:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 802749a:	b2c9      	uxtb	r1, r1
 802749c:	b2ba      	uxth	r2, r7
 802749e:	9102      	str	r1, [sp, #8]
 80274a0:	2101      	movs	r1, #1
 80274a2:	4413      	add	r3, r2
 80274a4:	9101      	str	r1, [sp, #4]
 80274a6:	4402      	add	r2, r0
 80274a8:	fa0f f18b 	sxth.w	r1, fp
 80274ac:	f8da 0000 	ldr.w	r0, [sl]
 80274b0:	9100      	str	r1, [sp, #0]
 80274b2:	6941      	ldr	r1, [r0, #20]
 80274b4:	b21b      	sxth	r3, r3
 80274b6:	460d      	mov	r5, r1
 80274b8:	b212      	sxth	r2, r2
 80274ba:	9905      	ldr	r1, [sp, #20]
 80274bc:	4650      	mov	r0, sl
 80274be:	47a8      	blx	r5
 80274c0:	9b04      	ldr	r3, [sp, #16]
 80274c2:	3301      	adds	r3, #1
 80274c4:	f107 0201 	add.w	r2, r7, #1
 80274c8:	d0c8      	beq.n	802745c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80274ca:	f9b4 7000 	ldrsh.w	r7, [r4]
 80274ce:	1abb      	subs	r3, r7, r2
 80274d0:	2b00      	cmp	r3, #0
 80274d2:	dd31      	ble.n	8027538 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 80274d4:	2a00      	cmp	r2, #0
 80274d6:	dabb      	bge.n	8027450 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 80274d8:	2f00      	cmp	r7, #0
 80274da:	dd2d      	ble.n	8027538 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 80274dc:	2200      	movs	r2, #0
 80274de:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 80274e2:	19d1      	adds	r1, r2, r7
 80274e4:	4299      	cmp	r1, r3
 80274e6:	db02      	blt.n	80274ee <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x142>
 80274e8:	1a9f      	subs	r7, r3, r2
 80274ea:	2f00      	cmp	r7, #0
 80274ec:	dd24      	ble.n	8027538 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 80274ee:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80274f2:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 80274f6:	f7ff ff39 	bl	802736c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 80274fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80274fc:	fb10 f003 	smulbb	r0, r0, r3
 8027500:	b280      	uxth	r0, r0
 8027502:	1c41      	adds	r1, r0, #1
 8027504:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027508:	1209      	asrs	r1, r1, #8
 802750a:	f011 0fff 	tst.w	r1, #255	; 0xff
 802750e:	d013      	beq.n	8027538 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8027510:	9808      	ldr	r0, [sp, #32]
 8027512:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8027514:	b292      	uxth	r2, r2
 8027516:	b2c9      	uxtb	r1, r1
 8027518:	4413      	add	r3, r2
 802751a:	9102      	str	r1, [sp, #8]
 802751c:	4402      	add	r2, r0
 802751e:	b23f      	sxth	r7, r7
 8027520:	f8da 0000 	ldr.w	r0, [sl]
 8027524:	9701      	str	r7, [sp, #4]
 8027526:	fa0f f18b 	sxth.w	r1, fp
 802752a:	9100      	str	r1, [sp, #0]
 802752c:	6947      	ldr	r7, [r0, #20]
 802752e:	9905      	ldr	r1, [sp, #20]
 8027530:	b21b      	sxth	r3, r3
 8027532:	b212      	sxth	r2, r2
 8027534:	4650      	mov	r0, sl
 8027536:	47b8      	blx	r7
 8027538:	464b      	mov	r3, r9
 802753a:	e75c      	b.n	80273f6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 802753c:	2f00      	cmp	r7, #0
 802753e:	da95      	bge.n	802746c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xc0>
 8027540:	e78c      	b.n	802745c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8027542:	2900      	cmp	r1, #0
 8027544:	d0f8      	beq.n	8027538 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8027546:	e78f      	b.n	8027468 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbc>

08027548 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8027548:	4b4c      	ldr	r3, [pc, #304]	; (802767c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x134>)
 802754a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 802754e:	2500      	movs	r5, #0
 8027550:	f100 0620 	add.w	r6, r0, #32
 8027554:	4604      	mov	r4, r0
 8027556:	e9c0 3100 	strd	r3, r1, [r0]
 802755a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 802755e:	e9c0 5504 	strd	r5, r5, [r0, #16]
 8027562:	e9c0 5506 	strd	r5, r5, [r0, #24]
 8027566:	f100 0718 	add.w	r7, r0, #24
 802756a:	4630      	mov	r0, r6
 802756c:	4690      	mov	r8, r2
 802756e:	f7ee faf1 	bl	8015b54 <_ZN8touchgfx7OutlineC1Ev>
 8027572:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 8027576:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 802757a:	2301      	movs	r3, #1
 802757c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8027580:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 8027584:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8027588:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 802758c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8027590:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 8027594:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8027598:	f9b8 2000 	ldrsh.w	r2, [r8]
 802759c:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80275a0:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80275a4:	9500      	str	r5, [sp, #0]
 80275a6:	4410      	add	r0, r2
 80275a8:	b280      	uxth	r0, r0
 80275aa:	fa0f fa80 	sxth.w	sl, r0
 80275ae:	45aa      	cmp	sl, r5
 80275b0:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 80275b4:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 80275b8:	dd5c      	ble.n	8027674 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 80275ba:	4591      	cmp	r9, r2
 80275bc:	dd5a      	ble.n	8027674 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 80275be:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 80275c2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80275c6:	440b      	add	r3, r1
 80275c8:	b29b      	uxth	r3, r3
 80275ca:	b21d      	sxth	r5, r3
 80275cc:	2d00      	cmp	r5, #0
 80275ce:	dd51      	ble.n	8027674 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 80275d0:	458e      	cmp	lr, r1
 80275d2:	dd4f      	ble.n	8027674 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 80275d4:	45d1      	cmp	r9, sl
 80275d6:	bfb8      	it	lt
 80275d8:	fa1f f089 	uxthlt.w	r0, r9
 80275dc:	45ae      	cmp	lr, r5
 80275de:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80275e2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80275e6:	bfb8      	it	lt
 80275e8:	fa1f f38e 	uxthlt.w	r3, lr
 80275ec:	1a80      	subs	r0, r0, r2
 80275ee:	1a5b      	subs	r3, r3, r1
 80275f0:	f8ad 0004 	strh.w	r0, [sp, #4]
 80275f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80275f8:	f8ad 2000 	strh.w	r2, [sp]
 80275fc:	f8ad 1002 	strh.w	r1, [sp, #2]
 8027600:	466d      	mov	r5, sp
 8027602:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027606:	e887 0003 	stmia.w	r7, {r0, r1}
 802760a:	f8dc 3000 	ldr.w	r3, [ip]
 802760e:	4660      	mov	r0, ip
 8027610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027612:	4639      	mov	r1, r7
 8027614:	4798      	blx	r3
 8027616:	6861      	ldr	r1, [r4, #4]
 8027618:	4628      	mov	r0, r5
 802761a:	3104      	adds	r1, #4
 802761c:	f7f0 fc30 	bl	8017e80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8027620:	4638      	mov	r0, r7
 8027622:	f7f0 fc05 	bl	8017e30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8027626:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802762a:	f8bd 2000 	ldrh.w	r2, [sp]
 802762e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8027632:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8027636:	4630      	mov	r0, r6
 8027638:	f7ee fa70 	bl	8015b1c <_ZN8touchgfx7Outline5resetEv>
 802763c:	f9bd 3000 	ldrsh.w	r3, [sp]
 8027640:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 8027644:	015b      	lsls	r3, r3, #5
 8027646:	60a3      	str	r3, [r4, #8]
 8027648:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802764c:	015b      	lsls	r3, r3, #5
 802764e:	60e3      	str	r3, [r4, #12]
 8027650:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8027654:	015b      	lsls	r3, r3, #5
 8027656:	6123      	str	r3, [r4, #16]
 8027658:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 802765c:	015b      	lsls	r3, r3, #5
 802765e:	6163      	str	r3, [r4, #20]
 8027660:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8027664:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8027668:	4620      	mov	r0, r4
 802766a:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 802766e:	b002      	add	sp, #8
 8027670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027674:	2300      	movs	r3, #0
 8027676:	9301      	str	r3, [sp, #4]
 8027678:	e7c2      	b.n	8027600 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb8>
 802767a:	bf00      	nop
 802767c:	0802e864 	.word	0x0802e864

08027680 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8027680:	b510      	push	{r4, lr}
 8027682:	4b07      	ldr	r3, [pc, #28]	; (80276a0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8027684:	781b      	ldrb	r3, [r3, #0]
 8027686:	2b01      	cmp	r3, #1
 8027688:	d108      	bne.n	802769c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802768a:	6843      	ldr	r3, [r0, #4]
 802768c:	6814      	ldr	r4, [r2, #0]
 802768e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8027692:	680b      	ldr	r3, [r1, #0]
 8027694:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8027698:	6013      	str	r3, [r2, #0]
 802769a:	600c      	str	r4, [r1, #0]
 802769c:	bd10      	pop	{r4, pc}
 802769e:	bf00      	nop
 80276a0:	2000c434 	.word	0x2000c434

080276a4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80276a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80276a6:	ab02      	add	r3, sp, #8
 80276a8:	4604      	mov	r4, r0
 80276aa:	f843 2d08 	str.w	r2, [r3, #-8]!
 80276ae:	9101      	str	r1, [sp, #4]
 80276b0:	461a      	mov	r2, r3
 80276b2:	a901      	add	r1, sp, #4
 80276b4:	f7ff ffe4 	bl	8027680 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80276b8:	68a3      	ldr	r3, [r4, #8]
 80276ba:	9901      	ldr	r1, [sp, #4]
 80276bc:	9a00      	ldr	r2, [sp, #0]
 80276be:	1ac9      	subs	r1, r1, r3
 80276c0:	68e3      	ldr	r3, [r4, #12]
 80276c2:	9101      	str	r1, [sp, #4]
 80276c4:	1ad2      	subs	r2, r2, r3
 80276c6:	2a00      	cmp	r2, #0
 80276c8:	9200      	str	r2, [sp, #0]
 80276ca:	db1c      	blt.n	8027706 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 80276cc:	6963      	ldr	r3, [r4, #20]
 80276ce:	429a      	cmp	r2, r3
 80276d0:	bfac      	ite	ge
 80276d2:	2002      	movge	r0, #2
 80276d4:	2000      	movlt	r0, #0
 80276d6:	2900      	cmp	r1, #0
 80276d8:	db17      	blt.n	802770a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 80276da:	6923      	ldr	r3, [r4, #16]
 80276dc:	4299      	cmp	r1, r3
 80276de:	bfac      	ite	ge
 80276e0:	2308      	movge	r3, #8
 80276e2:	2300      	movlt	r3, #0
 80276e4:	4303      	orrs	r3, r0
 80276e6:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 80276ea:	b2dd      	uxtb	r5, r3
 80276ec:	b978      	cbnz	r0, 802770e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 80276ee:	f104 0020 	add.w	r0, r4, #32
 80276f2:	f7ff fe4f 	bl	8027394 <_ZN8touchgfx10Rasterizer6lineToEii>
 80276f6:	9b01      	ldr	r3, [sp, #4]
 80276f8:	65e3      	str	r3, [r4, #92]	; 0x5c
 80276fa:	9b00      	ldr	r3, [sp, #0]
 80276fc:	6623      	str	r3, [r4, #96]	; 0x60
 80276fe:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8027702:	b002      	add	sp, #8
 8027704:	bd70      	pop	{r4, r5, r6, pc}
 8027706:	2001      	movs	r0, #1
 8027708:	e7e5      	b.n	80276d6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802770a:	2304      	movs	r3, #4
 802770c:	e7ea      	b.n	80276e4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802770e:	b113      	cbz	r3, 8027716 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8027710:	ea10 0305 	ands.w	r3, r0, r5
 8027714:	d11d      	bne.n	8027752 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xae>
 8027716:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 802771a:	f104 0620 	add.w	r6, r4, #32
 802771e:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 8027722:	b193      	cbz	r3, 802774a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8027724:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8027728:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 802772c:	4298      	cmp	r0, r3
 802772e:	d802      	bhi.n	8027736 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8027730:	4630      	mov	r0, r6
 8027732:	f7ee fef1 	bl	8016518 <_ZN8touchgfx7Outline6moveToEii>
 8027736:	2300      	movs	r3, #0
 8027738:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802773c:	2301      	movs	r3, #1
 802773e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8027742:	e9dd 2100 	ldrd	r2, r1, [sp]
 8027746:	4630      	mov	r0, r6
 8027748:	e7d3      	b.n	80276f2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802774a:	4630      	mov	r0, r6
 802774c:	f7ff fe22 	bl	8027394 <_ZN8touchgfx10Rasterizer6lineToEii>
 8027750:	e7f7      	b.n	8027742 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8027752:	461d      	mov	r5, r3
 8027754:	e7cf      	b.n	80276f6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>

08027756 <_ZN8touchgfx6Canvas5closeEv>:
 8027756:	b538      	push	{r3, r4, r5, lr}
 8027758:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 802775c:	4604      	mov	r4, r0
 802775e:	b993      	cbnz	r3, 8027786 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8027760:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8027764:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 8027768:	4213      	tst	r3, r2
 802776a:	d10c      	bne.n	8027786 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802776c:	f100 0520 	add.w	r5, r0, #32
 8027770:	b123      	cbz	r3, 802777c <_ZN8touchgfx6Canvas5closeEv+0x26>
 8027772:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 8027776:	4628      	mov	r0, r5
 8027778:	f7ff fe0c 	bl	8027394 <_ZN8touchgfx10Rasterizer6lineToEii>
 802777c:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 8027780:	4628      	mov	r0, r5
 8027782:	f7ff fe07 	bl	8027394 <_ZN8touchgfx10Rasterizer6lineToEii>
 8027786:	2300      	movs	r3, #0
 8027788:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802778c:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 8027790:	4298      	cmp	r0, r3
 8027792:	bf34      	ite	cc
 8027794:	2000      	movcc	r0, #0
 8027796:	2001      	movcs	r0, #1
 8027798:	bd38      	pop	{r3, r4, r5, pc}
	...

0802779c <_ZN8touchgfx6Canvas6renderEh>:
 802779c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80277a0:	4604      	mov	r4, r0
 80277a2:	6840      	ldr	r0, [r0, #4]
 80277a4:	6803      	ldr	r3, [r0, #0]
 80277a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80277a8:	460d      	mov	r5, r1
 80277aa:	4798      	blx	r3
 80277ac:	fb10 f105 	smulbb	r1, r0, r5
 80277b0:	b289      	uxth	r1, r1
 80277b2:	1c4d      	adds	r5, r1, #1
 80277b4:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80277b8:	122d      	asrs	r5, r5, #8
 80277ba:	f000 8098 	beq.w	80278ee <_ZN8touchgfx6Canvas6renderEh+0x152>
 80277be:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 80277c2:	2b00      	cmp	r3, #0
 80277c4:	f000 8093 	beq.w	80278ee <_ZN8touchgfx6Canvas6renderEh+0x152>
 80277c8:	4620      	mov	r0, r4
 80277ca:	f7ff ffc4 	bl	8027756 <_ZN8touchgfx6Canvas5closeEv>
 80277ce:	4607      	mov	r7, r0
 80277d0:	2800      	cmp	r0, #0
 80277d2:	d043      	beq.n	802785c <_ZN8touchgfx6Canvas6renderEh+0xc0>
 80277d4:	6863      	ldr	r3, [r4, #4]
 80277d6:	4e47      	ldr	r6, [pc, #284]	; (80278f4 <_ZN8touchgfx6Canvas6renderEh+0x158>)
 80277d8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80277da:	6837      	ldr	r7, [r6, #0]
 80277dc:	6803      	ldr	r3, [r0, #0]
 80277de:	689b      	ldr	r3, [r3, #8]
 80277e0:	4798      	blx	r3
 80277e2:	4601      	mov	r1, r0
 80277e4:	4638      	mov	r0, r7
 80277e6:	f7ec feef 	bl	80145c8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 80277ea:	4607      	mov	r7, r0
 80277ec:	f7e4 ff4e 	bl	800c68c <_ZN8touchgfx3HAL3lcdEv>
 80277f0:	6803      	ldr	r3, [r0, #0]
 80277f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80277f4:	4798      	blx	r3
 80277f6:	4680      	mov	r8, r0
 80277f8:	f7e4 ff48 	bl	800c68c <_ZN8touchgfx3HAL3lcdEv>
 80277fc:	6803      	ldr	r3, [r0, #0]
 80277fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027800:	4798      	blx	r3
 8027802:	280b      	cmp	r0, #11
 8027804:	d858      	bhi.n	80278b8 <_ZN8touchgfx6Canvas6renderEh+0x11c>
 8027806:	e8df f000 	tbb	[pc, r0]
 802780a:	594e      	.short	0x594e
 802780c:	2d570669 	.word	0x2d570669
 8027810:	6262623d 	.word	0x6262623d
 8027814:	6262      	.short	0x6262
 8027816:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802781a:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802781e:	2208      	movs	r2, #8
 8027820:	fb91 f2f2 	sdiv	r2, r1, r2
 8027824:	fb08 2303 	mla	r3, r8, r3, r2
 8027828:	441f      	add	r7, r3
 802782a:	424b      	negs	r3, r1
 802782c:	f003 0307 	and.w	r3, r3, #7
 8027830:	f001 0107 	and.w	r1, r1, #7
 8027834:	bf58      	it	pl
 8027836:	4259      	negpl	r1, r3
 8027838:	b2c9      	uxtb	r1, r1
 802783a:	b2ed      	uxtb	r5, r5
 802783c:	e9cd 1500 	strd	r1, r5, [sp]
 8027840:	6860      	ldr	r0, [r4, #4]
 8027842:	fa0f f388 	sxth.w	r3, r8
 8027846:	463a      	mov	r2, r7
 8027848:	6a81      	ldr	r1, [r0, #40]	; 0x28
 802784a:	f104 0020 	add.w	r0, r4, #32
 802784e:	f7ff fdad 	bl	80273ac <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8027852:	4607      	mov	r7, r0
 8027854:	6830      	ldr	r0, [r6, #0]
 8027856:	6803      	ldr	r3, [r0, #0]
 8027858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802785a:	4798      	blx	r3
 802785c:	4638      	mov	r0, r7
 802785e:	b002      	add	sp, #8
 8027860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027864:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8027868:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802786c:	2204      	movs	r2, #4
 802786e:	fb91 f2f2 	sdiv	r2, r1, r2
 8027872:	fb08 2303 	mla	r3, r8, r3, r2
 8027876:	441f      	add	r7, r3
 8027878:	424b      	negs	r3, r1
 802787a:	f003 0303 	and.w	r3, r3, #3
 802787e:	f001 0103 	and.w	r1, r1, #3
 8027882:	e7d7      	b.n	8027834 <_ZN8touchgfx6Canvas6renderEh+0x98>
 8027884:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8027888:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802788c:	2900      	cmp	r1, #0
 802788e:	f04f 0202 	mov.w	r2, #2
 8027892:	fb91 f2f2 	sdiv	r2, r1, r2
 8027896:	f001 0101 	and.w	r1, r1, #1
 802789a:	fb08 2303 	mla	r3, r8, r3, r2
 802789e:	441f      	add	r7, r3
 80278a0:	bfb8      	it	lt
 80278a2:	4249      	neglt	r1, r1
 80278a4:	e7c8      	b.n	8027838 <_ZN8touchgfx6Canvas6renderEh+0x9c>
 80278a6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80278aa:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80278ae:	fb08 f303 	mul.w	r3, r8, r3
 80278b2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80278b6:	441f      	add	r7, r3
 80278b8:	2100      	movs	r1, #0
 80278ba:	e7be      	b.n	802783a <_ZN8touchgfx6Canvas6renderEh+0x9e>
 80278bc:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80278c0:	fb08 f203 	mul.w	r2, r8, r3
 80278c4:	8b23      	ldrh	r3, [r4, #24]
 80278c6:	2103      	movs	r1, #3
 80278c8:	fb13 2301 	smlabb	r3, r3, r1, r2
 80278cc:	e7f3      	b.n	80278b6 <_ZN8touchgfx6Canvas6renderEh+0x11a>
 80278ce:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80278d2:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80278d6:	fb08 2303 	mla	r3, r8, r3, r2
 80278da:	e7ec      	b.n	80278b6 <_ZN8touchgfx6Canvas6renderEh+0x11a>
 80278dc:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80278e0:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80278e4:	fb08 f303 	mul.w	r3, r8, r3
 80278e8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80278ec:	e7e3      	b.n	80278b6 <_ZN8touchgfx6Canvas6renderEh+0x11a>
 80278ee:	2701      	movs	r7, #1
 80278f0:	e7b4      	b.n	802785c <_ZN8touchgfx6Canvas6renderEh+0xc0>
 80278f2:	bf00      	nop
 80278f4:	2000c43c 	.word	0x2000c43c

080278f8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80278f8:	b513      	push	{r0, r1, r4, lr}
 80278fa:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80278fe:	4604      	mov	r4, r0
 8027900:	e9cd 2100 	strd	r2, r1, [sp]
 8027904:	b1a3      	cbz	r3, 8027930 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8027906:	466a      	mov	r2, sp
 8027908:	a901      	add	r1, sp, #4
 802790a:	4620      	mov	r0, r4
 802790c:	f7ff feb8 	bl	8027680 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8027910:	68a3      	ldr	r3, [r4, #8]
 8027912:	9901      	ldr	r1, [sp, #4]
 8027914:	9a00      	ldr	r2, [sp, #0]
 8027916:	1ac9      	subs	r1, r1, r3
 8027918:	68e3      	ldr	r3, [r4, #12]
 802791a:	9101      	str	r1, [sp, #4]
 802791c:	1ad2      	subs	r2, r2, r3
 802791e:	2a00      	cmp	r2, #0
 8027920:	9200      	str	r2, [sp, #0]
 8027922:	da0b      	bge.n	802793c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8027924:	2301      	movs	r3, #1
 8027926:	2900      	cmp	r1, #0
 8027928:	da0e      	bge.n	8027948 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802792a:	f043 0304 	orr.w	r3, r3, #4
 802792e:	e013      	b.n	8027958 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8027930:	f7ff ff11 	bl	8027756 <_ZN8touchgfx6Canvas5closeEv>
 8027934:	2800      	cmp	r0, #0
 8027936:	d1e6      	bne.n	8027906 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8027938:	b002      	add	sp, #8
 802793a:	bd10      	pop	{r4, pc}
 802793c:	6963      	ldr	r3, [r4, #20]
 802793e:	429a      	cmp	r2, r3
 8027940:	bfac      	ite	ge
 8027942:	2302      	movge	r3, #2
 8027944:	2300      	movlt	r3, #0
 8027946:	e7ee      	b.n	8027926 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8027948:	6920      	ldr	r0, [r4, #16]
 802794a:	4281      	cmp	r1, r0
 802794c:	bfac      	ite	ge
 802794e:	2008      	movge	r0, #8
 8027950:	2000      	movlt	r0, #0
 8027952:	4318      	orrs	r0, r3
 8027954:	b2c3      	uxtb	r3, r0
 8027956:	b158      	cbz	r0, 8027970 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8027958:	2201      	movs	r2, #1
 802795a:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 802795e:	9901      	ldr	r1, [sp, #4]
 8027960:	9a00      	ldr	r2, [sp, #0]
 8027962:	66a1      	str	r1, [r4, #104]	; 0x68
 8027964:	66e2      	str	r2, [r4, #108]	; 0x6c
 8027966:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 802796a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 802796e:	e7e3      	b.n	8027938 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8027970:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8027974:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8027978:	4298      	cmp	r0, r3
 802797a:	d803      	bhi.n	8027984 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 802797c:	f104 0020 	add.w	r0, r4, #32
 8027980:	f7ee fdca 	bl	8016518 <_ZN8touchgfx7Outline6moveToEii>
 8027984:	2300      	movs	r3, #0
 8027986:	2201      	movs	r2, #1
 8027988:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802798c:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8027990:	e7e5      	b.n	802795e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08027992 <__aeabi_atexit>:
 8027992:	460b      	mov	r3, r1
 8027994:	4601      	mov	r1, r0
 8027996:	4618      	mov	r0, r3
 8027998:	f000 b852 	b.w	8027a40 <__cxa_atexit>

0802799c <_ZdlPvj>:
 802799c:	f000 b812 	b.w	80279c4 <_ZdlPv>

080279a0 <__cxa_guard_acquire>:
 80279a0:	6803      	ldr	r3, [r0, #0]
 80279a2:	07db      	lsls	r3, r3, #31
 80279a4:	d406      	bmi.n	80279b4 <__cxa_guard_acquire+0x14>
 80279a6:	7843      	ldrb	r3, [r0, #1]
 80279a8:	b103      	cbz	r3, 80279ac <__cxa_guard_acquire+0xc>
 80279aa:	deff      	udf	#255	; 0xff
 80279ac:	2301      	movs	r3, #1
 80279ae:	7043      	strb	r3, [r0, #1]
 80279b0:	4618      	mov	r0, r3
 80279b2:	4770      	bx	lr
 80279b4:	2000      	movs	r0, #0
 80279b6:	4770      	bx	lr

080279b8 <__cxa_guard_release>:
 80279b8:	2301      	movs	r3, #1
 80279ba:	6003      	str	r3, [r0, #0]
 80279bc:	4770      	bx	lr

080279be <__cxa_pure_virtual>:
 80279be:	b508      	push	{r3, lr}
 80279c0:	f000 f80e 	bl	80279e0 <_ZSt9terminatev>

080279c4 <_ZdlPv>:
 80279c4:	f000 b988 	b.w	8027cd8 <free>

080279c8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80279c8:	b508      	push	{r3, lr}
 80279ca:	4780      	blx	r0
 80279cc:	f000 f80d 	bl	80279ea <abort>

080279d0 <_ZSt13get_terminatev>:
 80279d0:	4b02      	ldr	r3, [pc, #8]	; (80279dc <_ZSt13get_terminatev+0xc>)
 80279d2:	6818      	ldr	r0, [r3, #0]
 80279d4:	f3bf 8f5b 	dmb	ish
 80279d8:	4770      	bx	lr
 80279da:	bf00      	nop
 80279dc:	20000090 	.word	0x20000090

080279e0 <_ZSt9terminatev>:
 80279e0:	b508      	push	{r3, lr}
 80279e2:	f7ff fff5 	bl	80279d0 <_ZSt13get_terminatev>
 80279e6:	f7ff ffef 	bl	80279c8 <_ZN10__cxxabiv111__terminateEPFvvE>

080279ea <abort>:
 80279ea:	b508      	push	{r3, lr}
 80279ec:	2006      	movs	r0, #6
 80279ee:	f001 f8d7 	bl	8028ba0 <raise>
 80279f2:	2001      	movs	r0, #1
 80279f4:	f7db faa2 	bl	8002f3c <_exit>

080279f8 <__assert_func>:
 80279f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80279fa:	4614      	mov	r4, r2
 80279fc:	461a      	mov	r2, r3
 80279fe:	4b09      	ldr	r3, [pc, #36]	; (8027a24 <__assert_func+0x2c>)
 8027a00:	681b      	ldr	r3, [r3, #0]
 8027a02:	4605      	mov	r5, r0
 8027a04:	68d8      	ldr	r0, [r3, #12]
 8027a06:	b14c      	cbz	r4, 8027a1c <__assert_func+0x24>
 8027a08:	4b07      	ldr	r3, [pc, #28]	; (8027a28 <__assert_func+0x30>)
 8027a0a:	9100      	str	r1, [sp, #0]
 8027a0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8027a10:	4906      	ldr	r1, [pc, #24]	; (8027a2c <__assert_func+0x34>)
 8027a12:	462b      	mov	r3, r5
 8027a14:	f000 f8fe 	bl	8027c14 <fiprintf>
 8027a18:	f7ff ffe7 	bl	80279ea <abort>
 8027a1c:	4b04      	ldr	r3, [pc, #16]	; (8027a30 <__assert_func+0x38>)
 8027a1e:	461c      	mov	r4, r3
 8027a20:	e7f3      	b.n	8027a0a <__assert_func+0x12>
 8027a22:	bf00      	nop
 8027a24:	20000094 	.word	0x20000094
 8027a28:	0802f058 	.word	0x0802f058
 8027a2c:	0802f065 	.word	0x0802f065
 8027a30:	0802f093 	.word	0x0802f093

08027a34 <atexit>:
 8027a34:	2300      	movs	r3, #0
 8027a36:	4601      	mov	r1, r0
 8027a38:	461a      	mov	r2, r3
 8027a3a:	4618      	mov	r0, r3
 8027a3c:	f002 b920 	b.w	8029c80 <__register_exitproc>

08027a40 <__cxa_atexit>:
 8027a40:	b510      	push	{r4, lr}
 8027a42:	4c05      	ldr	r4, [pc, #20]	; (8027a58 <__cxa_atexit+0x18>)
 8027a44:	4613      	mov	r3, r2
 8027a46:	b12c      	cbz	r4, 8027a54 <__cxa_atexit+0x14>
 8027a48:	460a      	mov	r2, r1
 8027a4a:	4601      	mov	r1, r0
 8027a4c:	2002      	movs	r0, #2
 8027a4e:	f002 f917 	bl	8029c80 <__register_exitproc>
 8027a52:	bd10      	pop	{r4, pc}
 8027a54:	4620      	mov	r0, r4
 8027a56:	e7fc      	b.n	8027a52 <__cxa_atexit+0x12>
 8027a58:	08029c81 	.word	0x08029c81

08027a5c <__errno>:
 8027a5c:	4b01      	ldr	r3, [pc, #4]	; (8027a64 <__errno+0x8>)
 8027a5e:	6818      	ldr	r0, [r3, #0]
 8027a60:	4770      	bx	lr
 8027a62:	bf00      	nop
 8027a64:	20000094 	.word	0x20000094

08027a68 <std>:
 8027a68:	2300      	movs	r3, #0
 8027a6a:	b510      	push	{r4, lr}
 8027a6c:	4604      	mov	r4, r0
 8027a6e:	e9c0 3300 	strd	r3, r3, [r0]
 8027a72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8027a76:	6083      	str	r3, [r0, #8]
 8027a78:	8181      	strh	r1, [r0, #12]
 8027a7a:	6643      	str	r3, [r0, #100]	; 0x64
 8027a7c:	81c2      	strh	r2, [r0, #14]
 8027a7e:	6183      	str	r3, [r0, #24]
 8027a80:	4619      	mov	r1, r3
 8027a82:	2208      	movs	r2, #8
 8027a84:	305c      	adds	r0, #92	; 0x5c
 8027a86:	f000 f93d 	bl	8027d04 <memset>
 8027a8a:	4b05      	ldr	r3, [pc, #20]	; (8027aa0 <std+0x38>)
 8027a8c:	6263      	str	r3, [r4, #36]	; 0x24
 8027a8e:	4b05      	ldr	r3, [pc, #20]	; (8027aa4 <std+0x3c>)
 8027a90:	62a3      	str	r3, [r4, #40]	; 0x28
 8027a92:	4b05      	ldr	r3, [pc, #20]	; (8027aa8 <std+0x40>)
 8027a94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8027a96:	4b05      	ldr	r3, [pc, #20]	; (8027aac <std+0x44>)
 8027a98:	6224      	str	r4, [r4, #32]
 8027a9a:	6323      	str	r3, [r4, #48]	; 0x30
 8027a9c:	bd10      	pop	{r4, pc}
 8027a9e:	bf00      	nop
 8027aa0:	08028c19 	.word	0x08028c19
 8027aa4:	08028c3b 	.word	0x08028c3b
 8027aa8:	08028c73 	.word	0x08028c73
 8027aac:	08028c97 	.word	0x08028c97

08027ab0 <_cleanup_r>:
 8027ab0:	4901      	ldr	r1, [pc, #4]	; (8027ab8 <_cleanup_r+0x8>)
 8027ab2:	f000 b8c1 	b.w	8027c38 <_fwalk_reent>
 8027ab6:	bf00      	nop
 8027ab8:	0802ab69 	.word	0x0802ab69

08027abc <__sfmoreglue>:
 8027abc:	b570      	push	{r4, r5, r6, lr}
 8027abe:	2268      	movs	r2, #104	; 0x68
 8027ac0:	1e4d      	subs	r5, r1, #1
 8027ac2:	4355      	muls	r5, r2
 8027ac4:	460e      	mov	r6, r1
 8027ac6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8027aca:	f000 f98f 	bl	8027dec <_malloc_r>
 8027ace:	4604      	mov	r4, r0
 8027ad0:	b140      	cbz	r0, 8027ae4 <__sfmoreglue+0x28>
 8027ad2:	2100      	movs	r1, #0
 8027ad4:	e9c0 1600 	strd	r1, r6, [r0]
 8027ad8:	300c      	adds	r0, #12
 8027ada:	60a0      	str	r0, [r4, #8]
 8027adc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8027ae0:	f000 f910 	bl	8027d04 <memset>
 8027ae4:	4620      	mov	r0, r4
 8027ae6:	bd70      	pop	{r4, r5, r6, pc}

08027ae8 <__sfp_lock_acquire>:
 8027ae8:	4801      	ldr	r0, [pc, #4]	; (8027af0 <__sfp_lock_acquire+0x8>)
 8027aea:	f000 b8ea 	b.w	8027cc2 <__retarget_lock_acquire_recursive>
 8027aee:	bf00      	nop
 8027af0:	2000c542 	.word	0x2000c542

08027af4 <__sfp_lock_release>:
 8027af4:	4801      	ldr	r0, [pc, #4]	; (8027afc <__sfp_lock_release+0x8>)
 8027af6:	f000 b8e6 	b.w	8027cc6 <__retarget_lock_release_recursive>
 8027afa:	bf00      	nop
 8027afc:	2000c542 	.word	0x2000c542

08027b00 <__sinit_lock_acquire>:
 8027b00:	4801      	ldr	r0, [pc, #4]	; (8027b08 <__sinit_lock_acquire+0x8>)
 8027b02:	f000 b8de 	b.w	8027cc2 <__retarget_lock_acquire_recursive>
 8027b06:	bf00      	nop
 8027b08:	2000c543 	.word	0x2000c543

08027b0c <__sinit_lock_release>:
 8027b0c:	4801      	ldr	r0, [pc, #4]	; (8027b14 <__sinit_lock_release+0x8>)
 8027b0e:	f000 b8da 	b.w	8027cc6 <__retarget_lock_release_recursive>
 8027b12:	bf00      	nop
 8027b14:	2000c543 	.word	0x2000c543

08027b18 <__sinit>:
 8027b18:	b510      	push	{r4, lr}
 8027b1a:	4604      	mov	r4, r0
 8027b1c:	f7ff fff0 	bl	8027b00 <__sinit_lock_acquire>
 8027b20:	69a3      	ldr	r3, [r4, #24]
 8027b22:	b11b      	cbz	r3, 8027b2c <__sinit+0x14>
 8027b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027b28:	f7ff bff0 	b.w	8027b0c <__sinit_lock_release>
 8027b2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8027b30:	6523      	str	r3, [r4, #80]	; 0x50
 8027b32:	4b13      	ldr	r3, [pc, #76]	; (8027b80 <__sinit+0x68>)
 8027b34:	4a13      	ldr	r2, [pc, #76]	; (8027b84 <__sinit+0x6c>)
 8027b36:	681b      	ldr	r3, [r3, #0]
 8027b38:	62a2      	str	r2, [r4, #40]	; 0x28
 8027b3a:	42a3      	cmp	r3, r4
 8027b3c:	bf04      	itt	eq
 8027b3e:	2301      	moveq	r3, #1
 8027b40:	61a3      	streq	r3, [r4, #24]
 8027b42:	4620      	mov	r0, r4
 8027b44:	f000 f820 	bl	8027b88 <__sfp>
 8027b48:	6060      	str	r0, [r4, #4]
 8027b4a:	4620      	mov	r0, r4
 8027b4c:	f000 f81c 	bl	8027b88 <__sfp>
 8027b50:	60a0      	str	r0, [r4, #8]
 8027b52:	4620      	mov	r0, r4
 8027b54:	f000 f818 	bl	8027b88 <__sfp>
 8027b58:	2200      	movs	r2, #0
 8027b5a:	60e0      	str	r0, [r4, #12]
 8027b5c:	2104      	movs	r1, #4
 8027b5e:	6860      	ldr	r0, [r4, #4]
 8027b60:	f7ff ff82 	bl	8027a68 <std>
 8027b64:	68a0      	ldr	r0, [r4, #8]
 8027b66:	2201      	movs	r2, #1
 8027b68:	2109      	movs	r1, #9
 8027b6a:	f7ff ff7d 	bl	8027a68 <std>
 8027b6e:	68e0      	ldr	r0, [r4, #12]
 8027b70:	2202      	movs	r2, #2
 8027b72:	2112      	movs	r1, #18
 8027b74:	f7ff ff78 	bl	8027a68 <std>
 8027b78:	2301      	movs	r3, #1
 8027b7a:	61a3      	str	r3, [r4, #24]
 8027b7c:	e7d2      	b.n	8027b24 <__sinit+0xc>
 8027b7e:	bf00      	nop
 8027b80:	0802f0f4 	.word	0x0802f0f4
 8027b84:	08027ab1 	.word	0x08027ab1

08027b88 <__sfp>:
 8027b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027b8a:	4607      	mov	r7, r0
 8027b8c:	f7ff ffac 	bl	8027ae8 <__sfp_lock_acquire>
 8027b90:	4b1e      	ldr	r3, [pc, #120]	; (8027c0c <__sfp+0x84>)
 8027b92:	681e      	ldr	r6, [r3, #0]
 8027b94:	69b3      	ldr	r3, [r6, #24]
 8027b96:	b913      	cbnz	r3, 8027b9e <__sfp+0x16>
 8027b98:	4630      	mov	r0, r6
 8027b9a:	f7ff ffbd 	bl	8027b18 <__sinit>
 8027b9e:	3648      	adds	r6, #72	; 0x48
 8027ba0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8027ba4:	3b01      	subs	r3, #1
 8027ba6:	d503      	bpl.n	8027bb0 <__sfp+0x28>
 8027ba8:	6833      	ldr	r3, [r6, #0]
 8027baa:	b30b      	cbz	r3, 8027bf0 <__sfp+0x68>
 8027bac:	6836      	ldr	r6, [r6, #0]
 8027bae:	e7f7      	b.n	8027ba0 <__sfp+0x18>
 8027bb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8027bb4:	b9d5      	cbnz	r5, 8027bec <__sfp+0x64>
 8027bb6:	4b16      	ldr	r3, [pc, #88]	; (8027c10 <__sfp+0x88>)
 8027bb8:	60e3      	str	r3, [r4, #12]
 8027bba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8027bbe:	6665      	str	r5, [r4, #100]	; 0x64
 8027bc0:	f000 f87e 	bl	8027cc0 <__retarget_lock_init_recursive>
 8027bc4:	f7ff ff96 	bl	8027af4 <__sfp_lock_release>
 8027bc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8027bcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8027bd0:	6025      	str	r5, [r4, #0]
 8027bd2:	61a5      	str	r5, [r4, #24]
 8027bd4:	2208      	movs	r2, #8
 8027bd6:	4629      	mov	r1, r5
 8027bd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8027bdc:	f000 f892 	bl	8027d04 <memset>
 8027be0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8027be4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8027be8:	4620      	mov	r0, r4
 8027bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027bec:	3468      	adds	r4, #104	; 0x68
 8027bee:	e7d9      	b.n	8027ba4 <__sfp+0x1c>
 8027bf0:	2104      	movs	r1, #4
 8027bf2:	4638      	mov	r0, r7
 8027bf4:	f7ff ff62 	bl	8027abc <__sfmoreglue>
 8027bf8:	4604      	mov	r4, r0
 8027bfa:	6030      	str	r0, [r6, #0]
 8027bfc:	2800      	cmp	r0, #0
 8027bfe:	d1d5      	bne.n	8027bac <__sfp+0x24>
 8027c00:	f7ff ff78 	bl	8027af4 <__sfp_lock_release>
 8027c04:	230c      	movs	r3, #12
 8027c06:	603b      	str	r3, [r7, #0]
 8027c08:	e7ee      	b.n	8027be8 <__sfp+0x60>
 8027c0a:	bf00      	nop
 8027c0c:	0802f0f4 	.word	0x0802f0f4
 8027c10:	ffff0001 	.word	0xffff0001

08027c14 <fiprintf>:
 8027c14:	b40e      	push	{r1, r2, r3}
 8027c16:	b503      	push	{r0, r1, lr}
 8027c18:	4601      	mov	r1, r0
 8027c1a:	ab03      	add	r3, sp, #12
 8027c1c:	4805      	ldr	r0, [pc, #20]	; (8027c34 <fiprintf+0x20>)
 8027c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8027c22:	6800      	ldr	r0, [r0, #0]
 8027c24:	9301      	str	r3, [sp, #4]
 8027c26:	f000 f97f 	bl	8027f28 <_vfiprintf_r>
 8027c2a:	b002      	add	sp, #8
 8027c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8027c30:	b003      	add	sp, #12
 8027c32:	4770      	bx	lr
 8027c34:	20000094 	.word	0x20000094

08027c38 <_fwalk_reent>:
 8027c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027c3c:	4606      	mov	r6, r0
 8027c3e:	4688      	mov	r8, r1
 8027c40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8027c44:	2700      	movs	r7, #0
 8027c46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8027c4a:	f1b9 0901 	subs.w	r9, r9, #1
 8027c4e:	d505      	bpl.n	8027c5c <_fwalk_reent+0x24>
 8027c50:	6824      	ldr	r4, [r4, #0]
 8027c52:	2c00      	cmp	r4, #0
 8027c54:	d1f7      	bne.n	8027c46 <_fwalk_reent+0xe>
 8027c56:	4638      	mov	r0, r7
 8027c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027c5c:	89ab      	ldrh	r3, [r5, #12]
 8027c5e:	2b01      	cmp	r3, #1
 8027c60:	d907      	bls.n	8027c72 <_fwalk_reent+0x3a>
 8027c62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8027c66:	3301      	adds	r3, #1
 8027c68:	d003      	beq.n	8027c72 <_fwalk_reent+0x3a>
 8027c6a:	4629      	mov	r1, r5
 8027c6c:	4630      	mov	r0, r6
 8027c6e:	47c0      	blx	r8
 8027c70:	4307      	orrs	r7, r0
 8027c72:	3568      	adds	r5, #104	; 0x68
 8027c74:	e7e9      	b.n	8027c4a <_fwalk_reent+0x12>
	...

08027c78 <__libc_init_array>:
 8027c78:	b570      	push	{r4, r5, r6, lr}
 8027c7a:	4d0d      	ldr	r5, [pc, #52]	; (8027cb0 <__libc_init_array+0x38>)
 8027c7c:	4c0d      	ldr	r4, [pc, #52]	; (8027cb4 <__libc_init_array+0x3c>)
 8027c7e:	1b64      	subs	r4, r4, r5
 8027c80:	10a4      	asrs	r4, r4, #2
 8027c82:	2600      	movs	r6, #0
 8027c84:	42a6      	cmp	r6, r4
 8027c86:	d109      	bne.n	8027c9c <__libc_init_array+0x24>
 8027c88:	4d0b      	ldr	r5, [pc, #44]	; (8027cb8 <__libc_init_array+0x40>)
 8027c8a:	4c0c      	ldr	r4, [pc, #48]	; (8027cbc <__libc_init_array+0x44>)
 8027c8c:	f004 fa9a 	bl	802c1c4 <_init>
 8027c90:	1b64      	subs	r4, r4, r5
 8027c92:	10a4      	asrs	r4, r4, #2
 8027c94:	2600      	movs	r6, #0
 8027c96:	42a6      	cmp	r6, r4
 8027c98:	d105      	bne.n	8027ca6 <__libc_init_array+0x2e>
 8027c9a:	bd70      	pop	{r4, r5, r6, pc}
 8027c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8027ca0:	4798      	blx	r3
 8027ca2:	3601      	adds	r6, #1
 8027ca4:	e7ee      	b.n	8027c84 <__libc_init_array+0xc>
 8027ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8027caa:	4798      	blx	r3
 8027cac:	3601      	adds	r6, #1
 8027cae:	e7f2      	b.n	8027c96 <__libc_init_array+0x1e>
 8027cb0:	08030874 	.word	0x08030874
 8027cb4:	08030874 	.word	0x08030874
 8027cb8:	08030874 	.word	0x08030874
 8027cbc:	0803088c 	.word	0x0803088c

08027cc0 <__retarget_lock_init_recursive>:
 8027cc0:	4770      	bx	lr

08027cc2 <__retarget_lock_acquire_recursive>:
 8027cc2:	4770      	bx	lr

08027cc4 <__retarget_lock_release>:
 8027cc4:	4770      	bx	lr

08027cc6 <__retarget_lock_release_recursive>:
 8027cc6:	4770      	bx	lr

08027cc8 <malloc>:
 8027cc8:	4b02      	ldr	r3, [pc, #8]	; (8027cd4 <malloc+0xc>)
 8027cca:	4601      	mov	r1, r0
 8027ccc:	6818      	ldr	r0, [r3, #0]
 8027cce:	f000 b88d 	b.w	8027dec <_malloc_r>
 8027cd2:	bf00      	nop
 8027cd4:	20000094 	.word	0x20000094

08027cd8 <free>:
 8027cd8:	4b02      	ldr	r3, [pc, #8]	; (8027ce4 <free+0xc>)
 8027cda:	4601      	mov	r1, r0
 8027cdc:	6818      	ldr	r0, [r3, #0]
 8027cde:	f000 b819 	b.w	8027d14 <_free_r>
 8027ce2:	bf00      	nop
 8027ce4:	20000094 	.word	0x20000094

08027ce8 <memcpy>:
 8027ce8:	440a      	add	r2, r1
 8027cea:	4291      	cmp	r1, r2
 8027cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8027cf0:	d100      	bne.n	8027cf4 <memcpy+0xc>
 8027cf2:	4770      	bx	lr
 8027cf4:	b510      	push	{r4, lr}
 8027cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8027cfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8027cfe:	4291      	cmp	r1, r2
 8027d00:	d1f9      	bne.n	8027cf6 <memcpy+0xe>
 8027d02:	bd10      	pop	{r4, pc}

08027d04 <memset>:
 8027d04:	4402      	add	r2, r0
 8027d06:	4603      	mov	r3, r0
 8027d08:	4293      	cmp	r3, r2
 8027d0a:	d100      	bne.n	8027d0e <memset+0xa>
 8027d0c:	4770      	bx	lr
 8027d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8027d12:	e7f9      	b.n	8027d08 <memset+0x4>

08027d14 <_free_r>:
 8027d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027d16:	2900      	cmp	r1, #0
 8027d18:	d044      	beq.n	8027da4 <_free_r+0x90>
 8027d1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027d1e:	9001      	str	r0, [sp, #4]
 8027d20:	2b00      	cmp	r3, #0
 8027d22:	f1a1 0404 	sub.w	r4, r1, #4
 8027d26:	bfb8      	it	lt
 8027d28:	18e4      	addlt	r4, r4, r3
 8027d2a:	f003 fb71 	bl	802b410 <__malloc_lock>
 8027d2e:	4a1e      	ldr	r2, [pc, #120]	; (8027da8 <_free_r+0x94>)
 8027d30:	9801      	ldr	r0, [sp, #4]
 8027d32:	6813      	ldr	r3, [r2, #0]
 8027d34:	b933      	cbnz	r3, 8027d44 <_free_r+0x30>
 8027d36:	6063      	str	r3, [r4, #4]
 8027d38:	6014      	str	r4, [r2, #0]
 8027d3a:	b003      	add	sp, #12
 8027d3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8027d40:	f003 bb6c 	b.w	802b41c <__malloc_unlock>
 8027d44:	42a3      	cmp	r3, r4
 8027d46:	d908      	bls.n	8027d5a <_free_r+0x46>
 8027d48:	6825      	ldr	r5, [r4, #0]
 8027d4a:	1961      	adds	r1, r4, r5
 8027d4c:	428b      	cmp	r3, r1
 8027d4e:	bf01      	itttt	eq
 8027d50:	6819      	ldreq	r1, [r3, #0]
 8027d52:	685b      	ldreq	r3, [r3, #4]
 8027d54:	1949      	addeq	r1, r1, r5
 8027d56:	6021      	streq	r1, [r4, #0]
 8027d58:	e7ed      	b.n	8027d36 <_free_r+0x22>
 8027d5a:	461a      	mov	r2, r3
 8027d5c:	685b      	ldr	r3, [r3, #4]
 8027d5e:	b10b      	cbz	r3, 8027d64 <_free_r+0x50>
 8027d60:	42a3      	cmp	r3, r4
 8027d62:	d9fa      	bls.n	8027d5a <_free_r+0x46>
 8027d64:	6811      	ldr	r1, [r2, #0]
 8027d66:	1855      	adds	r5, r2, r1
 8027d68:	42a5      	cmp	r5, r4
 8027d6a:	d10b      	bne.n	8027d84 <_free_r+0x70>
 8027d6c:	6824      	ldr	r4, [r4, #0]
 8027d6e:	4421      	add	r1, r4
 8027d70:	1854      	adds	r4, r2, r1
 8027d72:	42a3      	cmp	r3, r4
 8027d74:	6011      	str	r1, [r2, #0]
 8027d76:	d1e0      	bne.n	8027d3a <_free_r+0x26>
 8027d78:	681c      	ldr	r4, [r3, #0]
 8027d7a:	685b      	ldr	r3, [r3, #4]
 8027d7c:	6053      	str	r3, [r2, #4]
 8027d7e:	4421      	add	r1, r4
 8027d80:	6011      	str	r1, [r2, #0]
 8027d82:	e7da      	b.n	8027d3a <_free_r+0x26>
 8027d84:	d902      	bls.n	8027d8c <_free_r+0x78>
 8027d86:	230c      	movs	r3, #12
 8027d88:	6003      	str	r3, [r0, #0]
 8027d8a:	e7d6      	b.n	8027d3a <_free_r+0x26>
 8027d8c:	6825      	ldr	r5, [r4, #0]
 8027d8e:	1961      	adds	r1, r4, r5
 8027d90:	428b      	cmp	r3, r1
 8027d92:	bf04      	itt	eq
 8027d94:	6819      	ldreq	r1, [r3, #0]
 8027d96:	685b      	ldreq	r3, [r3, #4]
 8027d98:	6063      	str	r3, [r4, #4]
 8027d9a:	bf04      	itt	eq
 8027d9c:	1949      	addeq	r1, r1, r5
 8027d9e:	6021      	streq	r1, [r4, #0]
 8027da0:	6054      	str	r4, [r2, #4]
 8027da2:	e7ca      	b.n	8027d3a <_free_r+0x26>
 8027da4:	b003      	add	sp, #12
 8027da6:	bd30      	pop	{r4, r5, pc}
 8027da8:	2000c544 	.word	0x2000c544

08027dac <sbrk_aligned>:
 8027dac:	b570      	push	{r4, r5, r6, lr}
 8027dae:	4e0e      	ldr	r6, [pc, #56]	; (8027de8 <sbrk_aligned+0x3c>)
 8027db0:	460c      	mov	r4, r1
 8027db2:	6831      	ldr	r1, [r6, #0]
 8027db4:	4605      	mov	r5, r0
 8027db6:	b911      	cbnz	r1, 8027dbe <sbrk_aligned+0x12>
 8027db8:	f000 feba 	bl	8028b30 <_sbrk_r>
 8027dbc:	6030      	str	r0, [r6, #0]
 8027dbe:	4621      	mov	r1, r4
 8027dc0:	4628      	mov	r0, r5
 8027dc2:	f000 feb5 	bl	8028b30 <_sbrk_r>
 8027dc6:	1c43      	adds	r3, r0, #1
 8027dc8:	d00a      	beq.n	8027de0 <sbrk_aligned+0x34>
 8027dca:	1cc4      	adds	r4, r0, #3
 8027dcc:	f024 0403 	bic.w	r4, r4, #3
 8027dd0:	42a0      	cmp	r0, r4
 8027dd2:	d007      	beq.n	8027de4 <sbrk_aligned+0x38>
 8027dd4:	1a21      	subs	r1, r4, r0
 8027dd6:	4628      	mov	r0, r5
 8027dd8:	f000 feaa 	bl	8028b30 <_sbrk_r>
 8027ddc:	3001      	adds	r0, #1
 8027dde:	d101      	bne.n	8027de4 <sbrk_aligned+0x38>
 8027de0:	f04f 34ff 	mov.w	r4, #4294967295
 8027de4:	4620      	mov	r0, r4
 8027de6:	bd70      	pop	{r4, r5, r6, pc}
 8027de8:	2000c548 	.word	0x2000c548

08027dec <_malloc_r>:
 8027dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027df0:	1ccd      	adds	r5, r1, #3
 8027df2:	f025 0503 	bic.w	r5, r5, #3
 8027df6:	3508      	adds	r5, #8
 8027df8:	2d0c      	cmp	r5, #12
 8027dfa:	bf38      	it	cc
 8027dfc:	250c      	movcc	r5, #12
 8027dfe:	2d00      	cmp	r5, #0
 8027e00:	4607      	mov	r7, r0
 8027e02:	db01      	blt.n	8027e08 <_malloc_r+0x1c>
 8027e04:	42a9      	cmp	r1, r5
 8027e06:	d905      	bls.n	8027e14 <_malloc_r+0x28>
 8027e08:	230c      	movs	r3, #12
 8027e0a:	603b      	str	r3, [r7, #0]
 8027e0c:	2600      	movs	r6, #0
 8027e0e:	4630      	mov	r0, r6
 8027e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027e14:	4e2e      	ldr	r6, [pc, #184]	; (8027ed0 <_malloc_r+0xe4>)
 8027e16:	f003 fafb 	bl	802b410 <__malloc_lock>
 8027e1a:	6833      	ldr	r3, [r6, #0]
 8027e1c:	461c      	mov	r4, r3
 8027e1e:	bb34      	cbnz	r4, 8027e6e <_malloc_r+0x82>
 8027e20:	4629      	mov	r1, r5
 8027e22:	4638      	mov	r0, r7
 8027e24:	f7ff ffc2 	bl	8027dac <sbrk_aligned>
 8027e28:	1c43      	adds	r3, r0, #1
 8027e2a:	4604      	mov	r4, r0
 8027e2c:	d14d      	bne.n	8027eca <_malloc_r+0xde>
 8027e2e:	6834      	ldr	r4, [r6, #0]
 8027e30:	4626      	mov	r6, r4
 8027e32:	2e00      	cmp	r6, #0
 8027e34:	d140      	bne.n	8027eb8 <_malloc_r+0xcc>
 8027e36:	6823      	ldr	r3, [r4, #0]
 8027e38:	4631      	mov	r1, r6
 8027e3a:	4638      	mov	r0, r7
 8027e3c:	eb04 0803 	add.w	r8, r4, r3
 8027e40:	f000 fe76 	bl	8028b30 <_sbrk_r>
 8027e44:	4580      	cmp	r8, r0
 8027e46:	d13a      	bne.n	8027ebe <_malloc_r+0xd2>
 8027e48:	6821      	ldr	r1, [r4, #0]
 8027e4a:	3503      	adds	r5, #3
 8027e4c:	1a6d      	subs	r5, r5, r1
 8027e4e:	f025 0503 	bic.w	r5, r5, #3
 8027e52:	3508      	adds	r5, #8
 8027e54:	2d0c      	cmp	r5, #12
 8027e56:	bf38      	it	cc
 8027e58:	250c      	movcc	r5, #12
 8027e5a:	4629      	mov	r1, r5
 8027e5c:	4638      	mov	r0, r7
 8027e5e:	f7ff ffa5 	bl	8027dac <sbrk_aligned>
 8027e62:	3001      	adds	r0, #1
 8027e64:	d02b      	beq.n	8027ebe <_malloc_r+0xd2>
 8027e66:	6823      	ldr	r3, [r4, #0]
 8027e68:	442b      	add	r3, r5
 8027e6a:	6023      	str	r3, [r4, #0]
 8027e6c:	e00e      	b.n	8027e8c <_malloc_r+0xa0>
 8027e6e:	6822      	ldr	r2, [r4, #0]
 8027e70:	1b52      	subs	r2, r2, r5
 8027e72:	d41e      	bmi.n	8027eb2 <_malloc_r+0xc6>
 8027e74:	2a0b      	cmp	r2, #11
 8027e76:	d916      	bls.n	8027ea6 <_malloc_r+0xba>
 8027e78:	1961      	adds	r1, r4, r5
 8027e7a:	42a3      	cmp	r3, r4
 8027e7c:	6025      	str	r5, [r4, #0]
 8027e7e:	bf18      	it	ne
 8027e80:	6059      	strne	r1, [r3, #4]
 8027e82:	6863      	ldr	r3, [r4, #4]
 8027e84:	bf08      	it	eq
 8027e86:	6031      	streq	r1, [r6, #0]
 8027e88:	5162      	str	r2, [r4, r5]
 8027e8a:	604b      	str	r3, [r1, #4]
 8027e8c:	4638      	mov	r0, r7
 8027e8e:	f104 060b 	add.w	r6, r4, #11
 8027e92:	f003 fac3 	bl	802b41c <__malloc_unlock>
 8027e96:	f026 0607 	bic.w	r6, r6, #7
 8027e9a:	1d23      	adds	r3, r4, #4
 8027e9c:	1af2      	subs	r2, r6, r3
 8027e9e:	d0b6      	beq.n	8027e0e <_malloc_r+0x22>
 8027ea0:	1b9b      	subs	r3, r3, r6
 8027ea2:	50a3      	str	r3, [r4, r2]
 8027ea4:	e7b3      	b.n	8027e0e <_malloc_r+0x22>
 8027ea6:	6862      	ldr	r2, [r4, #4]
 8027ea8:	42a3      	cmp	r3, r4
 8027eaa:	bf0c      	ite	eq
 8027eac:	6032      	streq	r2, [r6, #0]
 8027eae:	605a      	strne	r2, [r3, #4]
 8027eb0:	e7ec      	b.n	8027e8c <_malloc_r+0xa0>
 8027eb2:	4623      	mov	r3, r4
 8027eb4:	6864      	ldr	r4, [r4, #4]
 8027eb6:	e7b2      	b.n	8027e1e <_malloc_r+0x32>
 8027eb8:	4634      	mov	r4, r6
 8027eba:	6876      	ldr	r6, [r6, #4]
 8027ebc:	e7b9      	b.n	8027e32 <_malloc_r+0x46>
 8027ebe:	230c      	movs	r3, #12
 8027ec0:	603b      	str	r3, [r7, #0]
 8027ec2:	4638      	mov	r0, r7
 8027ec4:	f003 faaa 	bl	802b41c <__malloc_unlock>
 8027ec8:	e7a1      	b.n	8027e0e <_malloc_r+0x22>
 8027eca:	6025      	str	r5, [r4, #0]
 8027ecc:	e7de      	b.n	8027e8c <_malloc_r+0xa0>
 8027ece:	bf00      	nop
 8027ed0:	2000c544 	.word	0x2000c544

08027ed4 <__sfputc_r>:
 8027ed4:	6893      	ldr	r3, [r2, #8]
 8027ed6:	3b01      	subs	r3, #1
 8027ed8:	2b00      	cmp	r3, #0
 8027eda:	b410      	push	{r4}
 8027edc:	6093      	str	r3, [r2, #8]
 8027ede:	da08      	bge.n	8027ef2 <__sfputc_r+0x1e>
 8027ee0:	6994      	ldr	r4, [r2, #24]
 8027ee2:	42a3      	cmp	r3, r4
 8027ee4:	db01      	blt.n	8027eea <__sfputc_r+0x16>
 8027ee6:	290a      	cmp	r1, #10
 8027ee8:	d103      	bne.n	8027ef2 <__sfputc_r+0x1e>
 8027eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027eee:	f001 bdf5 	b.w	8029adc <__swbuf_r>
 8027ef2:	6813      	ldr	r3, [r2, #0]
 8027ef4:	1c58      	adds	r0, r3, #1
 8027ef6:	6010      	str	r0, [r2, #0]
 8027ef8:	7019      	strb	r1, [r3, #0]
 8027efa:	4608      	mov	r0, r1
 8027efc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027f00:	4770      	bx	lr

08027f02 <__sfputs_r>:
 8027f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027f04:	4606      	mov	r6, r0
 8027f06:	460f      	mov	r7, r1
 8027f08:	4614      	mov	r4, r2
 8027f0a:	18d5      	adds	r5, r2, r3
 8027f0c:	42ac      	cmp	r4, r5
 8027f0e:	d101      	bne.n	8027f14 <__sfputs_r+0x12>
 8027f10:	2000      	movs	r0, #0
 8027f12:	e007      	b.n	8027f24 <__sfputs_r+0x22>
 8027f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027f18:	463a      	mov	r2, r7
 8027f1a:	4630      	mov	r0, r6
 8027f1c:	f7ff ffda 	bl	8027ed4 <__sfputc_r>
 8027f20:	1c43      	adds	r3, r0, #1
 8027f22:	d1f3      	bne.n	8027f0c <__sfputs_r+0xa>
 8027f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027f28 <_vfiprintf_r>:
 8027f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f2c:	460d      	mov	r5, r1
 8027f2e:	b09d      	sub	sp, #116	; 0x74
 8027f30:	4614      	mov	r4, r2
 8027f32:	4698      	mov	r8, r3
 8027f34:	4606      	mov	r6, r0
 8027f36:	b118      	cbz	r0, 8027f40 <_vfiprintf_r+0x18>
 8027f38:	6983      	ldr	r3, [r0, #24]
 8027f3a:	b90b      	cbnz	r3, 8027f40 <_vfiprintf_r+0x18>
 8027f3c:	f7ff fdec 	bl	8027b18 <__sinit>
 8027f40:	4b89      	ldr	r3, [pc, #548]	; (8028168 <_vfiprintf_r+0x240>)
 8027f42:	429d      	cmp	r5, r3
 8027f44:	d11b      	bne.n	8027f7e <_vfiprintf_r+0x56>
 8027f46:	6875      	ldr	r5, [r6, #4]
 8027f48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027f4a:	07d9      	lsls	r1, r3, #31
 8027f4c:	d405      	bmi.n	8027f5a <_vfiprintf_r+0x32>
 8027f4e:	89ab      	ldrh	r3, [r5, #12]
 8027f50:	059a      	lsls	r2, r3, #22
 8027f52:	d402      	bmi.n	8027f5a <_vfiprintf_r+0x32>
 8027f54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027f56:	f7ff feb4 	bl	8027cc2 <__retarget_lock_acquire_recursive>
 8027f5a:	89ab      	ldrh	r3, [r5, #12]
 8027f5c:	071b      	lsls	r3, r3, #28
 8027f5e:	d501      	bpl.n	8027f64 <_vfiprintf_r+0x3c>
 8027f60:	692b      	ldr	r3, [r5, #16]
 8027f62:	b9eb      	cbnz	r3, 8027fa0 <_vfiprintf_r+0x78>
 8027f64:	4629      	mov	r1, r5
 8027f66:	4630      	mov	r0, r6
 8027f68:	f001 fe1c 	bl	8029ba4 <__swsetup_r>
 8027f6c:	b1c0      	cbz	r0, 8027fa0 <_vfiprintf_r+0x78>
 8027f6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027f70:	07dc      	lsls	r4, r3, #31
 8027f72:	d50e      	bpl.n	8027f92 <_vfiprintf_r+0x6a>
 8027f74:	f04f 30ff 	mov.w	r0, #4294967295
 8027f78:	b01d      	add	sp, #116	; 0x74
 8027f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027f7e:	4b7b      	ldr	r3, [pc, #492]	; (802816c <_vfiprintf_r+0x244>)
 8027f80:	429d      	cmp	r5, r3
 8027f82:	d101      	bne.n	8027f88 <_vfiprintf_r+0x60>
 8027f84:	68b5      	ldr	r5, [r6, #8]
 8027f86:	e7df      	b.n	8027f48 <_vfiprintf_r+0x20>
 8027f88:	4b79      	ldr	r3, [pc, #484]	; (8028170 <_vfiprintf_r+0x248>)
 8027f8a:	429d      	cmp	r5, r3
 8027f8c:	bf08      	it	eq
 8027f8e:	68f5      	ldreq	r5, [r6, #12]
 8027f90:	e7da      	b.n	8027f48 <_vfiprintf_r+0x20>
 8027f92:	89ab      	ldrh	r3, [r5, #12]
 8027f94:	0598      	lsls	r0, r3, #22
 8027f96:	d4ed      	bmi.n	8027f74 <_vfiprintf_r+0x4c>
 8027f98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027f9a:	f7ff fe94 	bl	8027cc6 <__retarget_lock_release_recursive>
 8027f9e:	e7e9      	b.n	8027f74 <_vfiprintf_r+0x4c>
 8027fa0:	2300      	movs	r3, #0
 8027fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8027fa4:	2320      	movs	r3, #32
 8027fa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027faa:	f8cd 800c 	str.w	r8, [sp, #12]
 8027fae:	2330      	movs	r3, #48	; 0x30
 8027fb0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8028174 <_vfiprintf_r+0x24c>
 8027fb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027fb8:	f04f 0901 	mov.w	r9, #1
 8027fbc:	4623      	mov	r3, r4
 8027fbe:	469a      	mov	sl, r3
 8027fc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027fc4:	b10a      	cbz	r2, 8027fca <_vfiprintf_r+0xa2>
 8027fc6:	2a25      	cmp	r2, #37	; 0x25
 8027fc8:	d1f9      	bne.n	8027fbe <_vfiprintf_r+0x96>
 8027fca:	ebba 0b04 	subs.w	fp, sl, r4
 8027fce:	d00b      	beq.n	8027fe8 <_vfiprintf_r+0xc0>
 8027fd0:	465b      	mov	r3, fp
 8027fd2:	4622      	mov	r2, r4
 8027fd4:	4629      	mov	r1, r5
 8027fd6:	4630      	mov	r0, r6
 8027fd8:	f7ff ff93 	bl	8027f02 <__sfputs_r>
 8027fdc:	3001      	adds	r0, #1
 8027fde:	f000 80aa 	beq.w	8028136 <_vfiprintf_r+0x20e>
 8027fe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027fe4:	445a      	add	r2, fp
 8027fe6:	9209      	str	r2, [sp, #36]	; 0x24
 8027fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8027fec:	2b00      	cmp	r3, #0
 8027fee:	f000 80a2 	beq.w	8028136 <_vfiprintf_r+0x20e>
 8027ff2:	2300      	movs	r3, #0
 8027ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8027ff8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027ffc:	f10a 0a01 	add.w	sl, sl, #1
 8028000:	9304      	str	r3, [sp, #16]
 8028002:	9307      	str	r3, [sp, #28]
 8028004:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8028008:	931a      	str	r3, [sp, #104]	; 0x68
 802800a:	4654      	mov	r4, sl
 802800c:	2205      	movs	r2, #5
 802800e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028012:	4858      	ldr	r0, [pc, #352]	; (8028174 <_vfiprintf_r+0x24c>)
 8028014:	f7d8 f8e4 	bl	80001e0 <memchr>
 8028018:	9a04      	ldr	r2, [sp, #16]
 802801a:	b9d8      	cbnz	r0, 8028054 <_vfiprintf_r+0x12c>
 802801c:	06d1      	lsls	r1, r2, #27
 802801e:	bf44      	itt	mi
 8028020:	2320      	movmi	r3, #32
 8028022:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028026:	0713      	lsls	r3, r2, #28
 8028028:	bf44      	itt	mi
 802802a:	232b      	movmi	r3, #43	; 0x2b
 802802c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028030:	f89a 3000 	ldrb.w	r3, [sl]
 8028034:	2b2a      	cmp	r3, #42	; 0x2a
 8028036:	d015      	beq.n	8028064 <_vfiprintf_r+0x13c>
 8028038:	9a07      	ldr	r2, [sp, #28]
 802803a:	4654      	mov	r4, sl
 802803c:	2000      	movs	r0, #0
 802803e:	f04f 0c0a 	mov.w	ip, #10
 8028042:	4621      	mov	r1, r4
 8028044:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028048:	3b30      	subs	r3, #48	; 0x30
 802804a:	2b09      	cmp	r3, #9
 802804c:	d94e      	bls.n	80280ec <_vfiprintf_r+0x1c4>
 802804e:	b1b0      	cbz	r0, 802807e <_vfiprintf_r+0x156>
 8028050:	9207      	str	r2, [sp, #28]
 8028052:	e014      	b.n	802807e <_vfiprintf_r+0x156>
 8028054:	eba0 0308 	sub.w	r3, r0, r8
 8028058:	fa09 f303 	lsl.w	r3, r9, r3
 802805c:	4313      	orrs	r3, r2
 802805e:	9304      	str	r3, [sp, #16]
 8028060:	46a2      	mov	sl, r4
 8028062:	e7d2      	b.n	802800a <_vfiprintf_r+0xe2>
 8028064:	9b03      	ldr	r3, [sp, #12]
 8028066:	1d19      	adds	r1, r3, #4
 8028068:	681b      	ldr	r3, [r3, #0]
 802806a:	9103      	str	r1, [sp, #12]
 802806c:	2b00      	cmp	r3, #0
 802806e:	bfbb      	ittet	lt
 8028070:	425b      	neglt	r3, r3
 8028072:	f042 0202 	orrlt.w	r2, r2, #2
 8028076:	9307      	strge	r3, [sp, #28]
 8028078:	9307      	strlt	r3, [sp, #28]
 802807a:	bfb8      	it	lt
 802807c:	9204      	strlt	r2, [sp, #16]
 802807e:	7823      	ldrb	r3, [r4, #0]
 8028080:	2b2e      	cmp	r3, #46	; 0x2e
 8028082:	d10c      	bne.n	802809e <_vfiprintf_r+0x176>
 8028084:	7863      	ldrb	r3, [r4, #1]
 8028086:	2b2a      	cmp	r3, #42	; 0x2a
 8028088:	d135      	bne.n	80280f6 <_vfiprintf_r+0x1ce>
 802808a:	9b03      	ldr	r3, [sp, #12]
 802808c:	1d1a      	adds	r2, r3, #4
 802808e:	681b      	ldr	r3, [r3, #0]
 8028090:	9203      	str	r2, [sp, #12]
 8028092:	2b00      	cmp	r3, #0
 8028094:	bfb8      	it	lt
 8028096:	f04f 33ff 	movlt.w	r3, #4294967295
 802809a:	3402      	adds	r4, #2
 802809c:	9305      	str	r3, [sp, #20]
 802809e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8028184 <_vfiprintf_r+0x25c>
 80280a2:	7821      	ldrb	r1, [r4, #0]
 80280a4:	2203      	movs	r2, #3
 80280a6:	4650      	mov	r0, sl
 80280a8:	f7d8 f89a 	bl	80001e0 <memchr>
 80280ac:	b140      	cbz	r0, 80280c0 <_vfiprintf_r+0x198>
 80280ae:	2340      	movs	r3, #64	; 0x40
 80280b0:	eba0 000a 	sub.w	r0, r0, sl
 80280b4:	fa03 f000 	lsl.w	r0, r3, r0
 80280b8:	9b04      	ldr	r3, [sp, #16]
 80280ba:	4303      	orrs	r3, r0
 80280bc:	3401      	adds	r4, #1
 80280be:	9304      	str	r3, [sp, #16]
 80280c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80280c4:	482c      	ldr	r0, [pc, #176]	; (8028178 <_vfiprintf_r+0x250>)
 80280c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80280ca:	2206      	movs	r2, #6
 80280cc:	f7d8 f888 	bl	80001e0 <memchr>
 80280d0:	2800      	cmp	r0, #0
 80280d2:	d03f      	beq.n	8028154 <_vfiprintf_r+0x22c>
 80280d4:	4b29      	ldr	r3, [pc, #164]	; (802817c <_vfiprintf_r+0x254>)
 80280d6:	bb1b      	cbnz	r3, 8028120 <_vfiprintf_r+0x1f8>
 80280d8:	9b03      	ldr	r3, [sp, #12]
 80280da:	3307      	adds	r3, #7
 80280dc:	f023 0307 	bic.w	r3, r3, #7
 80280e0:	3308      	adds	r3, #8
 80280e2:	9303      	str	r3, [sp, #12]
 80280e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80280e6:	443b      	add	r3, r7
 80280e8:	9309      	str	r3, [sp, #36]	; 0x24
 80280ea:	e767      	b.n	8027fbc <_vfiprintf_r+0x94>
 80280ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80280f0:	460c      	mov	r4, r1
 80280f2:	2001      	movs	r0, #1
 80280f4:	e7a5      	b.n	8028042 <_vfiprintf_r+0x11a>
 80280f6:	2300      	movs	r3, #0
 80280f8:	3401      	adds	r4, #1
 80280fa:	9305      	str	r3, [sp, #20]
 80280fc:	4619      	mov	r1, r3
 80280fe:	f04f 0c0a 	mov.w	ip, #10
 8028102:	4620      	mov	r0, r4
 8028104:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028108:	3a30      	subs	r2, #48	; 0x30
 802810a:	2a09      	cmp	r2, #9
 802810c:	d903      	bls.n	8028116 <_vfiprintf_r+0x1ee>
 802810e:	2b00      	cmp	r3, #0
 8028110:	d0c5      	beq.n	802809e <_vfiprintf_r+0x176>
 8028112:	9105      	str	r1, [sp, #20]
 8028114:	e7c3      	b.n	802809e <_vfiprintf_r+0x176>
 8028116:	fb0c 2101 	mla	r1, ip, r1, r2
 802811a:	4604      	mov	r4, r0
 802811c:	2301      	movs	r3, #1
 802811e:	e7f0      	b.n	8028102 <_vfiprintf_r+0x1da>
 8028120:	ab03      	add	r3, sp, #12
 8028122:	9300      	str	r3, [sp, #0]
 8028124:	462a      	mov	r2, r5
 8028126:	4b16      	ldr	r3, [pc, #88]	; (8028180 <_vfiprintf_r+0x258>)
 8028128:	a904      	add	r1, sp, #16
 802812a:	4630      	mov	r0, r6
 802812c:	f000 f8cc 	bl	80282c8 <_printf_float>
 8028130:	4607      	mov	r7, r0
 8028132:	1c78      	adds	r0, r7, #1
 8028134:	d1d6      	bne.n	80280e4 <_vfiprintf_r+0x1bc>
 8028136:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028138:	07d9      	lsls	r1, r3, #31
 802813a:	d405      	bmi.n	8028148 <_vfiprintf_r+0x220>
 802813c:	89ab      	ldrh	r3, [r5, #12]
 802813e:	059a      	lsls	r2, r3, #22
 8028140:	d402      	bmi.n	8028148 <_vfiprintf_r+0x220>
 8028142:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028144:	f7ff fdbf 	bl	8027cc6 <__retarget_lock_release_recursive>
 8028148:	89ab      	ldrh	r3, [r5, #12]
 802814a:	065b      	lsls	r3, r3, #25
 802814c:	f53f af12 	bmi.w	8027f74 <_vfiprintf_r+0x4c>
 8028150:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028152:	e711      	b.n	8027f78 <_vfiprintf_r+0x50>
 8028154:	ab03      	add	r3, sp, #12
 8028156:	9300      	str	r3, [sp, #0]
 8028158:	462a      	mov	r2, r5
 802815a:	4b09      	ldr	r3, [pc, #36]	; (8028180 <_vfiprintf_r+0x258>)
 802815c:	a904      	add	r1, sp, #16
 802815e:	4630      	mov	r0, r6
 8028160:	f000 fb56 	bl	8028810 <_printf_i>
 8028164:	e7e4      	b.n	8028130 <_vfiprintf_r+0x208>
 8028166:	bf00      	nop
 8028168:	0802f0b4 	.word	0x0802f0b4
 802816c:	0802f0d4 	.word	0x0802f0d4
 8028170:	0802f094 	.word	0x0802f094
 8028174:	0802f0f8 	.word	0x0802f0f8
 8028178:	0802f102 	.word	0x0802f102
 802817c:	080282c9 	.word	0x080282c9
 8028180:	08027f03 	.word	0x08027f03
 8028184:	0802f0fe 	.word	0x0802f0fe

08028188 <__cvt>:
 8028188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802818c:	ec55 4b10 	vmov	r4, r5, d0
 8028190:	2d00      	cmp	r5, #0
 8028192:	460e      	mov	r6, r1
 8028194:	4619      	mov	r1, r3
 8028196:	462b      	mov	r3, r5
 8028198:	bfbb      	ittet	lt
 802819a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 802819e:	461d      	movlt	r5, r3
 80281a0:	2300      	movge	r3, #0
 80281a2:	232d      	movlt	r3, #45	; 0x2d
 80281a4:	700b      	strb	r3, [r1, #0]
 80281a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80281a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80281ac:	4691      	mov	r9, r2
 80281ae:	f023 0820 	bic.w	r8, r3, #32
 80281b2:	bfbc      	itt	lt
 80281b4:	4622      	movlt	r2, r4
 80281b6:	4614      	movlt	r4, r2
 80281b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80281bc:	d005      	beq.n	80281ca <__cvt+0x42>
 80281be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80281c2:	d100      	bne.n	80281c6 <__cvt+0x3e>
 80281c4:	3601      	adds	r6, #1
 80281c6:	2102      	movs	r1, #2
 80281c8:	e000      	b.n	80281cc <__cvt+0x44>
 80281ca:	2103      	movs	r1, #3
 80281cc:	ab03      	add	r3, sp, #12
 80281ce:	9301      	str	r3, [sp, #4]
 80281d0:	ab02      	add	r3, sp, #8
 80281d2:	9300      	str	r3, [sp, #0]
 80281d4:	ec45 4b10 	vmov	d0, r4, r5
 80281d8:	4653      	mov	r3, sl
 80281da:	4632      	mov	r2, r6
 80281dc:	f001 fe50 	bl	8029e80 <_dtoa_r>
 80281e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80281e4:	4607      	mov	r7, r0
 80281e6:	d102      	bne.n	80281ee <__cvt+0x66>
 80281e8:	f019 0f01 	tst.w	r9, #1
 80281ec:	d022      	beq.n	8028234 <__cvt+0xac>
 80281ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80281f2:	eb07 0906 	add.w	r9, r7, r6
 80281f6:	d110      	bne.n	802821a <__cvt+0x92>
 80281f8:	783b      	ldrb	r3, [r7, #0]
 80281fa:	2b30      	cmp	r3, #48	; 0x30
 80281fc:	d10a      	bne.n	8028214 <__cvt+0x8c>
 80281fe:	2200      	movs	r2, #0
 8028200:	2300      	movs	r3, #0
 8028202:	4620      	mov	r0, r4
 8028204:	4629      	mov	r1, r5
 8028206:	f7d8 fc5f 	bl	8000ac8 <__aeabi_dcmpeq>
 802820a:	b918      	cbnz	r0, 8028214 <__cvt+0x8c>
 802820c:	f1c6 0601 	rsb	r6, r6, #1
 8028210:	f8ca 6000 	str.w	r6, [sl]
 8028214:	f8da 3000 	ldr.w	r3, [sl]
 8028218:	4499      	add	r9, r3
 802821a:	2200      	movs	r2, #0
 802821c:	2300      	movs	r3, #0
 802821e:	4620      	mov	r0, r4
 8028220:	4629      	mov	r1, r5
 8028222:	f7d8 fc51 	bl	8000ac8 <__aeabi_dcmpeq>
 8028226:	b108      	cbz	r0, 802822c <__cvt+0xa4>
 8028228:	f8cd 900c 	str.w	r9, [sp, #12]
 802822c:	2230      	movs	r2, #48	; 0x30
 802822e:	9b03      	ldr	r3, [sp, #12]
 8028230:	454b      	cmp	r3, r9
 8028232:	d307      	bcc.n	8028244 <__cvt+0xbc>
 8028234:	9b03      	ldr	r3, [sp, #12]
 8028236:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028238:	1bdb      	subs	r3, r3, r7
 802823a:	4638      	mov	r0, r7
 802823c:	6013      	str	r3, [r2, #0]
 802823e:	b004      	add	sp, #16
 8028240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028244:	1c59      	adds	r1, r3, #1
 8028246:	9103      	str	r1, [sp, #12]
 8028248:	701a      	strb	r2, [r3, #0]
 802824a:	e7f0      	b.n	802822e <__cvt+0xa6>

0802824c <__exponent>:
 802824c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802824e:	4603      	mov	r3, r0
 8028250:	2900      	cmp	r1, #0
 8028252:	bfb8      	it	lt
 8028254:	4249      	neglt	r1, r1
 8028256:	f803 2b02 	strb.w	r2, [r3], #2
 802825a:	bfb4      	ite	lt
 802825c:	222d      	movlt	r2, #45	; 0x2d
 802825e:	222b      	movge	r2, #43	; 0x2b
 8028260:	2909      	cmp	r1, #9
 8028262:	7042      	strb	r2, [r0, #1]
 8028264:	dd2a      	ble.n	80282bc <__exponent+0x70>
 8028266:	f10d 0407 	add.w	r4, sp, #7
 802826a:	46a4      	mov	ip, r4
 802826c:	270a      	movs	r7, #10
 802826e:	46a6      	mov	lr, r4
 8028270:	460a      	mov	r2, r1
 8028272:	fb91 f6f7 	sdiv	r6, r1, r7
 8028276:	fb07 1516 	mls	r5, r7, r6, r1
 802827a:	3530      	adds	r5, #48	; 0x30
 802827c:	2a63      	cmp	r2, #99	; 0x63
 802827e:	f104 34ff 	add.w	r4, r4, #4294967295
 8028282:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8028286:	4631      	mov	r1, r6
 8028288:	dcf1      	bgt.n	802826e <__exponent+0x22>
 802828a:	3130      	adds	r1, #48	; 0x30
 802828c:	f1ae 0502 	sub.w	r5, lr, #2
 8028290:	f804 1c01 	strb.w	r1, [r4, #-1]
 8028294:	1c44      	adds	r4, r0, #1
 8028296:	4629      	mov	r1, r5
 8028298:	4561      	cmp	r1, ip
 802829a:	d30a      	bcc.n	80282b2 <__exponent+0x66>
 802829c:	f10d 0209 	add.w	r2, sp, #9
 80282a0:	eba2 020e 	sub.w	r2, r2, lr
 80282a4:	4565      	cmp	r5, ip
 80282a6:	bf88      	it	hi
 80282a8:	2200      	movhi	r2, #0
 80282aa:	4413      	add	r3, r2
 80282ac:	1a18      	subs	r0, r3, r0
 80282ae:	b003      	add	sp, #12
 80282b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80282b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80282b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80282ba:	e7ed      	b.n	8028298 <__exponent+0x4c>
 80282bc:	2330      	movs	r3, #48	; 0x30
 80282be:	3130      	adds	r1, #48	; 0x30
 80282c0:	7083      	strb	r3, [r0, #2]
 80282c2:	70c1      	strb	r1, [r0, #3]
 80282c4:	1d03      	adds	r3, r0, #4
 80282c6:	e7f1      	b.n	80282ac <__exponent+0x60>

080282c8 <_printf_float>:
 80282c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80282cc:	ed2d 8b02 	vpush	{d8}
 80282d0:	b08d      	sub	sp, #52	; 0x34
 80282d2:	460c      	mov	r4, r1
 80282d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80282d8:	4616      	mov	r6, r2
 80282da:	461f      	mov	r7, r3
 80282dc:	4605      	mov	r5, r0
 80282de:	f002 ffef 	bl	802b2c0 <_localeconv_r>
 80282e2:	f8d0 a000 	ldr.w	sl, [r0]
 80282e6:	4650      	mov	r0, sl
 80282e8:	f7d7 ff72 	bl	80001d0 <strlen>
 80282ec:	2300      	movs	r3, #0
 80282ee:	930a      	str	r3, [sp, #40]	; 0x28
 80282f0:	6823      	ldr	r3, [r4, #0]
 80282f2:	9305      	str	r3, [sp, #20]
 80282f4:	f8d8 3000 	ldr.w	r3, [r8]
 80282f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80282fc:	3307      	adds	r3, #7
 80282fe:	f023 0307 	bic.w	r3, r3, #7
 8028302:	f103 0208 	add.w	r2, r3, #8
 8028306:	f8c8 2000 	str.w	r2, [r8]
 802830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802830e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8028312:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8028316:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802831a:	9307      	str	r3, [sp, #28]
 802831c:	f8cd 8018 	str.w	r8, [sp, #24]
 8028320:	ee08 0a10 	vmov	s16, r0
 8028324:	4b9f      	ldr	r3, [pc, #636]	; (80285a4 <_printf_float+0x2dc>)
 8028326:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802832a:	f04f 32ff 	mov.w	r2, #4294967295
 802832e:	f7d8 fbfd 	bl	8000b2c <__aeabi_dcmpun>
 8028332:	bb88      	cbnz	r0, 8028398 <_printf_float+0xd0>
 8028334:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8028338:	4b9a      	ldr	r3, [pc, #616]	; (80285a4 <_printf_float+0x2dc>)
 802833a:	f04f 32ff 	mov.w	r2, #4294967295
 802833e:	f7d8 fbd7 	bl	8000af0 <__aeabi_dcmple>
 8028342:	bb48      	cbnz	r0, 8028398 <_printf_float+0xd0>
 8028344:	2200      	movs	r2, #0
 8028346:	2300      	movs	r3, #0
 8028348:	4640      	mov	r0, r8
 802834a:	4649      	mov	r1, r9
 802834c:	f7d8 fbc6 	bl	8000adc <__aeabi_dcmplt>
 8028350:	b110      	cbz	r0, 8028358 <_printf_float+0x90>
 8028352:	232d      	movs	r3, #45	; 0x2d
 8028354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028358:	4b93      	ldr	r3, [pc, #588]	; (80285a8 <_printf_float+0x2e0>)
 802835a:	4894      	ldr	r0, [pc, #592]	; (80285ac <_printf_float+0x2e4>)
 802835c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8028360:	bf94      	ite	ls
 8028362:	4698      	movls	r8, r3
 8028364:	4680      	movhi	r8, r0
 8028366:	2303      	movs	r3, #3
 8028368:	6123      	str	r3, [r4, #16]
 802836a:	9b05      	ldr	r3, [sp, #20]
 802836c:	f023 0204 	bic.w	r2, r3, #4
 8028370:	6022      	str	r2, [r4, #0]
 8028372:	f04f 0900 	mov.w	r9, #0
 8028376:	9700      	str	r7, [sp, #0]
 8028378:	4633      	mov	r3, r6
 802837a:	aa0b      	add	r2, sp, #44	; 0x2c
 802837c:	4621      	mov	r1, r4
 802837e:	4628      	mov	r0, r5
 8028380:	f000 f9d8 	bl	8028734 <_printf_common>
 8028384:	3001      	adds	r0, #1
 8028386:	f040 8090 	bne.w	80284aa <_printf_float+0x1e2>
 802838a:	f04f 30ff 	mov.w	r0, #4294967295
 802838e:	b00d      	add	sp, #52	; 0x34
 8028390:	ecbd 8b02 	vpop	{d8}
 8028394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028398:	4642      	mov	r2, r8
 802839a:	464b      	mov	r3, r9
 802839c:	4640      	mov	r0, r8
 802839e:	4649      	mov	r1, r9
 80283a0:	f7d8 fbc4 	bl	8000b2c <__aeabi_dcmpun>
 80283a4:	b140      	cbz	r0, 80283b8 <_printf_float+0xf0>
 80283a6:	464b      	mov	r3, r9
 80283a8:	2b00      	cmp	r3, #0
 80283aa:	bfbc      	itt	lt
 80283ac:	232d      	movlt	r3, #45	; 0x2d
 80283ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80283b2:	487f      	ldr	r0, [pc, #508]	; (80285b0 <_printf_float+0x2e8>)
 80283b4:	4b7f      	ldr	r3, [pc, #508]	; (80285b4 <_printf_float+0x2ec>)
 80283b6:	e7d1      	b.n	802835c <_printf_float+0x94>
 80283b8:	6863      	ldr	r3, [r4, #4]
 80283ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80283be:	9206      	str	r2, [sp, #24]
 80283c0:	1c5a      	adds	r2, r3, #1
 80283c2:	d13f      	bne.n	8028444 <_printf_float+0x17c>
 80283c4:	2306      	movs	r3, #6
 80283c6:	6063      	str	r3, [r4, #4]
 80283c8:	9b05      	ldr	r3, [sp, #20]
 80283ca:	6861      	ldr	r1, [r4, #4]
 80283cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80283d0:	2300      	movs	r3, #0
 80283d2:	9303      	str	r3, [sp, #12]
 80283d4:	ab0a      	add	r3, sp, #40	; 0x28
 80283d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80283da:	ab09      	add	r3, sp, #36	; 0x24
 80283dc:	ec49 8b10 	vmov	d0, r8, r9
 80283e0:	9300      	str	r3, [sp, #0]
 80283e2:	6022      	str	r2, [r4, #0]
 80283e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80283e8:	4628      	mov	r0, r5
 80283ea:	f7ff fecd 	bl	8028188 <__cvt>
 80283ee:	9b06      	ldr	r3, [sp, #24]
 80283f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80283f2:	2b47      	cmp	r3, #71	; 0x47
 80283f4:	4680      	mov	r8, r0
 80283f6:	d108      	bne.n	802840a <_printf_float+0x142>
 80283f8:	1cc8      	adds	r0, r1, #3
 80283fa:	db02      	blt.n	8028402 <_printf_float+0x13a>
 80283fc:	6863      	ldr	r3, [r4, #4]
 80283fe:	4299      	cmp	r1, r3
 8028400:	dd41      	ble.n	8028486 <_printf_float+0x1be>
 8028402:	f1ab 0b02 	sub.w	fp, fp, #2
 8028406:	fa5f fb8b 	uxtb.w	fp, fp
 802840a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802840e:	d820      	bhi.n	8028452 <_printf_float+0x18a>
 8028410:	3901      	subs	r1, #1
 8028412:	465a      	mov	r2, fp
 8028414:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8028418:	9109      	str	r1, [sp, #36]	; 0x24
 802841a:	f7ff ff17 	bl	802824c <__exponent>
 802841e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028420:	1813      	adds	r3, r2, r0
 8028422:	2a01      	cmp	r2, #1
 8028424:	4681      	mov	r9, r0
 8028426:	6123      	str	r3, [r4, #16]
 8028428:	dc02      	bgt.n	8028430 <_printf_float+0x168>
 802842a:	6822      	ldr	r2, [r4, #0]
 802842c:	07d2      	lsls	r2, r2, #31
 802842e:	d501      	bpl.n	8028434 <_printf_float+0x16c>
 8028430:	3301      	adds	r3, #1
 8028432:	6123      	str	r3, [r4, #16]
 8028434:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8028438:	2b00      	cmp	r3, #0
 802843a:	d09c      	beq.n	8028376 <_printf_float+0xae>
 802843c:	232d      	movs	r3, #45	; 0x2d
 802843e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028442:	e798      	b.n	8028376 <_printf_float+0xae>
 8028444:	9a06      	ldr	r2, [sp, #24]
 8028446:	2a47      	cmp	r2, #71	; 0x47
 8028448:	d1be      	bne.n	80283c8 <_printf_float+0x100>
 802844a:	2b00      	cmp	r3, #0
 802844c:	d1bc      	bne.n	80283c8 <_printf_float+0x100>
 802844e:	2301      	movs	r3, #1
 8028450:	e7b9      	b.n	80283c6 <_printf_float+0xfe>
 8028452:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8028456:	d118      	bne.n	802848a <_printf_float+0x1c2>
 8028458:	2900      	cmp	r1, #0
 802845a:	6863      	ldr	r3, [r4, #4]
 802845c:	dd0b      	ble.n	8028476 <_printf_float+0x1ae>
 802845e:	6121      	str	r1, [r4, #16]
 8028460:	b913      	cbnz	r3, 8028468 <_printf_float+0x1a0>
 8028462:	6822      	ldr	r2, [r4, #0]
 8028464:	07d0      	lsls	r0, r2, #31
 8028466:	d502      	bpl.n	802846e <_printf_float+0x1a6>
 8028468:	3301      	adds	r3, #1
 802846a:	440b      	add	r3, r1
 802846c:	6123      	str	r3, [r4, #16]
 802846e:	65a1      	str	r1, [r4, #88]	; 0x58
 8028470:	f04f 0900 	mov.w	r9, #0
 8028474:	e7de      	b.n	8028434 <_printf_float+0x16c>
 8028476:	b913      	cbnz	r3, 802847e <_printf_float+0x1b6>
 8028478:	6822      	ldr	r2, [r4, #0]
 802847a:	07d2      	lsls	r2, r2, #31
 802847c:	d501      	bpl.n	8028482 <_printf_float+0x1ba>
 802847e:	3302      	adds	r3, #2
 8028480:	e7f4      	b.n	802846c <_printf_float+0x1a4>
 8028482:	2301      	movs	r3, #1
 8028484:	e7f2      	b.n	802846c <_printf_float+0x1a4>
 8028486:	f04f 0b67 	mov.w	fp, #103	; 0x67
 802848a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802848c:	4299      	cmp	r1, r3
 802848e:	db05      	blt.n	802849c <_printf_float+0x1d4>
 8028490:	6823      	ldr	r3, [r4, #0]
 8028492:	6121      	str	r1, [r4, #16]
 8028494:	07d8      	lsls	r0, r3, #31
 8028496:	d5ea      	bpl.n	802846e <_printf_float+0x1a6>
 8028498:	1c4b      	adds	r3, r1, #1
 802849a:	e7e7      	b.n	802846c <_printf_float+0x1a4>
 802849c:	2900      	cmp	r1, #0
 802849e:	bfd4      	ite	le
 80284a0:	f1c1 0202 	rsble	r2, r1, #2
 80284a4:	2201      	movgt	r2, #1
 80284a6:	4413      	add	r3, r2
 80284a8:	e7e0      	b.n	802846c <_printf_float+0x1a4>
 80284aa:	6823      	ldr	r3, [r4, #0]
 80284ac:	055a      	lsls	r2, r3, #21
 80284ae:	d407      	bmi.n	80284c0 <_printf_float+0x1f8>
 80284b0:	6923      	ldr	r3, [r4, #16]
 80284b2:	4642      	mov	r2, r8
 80284b4:	4631      	mov	r1, r6
 80284b6:	4628      	mov	r0, r5
 80284b8:	47b8      	blx	r7
 80284ba:	3001      	adds	r0, #1
 80284bc:	d12c      	bne.n	8028518 <_printf_float+0x250>
 80284be:	e764      	b.n	802838a <_printf_float+0xc2>
 80284c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80284c4:	f240 80e0 	bls.w	8028688 <_printf_float+0x3c0>
 80284c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80284cc:	2200      	movs	r2, #0
 80284ce:	2300      	movs	r3, #0
 80284d0:	f7d8 fafa 	bl	8000ac8 <__aeabi_dcmpeq>
 80284d4:	2800      	cmp	r0, #0
 80284d6:	d034      	beq.n	8028542 <_printf_float+0x27a>
 80284d8:	4a37      	ldr	r2, [pc, #220]	; (80285b8 <_printf_float+0x2f0>)
 80284da:	2301      	movs	r3, #1
 80284dc:	4631      	mov	r1, r6
 80284de:	4628      	mov	r0, r5
 80284e0:	47b8      	blx	r7
 80284e2:	3001      	adds	r0, #1
 80284e4:	f43f af51 	beq.w	802838a <_printf_float+0xc2>
 80284e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80284ec:	429a      	cmp	r2, r3
 80284ee:	db02      	blt.n	80284f6 <_printf_float+0x22e>
 80284f0:	6823      	ldr	r3, [r4, #0]
 80284f2:	07d8      	lsls	r0, r3, #31
 80284f4:	d510      	bpl.n	8028518 <_printf_float+0x250>
 80284f6:	ee18 3a10 	vmov	r3, s16
 80284fa:	4652      	mov	r2, sl
 80284fc:	4631      	mov	r1, r6
 80284fe:	4628      	mov	r0, r5
 8028500:	47b8      	blx	r7
 8028502:	3001      	adds	r0, #1
 8028504:	f43f af41 	beq.w	802838a <_printf_float+0xc2>
 8028508:	f04f 0800 	mov.w	r8, #0
 802850c:	f104 091a 	add.w	r9, r4, #26
 8028510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028512:	3b01      	subs	r3, #1
 8028514:	4543      	cmp	r3, r8
 8028516:	dc09      	bgt.n	802852c <_printf_float+0x264>
 8028518:	6823      	ldr	r3, [r4, #0]
 802851a:	079b      	lsls	r3, r3, #30
 802851c:	f100 8105 	bmi.w	802872a <_printf_float+0x462>
 8028520:	68e0      	ldr	r0, [r4, #12]
 8028522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028524:	4298      	cmp	r0, r3
 8028526:	bfb8      	it	lt
 8028528:	4618      	movlt	r0, r3
 802852a:	e730      	b.n	802838e <_printf_float+0xc6>
 802852c:	2301      	movs	r3, #1
 802852e:	464a      	mov	r2, r9
 8028530:	4631      	mov	r1, r6
 8028532:	4628      	mov	r0, r5
 8028534:	47b8      	blx	r7
 8028536:	3001      	adds	r0, #1
 8028538:	f43f af27 	beq.w	802838a <_printf_float+0xc2>
 802853c:	f108 0801 	add.w	r8, r8, #1
 8028540:	e7e6      	b.n	8028510 <_printf_float+0x248>
 8028542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028544:	2b00      	cmp	r3, #0
 8028546:	dc39      	bgt.n	80285bc <_printf_float+0x2f4>
 8028548:	4a1b      	ldr	r2, [pc, #108]	; (80285b8 <_printf_float+0x2f0>)
 802854a:	2301      	movs	r3, #1
 802854c:	4631      	mov	r1, r6
 802854e:	4628      	mov	r0, r5
 8028550:	47b8      	blx	r7
 8028552:	3001      	adds	r0, #1
 8028554:	f43f af19 	beq.w	802838a <_printf_float+0xc2>
 8028558:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802855c:	4313      	orrs	r3, r2
 802855e:	d102      	bne.n	8028566 <_printf_float+0x29e>
 8028560:	6823      	ldr	r3, [r4, #0]
 8028562:	07d9      	lsls	r1, r3, #31
 8028564:	d5d8      	bpl.n	8028518 <_printf_float+0x250>
 8028566:	ee18 3a10 	vmov	r3, s16
 802856a:	4652      	mov	r2, sl
 802856c:	4631      	mov	r1, r6
 802856e:	4628      	mov	r0, r5
 8028570:	47b8      	blx	r7
 8028572:	3001      	adds	r0, #1
 8028574:	f43f af09 	beq.w	802838a <_printf_float+0xc2>
 8028578:	f04f 0900 	mov.w	r9, #0
 802857c:	f104 0a1a 	add.w	sl, r4, #26
 8028580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028582:	425b      	negs	r3, r3
 8028584:	454b      	cmp	r3, r9
 8028586:	dc01      	bgt.n	802858c <_printf_float+0x2c4>
 8028588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802858a:	e792      	b.n	80284b2 <_printf_float+0x1ea>
 802858c:	2301      	movs	r3, #1
 802858e:	4652      	mov	r2, sl
 8028590:	4631      	mov	r1, r6
 8028592:	4628      	mov	r0, r5
 8028594:	47b8      	blx	r7
 8028596:	3001      	adds	r0, #1
 8028598:	f43f aef7 	beq.w	802838a <_printf_float+0xc2>
 802859c:	f109 0901 	add.w	r9, r9, #1
 80285a0:	e7ee      	b.n	8028580 <_printf_float+0x2b8>
 80285a2:	bf00      	nop
 80285a4:	7fefffff 	.word	0x7fefffff
 80285a8:	0802f109 	.word	0x0802f109
 80285ac:	0802f10d 	.word	0x0802f10d
 80285b0:	0802f115 	.word	0x0802f115
 80285b4:	0802f111 	.word	0x0802f111
 80285b8:	0802f119 	.word	0x0802f119
 80285bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80285be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80285c0:	429a      	cmp	r2, r3
 80285c2:	bfa8      	it	ge
 80285c4:	461a      	movge	r2, r3
 80285c6:	2a00      	cmp	r2, #0
 80285c8:	4691      	mov	r9, r2
 80285ca:	dc37      	bgt.n	802863c <_printf_float+0x374>
 80285cc:	f04f 0b00 	mov.w	fp, #0
 80285d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80285d4:	f104 021a 	add.w	r2, r4, #26
 80285d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80285da:	9305      	str	r3, [sp, #20]
 80285dc:	eba3 0309 	sub.w	r3, r3, r9
 80285e0:	455b      	cmp	r3, fp
 80285e2:	dc33      	bgt.n	802864c <_printf_float+0x384>
 80285e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80285e8:	429a      	cmp	r2, r3
 80285ea:	db3b      	blt.n	8028664 <_printf_float+0x39c>
 80285ec:	6823      	ldr	r3, [r4, #0]
 80285ee:	07da      	lsls	r2, r3, #31
 80285f0:	d438      	bmi.n	8028664 <_printf_float+0x39c>
 80285f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80285f4:	9a05      	ldr	r2, [sp, #20]
 80285f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80285f8:	1a9a      	subs	r2, r3, r2
 80285fa:	eba3 0901 	sub.w	r9, r3, r1
 80285fe:	4591      	cmp	r9, r2
 8028600:	bfa8      	it	ge
 8028602:	4691      	movge	r9, r2
 8028604:	f1b9 0f00 	cmp.w	r9, #0
 8028608:	dc35      	bgt.n	8028676 <_printf_float+0x3ae>
 802860a:	f04f 0800 	mov.w	r8, #0
 802860e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8028612:	f104 0a1a 	add.w	sl, r4, #26
 8028616:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802861a:	1a9b      	subs	r3, r3, r2
 802861c:	eba3 0309 	sub.w	r3, r3, r9
 8028620:	4543      	cmp	r3, r8
 8028622:	f77f af79 	ble.w	8028518 <_printf_float+0x250>
 8028626:	2301      	movs	r3, #1
 8028628:	4652      	mov	r2, sl
 802862a:	4631      	mov	r1, r6
 802862c:	4628      	mov	r0, r5
 802862e:	47b8      	blx	r7
 8028630:	3001      	adds	r0, #1
 8028632:	f43f aeaa 	beq.w	802838a <_printf_float+0xc2>
 8028636:	f108 0801 	add.w	r8, r8, #1
 802863a:	e7ec      	b.n	8028616 <_printf_float+0x34e>
 802863c:	4613      	mov	r3, r2
 802863e:	4631      	mov	r1, r6
 8028640:	4642      	mov	r2, r8
 8028642:	4628      	mov	r0, r5
 8028644:	47b8      	blx	r7
 8028646:	3001      	adds	r0, #1
 8028648:	d1c0      	bne.n	80285cc <_printf_float+0x304>
 802864a:	e69e      	b.n	802838a <_printf_float+0xc2>
 802864c:	2301      	movs	r3, #1
 802864e:	4631      	mov	r1, r6
 8028650:	4628      	mov	r0, r5
 8028652:	9205      	str	r2, [sp, #20]
 8028654:	47b8      	blx	r7
 8028656:	3001      	adds	r0, #1
 8028658:	f43f ae97 	beq.w	802838a <_printf_float+0xc2>
 802865c:	9a05      	ldr	r2, [sp, #20]
 802865e:	f10b 0b01 	add.w	fp, fp, #1
 8028662:	e7b9      	b.n	80285d8 <_printf_float+0x310>
 8028664:	ee18 3a10 	vmov	r3, s16
 8028668:	4652      	mov	r2, sl
 802866a:	4631      	mov	r1, r6
 802866c:	4628      	mov	r0, r5
 802866e:	47b8      	blx	r7
 8028670:	3001      	adds	r0, #1
 8028672:	d1be      	bne.n	80285f2 <_printf_float+0x32a>
 8028674:	e689      	b.n	802838a <_printf_float+0xc2>
 8028676:	9a05      	ldr	r2, [sp, #20]
 8028678:	464b      	mov	r3, r9
 802867a:	4442      	add	r2, r8
 802867c:	4631      	mov	r1, r6
 802867e:	4628      	mov	r0, r5
 8028680:	47b8      	blx	r7
 8028682:	3001      	adds	r0, #1
 8028684:	d1c1      	bne.n	802860a <_printf_float+0x342>
 8028686:	e680      	b.n	802838a <_printf_float+0xc2>
 8028688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802868a:	2a01      	cmp	r2, #1
 802868c:	dc01      	bgt.n	8028692 <_printf_float+0x3ca>
 802868e:	07db      	lsls	r3, r3, #31
 8028690:	d538      	bpl.n	8028704 <_printf_float+0x43c>
 8028692:	2301      	movs	r3, #1
 8028694:	4642      	mov	r2, r8
 8028696:	4631      	mov	r1, r6
 8028698:	4628      	mov	r0, r5
 802869a:	47b8      	blx	r7
 802869c:	3001      	adds	r0, #1
 802869e:	f43f ae74 	beq.w	802838a <_printf_float+0xc2>
 80286a2:	ee18 3a10 	vmov	r3, s16
 80286a6:	4652      	mov	r2, sl
 80286a8:	4631      	mov	r1, r6
 80286aa:	4628      	mov	r0, r5
 80286ac:	47b8      	blx	r7
 80286ae:	3001      	adds	r0, #1
 80286b0:	f43f ae6b 	beq.w	802838a <_printf_float+0xc2>
 80286b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80286b8:	2200      	movs	r2, #0
 80286ba:	2300      	movs	r3, #0
 80286bc:	f7d8 fa04 	bl	8000ac8 <__aeabi_dcmpeq>
 80286c0:	b9d8      	cbnz	r0, 80286fa <_printf_float+0x432>
 80286c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80286c4:	f108 0201 	add.w	r2, r8, #1
 80286c8:	3b01      	subs	r3, #1
 80286ca:	4631      	mov	r1, r6
 80286cc:	4628      	mov	r0, r5
 80286ce:	47b8      	blx	r7
 80286d0:	3001      	adds	r0, #1
 80286d2:	d10e      	bne.n	80286f2 <_printf_float+0x42a>
 80286d4:	e659      	b.n	802838a <_printf_float+0xc2>
 80286d6:	2301      	movs	r3, #1
 80286d8:	4652      	mov	r2, sl
 80286da:	4631      	mov	r1, r6
 80286dc:	4628      	mov	r0, r5
 80286de:	47b8      	blx	r7
 80286e0:	3001      	adds	r0, #1
 80286e2:	f43f ae52 	beq.w	802838a <_printf_float+0xc2>
 80286e6:	f108 0801 	add.w	r8, r8, #1
 80286ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80286ec:	3b01      	subs	r3, #1
 80286ee:	4543      	cmp	r3, r8
 80286f0:	dcf1      	bgt.n	80286d6 <_printf_float+0x40e>
 80286f2:	464b      	mov	r3, r9
 80286f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80286f8:	e6dc      	b.n	80284b4 <_printf_float+0x1ec>
 80286fa:	f04f 0800 	mov.w	r8, #0
 80286fe:	f104 0a1a 	add.w	sl, r4, #26
 8028702:	e7f2      	b.n	80286ea <_printf_float+0x422>
 8028704:	2301      	movs	r3, #1
 8028706:	4642      	mov	r2, r8
 8028708:	e7df      	b.n	80286ca <_printf_float+0x402>
 802870a:	2301      	movs	r3, #1
 802870c:	464a      	mov	r2, r9
 802870e:	4631      	mov	r1, r6
 8028710:	4628      	mov	r0, r5
 8028712:	47b8      	blx	r7
 8028714:	3001      	adds	r0, #1
 8028716:	f43f ae38 	beq.w	802838a <_printf_float+0xc2>
 802871a:	f108 0801 	add.w	r8, r8, #1
 802871e:	68e3      	ldr	r3, [r4, #12]
 8028720:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8028722:	1a5b      	subs	r3, r3, r1
 8028724:	4543      	cmp	r3, r8
 8028726:	dcf0      	bgt.n	802870a <_printf_float+0x442>
 8028728:	e6fa      	b.n	8028520 <_printf_float+0x258>
 802872a:	f04f 0800 	mov.w	r8, #0
 802872e:	f104 0919 	add.w	r9, r4, #25
 8028732:	e7f4      	b.n	802871e <_printf_float+0x456>

08028734 <_printf_common>:
 8028734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028738:	4616      	mov	r6, r2
 802873a:	4699      	mov	r9, r3
 802873c:	688a      	ldr	r2, [r1, #8]
 802873e:	690b      	ldr	r3, [r1, #16]
 8028740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8028744:	4293      	cmp	r3, r2
 8028746:	bfb8      	it	lt
 8028748:	4613      	movlt	r3, r2
 802874a:	6033      	str	r3, [r6, #0]
 802874c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8028750:	4607      	mov	r7, r0
 8028752:	460c      	mov	r4, r1
 8028754:	b10a      	cbz	r2, 802875a <_printf_common+0x26>
 8028756:	3301      	adds	r3, #1
 8028758:	6033      	str	r3, [r6, #0]
 802875a:	6823      	ldr	r3, [r4, #0]
 802875c:	0699      	lsls	r1, r3, #26
 802875e:	bf42      	ittt	mi
 8028760:	6833      	ldrmi	r3, [r6, #0]
 8028762:	3302      	addmi	r3, #2
 8028764:	6033      	strmi	r3, [r6, #0]
 8028766:	6825      	ldr	r5, [r4, #0]
 8028768:	f015 0506 	ands.w	r5, r5, #6
 802876c:	d106      	bne.n	802877c <_printf_common+0x48>
 802876e:	f104 0a19 	add.w	sl, r4, #25
 8028772:	68e3      	ldr	r3, [r4, #12]
 8028774:	6832      	ldr	r2, [r6, #0]
 8028776:	1a9b      	subs	r3, r3, r2
 8028778:	42ab      	cmp	r3, r5
 802877a:	dc26      	bgt.n	80287ca <_printf_common+0x96>
 802877c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8028780:	1e13      	subs	r3, r2, #0
 8028782:	6822      	ldr	r2, [r4, #0]
 8028784:	bf18      	it	ne
 8028786:	2301      	movne	r3, #1
 8028788:	0692      	lsls	r2, r2, #26
 802878a:	d42b      	bmi.n	80287e4 <_printf_common+0xb0>
 802878c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8028790:	4649      	mov	r1, r9
 8028792:	4638      	mov	r0, r7
 8028794:	47c0      	blx	r8
 8028796:	3001      	adds	r0, #1
 8028798:	d01e      	beq.n	80287d8 <_printf_common+0xa4>
 802879a:	6823      	ldr	r3, [r4, #0]
 802879c:	68e5      	ldr	r5, [r4, #12]
 802879e:	6832      	ldr	r2, [r6, #0]
 80287a0:	f003 0306 	and.w	r3, r3, #6
 80287a4:	2b04      	cmp	r3, #4
 80287a6:	bf08      	it	eq
 80287a8:	1aad      	subeq	r5, r5, r2
 80287aa:	68a3      	ldr	r3, [r4, #8]
 80287ac:	6922      	ldr	r2, [r4, #16]
 80287ae:	bf0c      	ite	eq
 80287b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80287b4:	2500      	movne	r5, #0
 80287b6:	4293      	cmp	r3, r2
 80287b8:	bfc4      	itt	gt
 80287ba:	1a9b      	subgt	r3, r3, r2
 80287bc:	18ed      	addgt	r5, r5, r3
 80287be:	2600      	movs	r6, #0
 80287c0:	341a      	adds	r4, #26
 80287c2:	42b5      	cmp	r5, r6
 80287c4:	d11a      	bne.n	80287fc <_printf_common+0xc8>
 80287c6:	2000      	movs	r0, #0
 80287c8:	e008      	b.n	80287dc <_printf_common+0xa8>
 80287ca:	2301      	movs	r3, #1
 80287cc:	4652      	mov	r2, sl
 80287ce:	4649      	mov	r1, r9
 80287d0:	4638      	mov	r0, r7
 80287d2:	47c0      	blx	r8
 80287d4:	3001      	adds	r0, #1
 80287d6:	d103      	bne.n	80287e0 <_printf_common+0xac>
 80287d8:	f04f 30ff 	mov.w	r0, #4294967295
 80287dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80287e0:	3501      	adds	r5, #1
 80287e2:	e7c6      	b.n	8028772 <_printf_common+0x3e>
 80287e4:	18e1      	adds	r1, r4, r3
 80287e6:	1c5a      	adds	r2, r3, #1
 80287e8:	2030      	movs	r0, #48	; 0x30
 80287ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80287ee:	4422      	add	r2, r4
 80287f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80287f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80287f8:	3302      	adds	r3, #2
 80287fa:	e7c7      	b.n	802878c <_printf_common+0x58>
 80287fc:	2301      	movs	r3, #1
 80287fe:	4622      	mov	r2, r4
 8028800:	4649      	mov	r1, r9
 8028802:	4638      	mov	r0, r7
 8028804:	47c0      	blx	r8
 8028806:	3001      	adds	r0, #1
 8028808:	d0e6      	beq.n	80287d8 <_printf_common+0xa4>
 802880a:	3601      	adds	r6, #1
 802880c:	e7d9      	b.n	80287c2 <_printf_common+0x8e>
	...

08028810 <_printf_i>:
 8028810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8028814:	7e0f      	ldrb	r7, [r1, #24]
 8028816:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028818:	2f78      	cmp	r7, #120	; 0x78
 802881a:	4691      	mov	r9, r2
 802881c:	4680      	mov	r8, r0
 802881e:	460c      	mov	r4, r1
 8028820:	469a      	mov	sl, r3
 8028822:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8028826:	d807      	bhi.n	8028838 <_printf_i+0x28>
 8028828:	2f62      	cmp	r7, #98	; 0x62
 802882a:	d80a      	bhi.n	8028842 <_printf_i+0x32>
 802882c:	2f00      	cmp	r7, #0
 802882e:	f000 80d8 	beq.w	80289e2 <_printf_i+0x1d2>
 8028832:	2f58      	cmp	r7, #88	; 0x58
 8028834:	f000 80a3 	beq.w	802897e <_printf_i+0x16e>
 8028838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802883c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8028840:	e03a      	b.n	80288b8 <_printf_i+0xa8>
 8028842:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8028846:	2b15      	cmp	r3, #21
 8028848:	d8f6      	bhi.n	8028838 <_printf_i+0x28>
 802884a:	a101      	add	r1, pc, #4	; (adr r1, 8028850 <_printf_i+0x40>)
 802884c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8028850:	080288a9 	.word	0x080288a9
 8028854:	080288bd 	.word	0x080288bd
 8028858:	08028839 	.word	0x08028839
 802885c:	08028839 	.word	0x08028839
 8028860:	08028839 	.word	0x08028839
 8028864:	08028839 	.word	0x08028839
 8028868:	080288bd 	.word	0x080288bd
 802886c:	08028839 	.word	0x08028839
 8028870:	08028839 	.word	0x08028839
 8028874:	08028839 	.word	0x08028839
 8028878:	08028839 	.word	0x08028839
 802887c:	080289c9 	.word	0x080289c9
 8028880:	080288ed 	.word	0x080288ed
 8028884:	080289ab 	.word	0x080289ab
 8028888:	08028839 	.word	0x08028839
 802888c:	08028839 	.word	0x08028839
 8028890:	080289eb 	.word	0x080289eb
 8028894:	08028839 	.word	0x08028839
 8028898:	080288ed 	.word	0x080288ed
 802889c:	08028839 	.word	0x08028839
 80288a0:	08028839 	.word	0x08028839
 80288a4:	080289b3 	.word	0x080289b3
 80288a8:	682b      	ldr	r3, [r5, #0]
 80288aa:	1d1a      	adds	r2, r3, #4
 80288ac:	681b      	ldr	r3, [r3, #0]
 80288ae:	602a      	str	r2, [r5, #0]
 80288b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80288b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80288b8:	2301      	movs	r3, #1
 80288ba:	e0a3      	b.n	8028a04 <_printf_i+0x1f4>
 80288bc:	6820      	ldr	r0, [r4, #0]
 80288be:	6829      	ldr	r1, [r5, #0]
 80288c0:	0606      	lsls	r6, r0, #24
 80288c2:	f101 0304 	add.w	r3, r1, #4
 80288c6:	d50a      	bpl.n	80288de <_printf_i+0xce>
 80288c8:	680e      	ldr	r6, [r1, #0]
 80288ca:	602b      	str	r3, [r5, #0]
 80288cc:	2e00      	cmp	r6, #0
 80288ce:	da03      	bge.n	80288d8 <_printf_i+0xc8>
 80288d0:	232d      	movs	r3, #45	; 0x2d
 80288d2:	4276      	negs	r6, r6
 80288d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80288d8:	485e      	ldr	r0, [pc, #376]	; (8028a54 <_printf_i+0x244>)
 80288da:	230a      	movs	r3, #10
 80288dc:	e019      	b.n	8028912 <_printf_i+0x102>
 80288de:	680e      	ldr	r6, [r1, #0]
 80288e0:	602b      	str	r3, [r5, #0]
 80288e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80288e6:	bf18      	it	ne
 80288e8:	b236      	sxthne	r6, r6
 80288ea:	e7ef      	b.n	80288cc <_printf_i+0xbc>
 80288ec:	682b      	ldr	r3, [r5, #0]
 80288ee:	6820      	ldr	r0, [r4, #0]
 80288f0:	1d19      	adds	r1, r3, #4
 80288f2:	6029      	str	r1, [r5, #0]
 80288f4:	0601      	lsls	r1, r0, #24
 80288f6:	d501      	bpl.n	80288fc <_printf_i+0xec>
 80288f8:	681e      	ldr	r6, [r3, #0]
 80288fa:	e002      	b.n	8028902 <_printf_i+0xf2>
 80288fc:	0646      	lsls	r6, r0, #25
 80288fe:	d5fb      	bpl.n	80288f8 <_printf_i+0xe8>
 8028900:	881e      	ldrh	r6, [r3, #0]
 8028902:	4854      	ldr	r0, [pc, #336]	; (8028a54 <_printf_i+0x244>)
 8028904:	2f6f      	cmp	r7, #111	; 0x6f
 8028906:	bf0c      	ite	eq
 8028908:	2308      	moveq	r3, #8
 802890a:	230a      	movne	r3, #10
 802890c:	2100      	movs	r1, #0
 802890e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8028912:	6865      	ldr	r5, [r4, #4]
 8028914:	60a5      	str	r5, [r4, #8]
 8028916:	2d00      	cmp	r5, #0
 8028918:	bfa2      	ittt	ge
 802891a:	6821      	ldrge	r1, [r4, #0]
 802891c:	f021 0104 	bicge.w	r1, r1, #4
 8028920:	6021      	strge	r1, [r4, #0]
 8028922:	b90e      	cbnz	r6, 8028928 <_printf_i+0x118>
 8028924:	2d00      	cmp	r5, #0
 8028926:	d04d      	beq.n	80289c4 <_printf_i+0x1b4>
 8028928:	4615      	mov	r5, r2
 802892a:	fbb6 f1f3 	udiv	r1, r6, r3
 802892e:	fb03 6711 	mls	r7, r3, r1, r6
 8028932:	5dc7      	ldrb	r7, [r0, r7]
 8028934:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8028938:	4637      	mov	r7, r6
 802893a:	42bb      	cmp	r3, r7
 802893c:	460e      	mov	r6, r1
 802893e:	d9f4      	bls.n	802892a <_printf_i+0x11a>
 8028940:	2b08      	cmp	r3, #8
 8028942:	d10b      	bne.n	802895c <_printf_i+0x14c>
 8028944:	6823      	ldr	r3, [r4, #0]
 8028946:	07de      	lsls	r6, r3, #31
 8028948:	d508      	bpl.n	802895c <_printf_i+0x14c>
 802894a:	6923      	ldr	r3, [r4, #16]
 802894c:	6861      	ldr	r1, [r4, #4]
 802894e:	4299      	cmp	r1, r3
 8028950:	bfde      	ittt	le
 8028952:	2330      	movle	r3, #48	; 0x30
 8028954:	f805 3c01 	strble.w	r3, [r5, #-1]
 8028958:	f105 35ff 	addle.w	r5, r5, #4294967295
 802895c:	1b52      	subs	r2, r2, r5
 802895e:	6122      	str	r2, [r4, #16]
 8028960:	f8cd a000 	str.w	sl, [sp]
 8028964:	464b      	mov	r3, r9
 8028966:	aa03      	add	r2, sp, #12
 8028968:	4621      	mov	r1, r4
 802896a:	4640      	mov	r0, r8
 802896c:	f7ff fee2 	bl	8028734 <_printf_common>
 8028970:	3001      	adds	r0, #1
 8028972:	d14c      	bne.n	8028a0e <_printf_i+0x1fe>
 8028974:	f04f 30ff 	mov.w	r0, #4294967295
 8028978:	b004      	add	sp, #16
 802897a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802897e:	4835      	ldr	r0, [pc, #212]	; (8028a54 <_printf_i+0x244>)
 8028980:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8028984:	6829      	ldr	r1, [r5, #0]
 8028986:	6823      	ldr	r3, [r4, #0]
 8028988:	f851 6b04 	ldr.w	r6, [r1], #4
 802898c:	6029      	str	r1, [r5, #0]
 802898e:	061d      	lsls	r5, r3, #24
 8028990:	d514      	bpl.n	80289bc <_printf_i+0x1ac>
 8028992:	07df      	lsls	r7, r3, #31
 8028994:	bf44      	itt	mi
 8028996:	f043 0320 	orrmi.w	r3, r3, #32
 802899a:	6023      	strmi	r3, [r4, #0]
 802899c:	b91e      	cbnz	r6, 80289a6 <_printf_i+0x196>
 802899e:	6823      	ldr	r3, [r4, #0]
 80289a0:	f023 0320 	bic.w	r3, r3, #32
 80289a4:	6023      	str	r3, [r4, #0]
 80289a6:	2310      	movs	r3, #16
 80289a8:	e7b0      	b.n	802890c <_printf_i+0xfc>
 80289aa:	6823      	ldr	r3, [r4, #0]
 80289ac:	f043 0320 	orr.w	r3, r3, #32
 80289b0:	6023      	str	r3, [r4, #0]
 80289b2:	2378      	movs	r3, #120	; 0x78
 80289b4:	4828      	ldr	r0, [pc, #160]	; (8028a58 <_printf_i+0x248>)
 80289b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80289ba:	e7e3      	b.n	8028984 <_printf_i+0x174>
 80289bc:	0659      	lsls	r1, r3, #25
 80289be:	bf48      	it	mi
 80289c0:	b2b6      	uxthmi	r6, r6
 80289c2:	e7e6      	b.n	8028992 <_printf_i+0x182>
 80289c4:	4615      	mov	r5, r2
 80289c6:	e7bb      	b.n	8028940 <_printf_i+0x130>
 80289c8:	682b      	ldr	r3, [r5, #0]
 80289ca:	6826      	ldr	r6, [r4, #0]
 80289cc:	6961      	ldr	r1, [r4, #20]
 80289ce:	1d18      	adds	r0, r3, #4
 80289d0:	6028      	str	r0, [r5, #0]
 80289d2:	0635      	lsls	r5, r6, #24
 80289d4:	681b      	ldr	r3, [r3, #0]
 80289d6:	d501      	bpl.n	80289dc <_printf_i+0x1cc>
 80289d8:	6019      	str	r1, [r3, #0]
 80289da:	e002      	b.n	80289e2 <_printf_i+0x1d2>
 80289dc:	0670      	lsls	r0, r6, #25
 80289de:	d5fb      	bpl.n	80289d8 <_printf_i+0x1c8>
 80289e0:	8019      	strh	r1, [r3, #0]
 80289e2:	2300      	movs	r3, #0
 80289e4:	6123      	str	r3, [r4, #16]
 80289e6:	4615      	mov	r5, r2
 80289e8:	e7ba      	b.n	8028960 <_printf_i+0x150>
 80289ea:	682b      	ldr	r3, [r5, #0]
 80289ec:	1d1a      	adds	r2, r3, #4
 80289ee:	602a      	str	r2, [r5, #0]
 80289f0:	681d      	ldr	r5, [r3, #0]
 80289f2:	6862      	ldr	r2, [r4, #4]
 80289f4:	2100      	movs	r1, #0
 80289f6:	4628      	mov	r0, r5
 80289f8:	f7d7 fbf2 	bl	80001e0 <memchr>
 80289fc:	b108      	cbz	r0, 8028a02 <_printf_i+0x1f2>
 80289fe:	1b40      	subs	r0, r0, r5
 8028a00:	6060      	str	r0, [r4, #4]
 8028a02:	6863      	ldr	r3, [r4, #4]
 8028a04:	6123      	str	r3, [r4, #16]
 8028a06:	2300      	movs	r3, #0
 8028a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028a0c:	e7a8      	b.n	8028960 <_printf_i+0x150>
 8028a0e:	6923      	ldr	r3, [r4, #16]
 8028a10:	462a      	mov	r2, r5
 8028a12:	4649      	mov	r1, r9
 8028a14:	4640      	mov	r0, r8
 8028a16:	47d0      	blx	sl
 8028a18:	3001      	adds	r0, #1
 8028a1a:	d0ab      	beq.n	8028974 <_printf_i+0x164>
 8028a1c:	6823      	ldr	r3, [r4, #0]
 8028a1e:	079b      	lsls	r3, r3, #30
 8028a20:	d413      	bmi.n	8028a4a <_printf_i+0x23a>
 8028a22:	68e0      	ldr	r0, [r4, #12]
 8028a24:	9b03      	ldr	r3, [sp, #12]
 8028a26:	4298      	cmp	r0, r3
 8028a28:	bfb8      	it	lt
 8028a2a:	4618      	movlt	r0, r3
 8028a2c:	e7a4      	b.n	8028978 <_printf_i+0x168>
 8028a2e:	2301      	movs	r3, #1
 8028a30:	4632      	mov	r2, r6
 8028a32:	4649      	mov	r1, r9
 8028a34:	4640      	mov	r0, r8
 8028a36:	47d0      	blx	sl
 8028a38:	3001      	adds	r0, #1
 8028a3a:	d09b      	beq.n	8028974 <_printf_i+0x164>
 8028a3c:	3501      	adds	r5, #1
 8028a3e:	68e3      	ldr	r3, [r4, #12]
 8028a40:	9903      	ldr	r1, [sp, #12]
 8028a42:	1a5b      	subs	r3, r3, r1
 8028a44:	42ab      	cmp	r3, r5
 8028a46:	dcf2      	bgt.n	8028a2e <_printf_i+0x21e>
 8028a48:	e7eb      	b.n	8028a22 <_printf_i+0x212>
 8028a4a:	2500      	movs	r5, #0
 8028a4c:	f104 0619 	add.w	r6, r4, #25
 8028a50:	e7f5      	b.n	8028a3e <_printf_i+0x22e>
 8028a52:	bf00      	nop
 8028a54:	0802f11b 	.word	0x0802f11b
 8028a58:	0802f12c 	.word	0x0802f12c

08028a5c <cleanup_glue>:
 8028a5c:	b538      	push	{r3, r4, r5, lr}
 8028a5e:	460c      	mov	r4, r1
 8028a60:	6809      	ldr	r1, [r1, #0]
 8028a62:	4605      	mov	r5, r0
 8028a64:	b109      	cbz	r1, 8028a6a <cleanup_glue+0xe>
 8028a66:	f7ff fff9 	bl	8028a5c <cleanup_glue>
 8028a6a:	4621      	mov	r1, r4
 8028a6c:	4628      	mov	r0, r5
 8028a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028a72:	f7ff b94f 	b.w	8027d14 <_free_r>
	...

08028a78 <_reclaim_reent>:
 8028a78:	4b2c      	ldr	r3, [pc, #176]	; (8028b2c <_reclaim_reent+0xb4>)
 8028a7a:	681b      	ldr	r3, [r3, #0]
 8028a7c:	4283      	cmp	r3, r0
 8028a7e:	b570      	push	{r4, r5, r6, lr}
 8028a80:	4604      	mov	r4, r0
 8028a82:	d051      	beq.n	8028b28 <_reclaim_reent+0xb0>
 8028a84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8028a86:	b143      	cbz	r3, 8028a9a <_reclaim_reent+0x22>
 8028a88:	68db      	ldr	r3, [r3, #12]
 8028a8a:	2b00      	cmp	r3, #0
 8028a8c:	d14a      	bne.n	8028b24 <_reclaim_reent+0xac>
 8028a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028a90:	6819      	ldr	r1, [r3, #0]
 8028a92:	b111      	cbz	r1, 8028a9a <_reclaim_reent+0x22>
 8028a94:	4620      	mov	r0, r4
 8028a96:	f7ff f93d 	bl	8027d14 <_free_r>
 8028a9a:	6961      	ldr	r1, [r4, #20]
 8028a9c:	b111      	cbz	r1, 8028aa4 <_reclaim_reent+0x2c>
 8028a9e:	4620      	mov	r0, r4
 8028aa0:	f7ff f938 	bl	8027d14 <_free_r>
 8028aa4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8028aa6:	b111      	cbz	r1, 8028aae <_reclaim_reent+0x36>
 8028aa8:	4620      	mov	r0, r4
 8028aaa:	f7ff f933 	bl	8027d14 <_free_r>
 8028aae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8028ab0:	b111      	cbz	r1, 8028ab8 <_reclaim_reent+0x40>
 8028ab2:	4620      	mov	r0, r4
 8028ab4:	f7ff f92e 	bl	8027d14 <_free_r>
 8028ab8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8028aba:	b111      	cbz	r1, 8028ac2 <_reclaim_reent+0x4a>
 8028abc:	4620      	mov	r0, r4
 8028abe:	f7ff f929 	bl	8027d14 <_free_r>
 8028ac2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8028ac4:	b111      	cbz	r1, 8028acc <_reclaim_reent+0x54>
 8028ac6:	4620      	mov	r0, r4
 8028ac8:	f7ff f924 	bl	8027d14 <_free_r>
 8028acc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8028ace:	b111      	cbz	r1, 8028ad6 <_reclaim_reent+0x5e>
 8028ad0:	4620      	mov	r0, r4
 8028ad2:	f7ff f91f 	bl	8027d14 <_free_r>
 8028ad6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8028ad8:	b111      	cbz	r1, 8028ae0 <_reclaim_reent+0x68>
 8028ada:	4620      	mov	r0, r4
 8028adc:	f7ff f91a 	bl	8027d14 <_free_r>
 8028ae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028ae2:	b111      	cbz	r1, 8028aea <_reclaim_reent+0x72>
 8028ae4:	4620      	mov	r0, r4
 8028ae6:	f7ff f915 	bl	8027d14 <_free_r>
 8028aea:	69a3      	ldr	r3, [r4, #24]
 8028aec:	b1e3      	cbz	r3, 8028b28 <_reclaim_reent+0xb0>
 8028aee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8028af0:	4620      	mov	r0, r4
 8028af2:	4798      	blx	r3
 8028af4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8028af6:	b1b9      	cbz	r1, 8028b28 <_reclaim_reent+0xb0>
 8028af8:	4620      	mov	r0, r4
 8028afa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8028afe:	f7ff bfad 	b.w	8028a5c <cleanup_glue>
 8028b02:	5949      	ldr	r1, [r1, r5]
 8028b04:	b941      	cbnz	r1, 8028b18 <_reclaim_reent+0xa0>
 8028b06:	3504      	adds	r5, #4
 8028b08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028b0a:	2d80      	cmp	r5, #128	; 0x80
 8028b0c:	68d9      	ldr	r1, [r3, #12]
 8028b0e:	d1f8      	bne.n	8028b02 <_reclaim_reent+0x8a>
 8028b10:	4620      	mov	r0, r4
 8028b12:	f7ff f8ff 	bl	8027d14 <_free_r>
 8028b16:	e7ba      	b.n	8028a8e <_reclaim_reent+0x16>
 8028b18:	680e      	ldr	r6, [r1, #0]
 8028b1a:	4620      	mov	r0, r4
 8028b1c:	f7ff f8fa 	bl	8027d14 <_free_r>
 8028b20:	4631      	mov	r1, r6
 8028b22:	e7ef      	b.n	8028b04 <_reclaim_reent+0x8c>
 8028b24:	2500      	movs	r5, #0
 8028b26:	e7ef      	b.n	8028b08 <_reclaim_reent+0x90>
 8028b28:	bd70      	pop	{r4, r5, r6, pc}
 8028b2a:	bf00      	nop
 8028b2c:	20000094 	.word	0x20000094

08028b30 <_sbrk_r>:
 8028b30:	b538      	push	{r3, r4, r5, lr}
 8028b32:	4d06      	ldr	r5, [pc, #24]	; (8028b4c <_sbrk_r+0x1c>)
 8028b34:	2300      	movs	r3, #0
 8028b36:	4604      	mov	r4, r0
 8028b38:	4608      	mov	r0, r1
 8028b3a:	602b      	str	r3, [r5, #0]
 8028b3c:	f7da fa76 	bl	800302c <_sbrk>
 8028b40:	1c43      	adds	r3, r0, #1
 8028b42:	d102      	bne.n	8028b4a <_sbrk_r+0x1a>
 8028b44:	682b      	ldr	r3, [r5, #0]
 8028b46:	b103      	cbz	r3, 8028b4a <_sbrk_r+0x1a>
 8028b48:	6023      	str	r3, [r4, #0]
 8028b4a:	bd38      	pop	{r3, r4, r5, pc}
 8028b4c:	2000c654 	.word	0x2000c654

08028b50 <_raise_r>:
 8028b50:	291f      	cmp	r1, #31
 8028b52:	b538      	push	{r3, r4, r5, lr}
 8028b54:	4604      	mov	r4, r0
 8028b56:	460d      	mov	r5, r1
 8028b58:	d904      	bls.n	8028b64 <_raise_r+0x14>
 8028b5a:	2316      	movs	r3, #22
 8028b5c:	6003      	str	r3, [r0, #0]
 8028b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8028b62:	bd38      	pop	{r3, r4, r5, pc}
 8028b64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8028b66:	b112      	cbz	r2, 8028b6e <_raise_r+0x1e>
 8028b68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028b6c:	b94b      	cbnz	r3, 8028b82 <_raise_r+0x32>
 8028b6e:	4620      	mov	r0, r4
 8028b70:	f000 f830 	bl	8028bd4 <_getpid_r>
 8028b74:	462a      	mov	r2, r5
 8028b76:	4601      	mov	r1, r0
 8028b78:	4620      	mov	r0, r4
 8028b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028b7e:	f000 b817 	b.w	8028bb0 <_kill_r>
 8028b82:	2b01      	cmp	r3, #1
 8028b84:	d00a      	beq.n	8028b9c <_raise_r+0x4c>
 8028b86:	1c59      	adds	r1, r3, #1
 8028b88:	d103      	bne.n	8028b92 <_raise_r+0x42>
 8028b8a:	2316      	movs	r3, #22
 8028b8c:	6003      	str	r3, [r0, #0]
 8028b8e:	2001      	movs	r0, #1
 8028b90:	e7e7      	b.n	8028b62 <_raise_r+0x12>
 8028b92:	2400      	movs	r4, #0
 8028b94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8028b98:	4628      	mov	r0, r5
 8028b9a:	4798      	blx	r3
 8028b9c:	2000      	movs	r0, #0
 8028b9e:	e7e0      	b.n	8028b62 <_raise_r+0x12>

08028ba0 <raise>:
 8028ba0:	4b02      	ldr	r3, [pc, #8]	; (8028bac <raise+0xc>)
 8028ba2:	4601      	mov	r1, r0
 8028ba4:	6818      	ldr	r0, [r3, #0]
 8028ba6:	f7ff bfd3 	b.w	8028b50 <_raise_r>
 8028baa:	bf00      	nop
 8028bac:	20000094 	.word	0x20000094

08028bb0 <_kill_r>:
 8028bb0:	b538      	push	{r3, r4, r5, lr}
 8028bb2:	4d07      	ldr	r5, [pc, #28]	; (8028bd0 <_kill_r+0x20>)
 8028bb4:	2300      	movs	r3, #0
 8028bb6:	4604      	mov	r4, r0
 8028bb8:	4608      	mov	r0, r1
 8028bba:	4611      	mov	r1, r2
 8028bbc:	602b      	str	r3, [r5, #0]
 8028bbe:	f7da f9ad 	bl	8002f1c <_kill>
 8028bc2:	1c43      	adds	r3, r0, #1
 8028bc4:	d102      	bne.n	8028bcc <_kill_r+0x1c>
 8028bc6:	682b      	ldr	r3, [r5, #0]
 8028bc8:	b103      	cbz	r3, 8028bcc <_kill_r+0x1c>
 8028bca:	6023      	str	r3, [r4, #0]
 8028bcc:	bd38      	pop	{r3, r4, r5, pc}
 8028bce:	bf00      	nop
 8028bd0:	2000c654 	.word	0x2000c654

08028bd4 <_getpid_r>:
 8028bd4:	f7da b99a 	b.w	8002f0c <_getpid>

08028bd8 <siprintf>:
 8028bd8:	b40e      	push	{r1, r2, r3}
 8028bda:	b500      	push	{lr}
 8028bdc:	b09c      	sub	sp, #112	; 0x70
 8028bde:	ab1d      	add	r3, sp, #116	; 0x74
 8028be0:	9002      	str	r0, [sp, #8]
 8028be2:	9006      	str	r0, [sp, #24]
 8028be4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8028be8:	4809      	ldr	r0, [pc, #36]	; (8028c10 <siprintf+0x38>)
 8028bea:	9107      	str	r1, [sp, #28]
 8028bec:	9104      	str	r1, [sp, #16]
 8028bee:	4909      	ldr	r1, [pc, #36]	; (8028c14 <siprintf+0x3c>)
 8028bf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8028bf4:	9105      	str	r1, [sp, #20]
 8028bf6:	6800      	ldr	r0, [r0, #0]
 8028bf8:	9301      	str	r3, [sp, #4]
 8028bfa:	a902      	add	r1, sp, #8
 8028bfc:	f003 f976 	bl	802beec <_svfiprintf_r>
 8028c00:	9b02      	ldr	r3, [sp, #8]
 8028c02:	2200      	movs	r2, #0
 8028c04:	701a      	strb	r2, [r3, #0]
 8028c06:	b01c      	add	sp, #112	; 0x70
 8028c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8028c0c:	b003      	add	sp, #12
 8028c0e:	4770      	bx	lr
 8028c10:	20000094 	.word	0x20000094
 8028c14:	ffff0208 	.word	0xffff0208

08028c18 <__sread>:
 8028c18:	b510      	push	{r4, lr}
 8028c1a:	460c      	mov	r4, r1
 8028c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028c20:	f003 fa64 	bl	802c0ec <_read_r>
 8028c24:	2800      	cmp	r0, #0
 8028c26:	bfab      	itete	ge
 8028c28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8028c2a:	89a3      	ldrhlt	r3, [r4, #12]
 8028c2c:	181b      	addge	r3, r3, r0
 8028c2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8028c32:	bfac      	ite	ge
 8028c34:	6563      	strge	r3, [r4, #84]	; 0x54
 8028c36:	81a3      	strhlt	r3, [r4, #12]
 8028c38:	bd10      	pop	{r4, pc}

08028c3a <__swrite>:
 8028c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028c3e:	461f      	mov	r7, r3
 8028c40:	898b      	ldrh	r3, [r1, #12]
 8028c42:	05db      	lsls	r3, r3, #23
 8028c44:	4605      	mov	r5, r0
 8028c46:	460c      	mov	r4, r1
 8028c48:	4616      	mov	r6, r2
 8028c4a:	d505      	bpl.n	8028c58 <__swrite+0x1e>
 8028c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028c50:	2302      	movs	r3, #2
 8028c52:	2200      	movs	r2, #0
 8028c54:	f002 fb38 	bl	802b2c8 <_lseek_r>
 8028c58:	89a3      	ldrh	r3, [r4, #12]
 8028c5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028c5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8028c62:	81a3      	strh	r3, [r4, #12]
 8028c64:	4632      	mov	r2, r6
 8028c66:	463b      	mov	r3, r7
 8028c68:	4628      	mov	r0, r5
 8028c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028c6e:	f000 bf87 	b.w	8029b80 <_write_r>

08028c72 <__sseek>:
 8028c72:	b510      	push	{r4, lr}
 8028c74:	460c      	mov	r4, r1
 8028c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028c7a:	f002 fb25 	bl	802b2c8 <_lseek_r>
 8028c7e:	1c43      	adds	r3, r0, #1
 8028c80:	89a3      	ldrh	r3, [r4, #12]
 8028c82:	bf15      	itete	ne
 8028c84:	6560      	strne	r0, [r4, #84]	; 0x54
 8028c86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8028c8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8028c8e:	81a3      	strheq	r3, [r4, #12]
 8028c90:	bf18      	it	ne
 8028c92:	81a3      	strhne	r3, [r4, #12]
 8028c94:	bd10      	pop	{r4, pc}

08028c96 <__sclose>:
 8028c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028c9a:	f001 b853 	b.w	8029d44 <_close_r>

08028c9e <strchr>:
 8028c9e:	b2c9      	uxtb	r1, r1
 8028ca0:	4603      	mov	r3, r0
 8028ca2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028ca6:	b11a      	cbz	r2, 8028cb0 <strchr+0x12>
 8028ca8:	428a      	cmp	r2, r1
 8028caa:	d1f9      	bne.n	8028ca0 <strchr+0x2>
 8028cac:	4618      	mov	r0, r3
 8028cae:	4770      	bx	lr
 8028cb0:	2900      	cmp	r1, #0
 8028cb2:	bf18      	it	ne
 8028cb4:	2300      	movne	r3, #0
 8028cb6:	e7f9      	b.n	8028cac <strchr+0xe>

08028cb8 <strstr>:
 8028cb8:	780a      	ldrb	r2, [r1, #0]
 8028cba:	b570      	push	{r4, r5, r6, lr}
 8028cbc:	b96a      	cbnz	r2, 8028cda <strstr+0x22>
 8028cbe:	bd70      	pop	{r4, r5, r6, pc}
 8028cc0:	429a      	cmp	r2, r3
 8028cc2:	d109      	bne.n	8028cd8 <strstr+0x20>
 8028cc4:	460c      	mov	r4, r1
 8028cc6:	4605      	mov	r5, r0
 8028cc8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8028ccc:	2b00      	cmp	r3, #0
 8028cce:	d0f6      	beq.n	8028cbe <strstr+0x6>
 8028cd0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8028cd4:	429e      	cmp	r6, r3
 8028cd6:	d0f7      	beq.n	8028cc8 <strstr+0x10>
 8028cd8:	3001      	adds	r0, #1
 8028cda:	7803      	ldrb	r3, [r0, #0]
 8028cdc:	2b00      	cmp	r3, #0
 8028cde:	d1ef      	bne.n	8028cc0 <strstr+0x8>
 8028ce0:	4618      	mov	r0, r3
 8028ce2:	e7ec      	b.n	8028cbe <strstr+0x6>

08028ce4 <sulp>:
 8028ce4:	b570      	push	{r4, r5, r6, lr}
 8028ce6:	4604      	mov	r4, r0
 8028ce8:	460d      	mov	r5, r1
 8028cea:	ec45 4b10 	vmov	d0, r4, r5
 8028cee:	4616      	mov	r6, r2
 8028cf0:	f002 ff0c 	bl	802bb0c <__ulp>
 8028cf4:	ec51 0b10 	vmov	r0, r1, d0
 8028cf8:	b17e      	cbz	r6, 8028d1a <sulp+0x36>
 8028cfa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8028cfe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8028d02:	2b00      	cmp	r3, #0
 8028d04:	dd09      	ble.n	8028d1a <sulp+0x36>
 8028d06:	051b      	lsls	r3, r3, #20
 8028d08:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8028d0c:	2400      	movs	r4, #0
 8028d0e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8028d12:	4622      	mov	r2, r4
 8028d14:	462b      	mov	r3, r5
 8028d16:	f7d7 fc6f 	bl	80005f8 <__aeabi_dmul>
 8028d1a:	bd70      	pop	{r4, r5, r6, pc}
 8028d1c:	0000      	movs	r0, r0
	...

08028d20 <_strtod_l>:
 8028d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028d24:	ed2d 8b02 	vpush	{d8}
 8028d28:	b09d      	sub	sp, #116	; 0x74
 8028d2a:	461f      	mov	r7, r3
 8028d2c:	2300      	movs	r3, #0
 8028d2e:	9318      	str	r3, [sp, #96]	; 0x60
 8028d30:	4ba2      	ldr	r3, [pc, #648]	; (8028fbc <_strtod_l+0x29c>)
 8028d32:	9213      	str	r2, [sp, #76]	; 0x4c
 8028d34:	681b      	ldr	r3, [r3, #0]
 8028d36:	9305      	str	r3, [sp, #20]
 8028d38:	4604      	mov	r4, r0
 8028d3a:	4618      	mov	r0, r3
 8028d3c:	4688      	mov	r8, r1
 8028d3e:	f7d7 fa47 	bl	80001d0 <strlen>
 8028d42:	f04f 0a00 	mov.w	sl, #0
 8028d46:	4605      	mov	r5, r0
 8028d48:	f04f 0b00 	mov.w	fp, #0
 8028d4c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8028d50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028d52:	781a      	ldrb	r2, [r3, #0]
 8028d54:	2a2b      	cmp	r2, #43	; 0x2b
 8028d56:	d04e      	beq.n	8028df6 <_strtod_l+0xd6>
 8028d58:	d83b      	bhi.n	8028dd2 <_strtod_l+0xb2>
 8028d5a:	2a0d      	cmp	r2, #13
 8028d5c:	d834      	bhi.n	8028dc8 <_strtod_l+0xa8>
 8028d5e:	2a08      	cmp	r2, #8
 8028d60:	d834      	bhi.n	8028dcc <_strtod_l+0xac>
 8028d62:	2a00      	cmp	r2, #0
 8028d64:	d03e      	beq.n	8028de4 <_strtod_l+0xc4>
 8028d66:	2300      	movs	r3, #0
 8028d68:	930a      	str	r3, [sp, #40]	; 0x28
 8028d6a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8028d6c:	7833      	ldrb	r3, [r6, #0]
 8028d6e:	2b30      	cmp	r3, #48	; 0x30
 8028d70:	f040 80b0 	bne.w	8028ed4 <_strtod_l+0x1b4>
 8028d74:	7873      	ldrb	r3, [r6, #1]
 8028d76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8028d7a:	2b58      	cmp	r3, #88	; 0x58
 8028d7c:	d168      	bne.n	8028e50 <_strtod_l+0x130>
 8028d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028d80:	9301      	str	r3, [sp, #4]
 8028d82:	ab18      	add	r3, sp, #96	; 0x60
 8028d84:	9702      	str	r7, [sp, #8]
 8028d86:	9300      	str	r3, [sp, #0]
 8028d88:	4a8d      	ldr	r2, [pc, #564]	; (8028fc0 <_strtod_l+0x2a0>)
 8028d8a:	ab19      	add	r3, sp, #100	; 0x64
 8028d8c:	a917      	add	r1, sp, #92	; 0x5c
 8028d8e:	4620      	mov	r0, r4
 8028d90:	f001 ff8e 	bl	802acb0 <__gethex>
 8028d94:	f010 0707 	ands.w	r7, r0, #7
 8028d98:	4605      	mov	r5, r0
 8028d9a:	d005      	beq.n	8028da8 <_strtod_l+0x88>
 8028d9c:	2f06      	cmp	r7, #6
 8028d9e:	d12c      	bne.n	8028dfa <_strtod_l+0xda>
 8028da0:	3601      	adds	r6, #1
 8028da2:	2300      	movs	r3, #0
 8028da4:	9617      	str	r6, [sp, #92]	; 0x5c
 8028da6:	930a      	str	r3, [sp, #40]	; 0x28
 8028da8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8028daa:	2b00      	cmp	r3, #0
 8028dac:	f040 8590 	bne.w	80298d0 <_strtod_l+0xbb0>
 8028db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028db2:	b1eb      	cbz	r3, 8028df0 <_strtod_l+0xd0>
 8028db4:	4652      	mov	r2, sl
 8028db6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8028dba:	ec43 2b10 	vmov	d0, r2, r3
 8028dbe:	b01d      	add	sp, #116	; 0x74
 8028dc0:	ecbd 8b02 	vpop	{d8}
 8028dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028dc8:	2a20      	cmp	r2, #32
 8028dca:	d1cc      	bne.n	8028d66 <_strtod_l+0x46>
 8028dcc:	3301      	adds	r3, #1
 8028dce:	9317      	str	r3, [sp, #92]	; 0x5c
 8028dd0:	e7be      	b.n	8028d50 <_strtod_l+0x30>
 8028dd2:	2a2d      	cmp	r2, #45	; 0x2d
 8028dd4:	d1c7      	bne.n	8028d66 <_strtod_l+0x46>
 8028dd6:	2201      	movs	r2, #1
 8028dd8:	920a      	str	r2, [sp, #40]	; 0x28
 8028dda:	1c5a      	adds	r2, r3, #1
 8028ddc:	9217      	str	r2, [sp, #92]	; 0x5c
 8028dde:	785b      	ldrb	r3, [r3, #1]
 8028de0:	2b00      	cmp	r3, #0
 8028de2:	d1c2      	bne.n	8028d6a <_strtod_l+0x4a>
 8028de4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8028de6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8028dea:	2b00      	cmp	r3, #0
 8028dec:	f040 856e 	bne.w	80298cc <_strtod_l+0xbac>
 8028df0:	4652      	mov	r2, sl
 8028df2:	465b      	mov	r3, fp
 8028df4:	e7e1      	b.n	8028dba <_strtod_l+0x9a>
 8028df6:	2200      	movs	r2, #0
 8028df8:	e7ee      	b.n	8028dd8 <_strtod_l+0xb8>
 8028dfa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8028dfc:	b13a      	cbz	r2, 8028e0e <_strtod_l+0xee>
 8028dfe:	2135      	movs	r1, #53	; 0x35
 8028e00:	a81a      	add	r0, sp, #104	; 0x68
 8028e02:	f002 ff8e 	bl	802bd22 <__copybits>
 8028e06:	9918      	ldr	r1, [sp, #96]	; 0x60
 8028e08:	4620      	mov	r0, r4
 8028e0a:	f002 fb4d 	bl	802b4a8 <_Bfree>
 8028e0e:	3f01      	subs	r7, #1
 8028e10:	2f04      	cmp	r7, #4
 8028e12:	d806      	bhi.n	8028e22 <_strtod_l+0x102>
 8028e14:	e8df f007 	tbb	[pc, r7]
 8028e18:	1714030a 	.word	0x1714030a
 8028e1c:	0a          	.byte	0x0a
 8028e1d:	00          	.byte	0x00
 8028e1e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8028e22:	0728      	lsls	r0, r5, #28
 8028e24:	d5c0      	bpl.n	8028da8 <_strtod_l+0x88>
 8028e26:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8028e2a:	e7bd      	b.n	8028da8 <_strtod_l+0x88>
 8028e2c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8028e30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8028e32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8028e36:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8028e3a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8028e3e:	e7f0      	b.n	8028e22 <_strtod_l+0x102>
 8028e40:	f8df b180 	ldr.w	fp, [pc, #384]	; 8028fc4 <_strtod_l+0x2a4>
 8028e44:	e7ed      	b.n	8028e22 <_strtod_l+0x102>
 8028e46:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8028e4a:	f04f 3aff 	mov.w	sl, #4294967295
 8028e4e:	e7e8      	b.n	8028e22 <_strtod_l+0x102>
 8028e50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028e52:	1c5a      	adds	r2, r3, #1
 8028e54:	9217      	str	r2, [sp, #92]	; 0x5c
 8028e56:	785b      	ldrb	r3, [r3, #1]
 8028e58:	2b30      	cmp	r3, #48	; 0x30
 8028e5a:	d0f9      	beq.n	8028e50 <_strtod_l+0x130>
 8028e5c:	2b00      	cmp	r3, #0
 8028e5e:	d0a3      	beq.n	8028da8 <_strtod_l+0x88>
 8028e60:	2301      	movs	r3, #1
 8028e62:	f04f 0900 	mov.w	r9, #0
 8028e66:	9304      	str	r3, [sp, #16]
 8028e68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028e6a:	9308      	str	r3, [sp, #32]
 8028e6c:	f8cd 901c 	str.w	r9, [sp, #28]
 8028e70:	464f      	mov	r7, r9
 8028e72:	220a      	movs	r2, #10
 8028e74:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8028e76:	7806      	ldrb	r6, [r0, #0]
 8028e78:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8028e7c:	b2d9      	uxtb	r1, r3
 8028e7e:	2909      	cmp	r1, #9
 8028e80:	d92a      	bls.n	8028ed8 <_strtod_l+0x1b8>
 8028e82:	9905      	ldr	r1, [sp, #20]
 8028e84:	462a      	mov	r2, r5
 8028e86:	f003 f951 	bl	802c12c <strncmp>
 8028e8a:	b398      	cbz	r0, 8028ef4 <_strtod_l+0x1d4>
 8028e8c:	2000      	movs	r0, #0
 8028e8e:	4632      	mov	r2, r6
 8028e90:	463d      	mov	r5, r7
 8028e92:	9005      	str	r0, [sp, #20]
 8028e94:	4603      	mov	r3, r0
 8028e96:	2a65      	cmp	r2, #101	; 0x65
 8028e98:	d001      	beq.n	8028e9e <_strtod_l+0x17e>
 8028e9a:	2a45      	cmp	r2, #69	; 0x45
 8028e9c:	d118      	bne.n	8028ed0 <_strtod_l+0x1b0>
 8028e9e:	b91d      	cbnz	r5, 8028ea8 <_strtod_l+0x188>
 8028ea0:	9a04      	ldr	r2, [sp, #16]
 8028ea2:	4302      	orrs	r2, r0
 8028ea4:	d09e      	beq.n	8028de4 <_strtod_l+0xc4>
 8028ea6:	2500      	movs	r5, #0
 8028ea8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8028eac:	f108 0201 	add.w	r2, r8, #1
 8028eb0:	9217      	str	r2, [sp, #92]	; 0x5c
 8028eb2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8028eb6:	2a2b      	cmp	r2, #43	; 0x2b
 8028eb8:	d075      	beq.n	8028fa6 <_strtod_l+0x286>
 8028eba:	2a2d      	cmp	r2, #45	; 0x2d
 8028ebc:	d07b      	beq.n	8028fb6 <_strtod_l+0x296>
 8028ebe:	f04f 0c00 	mov.w	ip, #0
 8028ec2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8028ec6:	2909      	cmp	r1, #9
 8028ec8:	f240 8082 	bls.w	8028fd0 <_strtod_l+0x2b0>
 8028ecc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8028ed0:	2600      	movs	r6, #0
 8028ed2:	e09d      	b.n	8029010 <_strtod_l+0x2f0>
 8028ed4:	2300      	movs	r3, #0
 8028ed6:	e7c4      	b.n	8028e62 <_strtod_l+0x142>
 8028ed8:	2f08      	cmp	r7, #8
 8028eda:	bfd8      	it	le
 8028edc:	9907      	ldrle	r1, [sp, #28]
 8028ede:	f100 0001 	add.w	r0, r0, #1
 8028ee2:	bfda      	itte	le
 8028ee4:	fb02 3301 	mlale	r3, r2, r1, r3
 8028ee8:	9307      	strle	r3, [sp, #28]
 8028eea:	fb02 3909 	mlagt	r9, r2, r9, r3
 8028eee:	3701      	adds	r7, #1
 8028ef0:	9017      	str	r0, [sp, #92]	; 0x5c
 8028ef2:	e7bf      	b.n	8028e74 <_strtod_l+0x154>
 8028ef4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028ef6:	195a      	adds	r2, r3, r5
 8028ef8:	9217      	str	r2, [sp, #92]	; 0x5c
 8028efa:	5d5a      	ldrb	r2, [r3, r5]
 8028efc:	2f00      	cmp	r7, #0
 8028efe:	d037      	beq.n	8028f70 <_strtod_l+0x250>
 8028f00:	9005      	str	r0, [sp, #20]
 8028f02:	463d      	mov	r5, r7
 8028f04:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8028f08:	2b09      	cmp	r3, #9
 8028f0a:	d912      	bls.n	8028f32 <_strtod_l+0x212>
 8028f0c:	2301      	movs	r3, #1
 8028f0e:	e7c2      	b.n	8028e96 <_strtod_l+0x176>
 8028f10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028f12:	1c5a      	adds	r2, r3, #1
 8028f14:	9217      	str	r2, [sp, #92]	; 0x5c
 8028f16:	785a      	ldrb	r2, [r3, #1]
 8028f18:	3001      	adds	r0, #1
 8028f1a:	2a30      	cmp	r2, #48	; 0x30
 8028f1c:	d0f8      	beq.n	8028f10 <_strtod_l+0x1f0>
 8028f1e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8028f22:	2b08      	cmp	r3, #8
 8028f24:	f200 84d9 	bhi.w	80298da <_strtod_l+0xbba>
 8028f28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028f2a:	9005      	str	r0, [sp, #20]
 8028f2c:	2000      	movs	r0, #0
 8028f2e:	9308      	str	r3, [sp, #32]
 8028f30:	4605      	mov	r5, r0
 8028f32:	3a30      	subs	r2, #48	; 0x30
 8028f34:	f100 0301 	add.w	r3, r0, #1
 8028f38:	d014      	beq.n	8028f64 <_strtod_l+0x244>
 8028f3a:	9905      	ldr	r1, [sp, #20]
 8028f3c:	4419      	add	r1, r3
 8028f3e:	9105      	str	r1, [sp, #20]
 8028f40:	462b      	mov	r3, r5
 8028f42:	eb00 0e05 	add.w	lr, r0, r5
 8028f46:	210a      	movs	r1, #10
 8028f48:	4573      	cmp	r3, lr
 8028f4a:	d113      	bne.n	8028f74 <_strtod_l+0x254>
 8028f4c:	182b      	adds	r3, r5, r0
 8028f4e:	2b08      	cmp	r3, #8
 8028f50:	f105 0501 	add.w	r5, r5, #1
 8028f54:	4405      	add	r5, r0
 8028f56:	dc1c      	bgt.n	8028f92 <_strtod_l+0x272>
 8028f58:	9907      	ldr	r1, [sp, #28]
 8028f5a:	230a      	movs	r3, #10
 8028f5c:	fb03 2301 	mla	r3, r3, r1, r2
 8028f60:	9307      	str	r3, [sp, #28]
 8028f62:	2300      	movs	r3, #0
 8028f64:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8028f66:	1c51      	adds	r1, r2, #1
 8028f68:	9117      	str	r1, [sp, #92]	; 0x5c
 8028f6a:	7852      	ldrb	r2, [r2, #1]
 8028f6c:	4618      	mov	r0, r3
 8028f6e:	e7c9      	b.n	8028f04 <_strtod_l+0x1e4>
 8028f70:	4638      	mov	r0, r7
 8028f72:	e7d2      	b.n	8028f1a <_strtod_l+0x1fa>
 8028f74:	2b08      	cmp	r3, #8
 8028f76:	dc04      	bgt.n	8028f82 <_strtod_l+0x262>
 8028f78:	9e07      	ldr	r6, [sp, #28]
 8028f7a:	434e      	muls	r6, r1
 8028f7c:	9607      	str	r6, [sp, #28]
 8028f7e:	3301      	adds	r3, #1
 8028f80:	e7e2      	b.n	8028f48 <_strtod_l+0x228>
 8028f82:	f103 0c01 	add.w	ip, r3, #1
 8028f86:	f1bc 0f10 	cmp.w	ip, #16
 8028f8a:	bfd8      	it	le
 8028f8c:	fb01 f909 	mulle.w	r9, r1, r9
 8028f90:	e7f5      	b.n	8028f7e <_strtod_l+0x25e>
 8028f92:	2d10      	cmp	r5, #16
 8028f94:	bfdc      	itt	le
 8028f96:	230a      	movle	r3, #10
 8028f98:	fb03 2909 	mlale	r9, r3, r9, r2
 8028f9c:	e7e1      	b.n	8028f62 <_strtod_l+0x242>
 8028f9e:	2300      	movs	r3, #0
 8028fa0:	9305      	str	r3, [sp, #20]
 8028fa2:	2301      	movs	r3, #1
 8028fa4:	e77c      	b.n	8028ea0 <_strtod_l+0x180>
 8028fa6:	f04f 0c00 	mov.w	ip, #0
 8028faa:	f108 0202 	add.w	r2, r8, #2
 8028fae:	9217      	str	r2, [sp, #92]	; 0x5c
 8028fb0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8028fb4:	e785      	b.n	8028ec2 <_strtod_l+0x1a2>
 8028fb6:	f04f 0c01 	mov.w	ip, #1
 8028fba:	e7f6      	b.n	8028faa <_strtod_l+0x28a>
 8028fbc:	0802f390 	.word	0x0802f390
 8028fc0:	0802f144 	.word	0x0802f144
 8028fc4:	7ff00000 	.word	0x7ff00000
 8028fc8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8028fca:	1c51      	adds	r1, r2, #1
 8028fcc:	9117      	str	r1, [sp, #92]	; 0x5c
 8028fce:	7852      	ldrb	r2, [r2, #1]
 8028fd0:	2a30      	cmp	r2, #48	; 0x30
 8028fd2:	d0f9      	beq.n	8028fc8 <_strtod_l+0x2a8>
 8028fd4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8028fd8:	2908      	cmp	r1, #8
 8028fda:	f63f af79 	bhi.w	8028ed0 <_strtod_l+0x1b0>
 8028fde:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8028fe2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8028fe4:	9206      	str	r2, [sp, #24]
 8028fe6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8028fe8:	1c51      	adds	r1, r2, #1
 8028fea:	9117      	str	r1, [sp, #92]	; 0x5c
 8028fec:	7852      	ldrb	r2, [r2, #1]
 8028fee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8028ff2:	2e09      	cmp	r6, #9
 8028ff4:	d937      	bls.n	8029066 <_strtod_l+0x346>
 8028ff6:	9e06      	ldr	r6, [sp, #24]
 8028ff8:	1b89      	subs	r1, r1, r6
 8028ffa:	2908      	cmp	r1, #8
 8028ffc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8029000:	dc02      	bgt.n	8029008 <_strtod_l+0x2e8>
 8029002:	4576      	cmp	r6, lr
 8029004:	bfa8      	it	ge
 8029006:	4676      	movge	r6, lr
 8029008:	f1bc 0f00 	cmp.w	ip, #0
 802900c:	d000      	beq.n	8029010 <_strtod_l+0x2f0>
 802900e:	4276      	negs	r6, r6
 8029010:	2d00      	cmp	r5, #0
 8029012:	d14d      	bne.n	80290b0 <_strtod_l+0x390>
 8029014:	9904      	ldr	r1, [sp, #16]
 8029016:	4301      	orrs	r1, r0
 8029018:	f47f aec6 	bne.w	8028da8 <_strtod_l+0x88>
 802901c:	2b00      	cmp	r3, #0
 802901e:	f47f aee1 	bne.w	8028de4 <_strtod_l+0xc4>
 8029022:	2a69      	cmp	r2, #105	; 0x69
 8029024:	d027      	beq.n	8029076 <_strtod_l+0x356>
 8029026:	dc24      	bgt.n	8029072 <_strtod_l+0x352>
 8029028:	2a49      	cmp	r2, #73	; 0x49
 802902a:	d024      	beq.n	8029076 <_strtod_l+0x356>
 802902c:	2a4e      	cmp	r2, #78	; 0x4e
 802902e:	f47f aed9 	bne.w	8028de4 <_strtod_l+0xc4>
 8029032:	499f      	ldr	r1, [pc, #636]	; (80292b0 <_strtod_l+0x590>)
 8029034:	a817      	add	r0, sp, #92	; 0x5c
 8029036:	f002 f893 	bl	802b160 <__match>
 802903a:	2800      	cmp	r0, #0
 802903c:	f43f aed2 	beq.w	8028de4 <_strtod_l+0xc4>
 8029040:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029042:	781b      	ldrb	r3, [r3, #0]
 8029044:	2b28      	cmp	r3, #40	; 0x28
 8029046:	d12d      	bne.n	80290a4 <_strtod_l+0x384>
 8029048:	499a      	ldr	r1, [pc, #616]	; (80292b4 <_strtod_l+0x594>)
 802904a:	aa1a      	add	r2, sp, #104	; 0x68
 802904c:	a817      	add	r0, sp, #92	; 0x5c
 802904e:	f002 f89b 	bl	802b188 <__hexnan>
 8029052:	2805      	cmp	r0, #5
 8029054:	d126      	bne.n	80290a4 <_strtod_l+0x384>
 8029056:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8029058:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 802905c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8029060:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8029064:	e6a0      	b.n	8028da8 <_strtod_l+0x88>
 8029066:	210a      	movs	r1, #10
 8029068:	fb01 2e0e 	mla	lr, r1, lr, r2
 802906c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8029070:	e7b9      	b.n	8028fe6 <_strtod_l+0x2c6>
 8029072:	2a6e      	cmp	r2, #110	; 0x6e
 8029074:	e7db      	b.n	802902e <_strtod_l+0x30e>
 8029076:	4990      	ldr	r1, [pc, #576]	; (80292b8 <_strtod_l+0x598>)
 8029078:	a817      	add	r0, sp, #92	; 0x5c
 802907a:	f002 f871 	bl	802b160 <__match>
 802907e:	2800      	cmp	r0, #0
 8029080:	f43f aeb0 	beq.w	8028de4 <_strtod_l+0xc4>
 8029084:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029086:	498d      	ldr	r1, [pc, #564]	; (80292bc <_strtod_l+0x59c>)
 8029088:	3b01      	subs	r3, #1
 802908a:	a817      	add	r0, sp, #92	; 0x5c
 802908c:	9317      	str	r3, [sp, #92]	; 0x5c
 802908e:	f002 f867 	bl	802b160 <__match>
 8029092:	b910      	cbnz	r0, 802909a <_strtod_l+0x37a>
 8029094:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029096:	3301      	adds	r3, #1
 8029098:	9317      	str	r3, [sp, #92]	; 0x5c
 802909a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80292cc <_strtod_l+0x5ac>
 802909e:	f04f 0a00 	mov.w	sl, #0
 80290a2:	e681      	b.n	8028da8 <_strtod_l+0x88>
 80290a4:	4886      	ldr	r0, [pc, #536]	; (80292c0 <_strtod_l+0x5a0>)
 80290a6:	f003 f833 	bl	802c110 <nan>
 80290aa:	ec5b ab10 	vmov	sl, fp, d0
 80290ae:	e67b      	b.n	8028da8 <_strtod_l+0x88>
 80290b0:	9b05      	ldr	r3, [sp, #20]
 80290b2:	9807      	ldr	r0, [sp, #28]
 80290b4:	1af3      	subs	r3, r6, r3
 80290b6:	2f00      	cmp	r7, #0
 80290b8:	bf08      	it	eq
 80290ba:	462f      	moveq	r7, r5
 80290bc:	2d10      	cmp	r5, #16
 80290be:	9306      	str	r3, [sp, #24]
 80290c0:	46a8      	mov	r8, r5
 80290c2:	bfa8      	it	ge
 80290c4:	f04f 0810 	movge.w	r8, #16
 80290c8:	f7d7 fa1c 	bl	8000504 <__aeabi_ui2d>
 80290cc:	2d09      	cmp	r5, #9
 80290ce:	4682      	mov	sl, r0
 80290d0:	468b      	mov	fp, r1
 80290d2:	dd13      	ble.n	80290fc <_strtod_l+0x3dc>
 80290d4:	4b7b      	ldr	r3, [pc, #492]	; (80292c4 <_strtod_l+0x5a4>)
 80290d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80290da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80290de:	f7d7 fa8b 	bl	80005f8 <__aeabi_dmul>
 80290e2:	4682      	mov	sl, r0
 80290e4:	4648      	mov	r0, r9
 80290e6:	468b      	mov	fp, r1
 80290e8:	f7d7 fa0c 	bl	8000504 <__aeabi_ui2d>
 80290ec:	4602      	mov	r2, r0
 80290ee:	460b      	mov	r3, r1
 80290f0:	4650      	mov	r0, sl
 80290f2:	4659      	mov	r1, fp
 80290f4:	f7d7 f8ca 	bl	800028c <__adddf3>
 80290f8:	4682      	mov	sl, r0
 80290fa:	468b      	mov	fp, r1
 80290fc:	2d0f      	cmp	r5, #15
 80290fe:	dc38      	bgt.n	8029172 <_strtod_l+0x452>
 8029100:	9b06      	ldr	r3, [sp, #24]
 8029102:	2b00      	cmp	r3, #0
 8029104:	f43f ae50 	beq.w	8028da8 <_strtod_l+0x88>
 8029108:	dd24      	ble.n	8029154 <_strtod_l+0x434>
 802910a:	2b16      	cmp	r3, #22
 802910c:	dc0b      	bgt.n	8029126 <_strtod_l+0x406>
 802910e:	496d      	ldr	r1, [pc, #436]	; (80292c4 <_strtod_l+0x5a4>)
 8029110:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8029114:	e9d1 0100 	ldrd	r0, r1, [r1]
 8029118:	4652      	mov	r2, sl
 802911a:	465b      	mov	r3, fp
 802911c:	f7d7 fa6c 	bl	80005f8 <__aeabi_dmul>
 8029120:	4682      	mov	sl, r0
 8029122:	468b      	mov	fp, r1
 8029124:	e640      	b.n	8028da8 <_strtod_l+0x88>
 8029126:	9a06      	ldr	r2, [sp, #24]
 8029128:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 802912c:	4293      	cmp	r3, r2
 802912e:	db20      	blt.n	8029172 <_strtod_l+0x452>
 8029130:	4c64      	ldr	r4, [pc, #400]	; (80292c4 <_strtod_l+0x5a4>)
 8029132:	f1c5 050f 	rsb	r5, r5, #15
 8029136:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 802913a:	4652      	mov	r2, sl
 802913c:	465b      	mov	r3, fp
 802913e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8029142:	f7d7 fa59 	bl	80005f8 <__aeabi_dmul>
 8029146:	9b06      	ldr	r3, [sp, #24]
 8029148:	1b5d      	subs	r5, r3, r5
 802914a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 802914e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8029152:	e7e3      	b.n	802911c <_strtod_l+0x3fc>
 8029154:	9b06      	ldr	r3, [sp, #24]
 8029156:	3316      	adds	r3, #22
 8029158:	db0b      	blt.n	8029172 <_strtod_l+0x452>
 802915a:	9b05      	ldr	r3, [sp, #20]
 802915c:	1b9e      	subs	r6, r3, r6
 802915e:	4b59      	ldr	r3, [pc, #356]	; (80292c4 <_strtod_l+0x5a4>)
 8029160:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8029164:	e9d6 2300 	ldrd	r2, r3, [r6]
 8029168:	4650      	mov	r0, sl
 802916a:	4659      	mov	r1, fp
 802916c:	f7d7 fb6e 	bl	800084c <__aeabi_ddiv>
 8029170:	e7d6      	b.n	8029120 <_strtod_l+0x400>
 8029172:	9b06      	ldr	r3, [sp, #24]
 8029174:	eba5 0808 	sub.w	r8, r5, r8
 8029178:	4498      	add	r8, r3
 802917a:	f1b8 0f00 	cmp.w	r8, #0
 802917e:	dd74      	ble.n	802926a <_strtod_l+0x54a>
 8029180:	f018 030f 	ands.w	r3, r8, #15
 8029184:	d00a      	beq.n	802919c <_strtod_l+0x47c>
 8029186:	494f      	ldr	r1, [pc, #316]	; (80292c4 <_strtod_l+0x5a4>)
 8029188:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802918c:	4652      	mov	r2, sl
 802918e:	465b      	mov	r3, fp
 8029190:	e9d1 0100 	ldrd	r0, r1, [r1]
 8029194:	f7d7 fa30 	bl	80005f8 <__aeabi_dmul>
 8029198:	4682      	mov	sl, r0
 802919a:	468b      	mov	fp, r1
 802919c:	f038 080f 	bics.w	r8, r8, #15
 80291a0:	d04f      	beq.n	8029242 <_strtod_l+0x522>
 80291a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80291a6:	dd22      	ble.n	80291ee <_strtod_l+0x4ce>
 80291a8:	2500      	movs	r5, #0
 80291aa:	462e      	mov	r6, r5
 80291ac:	9507      	str	r5, [sp, #28]
 80291ae:	9505      	str	r5, [sp, #20]
 80291b0:	2322      	movs	r3, #34	; 0x22
 80291b2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80292cc <_strtod_l+0x5ac>
 80291b6:	6023      	str	r3, [r4, #0]
 80291b8:	f04f 0a00 	mov.w	sl, #0
 80291bc:	9b07      	ldr	r3, [sp, #28]
 80291be:	2b00      	cmp	r3, #0
 80291c0:	f43f adf2 	beq.w	8028da8 <_strtod_l+0x88>
 80291c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80291c6:	4620      	mov	r0, r4
 80291c8:	f002 f96e 	bl	802b4a8 <_Bfree>
 80291cc:	9905      	ldr	r1, [sp, #20]
 80291ce:	4620      	mov	r0, r4
 80291d0:	f002 f96a 	bl	802b4a8 <_Bfree>
 80291d4:	4631      	mov	r1, r6
 80291d6:	4620      	mov	r0, r4
 80291d8:	f002 f966 	bl	802b4a8 <_Bfree>
 80291dc:	9907      	ldr	r1, [sp, #28]
 80291de:	4620      	mov	r0, r4
 80291e0:	f002 f962 	bl	802b4a8 <_Bfree>
 80291e4:	4629      	mov	r1, r5
 80291e6:	4620      	mov	r0, r4
 80291e8:	f002 f95e 	bl	802b4a8 <_Bfree>
 80291ec:	e5dc      	b.n	8028da8 <_strtod_l+0x88>
 80291ee:	4b36      	ldr	r3, [pc, #216]	; (80292c8 <_strtod_l+0x5a8>)
 80291f0:	9304      	str	r3, [sp, #16]
 80291f2:	2300      	movs	r3, #0
 80291f4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80291f8:	4650      	mov	r0, sl
 80291fa:	4659      	mov	r1, fp
 80291fc:	4699      	mov	r9, r3
 80291fe:	f1b8 0f01 	cmp.w	r8, #1
 8029202:	dc21      	bgt.n	8029248 <_strtod_l+0x528>
 8029204:	b10b      	cbz	r3, 802920a <_strtod_l+0x4ea>
 8029206:	4682      	mov	sl, r0
 8029208:	468b      	mov	fp, r1
 802920a:	4b2f      	ldr	r3, [pc, #188]	; (80292c8 <_strtod_l+0x5a8>)
 802920c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8029210:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8029214:	4652      	mov	r2, sl
 8029216:	465b      	mov	r3, fp
 8029218:	e9d9 0100 	ldrd	r0, r1, [r9]
 802921c:	f7d7 f9ec 	bl	80005f8 <__aeabi_dmul>
 8029220:	4b2a      	ldr	r3, [pc, #168]	; (80292cc <_strtod_l+0x5ac>)
 8029222:	460a      	mov	r2, r1
 8029224:	400b      	ands	r3, r1
 8029226:	492a      	ldr	r1, [pc, #168]	; (80292d0 <_strtod_l+0x5b0>)
 8029228:	428b      	cmp	r3, r1
 802922a:	4682      	mov	sl, r0
 802922c:	d8bc      	bhi.n	80291a8 <_strtod_l+0x488>
 802922e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8029232:	428b      	cmp	r3, r1
 8029234:	bf86      	itte	hi
 8029236:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80292d4 <_strtod_l+0x5b4>
 802923a:	f04f 3aff 	movhi.w	sl, #4294967295
 802923e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8029242:	2300      	movs	r3, #0
 8029244:	9304      	str	r3, [sp, #16]
 8029246:	e084      	b.n	8029352 <_strtod_l+0x632>
 8029248:	f018 0f01 	tst.w	r8, #1
 802924c:	d005      	beq.n	802925a <_strtod_l+0x53a>
 802924e:	9b04      	ldr	r3, [sp, #16]
 8029250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029254:	f7d7 f9d0 	bl	80005f8 <__aeabi_dmul>
 8029258:	2301      	movs	r3, #1
 802925a:	9a04      	ldr	r2, [sp, #16]
 802925c:	3208      	adds	r2, #8
 802925e:	f109 0901 	add.w	r9, r9, #1
 8029262:	ea4f 0868 	mov.w	r8, r8, asr #1
 8029266:	9204      	str	r2, [sp, #16]
 8029268:	e7c9      	b.n	80291fe <_strtod_l+0x4de>
 802926a:	d0ea      	beq.n	8029242 <_strtod_l+0x522>
 802926c:	f1c8 0800 	rsb	r8, r8, #0
 8029270:	f018 020f 	ands.w	r2, r8, #15
 8029274:	d00a      	beq.n	802928c <_strtod_l+0x56c>
 8029276:	4b13      	ldr	r3, [pc, #76]	; (80292c4 <_strtod_l+0x5a4>)
 8029278:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802927c:	4650      	mov	r0, sl
 802927e:	4659      	mov	r1, fp
 8029280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029284:	f7d7 fae2 	bl	800084c <__aeabi_ddiv>
 8029288:	4682      	mov	sl, r0
 802928a:	468b      	mov	fp, r1
 802928c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8029290:	d0d7      	beq.n	8029242 <_strtod_l+0x522>
 8029292:	f1b8 0f1f 	cmp.w	r8, #31
 8029296:	dd1f      	ble.n	80292d8 <_strtod_l+0x5b8>
 8029298:	2500      	movs	r5, #0
 802929a:	462e      	mov	r6, r5
 802929c:	9507      	str	r5, [sp, #28]
 802929e:	9505      	str	r5, [sp, #20]
 80292a0:	2322      	movs	r3, #34	; 0x22
 80292a2:	f04f 0a00 	mov.w	sl, #0
 80292a6:	f04f 0b00 	mov.w	fp, #0
 80292aa:	6023      	str	r3, [r4, #0]
 80292ac:	e786      	b.n	80291bc <_strtod_l+0x49c>
 80292ae:	bf00      	nop
 80292b0:	0802f116 	.word	0x0802f116
 80292b4:	0802f158 	.word	0x0802f158
 80292b8:	0802f10e 	.word	0x0802f10e
 80292bc:	0802f29c 	.word	0x0802f29c
 80292c0:	0802f093 	.word	0x0802f093
 80292c4:	0802f428 	.word	0x0802f428
 80292c8:	0802f400 	.word	0x0802f400
 80292cc:	7ff00000 	.word	0x7ff00000
 80292d0:	7ca00000 	.word	0x7ca00000
 80292d4:	7fefffff 	.word	0x7fefffff
 80292d8:	f018 0310 	ands.w	r3, r8, #16
 80292dc:	bf18      	it	ne
 80292de:	236a      	movne	r3, #106	; 0x6a
 80292e0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8029690 <_strtod_l+0x970>
 80292e4:	9304      	str	r3, [sp, #16]
 80292e6:	4650      	mov	r0, sl
 80292e8:	4659      	mov	r1, fp
 80292ea:	2300      	movs	r3, #0
 80292ec:	f018 0f01 	tst.w	r8, #1
 80292f0:	d004      	beq.n	80292fc <_strtod_l+0x5dc>
 80292f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80292f6:	f7d7 f97f 	bl	80005f8 <__aeabi_dmul>
 80292fa:	2301      	movs	r3, #1
 80292fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8029300:	f109 0908 	add.w	r9, r9, #8
 8029304:	d1f2      	bne.n	80292ec <_strtod_l+0x5cc>
 8029306:	b10b      	cbz	r3, 802930c <_strtod_l+0x5ec>
 8029308:	4682      	mov	sl, r0
 802930a:	468b      	mov	fp, r1
 802930c:	9b04      	ldr	r3, [sp, #16]
 802930e:	b1c3      	cbz	r3, 8029342 <_strtod_l+0x622>
 8029310:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8029314:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8029318:	2b00      	cmp	r3, #0
 802931a:	4659      	mov	r1, fp
 802931c:	dd11      	ble.n	8029342 <_strtod_l+0x622>
 802931e:	2b1f      	cmp	r3, #31
 8029320:	f340 8124 	ble.w	802956c <_strtod_l+0x84c>
 8029324:	2b34      	cmp	r3, #52	; 0x34
 8029326:	bfde      	ittt	le
 8029328:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 802932c:	f04f 33ff 	movle.w	r3, #4294967295
 8029330:	fa03 f202 	lslle.w	r2, r3, r2
 8029334:	f04f 0a00 	mov.w	sl, #0
 8029338:	bfcc      	ite	gt
 802933a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 802933e:	ea02 0b01 	andle.w	fp, r2, r1
 8029342:	2200      	movs	r2, #0
 8029344:	2300      	movs	r3, #0
 8029346:	4650      	mov	r0, sl
 8029348:	4659      	mov	r1, fp
 802934a:	f7d7 fbbd 	bl	8000ac8 <__aeabi_dcmpeq>
 802934e:	2800      	cmp	r0, #0
 8029350:	d1a2      	bne.n	8029298 <_strtod_l+0x578>
 8029352:	9b07      	ldr	r3, [sp, #28]
 8029354:	9300      	str	r3, [sp, #0]
 8029356:	9908      	ldr	r1, [sp, #32]
 8029358:	462b      	mov	r3, r5
 802935a:	463a      	mov	r2, r7
 802935c:	4620      	mov	r0, r4
 802935e:	f002 f90b 	bl	802b578 <__s2b>
 8029362:	9007      	str	r0, [sp, #28]
 8029364:	2800      	cmp	r0, #0
 8029366:	f43f af1f 	beq.w	80291a8 <_strtod_l+0x488>
 802936a:	9b05      	ldr	r3, [sp, #20]
 802936c:	1b9e      	subs	r6, r3, r6
 802936e:	9b06      	ldr	r3, [sp, #24]
 8029370:	2b00      	cmp	r3, #0
 8029372:	bfb4      	ite	lt
 8029374:	4633      	movlt	r3, r6
 8029376:	2300      	movge	r3, #0
 8029378:	930c      	str	r3, [sp, #48]	; 0x30
 802937a:	9b06      	ldr	r3, [sp, #24]
 802937c:	2500      	movs	r5, #0
 802937e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8029382:	9312      	str	r3, [sp, #72]	; 0x48
 8029384:	462e      	mov	r6, r5
 8029386:	9b07      	ldr	r3, [sp, #28]
 8029388:	4620      	mov	r0, r4
 802938a:	6859      	ldr	r1, [r3, #4]
 802938c:	f002 f84c 	bl	802b428 <_Balloc>
 8029390:	9005      	str	r0, [sp, #20]
 8029392:	2800      	cmp	r0, #0
 8029394:	f43f af0c 	beq.w	80291b0 <_strtod_l+0x490>
 8029398:	9b07      	ldr	r3, [sp, #28]
 802939a:	691a      	ldr	r2, [r3, #16]
 802939c:	3202      	adds	r2, #2
 802939e:	f103 010c 	add.w	r1, r3, #12
 80293a2:	0092      	lsls	r2, r2, #2
 80293a4:	300c      	adds	r0, #12
 80293a6:	f7fe fc9f 	bl	8027ce8 <memcpy>
 80293aa:	ec4b ab10 	vmov	d0, sl, fp
 80293ae:	aa1a      	add	r2, sp, #104	; 0x68
 80293b0:	a919      	add	r1, sp, #100	; 0x64
 80293b2:	4620      	mov	r0, r4
 80293b4:	f002 fc26 	bl	802bc04 <__d2b>
 80293b8:	ec4b ab18 	vmov	d8, sl, fp
 80293bc:	9018      	str	r0, [sp, #96]	; 0x60
 80293be:	2800      	cmp	r0, #0
 80293c0:	f43f aef6 	beq.w	80291b0 <_strtod_l+0x490>
 80293c4:	2101      	movs	r1, #1
 80293c6:	4620      	mov	r0, r4
 80293c8:	f002 f970 	bl	802b6ac <__i2b>
 80293cc:	4606      	mov	r6, r0
 80293ce:	2800      	cmp	r0, #0
 80293d0:	f43f aeee 	beq.w	80291b0 <_strtod_l+0x490>
 80293d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80293d6:	9904      	ldr	r1, [sp, #16]
 80293d8:	2b00      	cmp	r3, #0
 80293da:	bfab      	itete	ge
 80293dc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80293de:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80293e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80293e2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80293e6:	bfac      	ite	ge
 80293e8:	eb03 0902 	addge.w	r9, r3, r2
 80293ec:	1ad7      	sublt	r7, r2, r3
 80293ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80293f0:	eba3 0801 	sub.w	r8, r3, r1
 80293f4:	4490      	add	r8, r2
 80293f6:	4ba1      	ldr	r3, [pc, #644]	; (802967c <_strtod_l+0x95c>)
 80293f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80293fc:	4598      	cmp	r8, r3
 80293fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8029402:	f280 80c7 	bge.w	8029594 <_strtod_l+0x874>
 8029406:	eba3 0308 	sub.w	r3, r3, r8
 802940a:	2b1f      	cmp	r3, #31
 802940c:	eba2 0203 	sub.w	r2, r2, r3
 8029410:	f04f 0101 	mov.w	r1, #1
 8029414:	f300 80b1 	bgt.w	802957a <_strtod_l+0x85a>
 8029418:	fa01 f303 	lsl.w	r3, r1, r3
 802941c:	930d      	str	r3, [sp, #52]	; 0x34
 802941e:	2300      	movs	r3, #0
 8029420:	9308      	str	r3, [sp, #32]
 8029422:	eb09 0802 	add.w	r8, r9, r2
 8029426:	9b04      	ldr	r3, [sp, #16]
 8029428:	45c1      	cmp	r9, r8
 802942a:	4417      	add	r7, r2
 802942c:	441f      	add	r7, r3
 802942e:	464b      	mov	r3, r9
 8029430:	bfa8      	it	ge
 8029432:	4643      	movge	r3, r8
 8029434:	42bb      	cmp	r3, r7
 8029436:	bfa8      	it	ge
 8029438:	463b      	movge	r3, r7
 802943a:	2b00      	cmp	r3, #0
 802943c:	bfc2      	ittt	gt
 802943e:	eba8 0803 	subgt.w	r8, r8, r3
 8029442:	1aff      	subgt	r7, r7, r3
 8029444:	eba9 0903 	subgt.w	r9, r9, r3
 8029448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802944a:	2b00      	cmp	r3, #0
 802944c:	dd17      	ble.n	802947e <_strtod_l+0x75e>
 802944e:	4631      	mov	r1, r6
 8029450:	461a      	mov	r2, r3
 8029452:	4620      	mov	r0, r4
 8029454:	f002 f9ea 	bl	802b82c <__pow5mult>
 8029458:	4606      	mov	r6, r0
 802945a:	2800      	cmp	r0, #0
 802945c:	f43f aea8 	beq.w	80291b0 <_strtod_l+0x490>
 8029460:	4601      	mov	r1, r0
 8029462:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8029464:	4620      	mov	r0, r4
 8029466:	f002 f937 	bl	802b6d8 <__multiply>
 802946a:	900b      	str	r0, [sp, #44]	; 0x2c
 802946c:	2800      	cmp	r0, #0
 802946e:	f43f ae9f 	beq.w	80291b0 <_strtod_l+0x490>
 8029472:	9918      	ldr	r1, [sp, #96]	; 0x60
 8029474:	4620      	mov	r0, r4
 8029476:	f002 f817 	bl	802b4a8 <_Bfree>
 802947a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802947c:	9318      	str	r3, [sp, #96]	; 0x60
 802947e:	f1b8 0f00 	cmp.w	r8, #0
 8029482:	f300 808c 	bgt.w	802959e <_strtod_l+0x87e>
 8029486:	9b06      	ldr	r3, [sp, #24]
 8029488:	2b00      	cmp	r3, #0
 802948a:	dd08      	ble.n	802949e <_strtod_l+0x77e>
 802948c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802948e:	9905      	ldr	r1, [sp, #20]
 8029490:	4620      	mov	r0, r4
 8029492:	f002 f9cb 	bl	802b82c <__pow5mult>
 8029496:	9005      	str	r0, [sp, #20]
 8029498:	2800      	cmp	r0, #0
 802949a:	f43f ae89 	beq.w	80291b0 <_strtod_l+0x490>
 802949e:	2f00      	cmp	r7, #0
 80294a0:	dd08      	ble.n	80294b4 <_strtod_l+0x794>
 80294a2:	9905      	ldr	r1, [sp, #20]
 80294a4:	463a      	mov	r2, r7
 80294a6:	4620      	mov	r0, r4
 80294a8:	f002 fa1a 	bl	802b8e0 <__lshift>
 80294ac:	9005      	str	r0, [sp, #20]
 80294ae:	2800      	cmp	r0, #0
 80294b0:	f43f ae7e 	beq.w	80291b0 <_strtod_l+0x490>
 80294b4:	f1b9 0f00 	cmp.w	r9, #0
 80294b8:	dd08      	ble.n	80294cc <_strtod_l+0x7ac>
 80294ba:	4631      	mov	r1, r6
 80294bc:	464a      	mov	r2, r9
 80294be:	4620      	mov	r0, r4
 80294c0:	f002 fa0e 	bl	802b8e0 <__lshift>
 80294c4:	4606      	mov	r6, r0
 80294c6:	2800      	cmp	r0, #0
 80294c8:	f43f ae72 	beq.w	80291b0 <_strtod_l+0x490>
 80294cc:	9a05      	ldr	r2, [sp, #20]
 80294ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80294d0:	4620      	mov	r0, r4
 80294d2:	f002 fa91 	bl	802b9f8 <__mdiff>
 80294d6:	4605      	mov	r5, r0
 80294d8:	2800      	cmp	r0, #0
 80294da:	f43f ae69 	beq.w	80291b0 <_strtod_l+0x490>
 80294de:	68c3      	ldr	r3, [r0, #12]
 80294e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80294e2:	2300      	movs	r3, #0
 80294e4:	60c3      	str	r3, [r0, #12]
 80294e6:	4631      	mov	r1, r6
 80294e8:	f002 fa6a 	bl	802b9c0 <__mcmp>
 80294ec:	2800      	cmp	r0, #0
 80294ee:	da60      	bge.n	80295b2 <_strtod_l+0x892>
 80294f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80294f2:	ea53 030a 	orrs.w	r3, r3, sl
 80294f6:	f040 8082 	bne.w	80295fe <_strtod_l+0x8de>
 80294fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80294fe:	2b00      	cmp	r3, #0
 8029500:	d17d      	bne.n	80295fe <_strtod_l+0x8de>
 8029502:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8029506:	0d1b      	lsrs	r3, r3, #20
 8029508:	051b      	lsls	r3, r3, #20
 802950a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 802950e:	d976      	bls.n	80295fe <_strtod_l+0x8de>
 8029510:	696b      	ldr	r3, [r5, #20]
 8029512:	b913      	cbnz	r3, 802951a <_strtod_l+0x7fa>
 8029514:	692b      	ldr	r3, [r5, #16]
 8029516:	2b01      	cmp	r3, #1
 8029518:	dd71      	ble.n	80295fe <_strtod_l+0x8de>
 802951a:	4629      	mov	r1, r5
 802951c:	2201      	movs	r2, #1
 802951e:	4620      	mov	r0, r4
 8029520:	f002 f9de 	bl	802b8e0 <__lshift>
 8029524:	4631      	mov	r1, r6
 8029526:	4605      	mov	r5, r0
 8029528:	f002 fa4a 	bl	802b9c0 <__mcmp>
 802952c:	2800      	cmp	r0, #0
 802952e:	dd66      	ble.n	80295fe <_strtod_l+0x8de>
 8029530:	9904      	ldr	r1, [sp, #16]
 8029532:	4a53      	ldr	r2, [pc, #332]	; (8029680 <_strtod_l+0x960>)
 8029534:	465b      	mov	r3, fp
 8029536:	2900      	cmp	r1, #0
 8029538:	f000 8081 	beq.w	802963e <_strtod_l+0x91e>
 802953c:	ea02 010b 	and.w	r1, r2, fp
 8029540:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8029544:	dc7b      	bgt.n	802963e <_strtod_l+0x91e>
 8029546:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 802954a:	f77f aea9 	ble.w	80292a0 <_strtod_l+0x580>
 802954e:	4b4d      	ldr	r3, [pc, #308]	; (8029684 <_strtod_l+0x964>)
 8029550:	4650      	mov	r0, sl
 8029552:	4659      	mov	r1, fp
 8029554:	2200      	movs	r2, #0
 8029556:	f7d7 f84f 	bl	80005f8 <__aeabi_dmul>
 802955a:	460b      	mov	r3, r1
 802955c:	4303      	orrs	r3, r0
 802955e:	bf08      	it	eq
 8029560:	2322      	moveq	r3, #34	; 0x22
 8029562:	4682      	mov	sl, r0
 8029564:	468b      	mov	fp, r1
 8029566:	bf08      	it	eq
 8029568:	6023      	streq	r3, [r4, #0]
 802956a:	e62b      	b.n	80291c4 <_strtod_l+0x4a4>
 802956c:	f04f 32ff 	mov.w	r2, #4294967295
 8029570:	fa02 f303 	lsl.w	r3, r2, r3
 8029574:	ea03 0a0a 	and.w	sl, r3, sl
 8029578:	e6e3      	b.n	8029342 <_strtod_l+0x622>
 802957a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 802957e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8029582:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8029586:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 802958a:	fa01 f308 	lsl.w	r3, r1, r8
 802958e:	9308      	str	r3, [sp, #32]
 8029590:	910d      	str	r1, [sp, #52]	; 0x34
 8029592:	e746      	b.n	8029422 <_strtod_l+0x702>
 8029594:	2300      	movs	r3, #0
 8029596:	9308      	str	r3, [sp, #32]
 8029598:	2301      	movs	r3, #1
 802959a:	930d      	str	r3, [sp, #52]	; 0x34
 802959c:	e741      	b.n	8029422 <_strtod_l+0x702>
 802959e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80295a0:	4642      	mov	r2, r8
 80295a2:	4620      	mov	r0, r4
 80295a4:	f002 f99c 	bl	802b8e0 <__lshift>
 80295a8:	9018      	str	r0, [sp, #96]	; 0x60
 80295aa:	2800      	cmp	r0, #0
 80295ac:	f47f af6b 	bne.w	8029486 <_strtod_l+0x766>
 80295b0:	e5fe      	b.n	80291b0 <_strtod_l+0x490>
 80295b2:	465f      	mov	r7, fp
 80295b4:	d16e      	bne.n	8029694 <_strtod_l+0x974>
 80295b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80295b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80295bc:	b342      	cbz	r2, 8029610 <_strtod_l+0x8f0>
 80295be:	4a32      	ldr	r2, [pc, #200]	; (8029688 <_strtod_l+0x968>)
 80295c0:	4293      	cmp	r3, r2
 80295c2:	d128      	bne.n	8029616 <_strtod_l+0x8f6>
 80295c4:	9b04      	ldr	r3, [sp, #16]
 80295c6:	4651      	mov	r1, sl
 80295c8:	b1eb      	cbz	r3, 8029606 <_strtod_l+0x8e6>
 80295ca:	4b2d      	ldr	r3, [pc, #180]	; (8029680 <_strtod_l+0x960>)
 80295cc:	403b      	ands	r3, r7
 80295ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80295d2:	f04f 32ff 	mov.w	r2, #4294967295
 80295d6:	d819      	bhi.n	802960c <_strtod_l+0x8ec>
 80295d8:	0d1b      	lsrs	r3, r3, #20
 80295da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80295de:	fa02 f303 	lsl.w	r3, r2, r3
 80295e2:	4299      	cmp	r1, r3
 80295e4:	d117      	bne.n	8029616 <_strtod_l+0x8f6>
 80295e6:	4b29      	ldr	r3, [pc, #164]	; (802968c <_strtod_l+0x96c>)
 80295e8:	429f      	cmp	r7, r3
 80295ea:	d102      	bne.n	80295f2 <_strtod_l+0x8d2>
 80295ec:	3101      	adds	r1, #1
 80295ee:	f43f addf 	beq.w	80291b0 <_strtod_l+0x490>
 80295f2:	4b23      	ldr	r3, [pc, #140]	; (8029680 <_strtod_l+0x960>)
 80295f4:	403b      	ands	r3, r7
 80295f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80295fa:	f04f 0a00 	mov.w	sl, #0
 80295fe:	9b04      	ldr	r3, [sp, #16]
 8029600:	2b00      	cmp	r3, #0
 8029602:	d1a4      	bne.n	802954e <_strtod_l+0x82e>
 8029604:	e5de      	b.n	80291c4 <_strtod_l+0x4a4>
 8029606:	f04f 33ff 	mov.w	r3, #4294967295
 802960a:	e7ea      	b.n	80295e2 <_strtod_l+0x8c2>
 802960c:	4613      	mov	r3, r2
 802960e:	e7e8      	b.n	80295e2 <_strtod_l+0x8c2>
 8029610:	ea53 030a 	orrs.w	r3, r3, sl
 8029614:	d08c      	beq.n	8029530 <_strtod_l+0x810>
 8029616:	9b08      	ldr	r3, [sp, #32]
 8029618:	b1db      	cbz	r3, 8029652 <_strtod_l+0x932>
 802961a:	423b      	tst	r3, r7
 802961c:	d0ef      	beq.n	80295fe <_strtod_l+0x8de>
 802961e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8029620:	9a04      	ldr	r2, [sp, #16]
 8029622:	4650      	mov	r0, sl
 8029624:	4659      	mov	r1, fp
 8029626:	b1c3      	cbz	r3, 802965a <_strtod_l+0x93a>
 8029628:	f7ff fb5c 	bl	8028ce4 <sulp>
 802962c:	4602      	mov	r2, r0
 802962e:	460b      	mov	r3, r1
 8029630:	ec51 0b18 	vmov	r0, r1, d8
 8029634:	f7d6 fe2a 	bl	800028c <__adddf3>
 8029638:	4682      	mov	sl, r0
 802963a:	468b      	mov	fp, r1
 802963c:	e7df      	b.n	80295fe <_strtod_l+0x8de>
 802963e:	4013      	ands	r3, r2
 8029640:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8029644:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8029648:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 802964c:	f04f 3aff 	mov.w	sl, #4294967295
 8029650:	e7d5      	b.n	80295fe <_strtod_l+0x8de>
 8029652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029654:	ea13 0f0a 	tst.w	r3, sl
 8029658:	e7e0      	b.n	802961c <_strtod_l+0x8fc>
 802965a:	f7ff fb43 	bl	8028ce4 <sulp>
 802965e:	4602      	mov	r2, r0
 8029660:	460b      	mov	r3, r1
 8029662:	ec51 0b18 	vmov	r0, r1, d8
 8029666:	f7d6 fe0f 	bl	8000288 <__aeabi_dsub>
 802966a:	2200      	movs	r2, #0
 802966c:	2300      	movs	r3, #0
 802966e:	4682      	mov	sl, r0
 8029670:	468b      	mov	fp, r1
 8029672:	f7d7 fa29 	bl	8000ac8 <__aeabi_dcmpeq>
 8029676:	2800      	cmp	r0, #0
 8029678:	d0c1      	beq.n	80295fe <_strtod_l+0x8de>
 802967a:	e611      	b.n	80292a0 <_strtod_l+0x580>
 802967c:	fffffc02 	.word	0xfffffc02
 8029680:	7ff00000 	.word	0x7ff00000
 8029684:	39500000 	.word	0x39500000
 8029688:	000fffff 	.word	0x000fffff
 802968c:	7fefffff 	.word	0x7fefffff
 8029690:	0802f170 	.word	0x0802f170
 8029694:	4631      	mov	r1, r6
 8029696:	4628      	mov	r0, r5
 8029698:	f002 fb10 	bl	802bcbc <__ratio>
 802969c:	ec59 8b10 	vmov	r8, r9, d0
 80296a0:	ee10 0a10 	vmov	r0, s0
 80296a4:	2200      	movs	r2, #0
 80296a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80296aa:	4649      	mov	r1, r9
 80296ac:	f7d7 fa20 	bl	8000af0 <__aeabi_dcmple>
 80296b0:	2800      	cmp	r0, #0
 80296b2:	d07a      	beq.n	80297aa <_strtod_l+0xa8a>
 80296b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80296b6:	2b00      	cmp	r3, #0
 80296b8:	d04a      	beq.n	8029750 <_strtod_l+0xa30>
 80296ba:	4b95      	ldr	r3, [pc, #596]	; (8029910 <_strtod_l+0xbf0>)
 80296bc:	2200      	movs	r2, #0
 80296be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80296c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8029910 <_strtod_l+0xbf0>
 80296c6:	f04f 0800 	mov.w	r8, #0
 80296ca:	4b92      	ldr	r3, [pc, #584]	; (8029914 <_strtod_l+0xbf4>)
 80296cc:	403b      	ands	r3, r7
 80296ce:	930d      	str	r3, [sp, #52]	; 0x34
 80296d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80296d2:	4b91      	ldr	r3, [pc, #580]	; (8029918 <_strtod_l+0xbf8>)
 80296d4:	429a      	cmp	r2, r3
 80296d6:	f040 80b0 	bne.w	802983a <_strtod_l+0xb1a>
 80296da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80296de:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80296e2:	ec4b ab10 	vmov	d0, sl, fp
 80296e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80296ea:	f002 fa0f 	bl	802bb0c <__ulp>
 80296ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80296f2:	ec53 2b10 	vmov	r2, r3, d0
 80296f6:	f7d6 ff7f 	bl	80005f8 <__aeabi_dmul>
 80296fa:	4652      	mov	r2, sl
 80296fc:	465b      	mov	r3, fp
 80296fe:	f7d6 fdc5 	bl	800028c <__adddf3>
 8029702:	460b      	mov	r3, r1
 8029704:	4983      	ldr	r1, [pc, #524]	; (8029914 <_strtod_l+0xbf4>)
 8029706:	4a85      	ldr	r2, [pc, #532]	; (802991c <_strtod_l+0xbfc>)
 8029708:	4019      	ands	r1, r3
 802970a:	4291      	cmp	r1, r2
 802970c:	4682      	mov	sl, r0
 802970e:	d960      	bls.n	80297d2 <_strtod_l+0xab2>
 8029710:	ee18 3a90 	vmov	r3, s17
 8029714:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8029718:	4293      	cmp	r3, r2
 802971a:	d104      	bne.n	8029726 <_strtod_l+0xa06>
 802971c:	ee18 3a10 	vmov	r3, s16
 8029720:	3301      	adds	r3, #1
 8029722:	f43f ad45 	beq.w	80291b0 <_strtod_l+0x490>
 8029726:	f8df b200 	ldr.w	fp, [pc, #512]	; 8029928 <_strtod_l+0xc08>
 802972a:	f04f 3aff 	mov.w	sl, #4294967295
 802972e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8029730:	4620      	mov	r0, r4
 8029732:	f001 feb9 	bl	802b4a8 <_Bfree>
 8029736:	9905      	ldr	r1, [sp, #20]
 8029738:	4620      	mov	r0, r4
 802973a:	f001 feb5 	bl	802b4a8 <_Bfree>
 802973e:	4631      	mov	r1, r6
 8029740:	4620      	mov	r0, r4
 8029742:	f001 feb1 	bl	802b4a8 <_Bfree>
 8029746:	4629      	mov	r1, r5
 8029748:	4620      	mov	r0, r4
 802974a:	f001 fead 	bl	802b4a8 <_Bfree>
 802974e:	e61a      	b.n	8029386 <_strtod_l+0x666>
 8029750:	f1ba 0f00 	cmp.w	sl, #0
 8029754:	d11b      	bne.n	802978e <_strtod_l+0xa6e>
 8029756:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802975a:	b9f3      	cbnz	r3, 802979a <_strtod_l+0xa7a>
 802975c:	4b6c      	ldr	r3, [pc, #432]	; (8029910 <_strtod_l+0xbf0>)
 802975e:	2200      	movs	r2, #0
 8029760:	4640      	mov	r0, r8
 8029762:	4649      	mov	r1, r9
 8029764:	f7d7 f9ba 	bl	8000adc <__aeabi_dcmplt>
 8029768:	b9d0      	cbnz	r0, 80297a0 <_strtod_l+0xa80>
 802976a:	4640      	mov	r0, r8
 802976c:	4649      	mov	r1, r9
 802976e:	4b6c      	ldr	r3, [pc, #432]	; (8029920 <_strtod_l+0xc00>)
 8029770:	2200      	movs	r2, #0
 8029772:	f7d6 ff41 	bl	80005f8 <__aeabi_dmul>
 8029776:	4680      	mov	r8, r0
 8029778:	4689      	mov	r9, r1
 802977a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 802977e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8029782:	9315      	str	r3, [sp, #84]	; 0x54
 8029784:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8029788:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802978c:	e79d      	b.n	80296ca <_strtod_l+0x9aa>
 802978e:	f1ba 0f01 	cmp.w	sl, #1
 8029792:	d102      	bne.n	802979a <_strtod_l+0xa7a>
 8029794:	2f00      	cmp	r7, #0
 8029796:	f43f ad83 	beq.w	80292a0 <_strtod_l+0x580>
 802979a:	4b62      	ldr	r3, [pc, #392]	; (8029924 <_strtod_l+0xc04>)
 802979c:	2200      	movs	r2, #0
 802979e:	e78e      	b.n	80296be <_strtod_l+0x99e>
 80297a0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8029920 <_strtod_l+0xc00>
 80297a4:	f04f 0800 	mov.w	r8, #0
 80297a8:	e7e7      	b.n	802977a <_strtod_l+0xa5a>
 80297aa:	4b5d      	ldr	r3, [pc, #372]	; (8029920 <_strtod_l+0xc00>)
 80297ac:	4640      	mov	r0, r8
 80297ae:	4649      	mov	r1, r9
 80297b0:	2200      	movs	r2, #0
 80297b2:	f7d6 ff21 	bl	80005f8 <__aeabi_dmul>
 80297b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80297b8:	4680      	mov	r8, r0
 80297ba:	4689      	mov	r9, r1
 80297bc:	b933      	cbnz	r3, 80297cc <_strtod_l+0xaac>
 80297be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80297c2:	900e      	str	r0, [sp, #56]	; 0x38
 80297c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80297c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80297ca:	e7dd      	b.n	8029788 <_strtod_l+0xa68>
 80297cc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80297d0:	e7f9      	b.n	80297c6 <_strtod_l+0xaa6>
 80297d2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80297d6:	9b04      	ldr	r3, [sp, #16]
 80297d8:	2b00      	cmp	r3, #0
 80297da:	d1a8      	bne.n	802972e <_strtod_l+0xa0e>
 80297dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80297e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80297e2:	0d1b      	lsrs	r3, r3, #20
 80297e4:	051b      	lsls	r3, r3, #20
 80297e6:	429a      	cmp	r2, r3
 80297e8:	d1a1      	bne.n	802972e <_strtod_l+0xa0e>
 80297ea:	4640      	mov	r0, r8
 80297ec:	4649      	mov	r1, r9
 80297ee:	f7d7 fa63 	bl	8000cb8 <__aeabi_d2lz>
 80297f2:	f7d6 fed3 	bl	800059c <__aeabi_l2d>
 80297f6:	4602      	mov	r2, r0
 80297f8:	460b      	mov	r3, r1
 80297fa:	4640      	mov	r0, r8
 80297fc:	4649      	mov	r1, r9
 80297fe:	f7d6 fd43 	bl	8000288 <__aeabi_dsub>
 8029802:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8029804:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8029808:	ea43 030a 	orr.w	r3, r3, sl
 802980c:	4313      	orrs	r3, r2
 802980e:	4680      	mov	r8, r0
 8029810:	4689      	mov	r9, r1
 8029812:	d055      	beq.n	80298c0 <_strtod_l+0xba0>
 8029814:	a336      	add	r3, pc, #216	; (adr r3, 80298f0 <_strtod_l+0xbd0>)
 8029816:	e9d3 2300 	ldrd	r2, r3, [r3]
 802981a:	f7d7 f95f 	bl	8000adc <__aeabi_dcmplt>
 802981e:	2800      	cmp	r0, #0
 8029820:	f47f acd0 	bne.w	80291c4 <_strtod_l+0x4a4>
 8029824:	a334      	add	r3, pc, #208	; (adr r3, 80298f8 <_strtod_l+0xbd8>)
 8029826:	e9d3 2300 	ldrd	r2, r3, [r3]
 802982a:	4640      	mov	r0, r8
 802982c:	4649      	mov	r1, r9
 802982e:	f7d7 f973 	bl	8000b18 <__aeabi_dcmpgt>
 8029832:	2800      	cmp	r0, #0
 8029834:	f43f af7b 	beq.w	802972e <_strtod_l+0xa0e>
 8029838:	e4c4      	b.n	80291c4 <_strtod_l+0x4a4>
 802983a:	9b04      	ldr	r3, [sp, #16]
 802983c:	b333      	cbz	r3, 802988c <_strtod_l+0xb6c>
 802983e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029840:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8029844:	d822      	bhi.n	802988c <_strtod_l+0xb6c>
 8029846:	a32e      	add	r3, pc, #184	; (adr r3, 8029900 <_strtod_l+0xbe0>)
 8029848:	e9d3 2300 	ldrd	r2, r3, [r3]
 802984c:	4640      	mov	r0, r8
 802984e:	4649      	mov	r1, r9
 8029850:	f7d7 f94e 	bl	8000af0 <__aeabi_dcmple>
 8029854:	b1a0      	cbz	r0, 8029880 <_strtod_l+0xb60>
 8029856:	4649      	mov	r1, r9
 8029858:	4640      	mov	r0, r8
 802985a:	f7d7 f9a5 	bl	8000ba8 <__aeabi_d2uiz>
 802985e:	2801      	cmp	r0, #1
 8029860:	bf38      	it	cc
 8029862:	2001      	movcc	r0, #1
 8029864:	f7d6 fe4e 	bl	8000504 <__aeabi_ui2d>
 8029868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802986a:	4680      	mov	r8, r0
 802986c:	4689      	mov	r9, r1
 802986e:	bb23      	cbnz	r3, 80298ba <_strtod_l+0xb9a>
 8029870:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8029874:	9010      	str	r0, [sp, #64]	; 0x40
 8029876:	9311      	str	r3, [sp, #68]	; 0x44
 8029878:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802987c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8029880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029882:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8029884:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8029888:	1a9b      	subs	r3, r3, r2
 802988a:	9309      	str	r3, [sp, #36]	; 0x24
 802988c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8029890:	eeb0 0a48 	vmov.f32	s0, s16
 8029894:	eef0 0a68 	vmov.f32	s1, s17
 8029898:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802989c:	f002 f936 	bl	802bb0c <__ulp>
 80298a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80298a4:	ec53 2b10 	vmov	r2, r3, d0
 80298a8:	f7d6 fea6 	bl	80005f8 <__aeabi_dmul>
 80298ac:	ec53 2b18 	vmov	r2, r3, d8
 80298b0:	f7d6 fcec 	bl	800028c <__adddf3>
 80298b4:	4682      	mov	sl, r0
 80298b6:	468b      	mov	fp, r1
 80298b8:	e78d      	b.n	80297d6 <_strtod_l+0xab6>
 80298ba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80298be:	e7db      	b.n	8029878 <_strtod_l+0xb58>
 80298c0:	a311      	add	r3, pc, #68	; (adr r3, 8029908 <_strtod_l+0xbe8>)
 80298c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80298c6:	f7d7 f909 	bl	8000adc <__aeabi_dcmplt>
 80298ca:	e7b2      	b.n	8029832 <_strtod_l+0xb12>
 80298cc:	2300      	movs	r3, #0
 80298ce:	930a      	str	r3, [sp, #40]	; 0x28
 80298d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80298d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80298d4:	6013      	str	r3, [r2, #0]
 80298d6:	f7ff ba6b 	b.w	8028db0 <_strtod_l+0x90>
 80298da:	2a65      	cmp	r2, #101	; 0x65
 80298dc:	f43f ab5f 	beq.w	8028f9e <_strtod_l+0x27e>
 80298e0:	2a45      	cmp	r2, #69	; 0x45
 80298e2:	f43f ab5c 	beq.w	8028f9e <_strtod_l+0x27e>
 80298e6:	2301      	movs	r3, #1
 80298e8:	f7ff bb94 	b.w	8029014 <_strtod_l+0x2f4>
 80298ec:	f3af 8000 	nop.w
 80298f0:	94a03595 	.word	0x94a03595
 80298f4:	3fdfffff 	.word	0x3fdfffff
 80298f8:	35afe535 	.word	0x35afe535
 80298fc:	3fe00000 	.word	0x3fe00000
 8029900:	ffc00000 	.word	0xffc00000
 8029904:	41dfffff 	.word	0x41dfffff
 8029908:	94a03595 	.word	0x94a03595
 802990c:	3fcfffff 	.word	0x3fcfffff
 8029910:	3ff00000 	.word	0x3ff00000
 8029914:	7ff00000 	.word	0x7ff00000
 8029918:	7fe00000 	.word	0x7fe00000
 802991c:	7c9fffff 	.word	0x7c9fffff
 8029920:	3fe00000 	.word	0x3fe00000
 8029924:	bff00000 	.word	0xbff00000
 8029928:	7fefffff 	.word	0x7fefffff

0802992c <strtof>:
 802992c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029930:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80299e0 <strtof+0xb4>
 8029934:	4b26      	ldr	r3, [pc, #152]	; (80299d0 <strtof+0xa4>)
 8029936:	460a      	mov	r2, r1
 8029938:	ed2d 8b02 	vpush	{d8}
 802993c:	4601      	mov	r1, r0
 802993e:	f8d8 0000 	ldr.w	r0, [r8]
 8029942:	f7ff f9ed 	bl	8028d20 <_strtod_l>
 8029946:	ec55 4b10 	vmov	r4, r5, d0
 802994a:	ee10 2a10 	vmov	r2, s0
 802994e:	ee10 0a10 	vmov	r0, s0
 8029952:	462b      	mov	r3, r5
 8029954:	4629      	mov	r1, r5
 8029956:	f7d7 f8e9 	bl	8000b2c <__aeabi_dcmpun>
 802995a:	b190      	cbz	r0, 8029982 <strtof+0x56>
 802995c:	2d00      	cmp	r5, #0
 802995e:	481d      	ldr	r0, [pc, #116]	; (80299d4 <strtof+0xa8>)
 8029960:	da09      	bge.n	8029976 <strtof+0x4a>
 8029962:	f002 fbdd 	bl	802c120 <nanf>
 8029966:	eeb1 8a40 	vneg.f32	s16, s0
 802996a:	eeb0 0a48 	vmov.f32	s0, s16
 802996e:	ecbd 8b02 	vpop	{d8}
 8029972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029976:	ecbd 8b02 	vpop	{d8}
 802997a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802997e:	f002 bbcf 	b.w	802c120 <nanf>
 8029982:	4620      	mov	r0, r4
 8029984:	4629      	mov	r1, r5
 8029986:	f7d7 f92f 	bl	8000be8 <__aeabi_d2f>
 802998a:	ee08 0a10 	vmov	s16, r0
 802998e:	eddf 7a12 	vldr	s15, [pc, #72]	; 80299d8 <strtof+0xac>
 8029992:	eeb0 7ac8 	vabs.f32	s14, s16
 8029996:	eeb4 7a67 	vcmp.f32	s14, s15
 802999a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802999e:	dde4      	ble.n	802996a <strtof+0x3e>
 80299a0:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80299a4:	4b0d      	ldr	r3, [pc, #52]	; (80299dc <strtof+0xb0>)
 80299a6:	f04f 32ff 	mov.w	r2, #4294967295
 80299aa:	4620      	mov	r0, r4
 80299ac:	4639      	mov	r1, r7
 80299ae:	f7d7 f8bd 	bl	8000b2c <__aeabi_dcmpun>
 80299b2:	b940      	cbnz	r0, 80299c6 <strtof+0x9a>
 80299b4:	4b09      	ldr	r3, [pc, #36]	; (80299dc <strtof+0xb0>)
 80299b6:	f04f 32ff 	mov.w	r2, #4294967295
 80299ba:	4620      	mov	r0, r4
 80299bc:	4639      	mov	r1, r7
 80299be:	f7d7 f897 	bl	8000af0 <__aeabi_dcmple>
 80299c2:	2800      	cmp	r0, #0
 80299c4:	d0d1      	beq.n	802996a <strtof+0x3e>
 80299c6:	f8d8 3000 	ldr.w	r3, [r8]
 80299ca:	2222      	movs	r2, #34	; 0x22
 80299cc:	601a      	str	r2, [r3, #0]
 80299ce:	e7cc      	b.n	802996a <strtof+0x3e>
 80299d0:	20000100 	.word	0x20000100
 80299d4:	0802f093 	.word	0x0802f093
 80299d8:	7f7fffff 	.word	0x7f7fffff
 80299dc:	7fefffff 	.word	0x7fefffff
 80299e0:	20000094 	.word	0x20000094

080299e4 <_strtoul_l.constprop.0>:
 80299e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80299e8:	4f36      	ldr	r7, [pc, #216]	; (8029ac4 <_strtoul_l.constprop.0+0xe0>)
 80299ea:	4686      	mov	lr, r0
 80299ec:	460d      	mov	r5, r1
 80299ee:	4628      	mov	r0, r5
 80299f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80299f4:	5de6      	ldrb	r6, [r4, r7]
 80299f6:	f016 0608 	ands.w	r6, r6, #8
 80299fa:	d1f8      	bne.n	80299ee <_strtoul_l.constprop.0+0xa>
 80299fc:	2c2d      	cmp	r4, #45	; 0x2d
 80299fe:	d12f      	bne.n	8029a60 <_strtoul_l.constprop.0+0x7c>
 8029a00:	782c      	ldrb	r4, [r5, #0]
 8029a02:	2601      	movs	r6, #1
 8029a04:	1c85      	adds	r5, r0, #2
 8029a06:	2b00      	cmp	r3, #0
 8029a08:	d057      	beq.n	8029aba <_strtoul_l.constprop.0+0xd6>
 8029a0a:	2b10      	cmp	r3, #16
 8029a0c:	d109      	bne.n	8029a22 <_strtoul_l.constprop.0+0x3e>
 8029a0e:	2c30      	cmp	r4, #48	; 0x30
 8029a10:	d107      	bne.n	8029a22 <_strtoul_l.constprop.0+0x3e>
 8029a12:	7828      	ldrb	r0, [r5, #0]
 8029a14:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8029a18:	2858      	cmp	r0, #88	; 0x58
 8029a1a:	d149      	bne.n	8029ab0 <_strtoul_l.constprop.0+0xcc>
 8029a1c:	786c      	ldrb	r4, [r5, #1]
 8029a1e:	2310      	movs	r3, #16
 8029a20:	3502      	adds	r5, #2
 8029a22:	f04f 38ff 	mov.w	r8, #4294967295
 8029a26:	2700      	movs	r7, #0
 8029a28:	fbb8 f8f3 	udiv	r8, r8, r3
 8029a2c:	fb03 f908 	mul.w	r9, r3, r8
 8029a30:	ea6f 0909 	mvn.w	r9, r9
 8029a34:	4638      	mov	r0, r7
 8029a36:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8029a3a:	f1bc 0f09 	cmp.w	ip, #9
 8029a3e:	d814      	bhi.n	8029a6a <_strtoul_l.constprop.0+0x86>
 8029a40:	4664      	mov	r4, ip
 8029a42:	42a3      	cmp	r3, r4
 8029a44:	dd22      	ble.n	8029a8c <_strtoul_l.constprop.0+0xa8>
 8029a46:	2f00      	cmp	r7, #0
 8029a48:	db1d      	blt.n	8029a86 <_strtoul_l.constprop.0+0xa2>
 8029a4a:	4580      	cmp	r8, r0
 8029a4c:	d31b      	bcc.n	8029a86 <_strtoul_l.constprop.0+0xa2>
 8029a4e:	d101      	bne.n	8029a54 <_strtoul_l.constprop.0+0x70>
 8029a50:	45a1      	cmp	r9, r4
 8029a52:	db18      	blt.n	8029a86 <_strtoul_l.constprop.0+0xa2>
 8029a54:	fb00 4003 	mla	r0, r0, r3, r4
 8029a58:	2701      	movs	r7, #1
 8029a5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8029a5e:	e7ea      	b.n	8029a36 <_strtoul_l.constprop.0+0x52>
 8029a60:	2c2b      	cmp	r4, #43	; 0x2b
 8029a62:	bf04      	itt	eq
 8029a64:	782c      	ldrbeq	r4, [r5, #0]
 8029a66:	1c85      	addeq	r5, r0, #2
 8029a68:	e7cd      	b.n	8029a06 <_strtoul_l.constprop.0+0x22>
 8029a6a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8029a6e:	f1bc 0f19 	cmp.w	ip, #25
 8029a72:	d801      	bhi.n	8029a78 <_strtoul_l.constprop.0+0x94>
 8029a74:	3c37      	subs	r4, #55	; 0x37
 8029a76:	e7e4      	b.n	8029a42 <_strtoul_l.constprop.0+0x5e>
 8029a78:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8029a7c:	f1bc 0f19 	cmp.w	ip, #25
 8029a80:	d804      	bhi.n	8029a8c <_strtoul_l.constprop.0+0xa8>
 8029a82:	3c57      	subs	r4, #87	; 0x57
 8029a84:	e7dd      	b.n	8029a42 <_strtoul_l.constprop.0+0x5e>
 8029a86:	f04f 37ff 	mov.w	r7, #4294967295
 8029a8a:	e7e6      	b.n	8029a5a <_strtoul_l.constprop.0+0x76>
 8029a8c:	2f00      	cmp	r7, #0
 8029a8e:	da07      	bge.n	8029aa0 <_strtoul_l.constprop.0+0xbc>
 8029a90:	2322      	movs	r3, #34	; 0x22
 8029a92:	f8ce 3000 	str.w	r3, [lr]
 8029a96:	f04f 30ff 	mov.w	r0, #4294967295
 8029a9a:	b932      	cbnz	r2, 8029aaa <_strtoul_l.constprop.0+0xc6>
 8029a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029aa0:	b106      	cbz	r6, 8029aa4 <_strtoul_l.constprop.0+0xc0>
 8029aa2:	4240      	negs	r0, r0
 8029aa4:	2a00      	cmp	r2, #0
 8029aa6:	d0f9      	beq.n	8029a9c <_strtoul_l.constprop.0+0xb8>
 8029aa8:	b107      	cbz	r7, 8029aac <_strtoul_l.constprop.0+0xc8>
 8029aaa:	1e69      	subs	r1, r5, #1
 8029aac:	6011      	str	r1, [r2, #0]
 8029aae:	e7f5      	b.n	8029a9c <_strtoul_l.constprop.0+0xb8>
 8029ab0:	2430      	movs	r4, #48	; 0x30
 8029ab2:	2b00      	cmp	r3, #0
 8029ab4:	d1b5      	bne.n	8029a22 <_strtoul_l.constprop.0+0x3e>
 8029ab6:	2308      	movs	r3, #8
 8029ab8:	e7b3      	b.n	8029a22 <_strtoul_l.constprop.0+0x3e>
 8029aba:	2c30      	cmp	r4, #48	; 0x30
 8029abc:	d0a9      	beq.n	8029a12 <_strtoul_l.constprop.0+0x2e>
 8029abe:	230a      	movs	r3, #10
 8029ac0:	e7af      	b.n	8029a22 <_strtoul_l.constprop.0+0x3e>
 8029ac2:	bf00      	nop
 8029ac4:	0802f199 	.word	0x0802f199

08029ac8 <strtoul>:
 8029ac8:	4613      	mov	r3, r2
 8029aca:	460a      	mov	r2, r1
 8029acc:	4601      	mov	r1, r0
 8029ace:	4802      	ldr	r0, [pc, #8]	; (8029ad8 <strtoul+0x10>)
 8029ad0:	6800      	ldr	r0, [r0, #0]
 8029ad2:	f7ff bf87 	b.w	80299e4 <_strtoul_l.constprop.0>
 8029ad6:	bf00      	nop
 8029ad8:	20000094 	.word	0x20000094

08029adc <__swbuf_r>:
 8029adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029ade:	460e      	mov	r6, r1
 8029ae0:	4614      	mov	r4, r2
 8029ae2:	4605      	mov	r5, r0
 8029ae4:	b118      	cbz	r0, 8029aee <__swbuf_r+0x12>
 8029ae6:	6983      	ldr	r3, [r0, #24]
 8029ae8:	b90b      	cbnz	r3, 8029aee <__swbuf_r+0x12>
 8029aea:	f7fe f815 	bl	8027b18 <__sinit>
 8029aee:	4b21      	ldr	r3, [pc, #132]	; (8029b74 <__swbuf_r+0x98>)
 8029af0:	429c      	cmp	r4, r3
 8029af2:	d12b      	bne.n	8029b4c <__swbuf_r+0x70>
 8029af4:	686c      	ldr	r4, [r5, #4]
 8029af6:	69a3      	ldr	r3, [r4, #24]
 8029af8:	60a3      	str	r3, [r4, #8]
 8029afa:	89a3      	ldrh	r3, [r4, #12]
 8029afc:	071a      	lsls	r2, r3, #28
 8029afe:	d52f      	bpl.n	8029b60 <__swbuf_r+0x84>
 8029b00:	6923      	ldr	r3, [r4, #16]
 8029b02:	b36b      	cbz	r3, 8029b60 <__swbuf_r+0x84>
 8029b04:	6923      	ldr	r3, [r4, #16]
 8029b06:	6820      	ldr	r0, [r4, #0]
 8029b08:	1ac0      	subs	r0, r0, r3
 8029b0a:	6963      	ldr	r3, [r4, #20]
 8029b0c:	b2f6      	uxtb	r6, r6
 8029b0e:	4283      	cmp	r3, r0
 8029b10:	4637      	mov	r7, r6
 8029b12:	dc04      	bgt.n	8029b1e <__swbuf_r+0x42>
 8029b14:	4621      	mov	r1, r4
 8029b16:	4628      	mov	r0, r5
 8029b18:	f001 f826 	bl	802ab68 <_fflush_r>
 8029b1c:	bb30      	cbnz	r0, 8029b6c <__swbuf_r+0x90>
 8029b1e:	68a3      	ldr	r3, [r4, #8]
 8029b20:	3b01      	subs	r3, #1
 8029b22:	60a3      	str	r3, [r4, #8]
 8029b24:	6823      	ldr	r3, [r4, #0]
 8029b26:	1c5a      	adds	r2, r3, #1
 8029b28:	6022      	str	r2, [r4, #0]
 8029b2a:	701e      	strb	r6, [r3, #0]
 8029b2c:	6963      	ldr	r3, [r4, #20]
 8029b2e:	3001      	adds	r0, #1
 8029b30:	4283      	cmp	r3, r0
 8029b32:	d004      	beq.n	8029b3e <__swbuf_r+0x62>
 8029b34:	89a3      	ldrh	r3, [r4, #12]
 8029b36:	07db      	lsls	r3, r3, #31
 8029b38:	d506      	bpl.n	8029b48 <__swbuf_r+0x6c>
 8029b3a:	2e0a      	cmp	r6, #10
 8029b3c:	d104      	bne.n	8029b48 <__swbuf_r+0x6c>
 8029b3e:	4621      	mov	r1, r4
 8029b40:	4628      	mov	r0, r5
 8029b42:	f001 f811 	bl	802ab68 <_fflush_r>
 8029b46:	b988      	cbnz	r0, 8029b6c <__swbuf_r+0x90>
 8029b48:	4638      	mov	r0, r7
 8029b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029b4c:	4b0a      	ldr	r3, [pc, #40]	; (8029b78 <__swbuf_r+0x9c>)
 8029b4e:	429c      	cmp	r4, r3
 8029b50:	d101      	bne.n	8029b56 <__swbuf_r+0x7a>
 8029b52:	68ac      	ldr	r4, [r5, #8]
 8029b54:	e7cf      	b.n	8029af6 <__swbuf_r+0x1a>
 8029b56:	4b09      	ldr	r3, [pc, #36]	; (8029b7c <__swbuf_r+0xa0>)
 8029b58:	429c      	cmp	r4, r3
 8029b5a:	bf08      	it	eq
 8029b5c:	68ec      	ldreq	r4, [r5, #12]
 8029b5e:	e7ca      	b.n	8029af6 <__swbuf_r+0x1a>
 8029b60:	4621      	mov	r1, r4
 8029b62:	4628      	mov	r0, r5
 8029b64:	f000 f81e 	bl	8029ba4 <__swsetup_r>
 8029b68:	2800      	cmp	r0, #0
 8029b6a:	d0cb      	beq.n	8029b04 <__swbuf_r+0x28>
 8029b6c:	f04f 37ff 	mov.w	r7, #4294967295
 8029b70:	e7ea      	b.n	8029b48 <__swbuf_r+0x6c>
 8029b72:	bf00      	nop
 8029b74:	0802f0b4 	.word	0x0802f0b4
 8029b78:	0802f0d4 	.word	0x0802f0d4
 8029b7c:	0802f094 	.word	0x0802f094

08029b80 <_write_r>:
 8029b80:	b538      	push	{r3, r4, r5, lr}
 8029b82:	4d07      	ldr	r5, [pc, #28]	; (8029ba0 <_write_r+0x20>)
 8029b84:	4604      	mov	r4, r0
 8029b86:	4608      	mov	r0, r1
 8029b88:	4611      	mov	r1, r2
 8029b8a:	2200      	movs	r2, #0
 8029b8c:	602a      	str	r2, [r5, #0]
 8029b8e:	461a      	mov	r2, r3
 8029b90:	f7d9 f9fb 	bl	8002f8a <_write>
 8029b94:	1c43      	adds	r3, r0, #1
 8029b96:	d102      	bne.n	8029b9e <_write_r+0x1e>
 8029b98:	682b      	ldr	r3, [r5, #0]
 8029b9a:	b103      	cbz	r3, 8029b9e <_write_r+0x1e>
 8029b9c:	6023      	str	r3, [r4, #0]
 8029b9e:	bd38      	pop	{r3, r4, r5, pc}
 8029ba0:	2000c654 	.word	0x2000c654

08029ba4 <__swsetup_r>:
 8029ba4:	4b32      	ldr	r3, [pc, #200]	; (8029c70 <__swsetup_r+0xcc>)
 8029ba6:	b570      	push	{r4, r5, r6, lr}
 8029ba8:	681d      	ldr	r5, [r3, #0]
 8029baa:	4606      	mov	r6, r0
 8029bac:	460c      	mov	r4, r1
 8029bae:	b125      	cbz	r5, 8029bba <__swsetup_r+0x16>
 8029bb0:	69ab      	ldr	r3, [r5, #24]
 8029bb2:	b913      	cbnz	r3, 8029bba <__swsetup_r+0x16>
 8029bb4:	4628      	mov	r0, r5
 8029bb6:	f7fd ffaf 	bl	8027b18 <__sinit>
 8029bba:	4b2e      	ldr	r3, [pc, #184]	; (8029c74 <__swsetup_r+0xd0>)
 8029bbc:	429c      	cmp	r4, r3
 8029bbe:	d10f      	bne.n	8029be0 <__swsetup_r+0x3c>
 8029bc0:	686c      	ldr	r4, [r5, #4]
 8029bc2:	89a3      	ldrh	r3, [r4, #12]
 8029bc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029bc8:	0719      	lsls	r1, r3, #28
 8029bca:	d42c      	bmi.n	8029c26 <__swsetup_r+0x82>
 8029bcc:	06dd      	lsls	r5, r3, #27
 8029bce:	d411      	bmi.n	8029bf4 <__swsetup_r+0x50>
 8029bd0:	2309      	movs	r3, #9
 8029bd2:	6033      	str	r3, [r6, #0]
 8029bd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8029bd8:	81a3      	strh	r3, [r4, #12]
 8029bda:	f04f 30ff 	mov.w	r0, #4294967295
 8029bde:	e03e      	b.n	8029c5e <__swsetup_r+0xba>
 8029be0:	4b25      	ldr	r3, [pc, #148]	; (8029c78 <__swsetup_r+0xd4>)
 8029be2:	429c      	cmp	r4, r3
 8029be4:	d101      	bne.n	8029bea <__swsetup_r+0x46>
 8029be6:	68ac      	ldr	r4, [r5, #8]
 8029be8:	e7eb      	b.n	8029bc2 <__swsetup_r+0x1e>
 8029bea:	4b24      	ldr	r3, [pc, #144]	; (8029c7c <__swsetup_r+0xd8>)
 8029bec:	429c      	cmp	r4, r3
 8029bee:	bf08      	it	eq
 8029bf0:	68ec      	ldreq	r4, [r5, #12]
 8029bf2:	e7e6      	b.n	8029bc2 <__swsetup_r+0x1e>
 8029bf4:	0758      	lsls	r0, r3, #29
 8029bf6:	d512      	bpl.n	8029c1e <__swsetup_r+0x7a>
 8029bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8029bfa:	b141      	cbz	r1, 8029c0e <__swsetup_r+0x6a>
 8029bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029c00:	4299      	cmp	r1, r3
 8029c02:	d002      	beq.n	8029c0a <__swsetup_r+0x66>
 8029c04:	4630      	mov	r0, r6
 8029c06:	f7fe f885 	bl	8027d14 <_free_r>
 8029c0a:	2300      	movs	r3, #0
 8029c0c:	6363      	str	r3, [r4, #52]	; 0x34
 8029c0e:	89a3      	ldrh	r3, [r4, #12]
 8029c10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8029c14:	81a3      	strh	r3, [r4, #12]
 8029c16:	2300      	movs	r3, #0
 8029c18:	6063      	str	r3, [r4, #4]
 8029c1a:	6923      	ldr	r3, [r4, #16]
 8029c1c:	6023      	str	r3, [r4, #0]
 8029c1e:	89a3      	ldrh	r3, [r4, #12]
 8029c20:	f043 0308 	orr.w	r3, r3, #8
 8029c24:	81a3      	strh	r3, [r4, #12]
 8029c26:	6923      	ldr	r3, [r4, #16]
 8029c28:	b94b      	cbnz	r3, 8029c3e <__swsetup_r+0x9a>
 8029c2a:	89a3      	ldrh	r3, [r4, #12]
 8029c2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8029c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029c34:	d003      	beq.n	8029c3e <__swsetup_r+0x9a>
 8029c36:	4621      	mov	r1, r4
 8029c38:	4630      	mov	r0, r6
 8029c3a:	f001 fb7d 	bl	802b338 <__smakebuf_r>
 8029c3e:	89a0      	ldrh	r0, [r4, #12]
 8029c40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029c44:	f010 0301 	ands.w	r3, r0, #1
 8029c48:	d00a      	beq.n	8029c60 <__swsetup_r+0xbc>
 8029c4a:	2300      	movs	r3, #0
 8029c4c:	60a3      	str	r3, [r4, #8]
 8029c4e:	6963      	ldr	r3, [r4, #20]
 8029c50:	425b      	negs	r3, r3
 8029c52:	61a3      	str	r3, [r4, #24]
 8029c54:	6923      	ldr	r3, [r4, #16]
 8029c56:	b943      	cbnz	r3, 8029c6a <__swsetup_r+0xc6>
 8029c58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8029c5c:	d1ba      	bne.n	8029bd4 <__swsetup_r+0x30>
 8029c5e:	bd70      	pop	{r4, r5, r6, pc}
 8029c60:	0781      	lsls	r1, r0, #30
 8029c62:	bf58      	it	pl
 8029c64:	6963      	ldrpl	r3, [r4, #20]
 8029c66:	60a3      	str	r3, [r4, #8]
 8029c68:	e7f4      	b.n	8029c54 <__swsetup_r+0xb0>
 8029c6a:	2000      	movs	r0, #0
 8029c6c:	e7f7      	b.n	8029c5e <__swsetup_r+0xba>
 8029c6e:	bf00      	nop
 8029c70:	20000094 	.word	0x20000094
 8029c74:	0802f0b4 	.word	0x0802f0b4
 8029c78:	0802f0d4 	.word	0x0802f0d4
 8029c7c:	0802f094 	.word	0x0802f094

08029c80 <__register_exitproc>:
 8029c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029c84:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8029d40 <__register_exitproc+0xc0>
 8029c88:	4606      	mov	r6, r0
 8029c8a:	f8d8 0000 	ldr.w	r0, [r8]
 8029c8e:	461f      	mov	r7, r3
 8029c90:	460d      	mov	r5, r1
 8029c92:	4691      	mov	r9, r2
 8029c94:	f7fe f815 	bl	8027cc2 <__retarget_lock_acquire_recursive>
 8029c98:	4b25      	ldr	r3, [pc, #148]	; (8029d30 <__register_exitproc+0xb0>)
 8029c9a:	681c      	ldr	r4, [r3, #0]
 8029c9c:	b934      	cbnz	r4, 8029cac <__register_exitproc+0x2c>
 8029c9e:	4c25      	ldr	r4, [pc, #148]	; (8029d34 <__register_exitproc+0xb4>)
 8029ca0:	601c      	str	r4, [r3, #0]
 8029ca2:	4b25      	ldr	r3, [pc, #148]	; (8029d38 <__register_exitproc+0xb8>)
 8029ca4:	b113      	cbz	r3, 8029cac <__register_exitproc+0x2c>
 8029ca6:	681b      	ldr	r3, [r3, #0]
 8029ca8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8029cac:	6863      	ldr	r3, [r4, #4]
 8029cae:	2b1f      	cmp	r3, #31
 8029cb0:	dd07      	ble.n	8029cc2 <__register_exitproc+0x42>
 8029cb2:	f8d8 0000 	ldr.w	r0, [r8]
 8029cb6:	f7fe f806 	bl	8027cc6 <__retarget_lock_release_recursive>
 8029cba:	f04f 30ff 	mov.w	r0, #4294967295
 8029cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029cc2:	b34e      	cbz	r6, 8029d18 <__register_exitproc+0x98>
 8029cc4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8029cc8:	b988      	cbnz	r0, 8029cee <__register_exitproc+0x6e>
 8029cca:	4b1c      	ldr	r3, [pc, #112]	; (8029d3c <__register_exitproc+0xbc>)
 8029ccc:	b923      	cbnz	r3, 8029cd8 <__register_exitproc+0x58>
 8029cce:	f8d8 0000 	ldr.w	r0, [r8]
 8029cd2:	f7fd fff7 	bl	8027cc4 <__retarget_lock_release>
 8029cd6:	e7f0      	b.n	8029cba <__register_exitproc+0x3a>
 8029cd8:	f44f 7084 	mov.w	r0, #264	; 0x108
 8029cdc:	f7fd fff4 	bl	8027cc8 <malloc>
 8029ce0:	2800      	cmp	r0, #0
 8029ce2:	d0f4      	beq.n	8029cce <__register_exitproc+0x4e>
 8029ce4:	2300      	movs	r3, #0
 8029ce6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8029cea:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8029cee:	6863      	ldr	r3, [r4, #4]
 8029cf0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8029cf4:	2201      	movs	r2, #1
 8029cf6:	409a      	lsls	r2, r3
 8029cf8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8029cfc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8029d00:	4313      	orrs	r3, r2
 8029d02:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8029d06:	2e02      	cmp	r6, #2
 8029d08:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8029d0c:	bf02      	ittt	eq
 8029d0e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8029d12:	4313      	orreq	r3, r2
 8029d14:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8029d18:	6863      	ldr	r3, [r4, #4]
 8029d1a:	f8d8 0000 	ldr.w	r0, [r8]
 8029d1e:	1c5a      	adds	r2, r3, #1
 8029d20:	3302      	adds	r3, #2
 8029d22:	6062      	str	r2, [r4, #4]
 8029d24:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8029d28:	f7fd ffcd 	bl	8027cc6 <__retarget_lock_release_recursive>
 8029d2c:	2000      	movs	r0, #0
 8029d2e:	e7c6      	b.n	8029cbe <__register_exitproc+0x3e>
 8029d30:	2000c6e4 	.word	0x2000c6e4
 8029d34:	2000c658 	.word	0x2000c658
 8029d38:	0802f140 	.word	0x0802f140
 8029d3c:	08027cc9 	.word	0x08027cc9
 8029d40:	200000f8 	.word	0x200000f8

08029d44 <_close_r>:
 8029d44:	b538      	push	{r3, r4, r5, lr}
 8029d46:	4d06      	ldr	r5, [pc, #24]	; (8029d60 <_close_r+0x1c>)
 8029d48:	2300      	movs	r3, #0
 8029d4a:	4604      	mov	r4, r0
 8029d4c:	4608      	mov	r0, r1
 8029d4e:	602b      	str	r3, [r5, #0]
 8029d50:	f7d9 f937 	bl	8002fc2 <_close>
 8029d54:	1c43      	adds	r3, r0, #1
 8029d56:	d102      	bne.n	8029d5e <_close_r+0x1a>
 8029d58:	682b      	ldr	r3, [r5, #0]
 8029d5a:	b103      	cbz	r3, 8029d5e <_close_r+0x1a>
 8029d5c:	6023      	str	r3, [r4, #0]
 8029d5e:	bd38      	pop	{r3, r4, r5, pc}
 8029d60:	2000c654 	.word	0x2000c654

08029d64 <quorem>:
 8029d64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029d68:	6903      	ldr	r3, [r0, #16]
 8029d6a:	690c      	ldr	r4, [r1, #16]
 8029d6c:	42a3      	cmp	r3, r4
 8029d6e:	4607      	mov	r7, r0
 8029d70:	f2c0 8081 	blt.w	8029e76 <quorem+0x112>
 8029d74:	3c01      	subs	r4, #1
 8029d76:	f101 0814 	add.w	r8, r1, #20
 8029d7a:	f100 0514 	add.w	r5, r0, #20
 8029d7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8029d82:	9301      	str	r3, [sp, #4]
 8029d84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8029d88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8029d8c:	3301      	adds	r3, #1
 8029d8e:	429a      	cmp	r2, r3
 8029d90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8029d94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8029d98:	fbb2 f6f3 	udiv	r6, r2, r3
 8029d9c:	d331      	bcc.n	8029e02 <quorem+0x9e>
 8029d9e:	f04f 0e00 	mov.w	lr, #0
 8029da2:	4640      	mov	r0, r8
 8029da4:	46ac      	mov	ip, r5
 8029da6:	46f2      	mov	sl, lr
 8029da8:	f850 2b04 	ldr.w	r2, [r0], #4
 8029dac:	b293      	uxth	r3, r2
 8029dae:	fb06 e303 	mla	r3, r6, r3, lr
 8029db2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8029db6:	b29b      	uxth	r3, r3
 8029db8:	ebaa 0303 	sub.w	r3, sl, r3
 8029dbc:	f8dc a000 	ldr.w	sl, [ip]
 8029dc0:	0c12      	lsrs	r2, r2, #16
 8029dc2:	fa13 f38a 	uxtah	r3, r3, sl
 8029dc6:	fb06 e202 	mla	r2, r6, r2, lr
 8029dca:	9300      	str	r3, [sp, #0]
 8029dcc:	9b00      	ldr	r3, [sp, #0]
 8029dce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8029dd2:	b292      	uxth	r2, r2
 8029dd4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8029dd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8029ddc:	f8bd 3000 	ldrh.w	r3, [sp]
 8029de0:	4581      	cmp	r9, r0
 8029de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8029de6:	f84c 3b04 	str.w	r3, [ip], #4
 8029dea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8029dee:	d2db      	bcs.n	8029da8 <quorem+0x44>
 8029df0:	f855 300b 	ldr.w	r3, [r5, fp]
 8029df4:	b92b      	cbnz	r3, 8029e02 <quorem+0x9e>
 8029df6:	9b01      	ldr	r3, [sp, #4]
 8029df8:	3b04      	subs	r3, #4
 8029dfa:	429d      	cmp	r5, r3
 8029dfc:	461a      	mov	r2, r3
 8029dfe:	d32e      	bcc.n	8029e5e <quorem+0xfa>
 8029e00:	613c      	str	r4, [r7, #16]
 8029e02:	4638      	mov	r0, r7
 8029e04:	f001 fddc 	bl	802b9c0 <__mcmp>
 8029e08:	2800      	cmp	r0, #0
 8029e0a:	db24      	blt.n	8029e56 <quorem+0xf2>
 8029e0c:	3601      	adds	r6, #1
 8029e0e:	4628      	mov	r0, r5
 8029e10:	f04f 0c00 	mov.w	ip, #0
 8029e14:	f858 2b04 	ldr.w	r2, [r8], #4
 8029e18:	f8d0 e000 	ldr.w	lr, [r0]
 8029e1c:	b293      	uxth	r3, r2
 8029e1e:	ebac 0303 	sub.w	r3, ip, r3
 8029e22:	0c12      	lsrs	r2, r2, #16
 8029e24:	fa13 f38e 	uxtah	r3, r3, lr
 8029e28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8029e2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8029e30:	b29b      	uxth	r3, r3
 8029e32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8029e36:	45c1      	cmp	r9, r8
 8029e38:	f840 3b04 	str.w	r3, [r0], #4
 8029e3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8029e40:	d2e8      	bcs.n	8029e14 <quorem+0xb0>
 8029e42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8029e46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8029e4a:	b922      	cbnz	r2, 8029e56 <quorem+0xf2>
 8029e4c:	3b04      	subs	r3, #4
 8029e4e:	429d      	cmp	r5, r3
 8029e50:	461a      	mov	r2, r3
 8029e52:	d30a      	bcc.n	8029e6a <quorem+0x106>
 8029e54:	613c      	str	r4, [r7, #16]
 8029e56:	4630      	mov	r0, r6
 8029e58:	b003      	add	sp, #12
 8029e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029e5e:	6812      	ldr	r2, [r2, #0]
 8029e60:	3b04      	subs	r3, #4
 8029e62:	2a00      	cmp	r2, #0
 8029e64:	d1cc      	bne.n	8029e00 <quorem+0x9c>
 8029e66:	3c01      	subs	r4, #1
 8029e68:	e7c7      	b.n	8029dfa <quorem+0x96>
 8029e6a:	6812      	ldr	r2, [r2, #0]
 8029e6c:	3b04      	subs	r3, #4
 8029e6e:	2a00      	cmp	r2, #0
 8029e70:	d1f0      	bne.n	8029e54 <quorem+0xf0>
 8029e72:	3c01      	subs	r4, #1
 8029e74:	e7eb      	b.n	8029e4e <quorem+0xea>
 8029e76:	2000      	movs	r0, #0
 8029e78:	e7ee      	b.n	8029e58 <quorem+0xf4>
 8029e7a:	0000      	movs	r0, r0
 8029e7c:	0000      	movs	r0, r0
	...

08029e80 <_dtoa_r>:
 8029e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029e84:	ed2d 8b04 	vpush	{d8-d9}
 8029e88:	ec57 6b10 	vmov	r6, r7, d0
 8029e8c:	b093      	sub	sp, #76	; 0x4c
 8029e8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8029e90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8029e94:	9106      	str	r1, [sp, #24]
 8029e96:	ee10 aa10 	vmov	sl, s0
 8029e9a:	4604      	mov	r4, r0
 8029e9c:	9209      	str	r2, [sp, #36]	; 0x24
 8029e9e:	930c      	str	r3, [sp, #48]	; 0x30
 8029ea0:	46bb      	mov	fp, r7
 8029ea2:	b975      	cbnz	r5, 8029ec2 <_dtoa_r+0x42>
 8029ea4:	2010      	movs	r0, #16
 8029ea6:	f7fd ff0f 	bl	8027cc8 <malloc>
 8029eaa:	4602      	mov	r2, r0
 8029eac:	6260      	str	r0, [r4, #36]	; 0x24
 8029eae:	b920      	cbnz	r0, 8029eba <_dtoa_r+0x3a>
 8029eb0:	4ba7      	ldr	r3, [pc, #668]	; (802a150 <_dtoa_r+0x2d0>)
 8029eb2:	21ea      	movs	r1, #234	; 0xea
 8029eb4:	48a7      	ldr	r0, [pc, #668]	; (802a154 <_dtoa_r+0x2d4>)
 8029eb6:	f7fd fd9f 	bl	80279f8 <__assert_func>
 8029eba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8029ebe:	6005      	str	r5, [r0, #0]
 8029ec0:	60c5      	str	r5, [r0, #12]
 8029ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029ec4:	6819      	ldr	r1, [r3, #0]
 8029ec6:	b151      	cbz	r1, 8029ede <_dtoa_r+0x5e>
 8029ec8:	685a      	ldr	r2, [r3, #4]
 8029eca:	604a      	str	r2, [r1, #4]
 8029ecc:	2301      	movs	r3, #1
 8029ece:	4093      	lsls	r3, r2
 8029ed0:	608b      	str	r3, [r1, #8]
 8029ed2:	4620      	mov	r0, r4
 8029ed4:	f001 fae8 	bl	802b4a8 <_Bfree>
 8029ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029eda:	2200      	movs	r2, #0
 8029edc:	601a      	str	r2, [r3, #0]
 8029ede:	1e3b      	subs	r3, r7, #0
 8029ee0:	bfaa      	itet	ge
 8029ee2:	2300      	movge	r3, #0
 8029ee4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8029ee8:	f8c8 3000 	strge.w	r3, [r8]
 8029eec:	4b9a      	ldr	r3, [pc, #616]	; (802a158 <_dtoa_r+0x2d8>)
 8029eee:	bfbc      	itt	lt
 8029ef0:	2201      	movlt	r2, #1
 8029ef2:	f8c8 2000 	strlt.w	r2, [r8]
 8029ef6:	ea33 030b 	bics.w	r3, r3, fp
 8029efa:	d11b      	bne.n	8029f34 <_dtoa_r+0xb4>
 8029efc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029efe:	f242 730f 	movw	r3, #9999	; 0x270f
 8029f02:	6013      	str	r3, [r2, #0]
 8029f04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8029f08:	4333      	orrs	r3, r6
 8029f0a:	f000 8592 	beq.w	802aa32 <_dtoa_r+0xbb2>
 8029f0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8029f10:	b963      	cbnz	r3, 8029f2c <_dtoa_r+0xac>
 8029f12:	4b92      	ldr	r3, [pc, #584]	; (802a15c <_dtoa_r+0x2dc>)
 8029f14:	e022      	b.n	8029f5c <_dtoa_r+0xdc>
 8029f16:	4b92      	ldr	r3, [pc, #584]	; (802a160 <_dtoa_r+0x2e0>)
 8029f18:	9301      	str	r3, [sp, #4]
 8029f1a:	3308      	adds	r3, #8
 8029f1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8029f1e:	6013      	str	r3, [r2, #0]
 8029f20:	9801      	ldr	r0, [sp, #4]
 8029f22:	b013      	add	sp, #76	; 0x4c
 8029f24:	ecbd 8b04 	vpop	{d8-d9}
 8029f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029f2c:	4b8b      	ldr	r3, [pc, #556]	; (802a15c <_dtoa_r+0x2dc>)
 8029f2e:	9301      	str	r3, [sp, #4]
 8029f30:	3303      	adds	r3, #3
 8029f32:	e7f3      	b.n	8029f1c <_dtoa_r+0x9c>
 8029f34:	2200      	movs	r2, #0
 8029f36:	2300      	movs	r3, #0
 8029f38:	4650      	mov	r0, sl
 8029f3a:	4659      	mov	r1, fp
 8029f3c:	f7d6 fdc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8029f40:	ec4b ab19 	vmov	d9, sl, fp
 8029f44:	4680      	mov	r8, r0
 8029f46:	b158      	cbz	r0, 8029f60 <_dtoa_r+0xe0>
 8029f48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029f4a:	2301      	movs	r3, #1
 8029f4c:	6013      	str	r3, [r2, #0]
 8029f4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8029f50:	2b00      	cmp	r3, #0
 8029f52:	f000 856b 	beq.w	802aa2c <_dtoa_r+0xbac>
 8029f56:	4883      	ldr	r0, [pc, #524]	; (802a164 <_dtoa_r+0x2e4>)
 8029f58:	6018      	str	r0, [r3, #0]
 8029f5a:	1e43      	subs	r3, r0, #1
 8029f5c:	9301      	str	r3, [sp, #4]
 8029f5e:	e7df      	b.n	8029f20 <_dtoa_r+0xa0>
 8029f60:	ec4b ab10 	vmov	d0, sl, fp
 8029f64:	aa10      	add	r2, sp, #64	; 0x40
 8029f66:	a911      	add	r1, sp, #68	; 0x44
 8029f68:	4620      	mov	r0, r4
 8029f6a:	f001 fe4b 	bl	802bc04 <__d2b>
 8029f6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8029f72:	ee08 0a10 	vmov	s16, r0
 8029f76:	2d00      	cmp	r5, #0
 8029f78:	f000 8084 	beq.w	802a084 <_dtoa_r+0x204>
 8029f7c:	ee19 3a90 	vmov	r3, s19
 8029f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8029f84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8029f88:	4656      	mov	r6, sl
 8029f8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8029f8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8029f92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8029f96:	4b74      	ldr	r3, [pc, #464]	; (802a168 <_dtoa_r+0x2e8>)
 8029f98:	2200      	movs	r2, #0
 8029f9a:	4630      	mov	r0, r6
 8029f9c:	4639      	mov	r1, r7
 8029f9e:	f7d6 f973 	bl	8000288 <__aeabi_dsub>
 8029fa2:	a365      	add	r3, pc, #404	; (adr r3, 802a138 <_dtoa_r+0x2b8>)
 8029fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029fa8:	f7d6 fb26 	bl	80005f8 <__aeabi_dmul>
 8029fac:	a364      	add	r3, pc, #400	; (adr r3, 802a140 <_dtoa_r+0x2c0>)
 8029fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029fb2:	f7d6 f96b 	bl	800028c <__adddf3>
 8029fb6:	4606      	mov	r6, r0
 8029fb8:	4628      	mov	r0, r5
 8029fba:	460f      	mov	r7, r1
 8029fbc:	f7d6 fab2 	bl	8000524 <__aeabi_i2d>
 8029fc0:	a361      	add	r3, pc, #388	; (adr r3, 802a148 <_dtoa_r+0x2c8>)
 8029fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029fc6:	f7d6 fb17 	bl	80005f8 <__aeabi_dmul>
 8029fca:	4602      	mov	r2, r0
 8029fcc:	460b      	mov	r3, r1
 8029fce:	4630      	mov	r0, r6
 8029fd0:	4639      	mov	r1, r7
 8029fd2:	f7d6 f95b 	bl	800028c <__adddf3>
 8029fd6:	4606      	mov	r6, r0
 8029fd8:	460f      	mov	r7, r1
 8029fda:	f7d6 fdbd 	bl	8000b58 <__aeabi_d2iz>
 8029fde:	2200      	movs	r2, #0
 8029fe0:	9000      	str	r0, [sp, #0]
 8029fe2:	2300      	movs	r3, #0
 8029fe4:	4630      	mov	r0, r6
 8029fe6:	4639      	mov	r1, r7
 8029fe8:	f7d6 fd78 	bl	8000adc <__aeabi_dcmplt>
 8029fec:	b150      	cbz	r0, 802a004 <_dtoa_r+0x184>
 8029fee:	9800      	ldr	r0, [sp, #0]
 8029ff0:	f7d6 fa98 	bl	8000524 <__aeabi_i2d>
 8029ff4:	4632      	mov	r2, r6
 8029ff6:	463b      	mov	r3, r7
 8029ff8:	f7d6 fd66 	bl	8000ac8 <__aeabi_dcmpeq>
 8029ffc:	b910      	cbnz	r0, 802a004 <_dtoa_r+0x184>
 8029ffe:	9b00      	ldr	r3, [sp, #0]
 802a000:	3b01      	subs	r3, #1
 802a002:	9300      	str	r3, [sp, #0]
 802a004:	9b00      	ldr	r3, [sp, #0]
 802a006:	2b16      	cmp	r3, #22
 802a008:	d85a      	bhi.n	802a0c0 <_dtoa_r+0x240>
 802a00a:	9a00      	ldr	r2, [sp, #0]
 802a00c:	4b57      	ldr	r3, [pc, #348]	; (802a16c <_dtoa_r+0x2ec>)
 802a00e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802a012:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a016:	ec51 0b19 	vmov	r0, r1, d9
 802a01a:	f7d6 fd5f 	bl	8000adc <__aeabi_dcmplt>
 802a01e:	2800      	cmp	r0, #0
 802a020:	d050      	beq.n	802a0c4 <_dtoa_r+0x244>
 802a022:	9b00      	ldr	r3, [sp, #0]
 802a024:	3b01      	subs	r3, #1
 802a026:	9300      	str	r3, [sp, #0]
 802a028:	2300      	movs	r3, #0
 802a02a:	930b      	str	r3, [sp, #44]	; 0x2c
 802a02c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802a02e:	1b5d      	subs	r5, r3, r5
 802a030:	1e6b      	subs	r3, r5, #1
 802a032:	9305      	str	r3, [sp, #20]
 802a034:	bf45      	ittet	mi
 802a036:	f1c5 0301 	rsbmi	r3, r5, #1
 802a03a:	9304      	strmi	r3, [sp, #16]
 802a03c:	2300      	movpl	r3, #0
 802a03e:	2300      	movmi	r3, #0
 802a040:	bf4c      	ite	mi
 802a042:	9305      	strmi	r3, [sp, #20]
 802a044:	9304      	strpl	r3, [sp, #16]
 802a046:	9b00      	ldr	r3, [sp, #0]
 802a048:	2b00      	cmp	r3, #0
 802a04a:	db3d      	blt.n	802a0c8 <_dtoa_r+0x248>
 802a04c:	9b05      	ldr	r3, [sp, #20]
 802a04e:	9a00      	ldr	r2, [sp, #0]
 802a050:	920a      	str	r2, [sp, #40]	; 0x28
 802a052:	4413      	add	r3, r2
 802a054:	9305      	str	r3, [sp, #20]
 802a056:	2300      	movs	r3, #0
 802a058:	9307      	str	r3, [sp, #28]
 802a05a:	9b06      	ldr	r3, [sp, #24]
 802a05c:	2b09      	cmp	r3, #9
 802a05e:	f200 8089 	bhi.w	802a174 <_dtoa_r+0x2f4>
 802a062:	2b05      	cmp	r3, #5
 802a064:	bfc4      	itt	gt
 802a066:	3b04      	subgt	r3, #4
 802a068:	9306      	strgt	r3, [sp, #24]
 802a06a:	9b06      	ldr	r3, [sp, #24]
 802a06c:	f1a3 0302 	sub.w	r3, r3, #2
 802a070:	bfcc      	ite	gt
 802a072:	2500      	movgt	r5, #0
 802a074:	2501      	movle	r5, #1
 802a076:	2b03      	cmp	r3, #3
 802a078:	f200 8087 	bhi.w	802a18a <_dtoa_r+0x30a>
 802a07c:	e8df f003 	tbb	[pc, r3]
 802a080:	59383a2d 	.word	0x59383a2d
 802a084:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 802a088:	441d      	add	r5, r3
 802a08a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802a08e:	2b20      	cmp	r3, #32
 802a090:	bfc1      	itttt	gt
 802a092:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802a096:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 802a09a:	fa0b f303 	lslgt.w	r3, fp, r3
 802a09e:	fa26 f000 	lsrgt.w	r0, r6, r0
 802a0a2:	bfda      	itte	le
 802a0a4:	f1c3 0320 	rsble	r3, r3, #32
 802a0a8:	fa06 f003 	lslle.w	r0, r6, r3
 802a0ac:	4318      	orrgt	r0, r3
 802a0ae:	f7d6 fa29 	bl	8000504 <__aeabi_ui2d>
 802a0b2:	2301      	movs	r3, #1
 802a0b4:	4606      	mov	r6, r0
 802a0b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 802a0ba:	3d01      	subs	r5, #1
 802a0bc:	930e      	str	r3, [sp, #56]	; 0x38
 802a0be:	e76a      	b.n	8029f96 <_dtoa_r+0x116>
 802a0c0:	2301      	movs	r3, #1
 802a0c2:	e7b2      	b.n	802a02a <_dtoa_r+0x1aa>
 802a0c4:	900b      	str	r0, [sp, #44]	; 0x2c
 802a0c6:	e7b1      	b.n	802a02c <_dtoa_r+0x1ac>
 802a0c8:	9b04      	ldr	r3, [sp, #16]
 802a0ca:	9a00      	ldr	r2, [sp, #0]
 802a0cc:	1a9b      	subs	r3, r3, r2
 802a0ce:	9304      	str	r3, [sp, #16]
 802a0d0:	4253      	negs	r3, r2
 802a0d2:	9307      	str	r3, [sp, #28]
 802a0d4:	2300      	movs	r3, #0
 802a0d6:	930a      	str	r3, [sp, #40]	; 0x28
 802a0d8:	e7bf      	b.n	802a05a <_dtoa_r+0x1da>
 802a0da:	2300      	movs	r3, #0
 802a0dc:	9308      	str	r3, [sp, #32]
 802a0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a0e0:	2b00      	cmp	r3, #0
 802a0e2:	dc55      	bgt.n	802a190 <_dtoa_r+0x310>
 802a0e4:	2301      	movs	r3, #1
 802a0e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802a0ea:	461a      	mov	r2, r3
 802a0ec:	9209      	str	r2, [sp, #36]	; 0x24
 802a0ee:	e00c      	b.n	802a10a <_dtoa_r+0x28a>
 802a0f0:	2301      	movs	r3, #1
 802a0f2:	e7f3      	b.n	802a0dc <_dtoa_r+0x25c>
 802a0f4:	2300      	movs	r3, #0
 802a0f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a0f8:	9308      	str	r3, [sp, #32]
 802a0fa:	9b00      	ldr	r3, [sp, #0]
 802a0fc:	4413      	add	r3, r2
 802a0fe:	9302      	str	r3, [sp, #8]
 802a100:	3301      	adds	r3, #1
 802a102:	2b01      	cmp	r3, #1
 802a104:	9303      	str	r3, [sp, #12]
 802a106:	bfb8      	it	lt
 802a108:	2301      	movlt	r3, #1
 802a10a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802a10c:	2200      	movs	r2, #0
 802a10e:	6042      	str	r2, [r0, #4]
 802a110:	2204      	movs	r2, #4
 802a112:	f102 0614 	add.w	r6, r2, #20
 802a116:	429e      	cmp	r6, r3
 802a118:	6841      	ldr	r1, [r0, #4]
 802a11a:	d93d      	bls.n	802a198 <_dtoa_r+0x318>
 802a11c:	4620      	mov	r0, r4
 802a11e:	f001 f983 	bl	802b428 <_Balloc>
 802a122:	9001      	str	r0, [sp, #4]
 802a124:	2800      	cmp	r0, #0
 802a126:	d13b      	bne.n	802a1a0 <_dtoa_r+0x320>
 802a128:	4b11      	ldr	r3, [pc, #68]	; (802a170 <_dtoa_r+0x2f0>)
 802a12a:	4602      	mov	r2, r0
 802a12c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 802a130:	e6c0      	b.n	8029eb4 <_dtoa_r+0x34>
 802a132:	2301      	movs	r3, #1
 802a134:	e7df      	b.n	802a0f6 <_dtoa_r+0x276>
 802a136:	bf00      	nop
 802a138:	636f4361 	.word	0x636f4361
 802a13c:	3fd287a7 	.word	0x3fd287a7
 802a140:	8b60c8b3 	.word	0x8b60c8b3
 802a144:	3fc68a28 	.word	0x3fc68a28
 802a148:	509f79fb 	.word	0x509f79fb
 802a14c:	3fd34413 	.word	0x3fd34413
 802a150:	0802f2a6 	.word	0x0802f2a6
 802a154:	0802f2bd 	.word	0x0802f2bd
 802a158:	7ff00000 	.word	0x7ff00000
 802a15c:	0802f2a2 	.word	0x0802f2a2
 802a160:	0802f299 	.word	0x0802f299
 802a164:	0802f11a 	.word	0x0802f11a
 802a168:	3ff80000 	.word	0x3ff80000
 802a16c:	0802f428 	.word	0x0802f428
 802a170:	0802f318 	.word	0x0802f318
 802a174:	2501      	movs	r5, #1
 802a176:	2300      	movs	r3, #0
 802a178:	9306      	str	r3, [sp, #24]
 802a17a:	9508      	str	r5, [sp, #32]
 802a17c:	f04f 33ff 	mov.w	r3, #4294967295
 802a180:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802a184:	2200      	movs	r2, #0
 802a186:	2312      	movs	r3, #18
 802a188:	e7b0      	b.n	802a0ec <_dtoa_r+0x26c>
 802a18a:	2301      	movs	r3, #1
 802a18c:	9308      	str	r3, [sp, #32]
 802a18e:	e7f5      	b.n	802a17c <_dtoa_r+0x2fc>
 802a190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a192:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802a196:	e7b8      	b.n	802a10a <_dtoa_r+0x28a>
 802a198:	3101      	adds	r1, #1
 802a19a:	6041      	str	r1, [r0, #4]
 802a19c:	0052      	lsls	r2, r2, #1
 802a19e:	e7b8      	b.n	802a112 <_dtoa_r+0x292>
 802a1a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802a1a2:	9a01      	ldr	r2, [sp, #4]
 802a1a4:	601a      	str	r2, [r3, #0]
 802a1a6:	9b03      	ldr	r3, [sp, #12]
 802a1a8:	2b0e      	cmp	r3, #14
 802a1aa:	f200 809d 	bhi.w	802a2e8 <_dtoa_r+0x468>
 802a1ae:	2d00      	cmp	r5, #0
 802a1b0:	f000 809a 	beq.w	802a2e8 <_dtoa_r+0x468>
 802a1b4:	9b00      	ldr	r3, [sp, #0]
 802a1b6:	2b00      	cmp	r3, #0
 802a1b8:	dd32      	ble.n	802a220 <_dtoa_r+0x3a0>
 802a1ba:	4ab7      	ldr	r2, [pc, #732]	; (802a498 <_dtoa_r+0x618>)
 802a1bc:	f003 030f 	and.w	r3, r3, #15
 802a1c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 802a1c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 802a1c8:	9b00      	ldr	r3, [sp, #0]
 802a1ca:	05d8      	lsls	r0, r3, #23
 802a1cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 802a1d0:	d516      	bpl.n	802a200 <_dtoa_r+0x380>
 802a1d2:	4bb2      	ldr	r3, [pc, #712]	; (802a49c <_dtoa_r+0x61c>)
 802a1d4:	ec51 0b19 	vmov	r0, r1, d9
 802a1d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802a1dc:	f7d6 fb36 	bl	800084c <__aeabi_ddiv>
 802a1e0:	f007 070f 	and.w	r7, r7, #15
 802a1e4:	4682      	mov	sl, r0
 802a1e6:	468b      	mov	fp, r1
 802a1e8:	2503      	movs	r5, #3
 802a1ea:	4eac      	ldr	r6, [pc, #688]	; (802a49c <_dtoa_r+0x61c>)
 802a1ec:	b957      	cbnz	r7, 802a204 <_dtoa_r+0x384>
 802a1ee:	4642      	mov	r2, r8
 802a1f0:	464b      	mov	r3, r9
 802a1f2:	4650      	mov	r0, sl
 802a1f4:	4659      	mov	r1, fp
 802a1f6:	f7d6 fb29 	bl	800084c <__aeabi_ddiv>
 802a1fa:	4682      	mov	sl, r0
 802a1fc:	468b      	mov	fp, r1
 802a1fe:	e028      	b.n	802a252 <_dtoa_r+0x3d2>
 802a200:	2502      	movs	r5, #2
 802a202:	e7f2      	b.n	802a1ea <_dtoa_r+0x36a>
 802a204:	07f9      	lsls	r1, r7, #31
 802a206:	d508      	bpl.n	802a21a <_dtoa_r+0x39a>
 802a208:	4640      	mov	r0, r8
 802a20a:	4649      	mov	r1, r9
 802a20c:	e9d6 2300 	ldrd	r2, r3, [r6]
 802a210:	f7d6 f9f2 	bl	80005f8 <__aeabi_dmul>
 802a214:	3501      	adds	r5, #1
 802a216:	4680      	mov	r8, r0
 802a218:	4689      	mov	r9, r1
 802a21a:	107f      	asrs	r7, r7, #1
 802a21c:	3608      	adds	r6, #8
 802a21e:	e7e5      	b.n	802a1ec <_dtoa_r+0x36c>
 802a220:	f000 809b 	beq.w	802a35a <_dtoa_r+0x4da>
 802a224:	9b00      	ldr	r3, [sp, #0]
 802a226:	4f9d      	ldr	r7, [pc, #628]	; (802a49c <_dtoa_r+0x61c>)
 802a228:	425e      	negs	r6, r3
 802a22a:	4b9b      	ldr	r3, [pc, #620]	; (802a498 <_dtoa_r+0x618>)
 802a22c:	f006 020f 	and.w	r2, r6, #15
 802a230:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802a234:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a238:	ec51 0b19 	vmov	r0, r1, d9
 802a23c:	f7d6 f9dc 	bl	80005f8 <__aeabi_dmul>
 802a240:	1136      	asrs	r6, r6, #4
 802a242:	4682      	mov	sl, r0
 802a244:	468b      	mov	fp, r1
 802a246:	2300      	movs	r3, #0
 802a248:	2502      	movs	r5, #2
 802a24a:	2e00      	cmp	r6, #0
 802a24c:	d17a      	bne.n	802a344 <_dtoa_r+0x4c4>
 802a24e:	2b00      	cmp	r3, #0
 802a250:	d1d3      	bne.n	802a1fa <_dtoa_r+0x37a>
 802a252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a254:	2b00      	cmp	r3, #0
 802a256:	f000 8082 	beq.w	802a35e <_dtoa_r+0x4de>
 802a25a:	4b91      	ldr	r3, [pc, #580]	; (802a4a0 <_dtoa_r+0x620>)
 802a25c:	2200      	movs	r2, #0
 802a25e:	4650      	mov	r0, sl
 802a260:	4659      	mov	r1, fp
 802a262:	f7d6 fc3b 	bl	8000adc <__aeabi_dcmplt>
 802a266:	2800      	cmp	r0, #0
 802a268:	d079      	beq.n	802a35e <_dtoa_r+0x4de>
 802a26a:	9b03      	ldr	r3, [sp, #12]
 802a26c:	2b00      	cmp	r3, #0
 802a26e:	d076      	beq.n	802a35e <_dtoa_r+0x4de>
 802a270:	9b02      	ldr	r3, [sp, #8]
 802a272:	2b00      	cmp	r3, #0
 802a274:	dd36      	ble.n	802a2e4 <_dtoa_r+0x464>
 802a276:	9b00      	ldr	r3, [sp, #0]
 802a278:	4650      	mov	r0, sl
 802a27a:	4659      	mov	r1, fp
 802a27c:	1e5f      	subs	r7, r3, #1
 802a27e:	2200      	movs	r2, #0
 802a280:	4b88      	ldr	r3, [pc, #544]	; (802a4a4 <_dtoa_r+0x624>)
 802a282:	f7d6 f9b9 	bl	80005f8 <__aeabi_dmul>
 802a286:	9e02      	ldr	r6, [sp, #8]
 802a288:	4682      	mov	sl, r0
 802a28a:	468b      	mov	fp, r1
 802a28c:	3501      	adds	r5, #1
 802a28e:	4628      	mov	r0, r5
 802a290:	f7d6 f948 	bl	8000524 <__aeabi_i2d>
 802a294:	4652      	mov	r2, sl
 802a296:	465b      	mov	r3, fp
 802a298:	f7d6 f9ae 	bl	80005f8 <__aeabi_dmul>
 802a29c:	4b82      	ldr	r3, [pc, #520]	; (802a4a8 <_dtoa_r+0x628>)
 802a29e:	2200      	movs	r2, #0
 802a2a0:	f7d5 fff4 	bl	800028c <__adddf3>
 802a2a4:	46d0      	mov	r8, sl
 802a2a6:	46d9      	mov	r9, fp
 802a2a8:	4682      	mov	sl, r0
 802a2aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 802a2ae:	2e00      	cmp	r6, #0
 802a2b0:	d158      	bne.n	802a364 <_dtoa_r+0x4e4>
 802a2b2:	4b7e      	ldr	r3, [pc, #504]	; (802a4ac <_dtoa_r+0x62c>)
 802a2b4:	2200      	movs	r2, #0
 802a2b6:	4640      	mov	r0, r8
 802a2b8:	4649      	mov	r1, r9
 802a2ba:	f7d5 ffe5 	bl	8000288 <__aeabi_dsub>
 802a2be:	4652      	mov	r2, sl
 802a2c0:	465b      	mov	r3, fp
 802a2c2:	4680      	mov	r8, r0
 802a2c4:	4689      	mov	r9, r1
 802a2c6:	f7d6 fc27 	bl	8000b18 <__aeabi_dcmpgt>
 802a2ca:	2800      	cmp	r0, #0
 802a2cc:	f040 8295 	bne.w	802a7fa <_dtoa_r+0x97a>
 802a2d0:	4652      	mov	r2, sl
 802a2d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 802a2d6:	4640      	mov	r0, r8
 802a2d8:	4649      	mov	r1, r9
 802a2da:	f7d6 fbff 	bl	8000adc <__aeabi_dcmplt>
 802a2de:	2800      	cmp	r0, #0
 802a2e0:	f040 8289 	bne.w	802a7f6 <_dtoa_r+0x976>
 802a2e4:	ec5b ab19 	vmov	sl, fp, d9
 802a2e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802a2ea:	2b00      	cmp	r3, #0
 802a2ec:	f2c0 8148 	blt.w	802a580 <_dtoa_r+0x700>
 802a2f0:	9a00      	ldr	r2, [sp, #0]
 802a2f2:	2a0e      	cmp	r2, #14
 802a2f4:	f300 8144 	bgt.w	802a580 <_dtoa_r+0x700>
 802a2f8:	4b67      	ldr	r3, [pc, #412]	; (802a498 <_dtoa_r+0x618>)
 802a2fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802a2fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 802a302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a304:	2b00      	cmp	r3, #0
 802a306:	f280 80d5 	bge.w	802a4b4 <_dtoa_r+0x634>
 802a30a:	9b03      	ldr	r3, [sp, #12]
 802a30c:	2b00      	cmp	r3, #0
 802a30e:	f300 80d1 	bgt.w	802a4b4 <_dtoa_r+0x634>
 802a312:	f040 826f 	bne.w	802a7f4 <_dtoa_r+0x974>
 802a316:	4b65      	ldr	r3, [pc, #404]	; (802a4ac <_dtoa_r+0x62c>)
 802a318:	2200      	movs	r2, #0
 802a31a:	4640      	mov	r0, r8
 802a31c:	4649      	mov	r1, r9
 802a31e:	f7d6 f96b 	bl	80005f8 <__aeabi_dmul>
 802a322:	4652      	mov	r2, sl
 802a324:	465b      	mov	r3, fp
 802a326:	f7d6 fbed 	bl	8000b04 <__aeabi_dcmpge>
 802a32a:	9e03      	ldr	r6, [sp, #12]
 802a32c:	4637      	mov	r7, r6
 802a32e:	2800      	cmp	r0, #0
 802a330:	f040 8245 	bne.w	802a7be <_dtoa_r+0x93e>
 802a334:	9d01      	ldr	r5, [sp, #4]
 802a336:	2331      	movs	r3, #49	; 0x31
 802a338:	f805 3b01 	strb.w	r3, [r5], #1
 802a33c:	9b00      	ldr	r3, [sp, #0]
 802a33e:	3301      	adds	r3, #1
 802a340:	9300      	str	r3, [sp, #0]
 802a342:	e240      	b.n	802a7c6 <_dtoa_r+0x946>
 802a344:	07f2      	lsls	r2, r6, #31
 802a346:	d505      	bpl.n	802a354 <_dtoa_r+0x4d4>
 802a348:	e9d7 2300 	ldrd	r2, r3, [r7]
 802a34c:	f7d6 f954 	bl	80005f8 <__aeabi_dmul>
 802a350:	3501      	adds	r5, #1
 802a352:	2301      	movs	r3, #1
 802a354:	1076      	asrs	r6, r6, #1
 802a356:	3708      	adds	r7, #8
 802a358:	e777      	b.n	802a24a <_dtoa_r+0x3ca>
 802a35a:	2502      	movs	r5, #2
 802a35c:	e779      	b.n	802a252 <_dtoa_r+0x3d2>
 802a35e:	9f00      	ldr	r7, [sp, #0]
 802a360:	9e03      	ldr	r6, [sp, #12]
 802a362:	e794      	b.n	802a28e <_dtoa_r+0x40e>
 802a364:	9901      	ldr	r1, [sp, #4]
 802a366:	4b4c      	ldr	r3, [pc, #304]	; (802a498 <_dtoa_r+0x618>)
 802a368:	4431      	add	r1, r6
 802a36a:	910d      	str	r1, [sp, #52]	; 0x34
 802a36c:	9908      	ldr	r1, [sp, #32]
 802a36e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802a372:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802a376:	2900      	cmp	r1, #0
 802a378:	d043      	beq.n	802a402 <_dtoa_r+0x582>
 802a37a:	494d      	ldr	r1, [pc, #308]	; (802a4b0 <_dtoa_r+0x630>)
 802a37c:	2000      	movs	r0, #0
 802a37e:	f7d6 fa65 	bl	800084c <__aeabi_ddiv>
 802a382:	4652      	mov	r2, sl
 802a384:	465b      	mov	r3, fp
 802a386:	f7d5 ff7f 	bl	8000288 <__aeabi_dsub>
 802a38a:	9d01      	ldr	r5, [sp, #4]
 802a38c:	4682      	mov	sl, r0
 802a38e:	468b      	mov	fp, r1
 802a390:	4649      	mov	r1, r9
 802a392:	4640      	mov	r0, r8
 802a394:	f7d6 fbe0 	bl	8000b58 <__aeabi_d2iz>
 802a398:	4606      	mov	r6, r0
 802a39a:	f7d6 f8c3 	bl	8000524 <__aeabi_i2d>
 802a39e:	4602      	mov	r2, r0
 802a3a0:	460b      	mov	r3, r1
 802a3a2:	4640      	mov	r0, r8
 802a3a4:	4649      	mov	r1, r9
 802a3a6:	f7d5 ff6f 	bl	8000288 <__aeabi_dsub>
 802a3aa:	3630      	adds	r6, #48	; 0x30
 802a3ac:	f805 6b01 	strb.w	r6, [r5], #1
 802a3b0:	4652      	mov	r2, sl
 802a3b2:	465b      	mov	r3, fp
 802a3b4:	4680      	mov	r8, r0
 802a3b6:	4689      	mov	r9, r1
 802a3b8:	f7d6 fb90 	bl	8000adc <__aeabi_dcmplt>
 802a3bc:	2800      	cmp	r0, #0
 802a3be:	d163      	bne.n	802a488 <_dtoa_r+0x608>
 802a3c0:	4642      	mov	r2, r8
 802a3c2:	464b      	mov	r3, r9
 802a3c4:	4936      	ldr	r1, [pc, #216]	; (802a4a0 <_dtoa_r+0x620>)
 802a3c6:	2000      	movs	r0, #0
 802a3c8:	f7d5 ff5e 	bl	8000288 <__aeabi_dsub>
 802a3cc:	4652      	mov	r2, sl
 802a3ce:	465b      	mov	r3, fp
 802a3d0:	f7d6 fb84 	bl	8000adc <__aeabi_dcmplt>
 802a3d4:	2800      	cmp	r0, #0
 802a3d6:	f040 80b5 	bne.w	802a544 <_dtoa_r+0x6c4>
 802a3da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a3dc:	429d      	cmp	r5, r3
 802a3de:	d081      	beq.n	802a2e4 <_dtoa_r+0x464>
 802a3e0:	4b30      	ldr	r3, [pc, #192]	; (802a4a4 <_dtoa_r+0x624>)
 802a3e2:	2200      	movs	r2, #0
 802a3e4:	4650      	mov	r0, sl
 802a3e6:	4659      	mov	r1, fp
 802a3e8:	f7d6 f906 	bl	80005f8 <__aeabi_dmul>
 802a3ec:	4b2d      	ldr	r3, [pc, #180]	; (802a4a4 <_dtoa_r+0x624>)
 802a3ee:	4682      	mov	sl, r0
 802a3f0:	468b      	mov	fp, r1
 802a3f2:	4640      	mov	r0, r8
 802a3f4:	4649      	mov	r1, r9
 802a3f6:	2200      	movs	r2, #0
 802a3f8:	f7d6 f8fe 	bl	80005f8 <__aeabi_dmul>
 802a3fc:	4680      	mov	r8, r0
 802a3fe:	4689      	mov	r9, r1
 802a400:	e7c6      	b.n	802a390 <_dtoa_r+0x510>
 802a402:	4650      	mov	r0, sl
 802a404:	4659      	mov	r1, fp
 802a406:	f7d6 f8f7 	bl	80005f8 <__aeabi_dmul>
 802a40a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a40c:	9d01      	ldr	r5, [sp, #4]
 802a40e:	930f      	str	r3, [sp, #60]	; 0x3c
 802a410:	4682      	mov	sl, r0
 802a412:	468b      	mov	fp, r1
 802a414:	4649      	mov	r1, r9
 802a416:	4640      	mov	r0, r8
 802a418:	f7d6 fb9e 	bl	8000b58 <__aeabi_d2iz>
 802a41c:	4606      	mov	r6, r0
 802a41e:	f7d6 f881 	bl	8000524 <__aeabi_i2d>
 802a422:	3630      	adds	r6, #48	; 0x30
 802a424:	4602      	mov	r2, r0
 802a426:	460b      	mov	r3, r1
 802a428:	4640      	mov	r0, r8
 802a42a:	4649      	mov	r1, r9
 802a42c:	f7d5 ff2c 	bl	8000288 <__aeabi_dsub>
 802a430:	f805 6b01 	strb.w	r6, [r5], #1
 802a434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a436:	429d      	cmp	r5, r3
 802a438:	4680      	mov	r8, r0
 802a43a:	4689      	mov	r9, r1
 802a43c:	f04f 0200 	mov.w	r2, #0
 802a440:	d124      	bne.n	802a48c <_dtoa_r+0x60c>
 802a442:	4b1b      	ldr	r3, [pc, #108]	; (802a4b0 <_dtoa_r+0x630>)
 802a444:	4650      	mov	r0, sl
 802a446:	4659      	mov	r1, fp
 802a448:	f7d5 ff20 	bl	800028c <__adddf3>
 802a44c:	4602      	mov	r2, r0
 802a44e:	460b      	mov	r3, r1
 802a450:	4640      	mov	r0, r8
 802a452:	4649      	mov	r1, r9
 802a454:	f7d6 fb60 	bl	8000b18 <__aeabi_dcmpgt>
 802a458:	2800      	cmp	r0, #0
 802a45a:	d173      	bne.n	802a544 <_dtoa_r+0x6c4>
 802a45c:	4652      	mov	r2, sl
 802a45e:	465b      	mov	r3, fp
 802a460:	4913      	ldr	r1, [pc, #76]	; (802a4b0 <_dtoa_r+0x630>)
 802a462:	2000      	movs	r0, #0
 802a464:	f7d5 ff10 	bl	8000288 <__aeabi_dsub>
 802a468:	4602      	mov	r2, r0
 802a46a:	460b      	mov	r3, r1
 802a46c:	4640      	mov	r0, r8
 802a46e:	4649      	mov	r1, r9
 802a470:	f7d6 fb34 	bl	8000adc <__aeabi_dcmplt>
 802a474:	2800      	cmp	r0, #0
 802a476:	f43f af35 	beq.w	802a2e4 <_dtoa_r+0x464>
 802a47a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a47c:	1e6b      	subs	r3, r5, #1
 802a47e:	930f      	str	r3, [sp, #60]	; 0x3c
 802a480:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802a484:	2b30      	cmp	r3, #48	; 0x30
 802a486:	d0f8      	beq.n	802a47a <_dtoa_r+0x5fa>
 802a488:	9700      	str	r7, [sp, #0]
 802a48a:	e049      	b.n	802a520 <_dtoa_r+0x6a0>
 802a48c:	4b05      	ldr	r3, [pc, #20]	; (802a4a4 <_dtoa_r+0x624>)
 802a48e:	f7d6 f8b3 	bl	80005f8 <__aeabi_dmul>
 802a492:	4680      	mov	r8, r0
 802a494:	4689      	mov	r9, r1
 802a496:	e7bd      	b.n	802a414 <_dtoa_r+0x594>
 802a498:	0802f428 	.word	0x0802f428
 802a49c:	0802f400 	.word	0x0802f400
 802a4a0:	3ff00000 	.word	0x3ff00000
 802a4a4:	40240000 	.word	0x40240000
 802a4a8:	401c0000 	.word	0x401c0000
 802a4ac:	40140000 	.word	0x40140000
 802a4b0:	3fe00000 	.word	0x3fe00000
 802a4b4:	9d01      	ldr	r5, [sp, #4]
 802a4b6:	4656      	mov	r6, sl
 802a4b8:	465f      	mov	r7, fp
 802a4ba:	4642      	mov	r2, r8
 802a4bc:	464b      	mov	r3, r9
 802a4be:	4630      	mov	r0, r6
 802a4c0:	4639      	mov	r1, r7
 802a4c2:	f7d6 f9c3 	bl	800084c <__aeabi_ddiv>
 802a4c6:	f7d6 fb47 	bl	8000b58 <__aeabi_d2iz>
 802a4ca:	4682      	mov	sl, r0
 802a4cc:	f7d6 f82a 	bl	8000524 <__aeabi_i2d>
 802a4d0:	4642      	mov	r2, r8
 802a4d2:	464b      	mov	r3, r9
 802a4d4:	f7d6 f890 	bl	80005f8 <__aeabi_dmul>
 802a4d8:	4602      	mov	r2, r0
 802a4da:	460b      	mov	r3, r1
 802a4dc:	4630      	mov	r0, r6
 802a4de:	4639      	mov	r1, r7
 802a4e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 802a4e4:	f7d5 fed0 	bl	8000288 <__aeabi_dsub>
 802a4e8:	f805 6b01 	strb.w	r6, [r5], #1
 802a4ec:	9e01      	ldr	r6, [sp, #4]
 802a4ee:	9f03      	ldr	r7, [sp, #12]
 802a4f0:	1bae      	subs	r6, r5, r6
 802a4f2:	42b7      	cmp	r7, r6
 802a4f4:	4602      	mov	r2, r0
 802a4f6:	460b      	mov	r3, r1
 802a4f8:	d135      	bne.n	802a566 <_dtoa_r+0x6e6>
 802a4fa:	f7d5 fec7 	bl	800028c <__adddf3>
 802a4fe:	4642      	mov	r2, r8
 802a500:	464b      	mov	r3, r9
 802a502:	4606      	mov	r6, r0
 802a504:	460f      	mov	r7, r1
 802a506:	f7d6 fb07 	bl	8000b18 <__aeabi_dcmpgt>
 802a50a:	b9d0      	cbnz	r0, 802a542 <_dtoa_r+0x6c2>
 802a50c:	4642      	mov	r2, r8
 802a50e:	464b      	mov	r3, r9
 802a510:	4630      	mov	r0, r6
 802a512:	4639      	mov	r1, r7
 802a514:	f7d6 fad8 	bl	8000ac8 <__aeabi_dcmpeq>
 802a518:	b110      	cbz	r0, 802a520 <_dtoa_r+0x6a0>
 802a51a:	f01a 0f01 	tst.w	sl, #1
 802a51e:	d110      	bne.n	802a542 <_dtoa_r+0x6c2>
 802a520:	4620      	mov	r0, r4
 802a522:	ee18 1a10 	vmov	r1, s16
 802a526:	f000 ffbf 	bl	802b4a8 <_Bfree>
 802a52a:	2300      	movs	r3, #0
 802a52c:	9800      	ldr	r0, [sp, #0]
 802a52e:	702b      	strb	r3, [r5, #0]
 802a530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a532:	3001      	adds	r0, #1
 802a534:	6018      	str	r0, [r3, #0]
 802a536:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802a538:	2b00      	cmp	r3, #0
 802a53a:	f43f acf1 	beq.w	8029f20 <_dtoa_r+0xa0>
 802a53e:	601d      	str	r5, [r3, #0]
 802a540:	e4ee      	b.n	8029f20 <_dtoa_r+0xa0>
 802a542:	9f00      	ldr	r7, [sp, #0]
 802a544:	462b      	mov	r3, r5
 802a546:	461d      	mov	r5, r3
 802a548:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802a54c:	2a39      	cmp	r2, #57	; 0x39
 802a54e:	d106      	bne.n	802a55e <_dtoa_r+0x6de>
 802a550:	9a01      	ldr	r2, [sp, #4]
 802a552:	429a      	cmp	r2, r3
 802a554:	d1f7      	bne.n	802a546 <_dtoa_r+0x6c6>
 802a556:	9901      	ldr	r1, [sp, #4]
 802a558:	2230      	movs	r2, #48	; 0x30
 802a55a:	3701      	adds	r7, #1
 802a55c:	700a      	strb	r2, [r1, #0]
 802a55e:	781a      	ldrb	r2, [r3, #0]
 802a560:	3201      	adds	r2, #1
 802a562:	701a      	strb	r2, [r3, #0]
 802a564:	e790      	b.n	802a488 <_dtoa_r+0x608>
 802a566:	4ba6      	ldr	r3, [pc, #664]	; (802a800 <_dtoa_r+0x980>)
 802a568:	2200      	movs	r2, #0
 802a56a:	f7d6 f845 	bl	80005f8 <__aeabi_dmul>
 802a56e:	2200      	movs	r2, #0
 802a570:	2300      	movs	r3, #0
 802a572:	4606      	mov	r6, r0
 802a574:	460f      	mov	r7, r1
 802a576:	f7d6 faa7 	bl	8000ac8 <__aeabi_dcmpeq>
 802a57a:	2800      	cmp	r0, #0
 802a57c:	d09d      	beq.n	802a4ba <_dtoa_r+0x63a>
 802a57e:	e7cf      	b.n	802a520 <_dtoa_r+0x6a0>
 802a580:	9a08      	ldr	r2, [sp, #32]
 802a582:	2a00      	cmp	r2, #0
 802a584:	f000 80d7 	beq.w	802a736 <_dtoa_r+0x8b6>
 802a588:	9a06      	ldr	r2, [sp, #24]
 802a58a:	2a01      	cmp	r2, #1
 802a58c:	f300 80ba 	bgt.w	802a704 <_dtoa_r+0x884>
 802a590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802a592:	2a00      	cmp	r2, #0
 802a594:	f000 80b2 	beq.w	802a6fc <_dtoa_r+0x87c>
 802a598:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802a59c:	9e07      	ldr	r6, [sp, #28]
 802a59e:	9d04      	ldr	r5, [sp, #16]
 802a5a0:	9a04      	ldr	r2, [sp, #16]
 802a5a2:	441a      	add	r2, r3
 802a5a4:	9204      	str	r2, [sp, #16]
 802a5a6:	9a05      	ldr	r2, [sp, #20]
 802a5a8:	2101      	movs	r1, #1
 802a5aa:	441a      	add	r2, r3
 802a5ac:	4620      	mov	r0, r4
 802a5ae:	9205      	str	r2, [sp, #20]
 802a5b0:	f001 f87c 	bl	802b6ac <__i2b>
 802a5b4:	4607      	mov	r7, r0
 802a5b6:	2d00      	cmp	r5, #0
 802a5b8:	dd0c      	ble.n	802a5d4 <_dtoa_r+0x754>
 802a5ba:	9b05      	ldr	r3, [sp, #20]
 802a5bc:	2b00      	cmp	r3, #0
 802a5be:	dd09      	ble.n	802a5d4 <_dtoa_r+0x754>
 802a5c0:	42ab      	cmp	r3, r5
 802a5c2:	9a04      	ldr	r2, [sp, #16]
 802a5c4:	bfa8      	it	ge
 802a5c6:	462b      	movge	r3, r5
 802a5c8:	1ad2      	subs	r2, r2, r3
 802a5ca:	9204      	str	r2, [sp, #16]
 802a5cc:	9a05      	ldr	r2, [sp, #20]
 802a5ce:	1aed      	subs	r5, r5, r3
 802a5d0:	1ad3      	subs	r3, r2, r3
 802a5d2:	9305      	str	r3, [sp, #20]
 802a5d4:	9b07      	ldr	r3, [sp, #28]
 802a5d6:	b31b      	cbz	r3, 802a620 <_dtoa_r+0x7a0>
 802a5d8:	9b08      	ldr	r3, [sp, #32]
 802a5da:	2b00      	cmp	r3, #0
 802a5dc:	f000 80af 	beq.w	802a73e <_dtoa_r+0x8be>
 802a5e0:	2e00      	cmp	r6, #0
 802a5e2:	dd13      	ble.n	802a60c <_dtoa_r+0x78c>
 802a5e4:	4639      	mov	r1, r7
 802a5e6:	4632      	mov	r2, r6
 802a5e8:	4620      	mov	r0, r4
 802a5ea:	f001 f91f 	bl	802b82c <__pow5mult>
 802a5ee:	ee18 2a10 	vmov	r2, s16
 802a5f2:	4601      	mov	r1, r0
 802a5f4:	4607      	mov	r7, r0
 802a5f6:	4620      	mov	r0, r4
 802a5f8:	f001 f86e 	bl	802b6d8 <__multiply>
 802a5fc:	ee18 1a10 	vmov	r1, s16
 802a600:	4680      	mov	r8, r0
 802a602:	4620      	mov	r0, r4
 802a604:	f000 ff50 	bl	802b4a8 <_Bfree>
 802a608:	ee08 8a10 	vmov	s16, r8
 802a60c:	9b07      	ldr	r3, [sp, #28]
 802a60e:	1b9a      	subs	r2, r3, r6
 802a610:	d006      	beq.n	802a620 <_dtoa_r+0x7a0>
 802a612:	ee18 1a10 	vmov	r1, s16
 802a616:	4620      	mov	r0, r4
 802a618:	f001 f908 	bl	802b82c <__pow5mult>
 802a61c:	ee08 0a10 	vmov	s16, r0
 802a620:	2101      	movs	r1, #1
 802a622:	4620      	mov	r0, r4
 802a624:	f001 f842 	bl	802b6ac <__i2b>
 802a628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a62a:	2b00      	cmp	r3, #0
 802a62c:	4606      	mov	r6, r0
 802a62e:	f340 8088 	ble.w	802a742 <_dtoa_r+0x8c2>
 802a632:	461a      	mov	r2, r3
 802a634:	4601      	mov	r1, r0
 802a636:	4620      	mov	r0, r4
 802a638:	f001 f8f8 	bl	802b82c <__pow5mult>
 802a63c:	9b06      	ldr	r3, [sp, #24]
 802a63e:	2b01      	cmp	r3, #1
 802a640:	4606      	mov	r6, r0
 802a642:	f340 8081 	ble.w	802a748 <_dtoa_r+0x8c8>
 802a646:	f04f 0800 	mov.w	r8, #0
 802a64a:	6933      	ldr	r3, [r6, #16]
 802a64c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 802a650:	6918      	ldr	r0, [r3, #16]
 802a652:	f000 ffdb 	bl	802b60c <__hi0bits>
 802a656:	f1c0 0020 	rsb	r0, r0, #32
 802a65a:	9b05      	ldr	r3, [sp, #20]
 802a65c:	4418      	add	r0, r3
 802a65e:	f010 001f 	ands.w	r0, r0, #31
 802a662:	f000 8092 	beq.w	802a78a <_dtoa_r+0x90a>
 802a666:	f1c0 0320 	rsb	r3, r0, #32
 802a66a:	2b04      	cmp	r3, #4
 802a66c:	f340 808a 	ble.w	802a784 <_dtoa_r+0x904>
 802a670:	f1c0 001c 	rsb	r0, r0, #28
 802a674:	9b04      	ldr	r3, [sp, #16]
 802a676:	4403      	add	r3, r0
 802a678:	9304      	str	r3, [sp, #16]
 802a67a:	9b05      	ldr	r3, [sp, #20]
 802a67c:	4403      	add	r3, r0
 802a67e:	4405      	add	r5, r0
 802a680:	9305      	str	r3, [sp, #20]
 802a682:	9b04      	ldr	r3, [sp, #16]
 802a684:	2b00      	cmp	r3, #0
 802a686:	dd07      	ble.n	802a698 <_dtoa_r+0x818>
 802a688:	ee18 1a10 	vmov	r1, s16
 802a68c:	461a      	mov	r2, r3
 802a68e:	4620      	mov	r0, r4
 802a690:	f001 f926 	bl	802b8e0 <__lshift>
 802a694:	ee08 0a10 	vmov	s16, r0
 802a698:	9b05      	ldr	r3, [sp, #20]
 802a69a:	2b00      	cmp	r3, #0
 802a69c:	dd05      	ble.n	802a6aa <_dtoa_r+0x82a>
 802a69e:	4631      	mov	r1, r6
 802a6a0:	461a      	mov	r2, r3
 802a6a2:	4620      	mov	r0, r4
 802a6a4:	f001 f91c 	bl	802b8e0 <__lshift>
 802a6a8:	4606      	mov	r6, r0
 802a6aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a6ac:	2b00      	cmp	r3, #0
 802a6ae:	d06e      	beq.n	802a78e <_dtoa_r+0x90e>
 802a6b0:	ee18 0a10 	vmov	r0, s16
 802a6b4:	4631      	mov	r1, r6
 802a6b6:	f001 f983 	bl	802b9c0 <__mcmp>
 802a6ba:	2800      	cmp	r0, #0
 802a6bc:	da67      	bge.n	802a78e <_dtoa_r+0x90e>
 802a6be:	9b00      	ldr	r3, [sp, #0]
 802a6c0:	3b01      	subs	r3, #1
 802a6c2:	ee18 1a10 	vmov	r1, s16
 802a6c6:	9300      	str	r3, [sp, #0]
 802a6c8:	220a      	movs	r2, #10
 802a6ca:	2300      	movs	r3, #0
 802a6cc:	4620      	mov	r0, r4
 802a6ce:	f000 ff0d 	bl	802b4ec <__multadd>
 802a6d2:	9b08      	ldr	r3, [sp, #32]
 802a6d4:	ee08 0a10 	vmov	s16, r0
 802a6d8:	2b00      	cmp	r3, #0
 802a6da:	f000 81b1 	beq.w	802aa40 <_dtoa_r+0xbc0>
 802a6de:	2300      	movs	r3, #0
 802a6e0:	4639      	mov	r1, r7
 802a6e2:	220a      	movs	r2, #10
 802a6e4:	4620      	mov	r0, r4
 802a6e6:	f000 ff01 	bl	802b4ec <__multadd>
 802a6ea:	9b02      	ldr	r3, [sp, #8]
 802a6ec:	2b00      	cmp	r3, #0
 802a6ee:	4607      	mov	r7, r0
 802a6f0:	f300 808e 	bgt.w	802a810 <_dtoa_r+0x990>
 802a6f4:	9b06      	ldr	r3, [sp, #24]
 802a6f6:	2b02      	cmp	r3, #2
 802a6f8:	dc51      	bgt.n	802a79e <_dtoa_r+0x91e>
 802a6fa:	e089      	b.n	802a810 <_dtoa_r+0x990>
 802a6fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802a6fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802a702:	e74b      	b.n	802a59c <_dtoa_r+0x71c>
 802a704:	9b03      	ldr	r3, [sp, #12]
 802a706:	1e5e      	subs	r6, r3, #1
 802a708:	9b07      	ldr	r3, [sp, #28]
 802a70a:	42b3      	cmp	r3, r6
 802a70c:	bfbf      	itttt	lt
 802a70e:	9b07      	ldrlt	r3, [sp, #28]
 802a710:	9607      	strlt	r6, [sp, #28]
 802a712:	1af2      	sublt	r2, r6, r3
 802a714:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 802a716:	bfb6      	itet	lt
 802a718:	189b      	addlt	r3, r3, r2
 802a71a:	1b9e      	subge	r6, r3, r6
 802a71c:	930a      	strlt	r3, [sp, #40]	; 0x28
 802a71e:	9b03      	ldr	r3, [sp, #12]
 802a720:	bfb8      	it	lt
 802a722:	2600      	movlt	r6, #0
 802a724:	2b00      	cmp	r3, #0
 802a726:	bfb7      	itett	lt
 802a728:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 802a72c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 802a730:	1a9d      	sublt	r5, r3, r2
 802a732:	2300      	movlt	r3, #0
 802a734:	e734      	b.n	802a5a0 <_dtoa_r+0x720>
 802a736:	9e07      	ldr	r6, [sp, #28]
 802a738:	9d04      	ldr	r5, [sp, #16]
 802a73a:	9f08      	ldr	r7, [sp, #32]
 802a73c:	e73b      	b.n	802a5b6 <_dtoa_r+0x736>
 802a73e:	9a07      	ldr	r2, [sp, #28]
 802a740:	e767      	b.n	802a612 <_dtoa_r+0x792>
 802a742:	9b06      	ldr	r3, [sp, #24]
 802a744:	2b01      	cmp	r3, #1
 802a746:	dc18      	bgt.n	802a77a <_dtoa_r+0x8fa>
 802a748:	f1ba 0f00 	cmp.w	sl, #0
 802a74c:	d115      	bne.n	802a77a <_dtoa_r+0x8fa>
 802a74e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802a752:	b993      	cbnz	r3, 802a77a <_dtoa_r+0x8fa>
 802a754:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802a758:	0d1b      	lsrs	r3, r3, #20
 802a75a:	051b      	lsls	r3, r3, #20
 802a75c:	b183      	cbz	r3, 802a780 <_dtoa_r+0x900>
 802a75e:	9b04      	ldr	r3, [sp, #16]
 802a760:	3301      	adds	r3, #1
 802a762:	9304      	str	r3, [sp, #16]
 802a764:	9b05      	ldr	r3, [sp, #20]
 802a766:	3301      	adds	r3, #1
 802a768:	9305      	str	r3, [sp, #20]
 802a76a:	f04f 0801 	mov.w	r8, #1
 802a76e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a770:	2b00      	cmp	r3, #0
 802a772:	f47f af6a 	bne.w	802a64a <_dtoa_r+0x7ca>
 802a776:	2001      	movs	r0, #1
 802a778:	e76f      	b.n	802a65a <_dtoa_r+0x7da>
 802a77a:	f04f 0800 	mov.w	r8, #0
 802a77e:	e7f6      	b.n	802a76e <_dtoa_r+0x8ee>
 802a780:	4698      	mov	r8, r3
 802a782:	e7f4      	b.n	802a76e <_dtoa_r+0x8ee>
 802a784:	f43f af7d 	beq.w	802a682 <_dtoa_r+0x802>
 802a788:	4618      	mov	r0, r3
 802a78a:	301c      	adds	r0, #28
 802a78c:	e772      	b.n	802a674 <_dtoa_r+0x7f4>
 802a78e:	9b03      	ldr	r3, [sp, #12]
 802a790:	2b00      	cmp	r3, #0
 802a792:	dc37      	bgt.n	802a804 <_dtoa_r+0x984>
 802a794:	9b06      	ldr	r3, [sp, #24]
 802a796:	2b02      	cmp	r3, #2
 802a798:	dd34      	ble.n	802a804 <_dtoa_r+0x984>
 802a79a:	9b03      	ldr	r3, [sp, #12]
 802a79c:	9302      	str	r3, [sp, #8]
 802a79e:	9b02      	ldr	r3, [sp, #8]
 802a7a0:	b96b      	cbnz	r3, 802a7be <_dtoa_r+0x93e>
 802a7a2:	4631      	mov	r1, r6
 802a7a4:	2205      	movs	r2, #5
 802a7a6:	4620      	mov	r0, r4
 802a7a8:	f000 fea0 	bl	802b4ec <__multadd>
 802a7ac:	4601      	mov	r1, r0
 802a7ae:	4606      	mov	r6, r0
 802a7b0:	ee18 0a10 	vmov	r0, s16
 802a7b4:	f001 f904 	bl	802b9c0 <__mcmp>
 802a7b8:	2800      	cmp	r0, #0
 802a7ba:	f73f adbb 	bgt.w	802a334 <_dtoa_r+0x4b4>
 802a7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a7c0:	9d01      	ldr	r5, [sp, #4]
 802a7c2:	43db      	mvns	r3, r3
 802a7c4:	9300      	str	r3, [sp, #0]
 802a7c6:	f04f 0800 	mov.w	r8, #0
 802a7ca:	4631      	mov	r1, r6
 802a7cc:	4620      	mov	r0, r4
 802a7ce:	f000 fe6b 	bl	802b4a8 <_Bfree>
 802a7d2:	2f00      	cmp	r7, #0
 802a7d4:	f43f aea4 	beq.w	802a520 <_dtoa_r+0x6a0>
 802a7d8:	f1b8 0f00 	cmp.w	r8, #0
 802a7dc:	d005      	beq.n	802a7ea <_dtoa_r+0x96a>
 802a7de:	45b8      	cmp	r8, r7
 802a7e0:	d003      	beq.n	802a7ea <_dtoa_r+0x96a>
 802a7e2:	4641      	mov	r1, r8
 802a7e4:	4620      	mov	r0, r4
 802a7e6:	f000 fe5f 	bl	802b4a8 <_Bfree>
 802a7ea:	4639      	mov	r1, r7
 802a7ec:	4620      	mov	r0, r4
 802a7ee:	f000 fe5b 	bl	802b4a8 <_Bfree>
 802a7f2:	e695      	b.n	802a520 <_dtoa_r+0x6a0>
 802a7f4:	2600      	movs	r6, #0
 802a7f6:	4637      	mov	r7, r6
 802a7f8:	e7e1      	b.n	802a7be <_dtoa_r+0x93e>
 802a7fa:	9700      	str	r7, [sp, #0]
 802a7fc:	4637      	mov	r7, r6
 802a7fe:	e599      	b.n	802a334 <_dtoa_r+0x4b4>
 802a800:	40240000 	.word	0x40240000
 802a804:	9b08      	ldr	r3, [sp, #32]
 802a806:	2b00      	cmp	r3, #0
 802a808:	f000 80ca 	beq.w	802a9a0 <_dtoa_r+0xb20>
 802a80c:	9b03      	ldr	r3, [sp, #12]
 802a80e:	9302      	str	r3, [sp, #8]
 802a810:	2d00      	cmp	r5, #0
 802a812:	dd05      	ble.n	802a820 <_dtoa_r+0x9a0>
 802a814:	4639      	mov	r1, r7
 802a816:	462a      	mov	r2, r5
 802a818:	4620      	mov	r0, r4
 802a81a:	f001 f861 	bl	802b8e0 <__lshift>
 802a81e:	4607      	mov	r7, r0
 802a820:	f1b8 0f00 	cmp.w	r8, #0
 802a824:	d05b      	beq.n	802a8de <_dtoa_r+0xa5e>
 802a826:	6879      	ldr	r1, [r7, #4]
 802a828:	4620      	mov	r0, r4
 802a82a:	f000 fdfd 	bl	802b428 <_Balloc>
 802a82e:	4605      	mov	r5, r0
 802a830:	b928      	cbnz	r0, 802a83e <_dtoa_r+0x9be>
 802a832:	4b87      	ldr	r3, [pc, #540]	; (802aa50 <_dtoa_r+0xbd0>)
 802a834:	4602      	mov	r2, r0
 802a836:	f240 21ea 	movw	r1, #746	; 0x2ea
 802a83a:	f7ff bb3b 	b.w	8029eb4 <_dtoa_r+0x34>
 802a83e:	693a      	ldr	r2, [r7, #16]
 802a840:	3202      	adds	r2, #2
 802a842:	0092      	lsls	r2, r2, #2
 802a844:	f107 010c 	add.w	r1, r7, #12
 802a848:	300c      	adds	r0, #12
 802a84a:	f7fd fa4d 	bl	8027ce8 <memcpy>
 802a84e:	2201      	movs	r2, #1
 802a850:	4629      	mov	r1, r5
 802a852:	4620      	mov	r0, r4
 802a854:	f001 f844 	bl	802b8e0 <__lshift>
 802a858:	9b01      	ldr	r3, [sp, #4]
 802a85a:	f103 0901 	add.w	r9, r3, #1
 802a85e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 802a862:	4413      	add	r3, r2
 802a864:	9305      	str	r3, [sp, #20]
 802a866:	f00a 0301 	and.w	r3, sl, #1
 802a86a:	46b8      	mov	r8, r7
 802a86c:	9304      	str	r3, [sp, #16]
 802a86e:	4607      	mov	r7, r0
 802a870:	4631      	mov	r1, r6
 802a872:	ee18 0a10 	vmov	r0, s16
 802a876:	f7ff fa75 	bl	8029d64 <quorem>
 802a87a:	4641      	mov	r1, r8
 802a87c:	9002      	str	r0, [sp, #8]
 802a87e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802a882:	ee18 0a10 	vmov	r0, s16
 802a886:	f001 f89b 	bl	802b9c0 <__mcmp>
 802a88a:	463a      	mov	r2, r7
 802a88c:	9003      	str	r0, [sp, #12]
 802a88e:	4631      	mov	r1, r6
 802a890:	4620      	mov	r0, r4
 802a892:	f001 f8b1 	bl	802b9f8 <__mdiff>
 802a896:	68c2      	ldr	r2, [r0, #12]
 802a898:	f109 3bff 	add.w	fp, r9, #4294967295
 802a89c:	4605      	mov	r5, r0
 802a89e:	bb02      	cbnz	r2, 802a8e2 <_dtoa_r+0xa62>
 802a8a0:	4601      	mov	r1, r0
 802a8a2:	ee18 0a10 	vmov	r0, s16
 802a8a6:	f001 f88b 	bl	802b9c0 <__mcmp>
 802a8aa:	4602      	mov	r2, r0
 802a8ac:	4629      	mov	r1, r5
 802a8ae:	4620      	mov	r0, r4
 802a8b0:	9207      	str	r2, [sp, #28]
 802a8b2:	f000 fdf9 	bl	802b4a8 <_Bfree>
 802a8b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 802a8ba:	ea43 0102 	orr.w	r1, r3, r2
 802a8be:	9b04      	ldr	r3, [sp, #16]
 802a8c0:	430b      	orrs	r3, r1
 802a8c2:	464d      	mov	r5, r9
 802a8c4:	d10f      	bne.n	802a8e6 <_dtoa_r+0xa66>
 802a8c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802a8ca:	d02a      	beq.n	802a922 <_dtoa_r+0xaa2>
 802a8cc:	9b03      	ldr	r3, [sp, #12]
 802a8ce:	2b00      	cmp	r3, #0
 802a8d0:	dd02      	ble.n	802a8d8 <_dtoa_r+0xa58>
 802a8d2:	9b02      	ldr	r3, [sp, #8]
 802a8d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 802a8d8:	f88b a000 	strb.w	sl, [fp]
 802a8dc:	e775      	b.n	802a7ca <_dtoa_r+0x94a>
 802a8de:	4638      	mov	r0, r7
 802a8e0:	e7ba      	b.n	802a858 <_dtoa_r+0x9d8>
 802a8e2:	2201      	movs	r2, #1
 802a8e4:	e7e2      	b.n	802a8ac <_dtoa_r+0xa2c>
 802a8e6:	9b03      	ldr	r3, [sp, #12]
 802a8e8:	2b00      	cmp	r3, #0
 802a8ea:	db04      	blt.n	802a8f6 <_dtoa_r+0xa76>
 802a8ec:	9906      	ldr	r1, [sp, #24]
 802a8ee:	430b      	orrs	r3, r1
 802a8f0:	9904      	ldr	r1, [sp, #16]
 802a8f2:	430b      	orrs	r3, r1
 802a8f4:	d122      	bne.n	802a93c <_dtoa_r+0xabc>
 802a8f6:	2a00      	cmp	r2, #0
 802a8f8:	ddee      	ble.n	802a8d8 <_dtoa_r+0xa58>
 802a8fa:	ee18 1a10 	vmov	r1, s16
 802a8fe:	2201      	movs	r2, #1
 802a900:	4620      	mov	r0, r4
 802a902:	f000 ffed 	bl	802b8e0 <__lshift>
 802a906:	4631      	mov	r1, r6
 802a908:	ee08 0a10 	vmov	s16, r0
 802a90c:	f001 f858 	bl	802b9c0 <__mcmp>
 802a910:	2800      	cmp	r0, #0
 802a912:	dc03      	bgt.n	802a91c <_dtoa_r+0xa9c>
 802a914:	d1e0      	bne.n	802a8d8 <_dtoa_r+0xa58>
 802a916:	f01a 0f01 	tst.w	sl, #1
 802a91a:	d0dd      	beq.n	802a8d8 <_dtoa_r+0xa58>
 802a91c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802a920:	d1d7      	bne.n	802a8d2 <_dtoa_r+0xa52>
 802a922:	2339      	movs	r3, #57	; 0x39
 802a924:	f88b 3000 	strb.w	r3, [fp]
 802a928:	462b      	mov	r3, r5
 802a92a:	461d      	mov	r5, r3
 802a92c:	3b01      	subs	r3, #1
 802a92e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802a932:	2a39      	cmp	r2, #57	; 0x39
 802a934:	d071      	beq.n	802aa1a <_dtoa_r+0xb9a>
 802a936:	3201      	adds	r2, #1
 802a938:	701a      	strb	r2, [r3, #0]
 802a93a:	e746      	b.n	802a7ca <_dtoa_r+0x94a>
 802a93c:	2a00      	cmp	r2, #0
 802a93e:	dd07      	ble.n	802a950 <_dtoa_r+0xad0>
 802a940:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802a944:	d0ed      	beq.n	802a922 <_dtoa_r+0xaa2>
 802a946:	f10a 0301 	add.w	r3, sl, #1
 802a94a:	f88b 3000 	strb.w	r3, [fp]
 802a94e:	e73c      	b.n	802a7ca <_dtoa_r+0x94a>
 802a950:	9b05      	ldr	r3, [sp, #20]
 802a952:	f809 ac01 	strb.w	sl, [r9, #-1]
 802a956:	4599      	cmp	r9, r3
 802a958:	d047      	beq.n	802a9ea <_dtoa_r+0xb6a>
 802a95a:	ee18 1a10 	vmov	r1, s16
 802a95e:	2300      	movs	r3, #0
 802a960:	220a      	movs	r2, #10
 802a962:	4620      	mov	r0, r4
 802a964:	f000 fdc2 	bl	802b4ec <__multadd>
 802a968:	45b8      	cmp	r8, r7
 802a96a:	ee08 0a10 	vmov	s16, r0
 802a96e:	f04f 0300 	mov.w	r3, #0
 802a972:	f04f 020a 	mov.w	r2, #10
 802a976:	4641      	mov	r1, r8
 802a978:	4620      	mov	r0, r4
 802a97a:	d106      	bne.n	802a98a <_dtoa_r+0xb0a>
 802a97c:	f000 fdb6 	bl	802b4ec <__multadd>
 802a980:	4680      	mov	r8, r0
 802a982:	4607      	mov	r7, r0
 802a984:	f109 0901 	add.w	r9, r9, #1
 802a988:	e772      	b.n	802a870 <_dtoa_r+0x9f0>
 802a98a:	f000 fdaf 	bl	802b4ec <__multadd>
 802a98e:	4639      	mov	r1, r7
 802a990:	4680      	mov	r8, r0
 802a992:	2300      	movs	r3, #0
 802a994:	220a      	movs	r2, #10
 802a996:	4620      	mov	r0, r4
 802a998:	f000 fda8 	bl	802b4ec <__multadd>
 802a99c:	4607      	mov	r7, r0
 802a99e:	e7f1      	b.n	802a984 <_dtoa_r+0xb04>
 802a9a0:	9b03      	ldr	r3, [sp, #12]
 802a9a2:	9302      	str	r3, [sp, #8]
 802a9a4:	9d01      	ldr	r5, [sp, #4]
 802a9a6:	ee18 0a10 	vmov	r0, s16
 802a9aa:	4631      	mov	r1, r6
 802a9ac:	f7ff f9da 	bl	8029d64 <quorem>
 802a9b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802a9b4:	9b01      	ldr	r3, [sp, #4]
 802a9b6:	f805 ab01 	strb.w	sl, [r5], #1
 802a9ba:	1aea      	subs	r2, r5, r3
 802a9bc:	9b02      	ldr	r3, [sp, #8]
 802a9be:	4293      	cmp	r3, r2
 802a9c0:	dd09      	ble.n	802a9d6 <_dtoa_r+0xb56>
 802a9c2:	ee18 1a10 	vmov	r1, s16
 802a9c6:	2300      	movs	r3, #0
 802a9c8:	220a      	movs	r2, #10
 802a9ca:	4620      	mov	r0, r4
 802a9cc:	f000 fd8e 	bl	802b4ec <__multadd>
 802a9d0:	ee08 0a10 	vmov	s16, r0
 802a9d4:	e7e7      	b.n	802a9a6 <_dtoa_r+0xb26>
 802a9d6:	9b02      	ldr	r3, [sp, #8]
 802a9d8:	2b00      	cmp	r3, #0
 802a9da:	bfc8      	it	gt
 802a9dc:	461d      	movgt	r5, r3
 802a9de:	9b01      	ldr	r3, [sp, #4]
 802a9e0:	bfd8      	it	le
 802a9e2:	2501      	movle	r5, #1
 802a9e4:	441d      	add	r5, r3
 802a9e6:	f04f 0800 	mov.w	r8, #0
 802a9ea:	ee18 1a10 	vmov	r1, s16
 802a9ee:	2201      	movs	r2, #1
 802a9f0:	4620      	mov	r0, r4
 802a9f2:	f000 ff75 	bl	802b8e0 <__lshift>
 802a9f6:	4631      	mov	r1, r6
 802a9f8:	ee08 0a10 	vmov	s16, r0
 802a9fc:	f000 ffe0 	bl	802b9c0 <__mcmp>
 802aa00:	2800      	cmp	r0, #0
 802aa02:	dc91      	bgt.n	802a928 <_dtoa_r+0xaa8>
 802aa04:	d102      	bne.n	802aa0c <_dtoa_r+0xb8c>
 802aa06:	f01a 0f01 	tst.w	sl, #1
 802aa0a:	d18d      	bne.n	802a928 <_dtoa_r+0xaa8>
 802aa0c:	462b      	mov	r3, r5
 802aa0e:	461d      	mov	r5, r3
 802aa10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802aa14:	2a30      	cmp	r2, #48	; 0x30
 802aa16:	d0fa      	beq.n	802aa0e <_dtoa_r+0xb8e>
 802aa18:	e6d7      	b.n	802a7ca <_dtoa_r+0x94a>
 802aa1a:	9a01      	ldr	r2, [sp, #4]
 802aa1c:	429a      	cmp	r2, r3
 802aa1e:	d184      	bne.n	802a92a <_dtoa_r+0xaaa>
 802aa20:	9b00      	ldr	r3, [sp, #0]
 802aa22:	3301      	adds	r3, #1
 802aa24:	9300      	str	r3, [sp, #0]
 802aa26:	2331      	movs	r3, #49	; 0x31
 802aa28:	7013      	strb	r3, [r2, #0]
 802aa2a:	e6ce      	b.n	802a7ca <_dtoa_r+0x94a>
 802aa2c:	4b09      	ldr	r3, [pc, #36]	; (802aa54 <_dtoa_r+0xbd4>)
 802aa2e:	f7ff ba95 	b.w	8029f5c <_dtoa_r+0xdc>
 802aa32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802aa34:	2b00      	cmp	r3, #0
 802aa36:	f47f aa6e 	bne.w	8029f16 <_dtoa_r+0x96>
 802aa3a:	4b07      	ldr	r3, [pc, #28]	; (802aa58 <_dtoa_r+0xbd8>)
 802aa3c:	f7ff ba8e 	b.w	8029f5c <_dtoa_r+0xdc>
 802aa40:	9b02      	ldr	r3, [sp, #8]
 802aa42:	2b00      	cmp	r3, #0
 802aa44:	dcae      	bgt.n	802a9a4 <_dtoa_r+0xb24>
 802aa46:	9b06      	ldr	r3, [sp, #24]
 802aa48:	2b02      	cmp	r3, #2
 802aa4a:	f73f aea8 	bgt.w	802a79e <_dtoa_r+0x91e>
 802aa4e:	e7a9      	b.n	802a9a4 <_dtoa_r+0xb24>
 802aa50:	0802f318 	.word	0x0802f318
 802aa54:	0802f119 	.word	0x0802f119
 802aa58:	0802f299 	.word	0x0802f299

0802aa5c <__sflush_r>:
 802aa5c:	898a      	ldrh	r2, [r1, #12]
 802aa5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802aa62:	4605      	mov	r5, r0
 802aa64:	0710      	lsls	r0, r2, #28
 802aa66:	460c      	mov	r4, r1
 802aa68:	d458      	bmi.n	802ab1c <__sflush_r+0xc0>
 802aa6a:	684b      	ldr	r3, [r1, #4]
 802aa6c:	2b00      	cmp	r3, #0
 802aa6e:	dc05      	bgt.n	802aa7c <__sflush_r+0x20>
 802aa70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802aa72:	2b00      	cmp	r3, #0
 802aa74:	dc02      	bgt.n	802aa7c <__sflush_r+0x20>
 802aa76:	2000      	movs	r0, #0
 802aa78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802aa7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802aa7e:	2e00      	cmp	r6, #0
 802aa80:	d0f9      	beq.n	802aa76 <__sflush_r+0x1a>
 802aa82:	2300      	movs	r3, #0
 802aa84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802aa88:	682f      	ldr	r7, [r5, #0]
 802aa8a:	602b      	str	r3, [r5, #0]
 802aa8c:	d032      	beq.n	802aaf4 <__sflush_r+0x98>
 802aa8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802aa90:	89a3      	ldrh	r3, [r4, #12]
 802aa92:	075a      	lsls	r2, r3, #29
 802aa94:	d505      	bpl.n	802aaa2 <__sflush_r+0x46>
 802aa96:	6863      	ldr	r3, [r4, #4]
 802aa98:	1ac0      	subs	r0, r0, r3
 802aa9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802aa9c:	b10b      	cbz	r3, 802aaa2 <__sflush_r+0x46>
 802aa9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802aaa0:	1ac0      	subs	r0, r0, r3
 802aaa2:	2300      	movs	r3, #0
 802aaa4:	4602      	mov	r2, r0
 802aaa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802aaa8:	6a21      	ldr	r1, [r4, #32]
 802aaaa:	4628      	mov	r0, r5
 802aaac:	47b0      	blx	r6
 802aaae:	1c43      	adds	r3, r0, #1
 802aab0:	89a3      	ldrh	r3, [r4, #12]
 802aab2:	d106      	bne.n	802aac2 <__sflush_r+0x66>
 802aab4:	6829      	ldr	r1, [r5, #0]
 802aab6:	291d      	cmp	r1, #29
 802aab8:	d82c      	bhi.n	802ab14 <__sflush_r+0xb8>
 802aaba:	4a2a      	ldr	r2, [pc, #168]	; (802ab64 <__sflush_r+0x108>)
 802aabc:	40ca      	lsrs	r2, r1
 802aabe:	07d6      	lsls	r6, r2, #31
 802aac0:	d528      	bpl.n	802ab14 <__sflush_r+0xb8>
 802aac2:	2200      	movs	r2, #0
 802aac4:	6062      	str	r2, [r4, #4]
 802aac6:	04d9      	lsls	r1, r3, #19
 802aac8:	6922      	ldr	r2, [r4, #16]
 802aaca:	6022      	str	r2, [r4, #0]
 802aacc:	d504      	bpl.n	802aad8 <__sflush_r+0x7c>
 802aace:	1c42      	adds	r2, r0, #1
 802aad0:	d101      	bne.n	802aad6 <__sflush_r+0x7a>
 802aad2:	682b      	ldr	r3, [r5, #0]
 802aad4:	b903      	cbnz	r3, 802aad8 <__sflush_r+0x7c>
 802aad6:	6560      	str	r0, [r4, #84]	; 0x54
 802aad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802aada:	602f      	str	r7, [r5, #0]
 802aadc:	2900      	cmp	r1, #0
 802aade:	d0ca      	beq.n	802aa76 <__sflush_r+0x1a>
 802aae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802aae4:	4299      	cmp	r1, r3
 802aae6:	d002      	beq.n	802aaee <__sflush_r+0x92>
 802aae8:	4628      	mov	r0, r5
 802aaea:	f7fd f913 	bl	8027d14 <_free_r>
 802aaee:	2000      	movs	r0, #0
 802aaf0:	6360      	str	r0, [r4, #52]	; 0x34
 802aaf2:	e7c1      	b.n	802aa78 <__sflush_r+0x1c>
 802aaf4:	6a21      	ldr	r1, [r4, #32]
 802aaf6:	2301      	movs	r3, #1
 802aaf8:	4628      	mov	r0, r5
 802aafa:	47b0      	blx	r6
 802aafc:	1c41      	adds	r1, r0, #1
 802aafe:	d1c7      	bne.n	802aa90 <__sflush_r+0x34>
 802ab00:	682b      	ldr	r3, [r5, #0]
 802ab02:	2b00      	cmp	r3, #0
 802ab04:	d0c4      	beq.n	802aa90 <__sflush_r+0x34>
 802ab06:	2b1d      	cmp	r3, #29
 802ab08:	d001      	beq.n	802ab0e <__sflush_r+0xb2>
 802ab0a:	2b16      	cmp	r3, #22
 802ab0c:	d101      	bne.n	802ab12 <__sflush_r+0xb6>
 802ab0e:	602f      	str	r7, [r5, #0]
 802ab10:	e7b1      	b.n	802aa76 <__sflush_r+0x1a>
 802ab12:	89a3      	ldrh	r3, [r4, #12]
 802ab14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ab18:	81a3      	strh	r3, [r4, #12]
 802ab1a:	e7ad      	b.n	802aa78 <__sflush_r+0x1c>
 802ab1c:	690f      	ldr	r7, [r1, #16]
 802ab1e:	2f00      	cmp	r7, #0
 802ab20:	d0a9      	beq.n	802aa76 <__sflush_r+0x1a>
 802ab22:	0793      	lsls	r3, r2, #30
 802ab24:	680e      	ldr	r6, [r1, #0]
 802ab26:	bf08      	it	eq
 802ab28:	694b      	ldreq	r3, [r1, #20]
 802ab2a:	600f      	str	r7, [r1, #0]
 802ab2c:	bf18      	it	ne
 802ab2e:	2300      	movne	r3, #0
 802ab30:	eba6 0807 	sub.w	r8, r6, r7
 802ab34:	608b      	str	r3, [r1, #8]
 802ab36:	f1b8 0f00 	cmp.w	r8, #0
 802ab3a:	dd9c      	ble.n	802aa76 <__sflush_r+0x1a>
 802ab3c:	6a21      	ldr	r1, [r4, #32]
 802ab3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802ab40:	4643      	mov	r3, r8
 802ab42:	463a      	mov	r2, r7
 802ab44:	4628      	mov	r0, r5
 802ab46:	47b0      	blx	r6
 802ab48:	2800      	cmp	r0, #0
 802ab4a:	dc06      	bgt.n	802ab5a <__sflush_r+0xfe>
 802ab4c:	89a3      	ldrh	r3, [r4, #12]
 802ab4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ab52:	81a3      	strh	r3, [r4, #12]
 802ab54:	f04f 30ff 	mov.w	r0, #4294967295
 802ab58:	e78e      	b.n	802aa78 <__sflush_r+0x1c>
 802ab5a:	4407      	add	r7, r0
 802ab5c:	eba8 0800 	sub.w	r8, r8, r0
 802ab60:	e7e9      	b.n	802ab36 <__sflush_r+0xda>
 802ab62:	bf00      	nop
 802ab64:	20400001 	.word	0x20400001

0802ab68 <_fflush_r>:
 802ab68:	b538      	push	{r3, r4, r5, lr}
 802ab6a:	690b      	ldr	r3, [r1, #16]
 802ab6c:	4605      	mov	r5, r0
 802ab6e:	460c      	mov	r4, r1
 802ab70:	b913      	cbnz	r3, 802ab78 <_fflush_r+0x10>
 802ab72:	2500      	movs	r5, #0
 802ab74:	4628      	mov	r0, r5
 802ab76:	bd38      	pop	{r3, r4, r5, pc}
 802ab78:	b118      	cbz	r0, 802ab82 <_fflush_r+0x1a>
 802ab7a:	6983      	ldr	r3, [r0, #24]
 802ab7c:	b90b      	cbnz	r3, 802ab82 <_fflush_r+0x1a>
 802ab7e:	f7fc ffcb 	bl	8027b18 <__sinit>
 802ab82:	4b14      	ldr	r3, [pc, #80]	; (802abd4 <_fflush_r+0x6c>)
 802ab84:	429c      	cmp	r4, r3
 802ab86:	d11b      	bne.n	802abc0 <_fflush_r+0x58>
 802ab88:	686c      	ldr	r4, [r5, #4]
 802ab8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ab8e:	2b00      	cmp	r3, #0
 802ab90:	d0ef      	beq.n	802ab72 <_fflush_r+0xa>
 802ab92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802ab94:	07d0      	lsls	r0, r2, #31
 802ab96:	d404      	bmi.n	802aba2 <_fflush_r+0x3a>
 802ab98:	0599      	lsls	r1, r3, #22
 802ab9a:	d402      	bmi.n	802aba2 <_fflush_r+0x3a>
 802ab9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802ab9e:	f7fd f890 	bl	8027cc2 <__retarget_lock_acquire_recursive>
 802aba2:	4628      	mov	r0, r5
 802aba4:	4621      	mov	r1, r4
 802aba6:	f7ff ff59 	bl	802aa5c <__sflush_r>
 802abaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802abac:	07da      	lsls	r2, r3, #31
 802abae:	4605      	mov	r5, r0
 802abb0:	d4e0      	bmi.n	802ab74 <_fflush_r+0xc>
 802abb2:	89a3      	ldrh	r3, [r4, #12]
 802abb4:	059b      	lsls	r3, r3, #22
 802abb6:	d4dd      	bmi.n	802ab74 <_fflush_r+0xc>
 802abb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802abba:	f7fd f884 	bl	8027cc6 <__retarget_lock_release_recursive>
 802abbe:	e7d9      	b.n	802ab74 <_fflush_r+0xc>
 802abc0:	4b05      	ldr	r3, [pc, #20]	; (802abd8 <_fflush_r+0x70>)
 802abc2:	429c      	cmp	r4, r3
 802abc4:	d101      	bne.n	802abca <_fflush_r+0x62>
 802abc6:	68ac      	ldr	r4, [r5, #8]
 802abc8:	e7df      	b.n	802ab8a <_fflush_r+0x22>
 802abca:	4b04      	ldr	r3, [pc, #16]	; (802abdc <_fflush_r+0x74>)
 802abcc:	429c      	cmp	r4, r3
 802abce:	bf08      	it	eq
 802abd0:	68ec      	ldreq	r4, [r5, #12]
 802abd2:	e7da      	b.n	802ab8a <_fflush_r+0x22>
 802abd4:	0802f0b4 	.word	0x0802f0b4
 802abd8:	0802f0d4 	.word	0x0802f0d4
 802abdc:	0802f094 	.word	0x0802f094

0802abe0 <rshift>:
 802abe0:	6903      	ldr	r3, [r0, #16]
 802abe2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 802abe6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802abea:	ea4f 1261 	mov.w	r2, r1, asr #5
 802abee:	f100 0414 	add.w	r4, r0, #20
 802abf2:	dd45      	ble.n	802ac80 <rshift+0xa0>
 802abf4:	f011 011f 	ands.w	r1, r1, #31
 802abf8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 802abfc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 802ac00:	d10c      	bne.n	802ac1c <rshift+0x3c>
 802ac02:	f100 0710 	add.w	r7, r0, #16
 802ac06:	4629      	mov	r1, r5
 802ac08:	42b1      	cmp	r1, r6
 802ac0a:	d334      	bcc.n	802ac76 <rshift+0x96>
 802ac0c:	1a9b      	subs	r3, r3, r2
 802ac0e:	009b      	lsls	r3, r3, #2
 802ac10:	1eea      	subs	r2, r5, #3
 802ac12:	4296      	cmp	r6, r2
 802ac14:	bf38      	it	cc
 802ac16:	2300      	movcc	r3, #0
 802ac18:	4423      	add	r3, r4
 802ac1a:	e015      	b.n	802ac48 <rshift+0x68>
 802ac1c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 802ac20:	f1c1 0820 	rsb	r8, r1, #32
 802ac24:	40cf      	lsrs	r7, r1
 802ac26:	f105 0e04 	add.w	lr, r5, #4
 802ac2a:	46a1      	mov	r9, r4
 802ac2c:	4576      	cmp	r6, lr
 802ac2e:	46f4      	mov	ip, lr
 802ac30:	d815      	bhi.n	802ac5e <rshift+0x7e>
 802ac32:	1a9a      	subs	r2, r3, r2
 802ac34:	0092      	lsls	r2, r2, #2
 802ac36:	3a04      	subs	r2, #4
 802ac38:	3501      	adds	r5, #1
 802ac3a:	42ae      	cmp	r6, r5
 802ac3c:	bf38      	it	cc
 802ac3e:	2200      	movcc	r2, #0
 802ac40:	18a3      	adds	r3, r4, r2
 802ac42:	50a7      	str	r7, [r4, r2]
 802ac44:	b107      	cbz	r7, 802ac48 <rshift+0x68>
 802ac46:	3304      	adds	r3, #4
 802ac48:	1b1a      	subs	r2, r3, r4
 802ac4a:	42a3      	cmp	r3, r4
 802ac4c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 802ac50:	bf08      	it	eq
 802ac52:	2300      	moveq	r3, #0
 802ac54:	6102      	str	r2, [r0, #16]
 802ac56:	bf08      	it	eq
 802ac58:	6143      	streq	r3, [r0, #20]
 802ac5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802ac5e:	f8dc c000 	ldr.w	ip, [ip]
 802ac62:	fa0c fc08 	lsl.w	ip, ip, r8
 802ac66:	ea4c 0707 	orr.w	r7, ip, r7
 802ac6a:	f849 7b04 	str.w	r7, [r9], #4
 802ac6e:	f85e 7b04 	ldr.w	r7, [lr], #4
 802ac72:	40cf      	lsrs	r7, r1
 802ac74:	e7da      	b.n	802ac2c <rshift+0x4c>
 802ac76:	f851 cb04 	ldr.w	ip, [r1], #4
 802ac7a:	f847 cf04 	str.w	ip, [r7, #4]!
 802ac7e:	e7c3      	b.n	802ac08 <rshift+0x28>
 802ac80:	4623      	mov	r3, r4
 802ac82:	e7e1      	b.n	802ac48 <rshift+0x68>

0802ac84 <__hexdig_fun>:
 802ac84:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 802ac88:	2b09      	cmp	r3, #9
 802ac8a:	d802      	bhi.n	802ac92 <__hexdig_fun+0xe>
 802ac8c:	3820      	subs	r0, #32
 802ac8e:	b2c0      	uxtb	r0, r0
 802ac90:	4770      	bx	lr
 802ac92:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 802ac96:	2b05      	cmp	r3, #5
 802ac98:	d801      	bhi.n	802ac9e <__hexdig_fun+0x1a>
 802ac9a:	3847      	subs	r0, #71	; 0x47
 802ac9c:	e7f7      	b.n	802ac8e <__hexdig_fun+0xa>
 802ac9e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 802aca2:	2b05      	cmp	r3, #5
 802aca4:	d801      	bhi.n	802acaa <__hexdig_fun+0x26>
 802aca6:	3827      	subs	r0, #39	; 0x27
 802aca8:	e7f1      	b.n	802ac8e <__hexdig_fun+0xa>
 802acaa:	2000      	movs	r0, #0
 802acac:	4770      	bx	lr
	...

0802acb0 <__gethex>:
 802acb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802acb4:	ed2d 8b02 	vpush	{d8}
 802acb8:	b089      	sub	sp, #36	; 0x24
 802acba:	ee08 0a10 	vmov	s16, r0
 802acbe:	9304      	str	r3, [sp, #16]
 802acc0:	4bb4      	ldr	r3, [pc, #720]	; (802af94 <__gethex+0x2e4>)
 802acc2:	681b      	ldr	r3, [r3, #0]
 802acc4:	9301      	str	r3, [sp, #4]
 802acc6:	4618      	mov	r0, r3
 802acc8:	468b      	mov	fp, r1
 802acca:	4690      	mov	r8, r2
 802accc:	f7d5 fa80 	bl	80001d0 <strlen>
 802acd0:	9b01      	ldr	r3, [sp, #4]
 802acd2:	f8db 2000 	ldr.w	r2, [fp]
 802acd6:	4403      	add	r3, r0
 802acd8:	4682      	mov	sl, r0
 802acda:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802acde:	9305      	str	r3, [sp, #20]
 802ace0:	1c93      	adds	r3, r2, #2
 802ace2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 802ace6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 802acea:	32fe      	adds	r2, #254	; 0xfe
 802acec:	18d1      	adds	r1, r2, r3
 802acee:	461f      	mov	r7, r3
 802acf0:	f813 0b01 	ldrb.w	r0, [r3], #1
 802acf4:	9100      	str	r1, [sp, #0]
 802acf6:	2830      	cmp	r0, #48	; 0x30
 802acf8:	d0f8      	beq.n	802acec <__gethex+0x3c>
 802acfa:	f7ff ffc3 	bl	802ac84 <__hexdig_fun>
 802acfe:	4604      	mov	r4, r0
 802ad00:	2800      	cmp	r0, #0
 802ad02:	d13a      	bne.n	802ad7a <__gethex+0xca>
 802ad04:	9901      	ldr	r1, [sp, #4]
 802ad06:	4652      	mov	r2, sl
 802ad08:	4638      	mov	r0, r7
 802ad0a:	f001 fa0f 	bl	802c12c <strncmp>
 802ad0e:	4605      	mov	r5, r0
 802ad10:	2800      	cmp	r0, #0
 802ad12:	d168      	bne.n	802ade6 <__gethex+0x136>
 802ad14:	f817 000a 	ldrb.w	r0, [r7, sl]
 802ad18:	eb07 060a 	add.w	r6, r7, sl
 802ad1c:	f7ff ffb2 	bl	802ac84 <__hexdig_fun>
 802ad20:	2800      	cmp	r0, #0
 802ad22:	d062      	beq.n	802adea <__gethex+0x13a>
 802ad24:	4633      	mov	r3, r6
 802ad26:	7818      	ldrb	r0, [r3, #0]
 802ad28:	2830      	cmp	r0, #48	; 0x30
 802ad2a:	461f      	mov	r7, r3
 802ad2c:	f103 0301 	add.w	r3, r3, #1
 802ad30:	d0f9      	beq.n	802ad26 <__gethex+0x76>
 802ad32:	f7ff ffa7 	bl	802ac84 <__hexdig_fun>
 802ad36:	2301      	movs	r3, #1
 802ad38:	fab0 f480 	clz	r4, r0
 802ad3c:	0964      	lsrs	r4, r4, #5
 802ad3e:	4635      	mov	r5, r6
 802ad40:	9300      	str	r3, [sp, #0]
 802ad42:	463a      	mov	r2, r7
 802ad44:	4616      	mov	r6, r2
 802ad46:	3201      	adds	r2, #1
 802ad48:	7830      	ldrb	r0, [r6, #0]
 802ad4a:	f7ff ff9b 	bl	802ac84 <__hexdig_fun>
 802ad4e:	2800      	cmp	r0, #0
 802ad50:	d1f8      	bne.n	802ad44 <__gethex+0x94>
 802ad52:	9901      	ldr	r1, [sp, #4]
 802ad54:	4652      	mov	r2, sl
 802ad56:	4630      	mov	r0, r6
 802ad58:	f001 f9e8 	bl	802c12c <strncmp>
 802ad5c:	b980      	cbnz	r0, 802ad80 <__gethex+0xd0>
 802ad5e:	b94d      	cbnz	r5, 802ad74 <__gethex+0xc4>
 802ad60:	eb06 050a 	add.w	r5, r6, sl
 802ad64:	462a      	mov	r2, r5
 802ad66:	4616      	mov	r6, r2
 802ad68:	3201      	adds	r2, #1
 802ad6a:	7830      	ldrb	r0, [r6, #0]
 802ad6c:	f7ff ff8a 	bl	802ac84 <__hexdig_fun>
 802ad70:	2800      	cmp	r0, #0
 802ad72:	d1f8      	bne.n	802ad66 <__gethex+0xb6>
 802ad74:	1bad      	subs	r5, r5, r6
 802ad76:	00ad      	lsls	r5, r5, #2
 802ad78:	e004      	b.n	802ad84 <__gethex+0xd4>
 802ad7a:	2400      	movs	r4, #0
 802ad7c:	4625      	mov	r5, r4
 802ad7e:	e7e0      	b.n	802ad42 <__gethex+0x92>
 802ad80:	2d00      	cmp	r5, #0
 802ad82:	d1f7      	bne.n	802ad74 <__gethex+0xc4>
 802ad84:	7833      	ldrb	r3, [r6, #0]
 802ad86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802ad8a:	2b50      	cmp	r3, #80	; 0x50
 802ad8c:	d13b      	bne.n	802ae06 <__gethex+0x156>
 802ad8e:	7873      	ldrb	r3, [r6, #1]
 802ad90:	2b2b      	cmp	r3, #43	; 0x2b
 802ad92:	d02c      	beq.n	802adee <__gethex+0x13e>
 802ad94:	2b2d      	cmp	r3, #45	; 0x2d
 802ad96:	d02e      	beq.n	802adf6 <__gethex+0x146>
 802ad98:	1c71      	adds	r1, r6, #1
 802ad9a:	f04f 0900 	mov.w	r9, #0
 802ad9e:	7808      	ldrb	r0, [r1, #0]
 802ada0:	f7ff ff70 	bl	802ac84 <__hexdig_fun>
 802ada4:	1e43      	subs	r3, r0, #1
 802ada6:	b2db      	uxtb	r3, r3
 802ada8:	2b18      	cmp	r3, #24
 802adaa:	d82c      	bhi.n	802ae06 <__gethex+0x156>
 802adac:	f1a0 0210 	sub.w	r2, r0, #16
 802adb0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 802adb4:	f7ff ff66 	bl	802ac84 <__hexdig_fun>
 802adb8:	1e43      	subs	r3, r0, #1
 802adba:	b2db      	uxtb	r3, r3
 802adbc:	2b18      	cmp	r3, #24
 802adbe:	d91d      	bls.n	802adfc <__gethex+0x14c>
 802adc0:	f1b9 0f00 	cmp.w	r9, #0
 802adc4:	d000      	beq.n	802adc8 <__gethex+0x118>
 802adc6:	4252      	negs	r2, r2
 802adc8:	4415      	add	r5, r2
 802adca:	f8cb 1000 	str.w	r1, [fp]
 802adce:	b1e4      	cbz	r4, 802ae0a <__gethex+0x15a>
 802add0:	9b00      	ldr	r3, [sp, #0]
 802add2:	2b00      	cmp	r3, #0
 802add4:	bf14      	ite	ne
 802add6:	2700      	movne	r7, #0
 802add8:	2706      	moveq	r7, #6
 802adda:	4638      	mov	r0, r7
 802addc:	b009      	add	sp, #36	; 0x24
 802adde:	ecbd 8b02 	vpop	{d8}
 802ade2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ade6:	463e      	mov	r6, r7
 802ade8:	4625      	mov	r5, r4
 802adea:	2401      	movs	r4, #1
 802adec:	e7ca      	b.n	802ad84 <__gethex+0xd4>
 802adee:	f04f 0900 	mov.w	r9, #0
 802adf2:	1cb1      	adds	r1, r6, #2
 802adf4:	e7d3      	b.n	802ad9e <__gethex+0xee>
 802adf6:	f04f 0901 	mov.w	r9, #1
 802adfa:	e7fa      	b.n	802adf2 <__gethex+0x142>
 802adfc:	230a      	movs	r3, #10
 802adfe:	fb03 0202 	mla	r2, r3, r2, r0
 802ae02:	3a10      	subs	r2, #16
 802ae04:	e7d4      	b.n	802adb0 <__gethex+0x100>
 802ae06:	4631      	mov	r1, r6
 802ae08:	e7df      	b.n	802adca <__gethex+0x11a>
 802ae0a:	1bf3      	subs	r3, r6, r7
 802ae0c:	3b01      	subs	r3, #1
 802ae0e:	4621      	mov	r1, r4
 802ae10:	2b07      	cmp	r3, #7
 802ae12:	dc0b      	bgt.n	802ae2c <__gethex+0x17c>
 802ae14:	ee18 0a10 	vmov	r0, s16
 802ae18:	f000 fb06 	bl	802b428 <_Balloc>
 802ae1c:	4604      	mov	r4, r0
 802ae1e:	b940      	cbnz	r0, 802ae32 <__gethex+0x182>
 802ae20:	4b5d      	ldr	r3, [pc, #372]	; (802af98 <__gethex+0x2e8>)
 802ae22:	4602      	mov	r2, r0
 802ae24:	21de      	movs	r1, #222	; 0xde
 802ae26:	485d      	ldr	r0, [pc, #372]	; (802af9c <__gethex+0x2ec>)
 802ae28:	f7fc fde6 	bl	80279f8 <__assert_func>
 802ae2c:	3101      	adds	r1, #1
 802ae2e:	105b      	asrs	r3, r3, #1
 802ae30:	e7ee      	b.n	802ae10 <__gethex+0x160>
 802ae32:	f100 0914 	add.w	r9, r0, #20
 802ae36:	f04f 0b00 	mov.w	fp, #0
 802ae3a:	f1ca 0301 	rsb	r3, sl, #1
 802ae3e:	f8cd 9008 	str.w	r9, [sp, #8]
 802ae42:	f8cd b000 	str.w	fp, [sp]
 802ae46:	9306      	str	r3, [sp, #24]
 802ae48:	42b7      	cmp	r7, r6
 802ae4a:	d340      	bcc.n	802aece <__gethex+0x21e>
 802ae4c:	9802      	ldr	r0, [sp, #8]
 802ae4e:	9b00      	ldr	r3, [sp, #0]
 802ae50:	f840 3b04 	str.w	r3, [r0], #4
 802ae54:	eba0 0009 	sub.w	r0, r0, r9
 802ae58:	1080      	asrs	r0, r0, #2
 802ae5a:	0146      	lsls	r6, r0, #5
 802ae5c:	6120      	str	r0, [r4, #16]
 802ae5e:	4618      	mov	r0, r3
 802ae60:	f000 fbd4 	bl	802b60c <__hi0bits>
 802ae64:	1a30      	subs	r0, r6, r0
 802ae66:	f8d8 6000 	ldr.w	r6, [r8]
 802ae6a:	42b0      	cmp	r0, r6
 802ae6c:	dd63      	ble.n	802af36 <__gethex+0x286>
 802ae6e:	1b87      	subs	r7, r0, r6
 802ae70:	4639      	mov	r1, r7
 802ae72:	4620      	mov	r0, r4
 802ae74:	f000 ff78 	bl	802bd68 <__any_on>
 802ae78:	4682      	mov	sl, r0
 802ae7a:	b1a8      	cbz	r0, 802aea8 <__gethex+0x1f8>
 802ae7c:	1e7b      	subs	r3, r7, #1
 802ae7e:	1159      	asrs	r1, r3, #5
 802ae80:	f003 021f 	and.w	r2, r3, #31
 802ae84:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 802ae88:	f04f 0a01 	mov.w	sl, #1
 802ae8c:	fa0a f202 	lsl.w	r2, sl, r2
 802ae90:	420a      	tst	r2, r1
 802ae92:	d009      	beq.n	802aea8 <__gethex+0x1f8>
 802ae94:	4553      	cmp	r3, sl
 802ae96:	dd05      	ble.n	802aea4 <__gethex+0x1f4>
 802ae98:	1eb9      	subs	r1, r7, #2
 802ae9a:	4620      	mov	r0, r4
 802ae9c:	f000 ff64 	bl	802bd68 <__any_on>
 802aea0:	2800      	cmp	r0, #0
 802aea2:	d145      	bne.n	802af30 <__gethex+0x280>
 802aea4:	f04f 0a02 	mov.w	sl, #2
 802aea8:	4639      	mov	r1, r7
 802aeaa:	4620      	mov	r0, r4
 802aeac:	f7ff fe98 	bl	802abe0 <rshift>
 802aeb0:	443d      	add	r5, r7
 802aeb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802aeb6:	42ab      	cmp	r3, r5
 802aeb8:	da4c      	bge.n	802af54 <__gethex+0x2a4>
 802aeba:	ee18 0a10 	vmov	r0, s16
 802aebe:	4621      	mov	r1, r4
 802aec0:	f000 faf2 	bl	802b4a8 <_Bfree>
 802aec4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802aec6:	2300      	movs	r3, #0
 802aec8:	6013      	str	r3, [r2, #0]
 802aeca:	27a3      	movs	r7, #163	; 0xa3
 802aecc:	e785      	b.n	802adda <__gethex+0x12a>
 802aece:	1e73      	subs	r3, r6, #1
 802aed0:	9a05      	ldr	r2, [sp, #20]
 802aed2:	9303      	str	r3, [sp, #12]
 802aed4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802aed8:	4293      	cmp	r3, r2
 802aeda:	d019      	beq.n	802af10 <__gethex+0x260>
 802aedc:	f1bb 0f20 	cmp.w	fp, #32
 802aee0:	d107      	bne.n	802aef2 <__gethex+0x242>
 802aee2:	9b02      	ldr	r3, [sp, #8]
 802aee4:	9a00      	ldr	r2, [sp, #0]
 802aee6:	f843 2b04 	str.w	r2, [r3], #4
 802aeea:	9302      	str	r3, [sp, #8]
 802aeec:	2300      	movs	r3, #0
 802aeee:	9300      	str	r3, [sp, #0]
 802aef0:	469b      	mov	fp, r3
 802aef2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 802aef6:	f7ff fec5 	bl	802ac84 <__hexdig_fun>
 802aefa:	9b00      	ldr	r3, [sp, #0]
 802aefc:	f000 000f 	and.w	r0, r0, #15
 802af00:	fa00 f00b 	lsl.w	r0, r0, fp
 802af04:	4303      	orrs	r3, r0
 802af06:	9300      	str	r3, [sp, #0]
 802af08:	f10b 0b04 	add.w	fp, fp, #4
 802af0c:	9b03      	ldr	r3, [sp, #12]
 802af0e:	e00d      	b.n	802af2c <__gethex+0x27c>
 802af10:	9b03      	ldr	r3, [sp, #12]
 802af12:	9a06      	ldr	r2, [sp, #24]
 802af14:	4413      	add	r3, r2
 802af16:	42bb      	cmp	r3, r7
 802af18:	d3e0      	bcc.n	802aedc <__gethex+0x22c>
 802af1a:	4618      	mov	r0, r3
 802af1c:	9901      	ldr	r1, [sp, #4]
 802af1e:	9307      	str	r3, [sp, #28]
 802af20:	4652      	mov	r2, sl
 802af22:	f001 f903 	bl	802c12c <strncmp>
 802af26:	9b07      	ldr	r3, [sp, #28]
 802af28:	2800      	cmp	r0, #0
 802af2a:	d1d7      	bne.n	802aedc <__gethex+0x22c>
 802af2c:	461e      	mov	r6, r3
 802af2e:	e78b      	b.n	802ae48 <__gethex+0x198>
 802af30:	f04f 0a03 	mov.w	sl, #3
 802af34:	e7b8      	b.n	802aea8 <__gethex+0x1f8>
 802af36:	da0a      	bge.n	802af4e <__gethex+0x29e>
 802af38:	1a37      	subs	r7, r6, r0
 802af3a:	4621      	mov	r1, r4
 802af3c:	ee18 0a10 	vmov	r0, s16
 802af40:	463a      	mov	r2, r7
 802af42:	f000 fccd 	bl	802b8e0 <__lshift>
 802af46:	1bed      	subs	r5, r5, r7
 802af48:	4604      	mov	r4, r0
 802af4a:	f100 0914 	add.w	r9, r0, #20
 802af4e:	f04f 0a00 	mov.w	sl, #0
 802af52:	e7ae      	b.n	802aeb2 <__gethex+0x202>
 802af54:	f8d8 0004 	ldr.w	r0, [r8, #4]
 802af58:	42a8      	cmp	r0, r5
 802af5a:	dd72      	ble.n	802b042 <__gethex+0x392>
 802af5c:	1b45      	subs	r5, r0, r5
 802af5e:	42ae      	cmp	r6, r5
 802af60:	dc36      	bgt.n	802afd0 <__gethex+0x320>
 802af62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802af66:	2b02      	cmp	r3, #2
 802af68:	d02a      	beq.n	802afc0 <__gethex+0x310>
 802af6a:	2b03      	cmp	r3, #3
 802af6c:	d02c      	beq.n	802afc8 <__gethex+0x318>
 802af6e:	2b01      	cmp	r3, #1
 802af70:	d11c      	bne.n	802afac <__gethex+0x2fc>
 802af72:	42ae      	cmp	r6, r5
 802af74:	d11a      	bne.n	802afac <__gethex+0x2fc>
 802af76:	2e01      	cmp	r6, #1
 802af78:	d112      	bne.n	802afa0 <__gethex+0x2f0>
 802af7a:	9a04      	ldr	r2, [sp, #16]
 802af7c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 802af80:	6013      	str	r3, [r2, #0]
 802af82:	2301      	movs	r3, #1
 802af84:	6123      	str	r3, [r4, #16]
 802af86:	f8c9 3000 	str.w	r3, [r9]
 802af8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802af8c:	2762      	movs	r7, #98	; 0x62
 802af8e:	601c      	str	r4, [r3, #0]
 802af90:	e723      	b.n	802adda <__gethex+0x12a>
 802af92:	bf00      	nop
 802af94:	0802f390 	.word	0x0802f390
 802af98:	0802f318 	.word	0x0802f318
 802af9c:	0802f329 	.word	0x0802f329
 802afa0:	1e71      	subs	r1, r6, #1
 802afa2:	4620      	mov	r0, r4
 802afa4:	f000 fee0 	bl	802bd68 <__any_on>
 802afa8:	2800      	cmp	r0, #0
 802afaa:	d1e6      	bne.n	802af7a <__gethex+0x2ca>
 802afac:	ee18 0a10 	vmov	r0, s16
 802afb0:	4621      	mov	r1, r4
 802afb2:	f000 fa79 	bl	802b4a8 <_Bfree>
 802afb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802afb8:	2300      	movs	r3, #0
 802afba:	6013      	str	r3, [r2, #0]
 802afbc:	2750      	movs	r7, #80	; 0x50
 802afbe:	e70c      	b.n	802adda <__gethex+0x12a>
 802afc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802afc2:	2b00      	cmp	r3, #0
 802afc4:	d1f2      	bne.n	802afac <__gethex+0x2fc>
 802afc6:	e7d8      	b.n	802af7a <__gethex+0x2ca>
 802afc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802afca:	2b00      	cmp	r3, #0
 802afcc:	d1d5      	bne.n	802af7a <__gethex+0x2ca>
 802afce:	e7ed      	b.n	802afac <__gethex+0x2fc>
 802afd0:	1e6f      	subs	r7, r5, #1
 802afd2:	f1ba 0f00 	cmp.w	sl, #0
 802afd6:	d131      	bne.n	802b03c <__gethex+0x38c>
 802afd8:	b127      	cbz	r7, 802afe4 <__gethex+0x334>
 802afda:	4639      	mov	r1, r7
 802afdc:	4620      	mov	r0, r4
 802afde:	f000 fec3 	bl	802bd68 <__any_on>
 802afe2:	4682      	mov	sl, r0
 802afe4:	117b      	asrs	r3, r7, #5
 802afe6:	2101      	movs	r1, #1
 802afe8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 802afec:	f007 071f 	and.w	r7, r7, #31
 802aff0:	fa01 f707 	lsl.w	r7, r1, r7
 802aff4:	421f      	tst	r7, r3
 802aff6:	4629      	mov	r1, r5
 802aff8:	4620      	mov	r0, r4
 802affa:	bf18      	it	ne
 802affc:	f04a 0a02 	orrne.w	sl, sl, #2
 802b000:	1b76      	subs	r6, r6, r5
 802b002:	f7ff fded 	bl	802abe0 <rshift>
 802b006:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802b00a:	2702      	movs	r7, #2
 802b00c:	f1ba 0f00 	cmp.w	sl, #0
 802b010:	d048      	beq.n	802b0a4 <__gethex+0x3f4>
 802b012:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802b016:	2b02      	cmp	r3, #2
 802b018:	d015      	beq.n	802b046 <__gethex+0x396>
 802b01a:	2b03      	cmp	r3, #3
 802b01c:	d017      	beq.n	802b04e <__gethex+0x39e>
 802b01e:	2b01      	cmp	r3, #1
 802b020:	d109      	bne.n	802b036 <__gethex+0x386>
 802b022:	f01a 0f02 	tst.w	sl, #2
 802b026:	d006      	beq.n	802b036 <__gethex+0x386>
 802b028:	f8d9 0000 	ldr.w	r0, [r9]
 802b02c:	ea4a 0a00 	orr.w	sl, sl, r0
 802b030:	f01a 0f01 	tst.w	sl, #1
 802b034:	d10e      	bne.n	802b054 <__gethex+0x3a4>
 802b036:	f047 0710 	orr.w	r7, r7, #16
 802b03a:	e033      	b.n	802b0a4 <__gethex+0x3f4>
 802b03c:	f04f 0a01 	mov.w	sl, #1
 802b040:	e7d0      	b.n	802afe4 <__gethex+0x334>
 802b042:	2701      	movs	r7, #1
 802b044:	e7e2      	b.n	802b00c <__gethex+0x35c>
 802b046:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802b048:	f1c3 0301 	rsb	r3, r3, #1
 802b04c:	9315      	str	r3, [sp, #84]	; 0x54
 802b04e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802b050:	2b00      	cmp	r3, #0
 802b052:	d0f0      	beq.n	802b036 <__gethex+0x386>
 802b054:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802b058:	f104 0314 	add.w	r3, r4, #20
 802b05c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 802b060:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 802b064:	f04f 0c00 	mov.w	ip, #0
 802b068:	4618      	mov	r0, r3
 802b06a:	f853 2b04 	ldr.w	r2, [r3], #4
 802b06e:	f1b2 3fff 	cmp.w	r2, #4294967295
 802b072:	d01c      	beq.n	802b0ae <__gethex+0x3fe>
 802b074:	3201      	adds	r2, #1
 802b076:	6002      	str	r2, [r0, #0]
 802b078:	2f02      	cmp	r7, #2
 802b07a:	f104 0314 	add.w	r3, r4, #20
 802b07e:	d13f      	bne.n	802b100 <__gethex+0x450>
 802b080:	f8d8 2000 	ldr.w	r2, [r8]
 802b084:	3a01      	subs	r2, #1
 802b086:	42b2      	cmp	r2, r6
 802b088:	d10a      	bne.n	802b0a0 <__gethex+0x3f0>
 802b08a:	1171      	asrs	r1, r6, #5
 802b08c:	2201      	movs	r2, #1
 802b08e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802b092:	f006 061f 	and.w	r6, r6, #31
 802b096:	fa02 f606 	lsl.w	r6, r2, r6
 802b09a:	421e      	tst	r6, r3
 802b09c:	bf18      	it	ne
 802b09e:	4617      	movne	r7, r2
 802b0a0:	f047 0720 	orr.w	r7, r7, #32
 802b0a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802b0a6:	601c      	str	r4, [r3, #0]
 802b0a8:	9b04      	ldr	r3, [sp, #16]
 802b0aa:	601d      	str	r5, [r3, #0]
 802b0ac:	e695      	b.n	802adda <__gethex+0x12a>
 802b0ae:	4299      	cmp	r1, r3
 802b0b0:	f843 cc04 	str.w	ip, [r3, #-4]
 802b0b4:	d8d8      	bhi.n	802b068 <__gethex+0x3b8>
 802b0b6:	68a3      	ldr	r3, [r4, #8]
 802b0b8:	459b      	cmp	fp, r3
 802b0ba:	db19      	blt.n	802b0f0 <__gethex+0x440>
 802b0bc:	6861      	ldr	r1, [r4, #4]
 802b0be:	ee18 0a10 	vmov	r0, s16
 802b0c2:	3101      	adds	r1, #1
 802b0c4:	f000 f9b0 	bl	802b428 <_Balloc>
 802b0c8:	4681      	mov	r9, r0
 802b0ca:	b918      	cbnz	r0, 802b0d4 <__gethex+0x424>
 802b0cc:	4b1a      	ldr	r3, [pc, #104]	; (802b138 <__gethex+0x488>)
 802b0ce:	4602      	mov	r2, r0
 802b0d0:	2184      	movs	r1, #132	; 0x84
 802b0d2:	e6a8      	b.n	802ae26 <__gethex+0x176>
 802b0d4:	6922      	ldr	r2, [r4, #16]
 802b0d6:	3202      	adds	r2, #2
 802b0d8:	f104 010c 	add.w	r1, r4, #12
 802b0dc:	0092      	lsls	r2, r2, #2
 802b0de:	300c      	adds	r0, #12
 802b0e0:	f7fc fe02 	bl	8027ce8 <memcpy>
 802b0e4:	4621      	mov	r1, r4
 802b0e6:	ee18 0a10 	vmov	r0, s16
 802b0ea:	f000 f9dd 	bl	802b4a8 <_Bfree>
 802b0ee:	464c      	mov	r4, r9
 802b0f0:	6923      	ldr	r3, [r4, #16]
 802b0f2:	1c5a      	adds	r2, r3, #1
 802b0f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802b0f8:	6122      	str	r2, [r4, #16]
 802b0fa:	2201      	movs	r2, #1
 802b0fc:	615a      	str	r2, [r3, #20]
 802b0fe:	e7bb      	b.n	802b078 <__gethex+0x3c8>
 802b100:	6922      	ldr	r2, [r4, #16]
 802b102:	455a      	cmp	r2, fp
 802b104:	dd0b      	ble.n	802b11e <__gethex+0x46e>
 802b106:	2101      	movs	r1, #1
 802b108:	4620      	mov	r0, r4
 802b10a:	f7ff fd69 	bl	802abe0 <rshift>
 802b10e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802b112:	3501      	adds	r5, #1
 802b114:	42ab      	cmp	r3, r5
 802b116:	f6ff aed0 	blt.w	802aeba <__gethex+0x20a>
 802b11a:	2701      	movs	r7, #1
 802b11c:	e7c0      	b.n	802b0a0 <__gethex+0x3f0>
 802b11e:	f016 061f 	ands.w	r6, r6, #31
 802b122:	d0fa      	beq.n	802b11a <__gethex+0x46a>
 802b124:	4453      	add	r3, sl
 802b126:	f1c6 0620 	rsb	r6, r6, #32
 802b12a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802b12e:	f000 fa6d 	bl	802b60c <__hi0bits>
 802b132:	42b0      	cmp	r0, r6
 802b134:	dbe7      	blt.n	802b106 <__gethex+0x456>
 802b136:	e7f0      	b.n	802b11a <__gethex+0x46a>
 802b138:	0802f318 	.word	0x0802f318

0802b13c <L_shift>:
 802b13c:	f1c2 0208 	rsb	r2, r2, #8
 802b140:	0092      	lsls	r2, r2, #2
 802b142:	b570      	push	{r4, r5, r6, lr}
 802b144:	f1c2 0620 	rsb	r6, r2, #32
 802b148:	6843      	ldr	r3, [r0, #4]
 802b14a:	6804      	ldr	r4, [r0, #0]
 802b14c:	fa03 f506 	lsl.w	r5, r3, r6
 802b150:	432c      	orrs	r4, r5
 802b152:	40d3      	lsrs	r3, r2
 802b154:	6004      	str	r4, [r0, #0]
 802b156:	f840 3f04 	str.w	r3, [r0, #4]!
 802b15a:	4288      	cmp	r0, r1
 802b15c:	d3f4      	bcc.n	802b148 <L_shift+0xc>
 802b15e:	bd70      	pop	{r4, r5, r6, pc}

0802b160 <__match>:
 802b160:	b530      	push	{r4, r5, lr}
 802b162:	6803      	ldr	r3, [r0, #0]
 802b164:	3301      	adds	r3, #1
 802b166:	f811 4b01 	ldrb.w	r4, [r1], #1
 802b16a:	b914      	cbnz	r4, 802b172 <__match+0x12>
 802b16c:	6003      	str	r3, [r0, #0]
 802b16e:	2001      	movs	r0, #1
 802b170:	bd30      	pop	{r4, r5, pc}
 802b172:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b176:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 802b17a:	2d19      	cmp	r5, #25
 802b17c:	bf98      	it	ls
 802b17e:	3220      	addls	r2, #32
 802b180:	42a2      	cmp	r2, r4
 802b182:	d0f0      	beq.n	802b166 <__match+0x6>
 802b184:	2000      	movs	r0, #0
 802b186:	e7f3      	b.n	802b170 <__match+0x10>

0802b188 <__hexnan>:
 802b188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b18c:	680b      	ldr	r3, [r1, #0]
 802b18e:	115e      	asrs	r6, r3, #5
 802b190:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802b194:	f013 031f 	ands.w	r3, r3, #31
 802b198:	b087      	sub	sp, #28
 802b19a:	bf18      	it	ne
 802b19c:	3604      	addne	r6, #4
 802b19e:	2500      	movs	r5, #0
 802b1a0:	1f37      	subs	r7, r6, #4
 802b1a2:	4690      	mov	r8, r2
 802b1a4:	6802      	ldr	r2, [r0, #0]
 802b1a6:	9301      	str	r3, [sp, #4]
 802b1a8:	4682      	mov	sl, r0
 802b1aa:	f846 5c04 	str.w	r5, [r6, #-4]
 802b1ae:	46b9      	mov	r9, r7
 802b1b0:	463c      	mov	r4, r7
 802b1b2:	9502      	str	r5, [sp, #8]
 802b1b4:	46ab      	mov	fp, r5
 802b1b6:	7851      	ldrb	r1, [r2, #1]
 802b1b8:	1c53      	adds	r3, r2, #1
 802b1ba:	9303      	str	r3, [sp, #12]
 802b1bc:	b341      	cbz	r1, 802b210 <__hexnan+0x88>
 802b1be:	4608      	mov	r0, r1
 802b1c0:	9205      	str	r2, [sp, #20]
 802b1c2:	9104      	str	r1, [sp, #16]
 802b1c4:	f7ff fd5e 	bl	802ac84 <__hexdig_fun>
 802b1c8:	2800      	cmp	r0, #0
 802b1ca:	d14f      	bne.n	802b26c <__hexnan+0xe4>
 802b1cc:	9904      	ldr	r1, [sp, #16]
 802b1ce:	9a05      	ldr	r2, [sp, #20]
 802b1d0:	2920      	cmp	r1, #32
 802b1d2:	d818      	bhi.n	802b206 <__hexnan+0x7e>
 802b1d4:	9b02      	ldr	r3, [sp, #8]
 802b1d6:	459b      	cmp	fp, r3
 802b1d8:	dd13      	ble.n	802b202 <__hexnan+0x7a>
 802b1da:	454c      	cmp	r4, r9
 802b1dc:	d206      	bcs.n	802b1ec <__hexnan+0x64>
 802b1de:	2d07      	cmp	r5, #7
 802b1e0:	dc04      	bgt.n	802b1ec <__hexnan+0x64>
 802b1e2:	462a      	mov	r2, r5
 802b1e4:	4649      	mov	r1, r9
 802b1e6:	4620      	mov	r0, r4
 802b1e8:	f7ff ffa8 	bl	802b13c <L_shift>
 802b1ec:	4544      	cmp	r4, r8
 802b1ee:	d950      	bls.n	802b292 <__hexnan+0x10a>
 802b1f0:	2300      	movs	r3, #0
 802b1f2:	f1a4 0904 	sub.w	r9, r4, #4
 802b1f6:	f844 3c04 	str.w	r3, [r4, #-4]
 802b1fa:	f8cd b008 	str.w	fp, [sp, #8]
 802b1fe:	464c      	mov	r4, r9
 802b200:	461d      	mov	r5, r3
 802b202:	9a03      	ldr	r2, [sp, #12]
 802b204:	e7d7      	b.n	802b1b6 <__hexnan+0x2e>
 802b206:	2929      	cmp	r1, #41	; 0x29
 802b208:	d156      	bne.n	802b2b8 <__hexnan+0x130>
 802b20a:	3202      	adds	r2, #2
 802b20c:	f8ca 2000 	str.w	r2, [sl]
 802b210:	f1bb 0f00 	cmp.w	fp, #0
 802b214:	d050      	beq.n	802b2b8 <__hexnan+0x130>
 802b216:	454c      	cmp	r4, r9
 802b218:	d206      	bcs.n	802b228 <__hexnan+0xa0>
 802b21a:	2d07      	cmp	r5, #7
 802b21c:	dc04      	bgt.n	802b228 <__hexnan+0xa0>
 802b21e:	462a      	mov	r2, r5
 802b220:	4649      	mov	r1, r9
 802b222:	4620      	mov	r0, r4
 802b224:	f7ff ff8a 	bl	802b13c <L_shift>
 802b228:	4544      	cmp	r4, r8
 802b22a:	d934      	bls.n	802b296 <__hexnan+0x10e>
 802b22c:	f1a8 0204 	sub.w	r2, r8, #4
 802b230:	4623      	mov	r3, r4
 802b232:	f853 1b04 	ldr.w	r1, [r3], #4
 802b236:	f842 1f04 	str.w	r1, [r2, #4]!
 802b23a:	429f      	cmp	r7, r3
 802b23c:	d2f9      	bcs.n	802b232 <__hexnan+0xaa>
 802b23e:	1b3b      	subs	r3, r7, r4
 802b240:	f023 0303 	bic.w	r3, r3, #3
 802b244:	3304      	adds	r3, #4
 802b246:	3401      	adds	r4, #1
 802b248:	3e03      	subs	r6, #3
 802b24a:	42b4      	cmp	r4, r6
 802b24c:	bf88      	it	hi
 802b24e:	2304      	movhi	r3, #4
 802b250:	4443      	add	r3, r8
 802b252:	2200      	movs	r2, #0
 802b254:	f843 2b04 	str.w	r2, [r3], #4
 802b258:	429f      	cmp	r7, r3
 802b25a:	d2fb      	bcs.n	802b254 <__hexnan+0xcc>
 802b25c:	683b      	ldr	r3, [r7, #0]
 802b25e:	b91b      	cbnz	r3, 802b268 <__hexnan+0xe0>
 802b260:	4547      	cmp	r7, r8
 802b262:	d127      	bne.n	802b2b4 <__hexnan+0x12c>
 802b264:	2301      	movs	r3, #1
 802b266:	603b      	str	r3, [r7, #0]
 802b268:	2005      	movs	r0, #5
 802b26a:	e026      	b.n	802b2ba <__hexnan+0x132>
 802b26c:	3501      	adds	r5, #1
 802b26e:	2d08      	cmp	r5, #8
 802b270:	f10b 0b01 	add.w	fp, fp, #1
 802b274:	dd06      	ble.n	802b284 <__hexnan+0xfc>
 802b276:	4544      	cmp	r4, r8
 802b278:	d9c3      	bls.n	802b202 <__hexnan+0x7a>
 802b27a:	2300      	movs	r3, #0
 802b27c:	f844 3c04 	str.w	r3, [r4, #-4]
 802b280:	2501      	movs	r5, #1
 802b282:	3c04      	subs	r4, #4
 802b284:	6822      	ldr	r2, [r4, #0]
 802b286:	f000 000f 	and.w	r0, r0, #15
 802b28a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 802b28e:	6022      	str	r2, [r4, #0]
 802b290:	e7b7      	b.n	802b202 <__hexnan+0x7a>
 802b292:	2508      	movs	r5, #8
 802b294:	e7b5      	b.n	802b202 <__hexnan+0x7a>
 802b296:	9b01      	ldr	r3, [sp, #4]
 802b298:	2b00      	cmp	r3, #0
 802b29a:	d0df      	beq.n	802b25c <__hexnan+0xd4>
 802b29c:	f04f 32ff 	mov.w	r2, #4294967295
 802b2a0:	f1c3 0320 	rsb	r3, r3, #32
 802b2a4:	fa22 f303 	lsr.w	r3, r2, r3
 802b2a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802b2ac:	401a      	ands	r2, r3
 802b2ae:	f846 2c04 	str.w	r2, [r6, #-4]
 802b2b2:	e7d3      	b.n	802b25c <__hexnan+0xd4>
 802b2b4:	3f04      	subs	r7, #4
 802b2b6:	e7d1      	b.n	802b25c <__hexnan+0xd4>
 802b2b8:	2004      	movs	r0, #4
 802b2ba:	b007      	add	sp, #28
 802b2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802b2c0 <_localeconv_r>:
 802b2c0:	4800      	ldr	r0, [pc, #0]	; (802b2c4 <_localeconv_r+0x4>)
 802b2c2:	4770      	bx	lr
 802b2c4:	200001f0 	.word	0x200001f0

0802b2c8 <_lseek_r>:
 802b2c8:	b538      	push	{r3, r4, r5, lr}
 802b2ca:	4d07      	ldr	r5, [pc, #28]	; (802b2e8 <_lseek_r+0x20>)
 802b2cc:	4604      	mov	r4, r0
 802b2ce:	4608      	mov	r0, r1
 802b2d0:	4611      	mov	r1, r2
 802b2d2:	2200      	movs	r2, #0
 802b2d4:	602a      	str	r2, [r5, #0]
 802b2d6:	461a      	mov	r2, r3
 802b2d8:	f7d7 fe9a 	bl	8003010 <_lseek>
 802b2dc:	1c43      	adds	r3, r0, #1
 802b2de:	d102      	bne.n	802b2e6 <_lseek_r+0x1e>
 802b2e0:	682b      	ldr	r3, [r5, #0]
 802b2e2:	b103      	cbz	r3, 802b2e6 <_lseek_r+0x1e>
 802b2e4:	6023      	str	r3, [r4, #0]
 802b2e6:	bd38      	pop	{r3, r4, r5, pc}
 802b2e8:	2000c654 	.word	0x2000c654

0802b2ec <__swhatbuf_r>:
 802b2ec:	b570      	push	{r4, r5, r6, lr}
 802b2ee:	460e      	mov	r6, r1
 802b2f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b2f4:	2900      	cmp	r1, #0
 802b2f6:	b096      	sub	sp, #88	; 0x58
 802b2f8:	4614      	mov	r4, r2
 802b2fa:	461d      	mov	r5, r3
 802b2fc:	da08      	bge.n	802b310 <__swhatbuf_r+0x24>
 802b2fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802b302:	2200      	movs	r2, #0
 802b304:	602a      	str	r2, [r5, #0]
 802b306:	061a      	lsls	r2, r3, #24
 802b308:	d410      	bmi.n	802b32c <__swhatbuf_r+0x40>
 802b30a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802b30e:	e00e      	b.n	802b32e <__swhatbuf_r+0x42>
 802b310:	466a      	mov	r2, sp
 802b312:	f000 ff2d 	bl	802c170 <_fstat_r>
 802b316:	2800      	cmp	r0, #0
 802b318:	dbf1      	blt.n	802b2fe <__swhatbuf_r+0x12>
 802b31a:	9a01      	ldr	r2, [sp, #4]
 802b31c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802b320:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802b324:	425a      	negs	r2, r3
 802b326:	415a      	adcs	r2, r3
 802b328:	602a      	str	r2, [r5, #0]
 802b32a:	e7ee      	b.n	802b30a <__swhatbuf_r+0x1e>
 802b32c:	2340      	movs	r3, #64	; 0x40
 802b32e:	2000      	movs	r0, #0
 802b330:	6023      	str	r3, [r4, #0]
 802b332:	b016      	add	sp, #88	; 0x58
 802b334:	bd70      	pop	{r4, r5, r6, pc}
	...

0802b338 <__smakebuf_r>:
 802b338:	898b      	ldrh	r3, [r1, #12]
 802b33a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b33c:	079d      	lsls	r5, r3, #30
 802b33e:	4606      	mov	r6, r0
 802b340:	460c      	mov	r4, r1
 802b342:	d507      	bpl.n	802b354 <__smakebuf_r+0x1c>
 802b344:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802b348:	6023      	str	r3, [r4, #0]
 802b34a:	6123      	str	r3, [r4, #16]
 802b34c:	2301      	movs	r3, #1
 802b34e:	6163      	str	r3, [r4, #20]
 802b350:	b002      	add	sp, #8
 802b352:	bd70      	pop	{r4, r5, r6, pc}
 802b354:	ab01      	add	r3, sp, #4
 802b356:	466a      	mov	r2, sp
 802b358:	f7ff ffc8 	bl	802b2ec <__swhatbuf_r>
 802b35c:	9900      	ldr	r1, [sp, #0]
 802b35e:	4605      	mov	r5, r0
 802b360:	4630      	mov	r0, r6
 802b362:	f7fc fd43 	bl	8027dec <_malloc_r>
 802b366:	b948      	cbnz	r0, 802b37c <__smakebuf_r+0x44>
 802b368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b36c:	059a      	lsls	r2, r3, #22
 802b36e:	d4ef      	bmi.n	802b350 <__smakebuf_r+0x18>
 802b370:	f023 0303 	bic.w	r3, r3, #3
 802b374:	f043 0302 	orr.w	r3, r3, #2
 802b378:	81a3      	strh	r3, [r4, #12]
 802b37a:	e7e3      	b.n	802b344 <__smakebuf_r+0xc>
 802b37c:	4b0d      	ldr	r3, [pc, #52]	; (802b3b4 <__smakebuf_r+0x7c>)
 802b37e:	62b3      	str	r3, [r6, #40]	; 0x28
 802b380:	89a3      	ldrh	r3, [r4, #12]
 802b382:	6020      	str	r0, [r4, #0]
 802b384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802b388:	81a3      	strh	r3, [r4, #12]
 802b38a:	9b00      	ldr	r3, [sp, #0]
 802b38c:	6163      	str	r3, [r4, #20]
 802b38e:	9b01      	ldr	r3, [sp, #4]
 802b390:	6120      	str	r0, [r4, #16]
 802b392:	b15b      	cbz	r3, 802b3ac <__smakebuf_r+0x74>
 802b394:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b398:	4630      	mov	r0, r6
 802b39a:	f000 fefb 	bl	802c194 <_isatty_r>
 802b39e:	b128      	cbz	r0, 802b3ac <__smakebuf_r+0x74>
 802b3a0:	89a3      	ldrh	r3, [r4, #12]
 802b3a2:	f023 0303 	bic.w	r3, r3, #3
 802b3a6:	f043 0301 	orr.w	r3, r3, #1
 802b3aa:	81a3      	strh	r3, [r4, #12]
 802b3ac:	89a0      	ldrh	r0, [r4, #12]
 802b3ae:	4305      	orrs	r5, r0
 802b3b0:	81a5      	strh	r5, [r4, #12]
 802b3b2:	e7cd      	b.n	802b350 <__smakebuf_r+0x18>
 802b3b4:	08027ab1 	.word	0x08027ab1

0802b3b8 <__ascii_mbtowc>:
 802b3b8:	b082      	sub	sp, #8
 802b3ba:	b901      	cbnz	r1, 802b3be <__ascii_mbtowc+0x6>
 802b3bc:	a901      	add	r1, sp, #4
 802b3be:	b142      	cbz	r2, 802b3d2 <__ascii_mbtowc+0x1a>
 802b3c0:	b14b      	cbz	r3, 802b3d6 <__ascii_mbtowc+0x1e>
 802b3c2:	7813      	ldrb	r3, [r2, #0]
 802b3c4:	600b      	str	r3, [r1, #0]
 802b3c6:	7812      	ldrb	r2, [r2, #0]
 802b3c8:	1e10      	subs	r0, r2, #0
 802b3ca:	bf18      	it	ne
 802b3cc:	2001      	movne	r0, #1
 802b3ce:	b002      	add	sp, #8
 802b3d0:	4770      	bx	lr
 802b3d2:	4610      	mov	r0, r2
 802b3d4:	e7fb      	b.n	802b3ce <__ascii_mbtowc+0x16>
 802b3d6:	f06f 0001 	mvn.w	r0, #1
 802b3da:	e7f8      	b.n	802b3ce <__ascii_mbtowc+0x16>

0802b3dc <memmove>:
 802b3dc:	4288      	cmp	r0, r1
 802b3de:	b510      	push	{r4, lr}
 802b3e0:	eb01 0402 	add.w	r4, r1, r2
 802b3e4:	d902      	bls.n	802b3ec <memmove+0x10>
 802b3e6:	4284      	cmp	r4, r0
 802b3e8:	4623      	mov	r3, r4
 802b3ea:	d807      	bhi.n	802b3fc <memmove+0x20>
 802b3ec:	1e43      	subs	r3, r0, #1
 802b3ee:	42a1      	cmp	r1, r4
 802b3f0:	d008      	beq.n	802b404 <memmove+0x28>
 802b3f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 802b3f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 802b3fa:	e7f8      	b.n	802b3ee <memmove+0x12>
 802b3fc:	4402      	add	r2, r0
 802b3fe:	4601      	mov	r1, r0
 802b400:	428a      	cmp	r2, r1
 802b402:	d100      	bne.n	802b406 <memmove+0x2a>
 802b404:	bd10      	pop	{r4, pc}
 802b406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802b40a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802b40e:	e7f7      	b.n	802b400 <memmove+0x24>

0802b410 <__malloc_lock>:
 802b410:	4801      	ldr	r0, [pc, #4]	; (802b418 <__malloc_lock+0x8>)
 802b412:	f7fc bc56 	b.w	8027cc2 <__retarget_lock_acquire_recursive>
 802b416:	bf00      	nop
 802b418:	2000c541 	.word	0x2000c541

0802b41c <__malloc_unlock>:
 802b41c:	4801      	ldr	r0, [pc, #4]	; (802b424 <__malloc_unlock+0x8>)
 802b41e:	f7fc bc52 	b.w	8027cc6 <__retarget_lock_release_recursive>
 802b422:	bf00      	nop
 802b424:	2000c541 	.word	0x2000c541

0802b428 <_Balloc>:
 802b428:	b570      	push	{r4, r5, r6, lr}
 802b42a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802b42c:	4604      	mov	r4, r0
 802b42e:	460d      	mov	r5, r1
 802b430:	b976      	cbnz	r6, 802b450 <_Balloc+0x28>
 802b432:	2010      	movs	r0, #16
 802b434:	f7fc fc48 	bl	8027cc8 <malloc>
 802b438:	4602      	mov	r2, r0
 802b43a:	6260      	str	r0, [r4, #36]	; 0x24
 802b43c:	b920      	cbnz	r0, 802b448 <_Balloc+0x20>
 802b43e:	4b18      	ldr	r3, [pc, #96]	; (802b4a0 <_Balloc+0x78>)
 802b440:	4818      	ldr	r0, [pc, #96]	; (802b4a4 <_Balloc+0x7c>)
 802b442:	2166      	movs	r1, #102	; 0x66
 802b444:	f7fc fad8 	bl	80279f8 <__assert_func>
 802b448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802b44c:	6006      	str	r6, [r0, #0]
 802b44e:	60c6      	str	r6, [r0, #12]
 802b450:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802b452:	68f3      	ldr	r3, [r6, #12]
 802b454:	b183      	cbz	r3, 802b478 <_Balloc+0x50>
 802b456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802b458:	68db      	ldr	r3, [r3, #12]
 802b45a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802b45e:	b9b8      	cbnz	r0, 802b490 <_Balloc+0x68>
 802b460:	2101      	movs	r1, #1
 802b462:	fa01 f605 	lsl.w	r6, r1, r5
 802b466:	1d72      	adds	r2, r6, #5
 802b468:	0092      	lsls	r2, r2, #2
 802b46a:	4620      	mov	r0, r4
 802b46c:	f000 fc9d 	bl	802bdaa <_calloc_r>
 802b470:	b160      	cbz	r0, 802b48c <_Balloc+0x64>
 802b472:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802b476:	e00e      	b.n	802b496 <_Balloc+0x6e>
 802b478:	2221      	movs	r2, #33	; 0x21
 802b47a:	2104      	movs	r1, #4
 802b47c:	4620      	mov	r0, r4
 802b47e:	f000 fc94 	bl	802bdaa <_calloc_r>
 802b482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802b484:	60f0      	str	r0, [r6, #12]
 802b486:	68db      	ldr	r3, [r3, #12]
 802b488:	2b00      	cmp	r3, #0
 802b48a:	d1e4      	bne.n	802b456 <_Balloc+0x2e>
 802b48c:	2000      	movs	r0, #0
 802b48e:	bd70      	pop	{r4, r5, r6, pc}
 802b490:	6802      	ldr	r2, [r0, #0]
 802b492:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802b496:	2300      	movs	r3, #0
 802b498:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802b49c:	e7f7      	b.n	802b48e <_Balloc+0x66>
 802b49e:	bf00      	nop
 802b4a0:	0802f2a6 	.word	0x0802f2a6
 802b4a4:	0802f3a4 	.word	0x0802f3a4

0802b4a8 <_Bfree>:
 802b4a8:	b570      	push	{r4, r5, r6, lr}
 802b4aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802b4ac:	4605      	mov	r5, r0
 802b4ae:	460c      	mov	r4, r1
 802b4b0:	b976      	cbnz	r6, 802b4d0 <_Bfree+0x28>
 802b4b2:	2010      	movs	r0, #16
 802b4b4:	f7fc fc08 	bl	8027cc8 <malloc>
 802b4b8:	4602      	mov	r2, r0
 802b4ba:	6268      	str	r0, [r5, #36]	; 0x24
 802b4bc:	b920      	cbnz	r0, 802b4c8 <_Bfree+0x20>
 802b4be:	4b09      	ldr	r3, [pc, #36]	; (802b4e4 <_Bfree+0x3c>)
 802b4c0:	4809      	ldr	r0, [pc, #36]	; (802b4e8 <_Bfree+0x40>)
 802b4c2:	218a      	movs	r1, #138	; 0x8a
 802b4c4:	f7fc fa98 	bl	80279f8 <__assert_func>
 802b4c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802b4cc:	6006      	str	r6, [r0, #0]
 802b4ce:	60c6      	str	r6, [r0, #12]
 802b4d0:	b13c      	cbz	r4, 802b4e2 <_Bfree+0x3a>
 802b4d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802b4d4:	6862      	ldr	r2, [r4, #4]
 802b4d6:	68db      	ldr	r3, [r3, #12]
 802b4d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802b4dc:	6021      	str	r1, [r4, #0]
 802b4de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802b4e2:	bd70      	pop	{r4, r5, r6, pc}
 802b4e4:	0802f2a6 	.word	0x0802f2a6
 802b4e8:	0802f3a4 	.word	0x0802f3a4

0802b4ec <__multadd>:
 802b4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b4f0:	690d      	ldr	r5, [r1, #16]
 802b4f2:	4607      	mov	r7, r0
 802b4f4:	460c      	mov	r4, r1
 802b4f6:	461e      	mov	r6, r3
 802b4f8:	f101 0c14 	add.w	ip, r1, #20
 802b4fc:	2000      	movs	r0, #0
 802b4fe:	f8dc 3000 	ldr.w	r3, [ip]
 802b502:	b299      	uxth	r1, r3
 802b504:	fb02 6101 	mla	r1, r2, r1, r6
 802b508:	0c1e      	lsrs	r6, r3, #16
 802b50a:	0c0b      	lsrs	r3, r1, #16
 802b50c:	fb02 3306 	mla	r3, r2, r6, r3
 802b510:	b289      	uxth	r1, r1
 802b512:	3001      	adds	r0, #1
 802b514:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802b518:	4285      	cmp	r5, r0
 802b51a:	f84c 1b04 	str.w	r1, [ip], #4
 802b51e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802b522:	dcec      	bgt.n	802b4fe <__multadd+0x12>
 802b524:	b30e      	cbz	r6, 802b56a <__multadd+0x7e>
 802b526:	68a3      	ldr	r3, [r4, #8]
 802b528:	42ab      	cmp	r3, r5
 802b52a:	dc19      	bgt.n	802b560 <__multadd+0x74>
 802b52c:	6861      	ldr	r1, [r4, #4]
 802b52e:	4638      	mov	r0, r7
 802b530:	3101      	adds	r1, #1
 802b532:	f7ff ff79 	bl	802b428 <_Balloc>
 802b536:	4680      	mov	r8, r0
 802b538:	b928      	cbnz	r0, 802b546 <__multadd+0x5a>
 802b53a:	4602      	mov	r2, r0
 802b53c:	4b0c      	ldr	r3, [pc, #48]	; (802b570 <__multadd+0x84>)
 802b53e:	480d      	ldr	r0, [pc, #52]	; (802b574 <__multadd+0x88>)
 802b540:	21b5      	movs	r1, #181	; 0xb5
 802b542:	f7fc fa59 	bl	80279f8 <__assert_func>
 802b546:	6922      	ldr	r2, [r4, #16]
 802b548:	3202      	adds	r2, #2
 802b54a:	f104 010c 	add.w	r1, r4, #12
 802b54e:	0092      	lsls	r2, r2, #2
 802b550:	300c      	adds	r0, #12
 802b552:	f7fc fbc9 	bl	8027ce8 <memcpy>
 802b556:	4621      	mov	r1, r4
 802b558:	4638      	mov	r0, r7
 802b55a:	f7ff ffa5 	bl	802b4a8 <_Bfree>
 802b55e:	4644      	mov	r4, r8
 802b560:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802b564:	3501      	adds	r5, #1
 802b566:	615e      	str	r6, [r3, #20]
 802b568:	6125      	str	r5, [r4, #16]
 802b56a:	4620      	mov	r0, r4
 802b56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b570:	0802f318 	.word	0x0802f318
 802b574:	0802f3a4 	.word	0x0802f3a4

0802b578 <__s2b>:
 802b578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b57c:	460c      	mov	r4, r1
 802b57e:	4615      	mov	r5, r2
 802b580:	461f      	mov	r7, r3
 802b582:	2209      	movs	r2, #9
 802b584:	3308      	adds	r3, #8
 802b586:	4606      	mov	r6, r0
 802b588:	fb93 f3f2 	sdiv	r3, r3, r2
 802b58c:	2100      	movs	r1, #0
 802b58e:	2201      	movs	r2, #1
 802b590:	429a      	cmp	r2, r3
 802b592:	db09      	blt.n	802b5a8 <__s2b+0x30>
 802b594:	4630      	mov	r0, r6
 802b596:	f7ff ff47 	bl	802b428 <_Balloc>
 802b59a:	b940      	cbnz	r0, 802b5ae <__s2b+0x36>
 802b59c:	4602      	mov	r2, r0
 802b59e:	4b19      	ldr	r3, [pc, #100]	; (802b604 <__s2b+0x8c>)
 802b5a0:	4819      	ldr	r0, [pc, #100]	; (802b608 <__s2b+0x90>)
 802b5a2:	21ce      	movs	r1, #206	; 0xce
 802b5a4:	f7fc fa28 	bl	80279f8 <__assert_func>
 802b5a8:	0052      	lsls	r2, r2, #1
 802b5aa:	3101      	adds	r1, #1
 802b5ac:	e7f0      	b.n	802b590 <__s2b+0x18>
 802b5ae:	9b08      	ldr	r3, [sp, #32]
 802b5b0:	6143      	str	r3, [r0, #20]
 802b5b2:	2d09      	cmp	r5, #9
 802b5b4:	f04f 0301 	mov.w	r3, #1
 802b5b8:	6103      	str	r3, [r0, #16]
 802b5ba:	dd16      	ble.n	802b5ea <__s2b+0x72>
 802b5bc:	f104 0909 	add.w	r9, r4, #9
 802b5c0:	46c8      	mov	r8, r9
 802b5c2:	442c      	add	r4, r5
 802b5c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 802b5c8:	4601      	mov	r1, r0
 802b5ca:	3b30      	subs	r3, #48	; 0x30
 802b5cc:	220a      	movs	r2, #10
 802b5ce:	4630      	mov	r0, r6
 802b5d0:	f7ff ff8c 	bl	802b4ec <__multadd>
 802b5d4:	45a0      	cmp	r8, r4
 802b5d6:	d1f5      	bne.n	802b5c4 <__s2b+0x4c>
 802b5d8:	f1a5 0408 	sub.w	r4, r5, #8
 802b5dc:	444c      	add	r4, r9
 802b5de:	1b2d      	subs	r5, r5, r4
 802b5e0:	1963      	adds	r3, r4, r5
 802b5e2:	42bb      	cmp	r3, r7
 802b5e4:	db04      	blt.n	802b5f0 <__s2b+0x78>
 802b5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b5ea:	340a      	adds	r4, #10
 802b5ec:	2509      	movs	r5, #9
 802b5ee:	e7f6      	b.n	802b5de <__s2b+0x66>
 802b5f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 802b5f4:	4601      	mov	r1, r0
 802b5f6:	3b30      	subs	r3, #48	; 0x30
 802b5f8:	220a      	movs	r2, #10
 802b5fa:	4630      	mov	r0, r6
 802b5fc:	f7ff ff76 	bl	802b4ec <__multadd>
 802b600:	e7ee      	b.n	802b5e0 <__s2b+0x68>
 802b602:	bf00      	nop
 802b604:	0802f318 	.word	0x0802f318
 802b608:	0802f3a4 	.word	0x0802f3a4

0802b60c <__hi0bits>:
 802b60c:	0c03      	lsrs	r3, r0, #16
 802b60e:	041b      	lsls	r3, r3, #16
 802b610:	b9d3      	cbnz	r3, 802b648 <__hi0bits+0x3c>
 802b612:	0400      	lsls	r0, r0, #16
 802b614:	2310      	movs	r3, #16
 802b616:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802b61a:	bf04      	itt	eq
 802b61c:	0200      	lsleq	r0, r0, #8
 802b61e:	3308      	addeq	r3, #8
 802b620:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802b624:	bf04      	itt	eq
 802b626:	0100      	lsleq	r0, r0, #4
 802b628:	3304      	addeq	r3, #4
 802b62a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802b62e:	bf04      	itt	eq
 802b630:	0080      	lsleq	r0, r0, #2
 802b632:	3302      	addeq	r3, #2
 802b634:	2800      	cmp	r0, #0
 802b636:	db05      	blt.n	802b644 <__hi0bits+0x38>
 802b638:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802b63c:	f103 0301 	add.w	r3, r3, #1
 802b640:	bf08      	it	eq
 802b642:	2320      	moveq	r3, #32
 802b644:	4618      	mov	r0, r3
 802b646:	4770      	bx	lr
 802b648:	2300      	movs	r3, #0
 802b64a:	e7e4      	b.n	802b616 <__hi0bits+0xa>

0802b64c <__lo0bits>:
 802b64c:	6803      	ldr	r3, [r0, #0]
 802b64e:	f013 0207 	ands.w	r2, r3, #7
 802b652:	4601      	mov	r1, r0
 802b654:	d00b      	beq.n	802b66e <__lo0bits+0x22>
 802b656:	07da      	lsls	r2, r3, #31
 802b658:	d423      	bmi.n	802b6a2 <__lo0bits+0x56>
 802b65a:	0798      	lsls	r0, r3, #30
 802b65c:	bf49      	itett	mi
 802b65e:	085b      	lsrmi	r3, r3, #1
 802b660:	089b      	lsrpl	r3, r3, #2
 802b662:	2001      	movmi	r0, #1
 802b664:	600b      	strmi	r3, [r1, #0]
 802b666:	bf5c      	itt	pl
 802b668:	600b      	strpl	r3, [r1, #0]
 802b66a:	2002      	movpl	r0, #2
 802b66c:	4770      	bx	lr
 802b66e:	b298      	uxth	r0, r3
 802b670:	b9a8      	cbnz	r0, 802b69e <__lo0bits+0x52>
 802b672:	0c1b      	lsrs	r3, r3, #16
 802b674:	2010      	movs	r0, #16
 802b676:	b2da      	uxtb	r2, r3
 802b678:	b90a      	cbnz	r2, 802b67e <__lo0bits+0x32>
 802b67a:	3008      	adds	r0, #8
 802b67c:	0a1b      	lsrs	r3, r3, #8
 802b67e:	071a      	lsls	r2, r3, #28
 802b680:	bf04      	itt	eq
 802b682:	091b      	lsreq	r3, r3, #4
 802b684:	3004      	addeq	r0, #4
 802b686:	079a      	lsls	r2, r3, #30
 802b688:	bf04      	itt	eq
 802b68a:	089b      	lsreq	r3, r3, #2
 802b68c:	3002      	addeq	r0, #2
 802b68e:	07da      	lsls	r2, r3, #31
 802b690:	d403      	bmi.n	802b69a <__lo0bits+0x4e>
 802b692:	085b      	lsrs	r3, r3, #1
 802b694:	f100 0001 	add.w	r0, r0, #1
 802b698:	d005      	beq.n	802b6a6 <__lo0bits+0x5a>
 802b69a:	600b      	str	r3, [r1, #0]
 802b69c:	4770      	bx	lr
 802b69e:	4610      	mov	r0, r2
 802b6a0:	e7e9      	b.n	802b676 <__lo0bits+0x2a>
 802b6a2:	2000      	movs	r0, #0
 802b6a4:	4770      	bx	lr
 802b6a6:	2020      	movs	r0, #32
 802b6a8:	4770      	bx	lr
	...

0802b6ac <__i2b>:
 802b6ac:	b510      	push	{r4, lr}
 802b6ae:	460c      	mov	r4, r1
 802b6b0:	2101      	movs	r1, #1
 802b6b2:	f7ff feb9 	bl	802b428 <_Balloc>
 802b6b6:	4602      	mov	r2, r0
 802b6b8:	b928      	cbnz	r0, 802b6c6 <__i2b+0x1a>
 802b6ba:	4b05      	ldr	r3, [pc, #20]	; (802b6d0 <__i2b+0x24>)
 802b6bc:	4805      	ldr	r0, [pc, #20]	; (802b6d4 <__i2b+0x28>)
 802b6be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802b6c2:	f7fc f999 	bl	80279f8 <__assert_func>
 802b6c6:	2301      	movs	r3, #1
 802b6c8:	6144      	str	r4, [r0, #20]
 802b6ca:	6103      	str	r3, [r0, #16]
 802b6cc:	bd10      	pop	{r4, pc}
 802b6ce:	bf00      	nop
 802b6d0:	0802f318 	.word	0x0802f318
 802b6d4:	0802f3a4 	.word	0x0802f3a4

0802b6d8 <__multiply>:
 802b6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b6dc:	4691      	mov	r9, r2
 802b6de:	690a      	ldr	r2, [r1, #16]
 802b6e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802b6e4:	429a      	cmp	r2, r3
 802b6e6:	bfb8      	it	lt
 802b6e8:	460b      	movlt	r3, r1
 802b6ea:	460c      	mov	r4, r1
 802b6ec:	bfbc      	itt	lt
 802b6ee:	464c      	movlt	r4, r9
 802b6f0:	4699      	movlt	r9, r3
 802b6f2:	6927      	ldr	r7, [r4, #16]
 802b6f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802b6f8:	68a3      	ldr	r3, [r4, #8]
 802b6fa:	6861      	ldr	r1, [r4, #4]
 802b6fc:	eb07 060a 	add.w	r6, r7, sl
 802b700:	42b3      	cmp	r3, r6
 802b702:	b085      	sub	sp, #20
 802b704:	bfb8      	it	lt
 802b706:	3101      	addlt	r1, #1
 802b708:	f7ff fe8e 	bl	802b428 <_Balloc>
 802b70c:	b930      	cbnz	r0, 802b71c <__multiply+0x44>
 802b70e:	4602      	mov	r2, r0
 802b710:	4b44      	ldr	r3, [pc, #272]	; (802b824 <__multiply+0x14c>)
 802b712:	4845      	ldr	r0, [pc, #276]	; (802b828 <__multiply+0x150>)
 802b714:	f240 115d 	movw	r1, #349	; 0x15d
 802b718:	f7fc f96e 	bl	80279f8 <__assert_func>
 802b71c:	f100 0514 	add.w	r5, r0, #20
 802b720:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802b724:	462b      	mov	r3, r5
 802b726:	2200      	movs	r2, #0
 802b728:	4543      	cmp	r3, r8
 802b72a:	d321      	bcc.n	802b770 <__multiply+0x98>
 802b72c:	f104 0314 	add.w	r3, r4, #20
 802b730:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802b734:	f109 0314 	add.w	r3, r9, #20
 802b738:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 802b73c:	9202      	str	r2, [sp, #8]
 802b73e:	1b3a      	subs	r2, r7, r4
 802b740:	3a15      	subs	r2, #21
 802b742:	f022 0203 	bic.w	r2, r2, #3
 802b746:	3204      	adds	r2, #4
 802b748:	f104 0115 	add.w	r1, r4, #21
 802b74c:	428f      	cmp	r7, r1
 802b74e:	bf38      	it	cc
 802b750:	2204      	movcc	r2, #4
 802b752:	9201      	str	r2, [sp, #4]
 802b754:	9a02      	ldr	r2, [sp, #8]
 802b756:	9303      	str	r3, [sp, #12]
 802b758:	429a      	cmp	r2, r3
 802b75a:	d80c      	bhi.n	802b776 <__multiply+0x9e>
 802b75c:	2e00      	cmp	r6, #0
 802b75e:	dd03      	ble.n	802b768 <__multiply+0x90>
 802b760:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802b764:	2b00      	cmp	r3, #0
 802b766:	d05a      	beq.n	802b81e <__multiply+0x146>
 802b768:	6106      	str	r6, [r0, #16]
 802b76a:	b005      	add	sp, #20
 802b76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b770:	f843 2b04 	str.w	r2, [r3], #4
 802b774:	e7d8      	b.n	802b728 <__multiply+0x50>
 802b776:	f8b3 a000 	ldrh.w	sl, [r3]
 802b77a:	f1ba 0f00 	cmp.w	sl, #0
 802b77e:	d024      	beq.n	802b7ca <__multiply+0xf2>
 802b780:	f104 0e14 	add.w	lr, r4, #20
 802b784:	46a9      	mov	r9, r5
 802b786:	f04f 0c00 	mov.w	ip, #0
 802b78a:	f85e 2b04 	ldr.w	r2, [lr], #4
 802b78e:	f8d9 1000 	ldr.w	r1, [r9]
 802b792:	fa1f fb82 	uxth.w	fp, r2
 802b796:	b289      	uxth	r1, r1
 802b798:	fb0a 110b 	mla	r1, sl, fp, r1
 802b79c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 802b7a0:	f8d9 2000 	ldr.w	r2, [r9]
 802b7a4:	4461      	add	r1, ip
 802b7a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802b7aa:	fb0a c20b 	mla	r2, sl, fp, ip
 802b7ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802b7b2:	b289      	uxth	r1, r1
 802b7b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802b7b8:	4577      	cmp	r7, lr
 802b7ba:	f849 1b04 	str.w	r1, [r9], #4
 802b7be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802b7c2:	d8e2      	bhi.n	802b78a <__multiply+0xb2>
 802b7c4:	9a01      	ldr	r2, [sp, #4]
 802b7c6:	f845 c002 	str.w	ip, [r5, r2]
 802b7ca:	9a03      	ldr	r2, [sp, #12]
 802b7cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802b7d0:	3304      	adds	r3, #4
 802b7d2:	f1b9 0f00 	cmp.w	r9, #0
 802b7d6:	d020      	beq.n	802b81a <__multiply+0x142>
 802b7d8:	6829      	ldr	r1, [r5, #0]
 802b7da:	f104 0c14 	add.w	ip, r4, #20
 802b7de:	46ae      	mov	lr, r5
 802b7e0:	f04f 0a00 	mov.w	sl, #0
 802b7e4:	f8bc b000 	ldrh.w	fp, [ip]
 802b7e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802b7ec:	fb09 220b 	mla	r2, r9, fp, r2
 802b7f0:	4492      	add	sl, r2
 802b7f2:	b289      	uxth	r1, r1
 802b7f4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 802b7f8:	f84e 1b04 	str.w	r1, [lr], #4
 802b7fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 802b800:	f8be 1000 	ldrh.w	r1, [lr]
 802b804:	0c12      	lsrs	r2, r2, #16
 802b806:	fb09 1102 	mla	r1, r9, r2, r1
 802b80a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 802b80e:	4567      	cmp	r7, ip
 802b810:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802b814:	d8e6      	bhi.n	802b7e4 <__multiply+0x10c>
 802b816:	9a01      	ldr	r2, [sp, #4]
 802b818:	50a9      	str	r1, [r5, r2]
 802b81a:	3504      	adds	r5, #4
 802b81c:	e79a      	b.n	802b754 <__multiply+0x7c>
 802b81e:	3e01      	subs	r6, #1
 802b820:	e79c      	b.n	802b75c <__multiply+0x84>
 802b822:	bf00      	nop
 802b824:	0802f318 	.word	0x0802f318
 802b828:	0802f3a4 	.word	0x0802f3a4

0802b82c <__pow5mult>:
 802b82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b830:	4615      	mov	r5, r2
 802b832:	f012 0203 	ands.w	r2, r2, #3
 802b836:	4606      	mov	r6, r0
 802b838:	460f      	mov	r7, r1
 802b83a:	d007      	beq.n	802b84c <__pow5mult+0x20>
 802b83c:	4c25      	ldr	r4, [pc, #148]	; (802b8d4 <__pow5mult+0xa8>)
 802b83e:	3a01      	subs	r2, #1
 802b840:	2300      	movs	r3, #0
 802b842:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802b846:	f7ff fe51 	bl	802b4ec <__multadd>
 802b84a:	4607      	mov	r7, r0
 802b84c:	10ad      	asrs	r5, r5, #2
 802b84e:	d03d      	beq.n	802b8cc <__pow5mult+0xa0>
 802b850:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802b852:	b97c      	cbnz	r4, 802b874 <__pow5mult+0x48>
 802b854:	2010      	movs	r0, #16
 802b856:	f7fc fa37 	bl	8027cc8 <malloc>
 802b85a:	4602      	mov	r2, r0
 802b85c:	6270      	str	r0, [r6, #36]	; 0x24
 802b85e:	b928      	cbnz	r0, 802b86c <__pow5mult+0x40>
 802b860:	4b1d      	ldr	r3, [pc, #116]	; (802b8d8 <__pow5mult+0xac>)
 802b862:	481e      	ldr	r0, [pc, #120]	; (802b8dc <__pow5mult+0xb0>)
 802b864:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802b868:	f7fc f8c6 	bl	80279f8 <__assert_func>
 802b86c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802b870:	6004      	str	r4, [r0, #0]
 802b872:	60c4      	str	r4, [r0, #12]
 802b874:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802b878:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802b87c:	b94c      	cbnz	r4, 802b892 <__pow5mult+0x66>
 802b87e:	f240 2171 	movw	r1, #625	; 0x271
 802b882:	4630      	mov	r0, r6
 802b884:	f7ff ff12 	bl	802b6ac <__i2b>
 802b888:	2300      	movs	r3, #0
 802b88a:	f8c8 0008 	str.w	r0, [r8, #8]
 802b88e:	4604      	mov	r4, r0
 802b890:	6003      	str	r3, [r0, #0]
 802b892:	f04f 0900 	mov.w	r9, #0
 802b896:	07eb      	lsls	r3, r5, #31
 802b898:	d50a      	bpl.n	802b8b0 <__pow5mult+0x84>
 802b89a:	4639      	mov	r1, r7
 802b89c:	4622      	mov	r2, r4
 802b89e:	4630      	mov	r0, r6
 802b8a0:	f7ff ff1a 	bl	802b6d8 <__multiply>
 802b8a4:	4639      	mov	r1, r7
 802b8a6:	4680      	mov	r8, r0
 802b8a8:	4630      	mov	r0, r6
 802b8aa:	f7ff fdfd 	bl	802b4a8 <_Bfree>
 802b8ae:	4647      	mov	r7, r8
 802b8b0:	106d      	asrs	r5, r5, #1
 802b8b2:	d00b      	beq.n	802b8cc <__pow5mult+0xa0>
 802b8b4:	6820      	ldr	r0, [r4, #0]
 802b8b6:	b938      	cbnz	r0, 802b8c8 <__pow5mult+0x9c>
 802b8b8:	4622      	mov	r2, r4
 802b8ba:	4621      	mov	r1, r4
 802b8bc:	4630      	mov	r0, r6
 802b8be:	f7ff ff0b 	bl	802b6d8 <__multiply>
 802b8c2:	6020      	str	r0, [r4, #0]
 802b8c4:	f8c0 9000 	str.w	r9, [r0]
 802b8c8:	4604      	mov	r4, r0
 802b8ca:	e7e4      	b.n	802b896 <__pow5mult+0x6a>
 802b8cc:	4638      	mov	r0, r7
 802b8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b8d2:	bf00      	nop
 802b8d4:	0802f4f0 	.word	0x0802f4f0
 802b8d8:	0802f2a6 	.word	0x0802f2a6
 802b8dc:	0802f3a4 	.word	0x0802f3a4

0802b8e0 <__lshift>:
 802b8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b8e4:	460c      	mov	r4, r1
 802b8e6:	6849      	ldr	r1, [r1, #4]
 802b8e8:	6923      	ldr	r3, [r4, #16]
 802b8ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802b8ee:	68a3      	ldr	r3, [r4, #8]
 802b8f0:	4607      	mov	r7, r0
 802b8f2:	4691      	mov	r9, r2
 802b8f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802b8f8:	f108 0601 	add.w	r6, r8, #1
 802b8fc:	42b3      	cmp	r3, r6
 802b8fe:	db0b      	blt.n	802b918 <__lshift+0x38>
 802b900:	4638      	mov	r0, r7
 802b902:	f7ff fd91 	bl	802b428 <_Balloc>
 802b906:	4605      	mov	r5, r0
 802b908:	b948      	cbnz	r0, 802b91e <__lshift+0x3e>
 802b90a:	4602      	mov	r2, r0
 802b90c:	4b2a      	ldr	r3, [pc, #168]	; (802b9b8 <__lshift+0xd8>)
 802b90e:	482b      	ldr	r0, [pc, #172]	; (802b9bc <__lshift+0xdc>)
 802b910:	f240 11d9 	movw	r1, #473	; 0x1d9
 802b914:	f7fc f870 	bl	80279f8 <__assert_func>
 802b918:	3101      	adds	r1, #1
 802b91a:	005b      	lsls	r3, r3, #1
 802b91c:	e7ee      	b.n	802b8fc <__lshift+0x1c>
 802b91e:	2300      	movs	r3, #0
 802b920:	f100 0114 	add.w	r1, r0, #20
 802b924:	f100 0210 	add.w	r2, r0, #16
 802b928:	4618      	mov	r0, r3
 802b92a:	4553      	cmp	r3, sl
 802b92c:	db37      	blt.n	802b99e <__lshift+0xbe>
 802b92e:	6920      	ldr	r0, [r4, #16]
 802b930:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802b934:	f104 0314 	add.w	r3, r4, #20
 802b938:	f019 091f 	ands.w	r9, r9, #31
 802b93c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802b940:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 802b944:	d02f      	beq.n	802b9a6 <__lshift+0xc6>
 802b946:	f1c9 0e20 	rsb	lr, r9, #32
 802b94a:	468a      	mov	sl, r1
 802b94c:	f04f 0c00 	mov.w	ip, #0
 802b950:	681a      	ldr	r2, [r3, #0]
 802b952:	fa02 f209 	lsl.w	r2, r2, r9
 802b956:	ea42 020c 	orr.w	r2, r2, ip
 802b95a:	f84a 2b04 	str.w	r2, [sl], #4
 802b95e:	f853 2b04 	ldr.w	r2, [r3], #4
 802b962:	4298      	cmp	r0, r3
 802b964:	fa22 fc0e 	lsr.w	ip, r2, lr
 802b968:	d8f2      	bhi.n	802b950 <__lshift+0x70>
 802b96a:	1b03      	subs	r3, r0, r4
 802b96c:	3b15      	subs	r3, #21
 802b96e:	f023 0303 	bic.w	r3, r3, #3
 802b972:	3304      	adds	r3, #4
 802b974:	f104 0215 	add.w	r2, r4, #21
 802b978:	4290      	cmp	r0, r2
 802b97a:	bf38      	it	cc
 802b97c:	2304      	movcc	r3, #4
 802b97e:	f841 c003 	str.w	ip, [r1, r3]
 802b982:	f1bc 0f00 	cmp.w	ip, #0
 802b986:	d001      	beq.n	802b98c <__lshift+0xac>
 802b988:	f108 0602 	add.w	r6, r8, #2
 802b98c:	3e01      	subs	r6, #1
 802b98e:	4638      	mov	r0, r7
 802b990:	612e      	str	r6, [r5, #16]
 802b992:	4621      	mov	r1, r4
 802b994:	f7ff fd88 	bl	802b4a8 <_Bfree>
 802b998:	4628      	mov	r0, r5
 802b99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b99e:	f842 0f04 	str.w	r0, [r2, #4]!
 802b9a2:	3301      	adds	r3, #1
 802b9a4:	e7c1      	b.n	802b92a <__lshift+0x4a>
 802b9a6:	3904      	subs	r1, #4
 802b9a8:	f853 2b04 	ldr.w	r2, [r3], #4
 802b9ac:	f841 2f04 	str.w	r2, [r1, #4]!
 802b9b0:	4298      	cmp	r0, r3
 802b9b2:	d8f9      	bhi.n	802b9a8 <__lshift+0xc8>
 802b9b4:	e7ea      	b.n	802b98c <__lshift+0xac>
 802b9b6:	bf00      	nop
 802b9b8:	0802f318 	.word	0x0802f318
 802b9bc:	0802f3a4 	.word	0x0802f3a4

0802b9c0 <__mcmp>:
 802b9c0:	b530      	push	{r4, r5, lr}
 802b9c2:	6902      	ldr	r2, [r0, #16]
 802b9c4:	690c      	ldr	r4, [r1, #16]
 802b9c6:	1b12      	subs	r2, r2, r4
 802b9c8:	d10e      	bne.n	802b9e8 <__mcmp+0x28>
 802b9ca:	f100 0314 	add.w	r3, r0, #20
 802b9ce:	3114      	adds	r1, #20
 802b9d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802b9d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802b9d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802b9dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802b9e0:	42a5      	cmp	r5, r4
 802b9e2:	d003      	beq.n	802b9ec <__mcmp+0x2c>
 802b9e4:	d305      	bcc.n	802b9f2 <__mcmp+0x32>
 802b9e6:	2201      	movs	r2, #1
 802b9e8:	4610      	mov	r0, r2
 802b9ea:	bd30      	pop	{r4, r5, pc}
 802b9ec:	4283      	cmp	r3, r0
 802b9ee:	d3f3      	bcc.n	802b9d8 <__mcmp+0x18>
 802b9f0:	e7fa      	b.n	802b9e8 <__mcmp+0x28>
 802b9f2:	f04f 32ff 	mov.w	r2, #4294967295
 802b9f6:	e7f7      	b.n	802b9e8 <__mcmp+0x28>

0802b9f8 <__mdiff>:
 802b9f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b9fc:	460c      	mov	r4, r1
 802b9fe:	4606      	mov	r6, r0
 802ba00:	4611      	mov	r1, r2
 802ba02:	4620      	mov	r0, r4
 802ba04:	4690      	mov	r8, r2
 802ba06:	f7ff ffdb 	bl	802b9c0 <__mcmp>
 802ba0a:	1e05      	subs	r5, r0, #0
 802ba0c:	d110      	bne.n	802ba30 <__mdiff+0x38>
 802ba0e:	4629      	mov	r1, r5
 802ba10:	4630      	mov	r0, r6
 802ba12:	f7ff fd09 	bl	802b428 <_Balloc>
 802ba16:	b930      	cbnz	r0, 802ba26 <__mdiff+0x2e>
 802ba18:	4b3a      	ldr	r3, [pc, #232]	; (802bb04 <__mdiff+0x10c>)
 802ba1a:	4602      	mov	r2, r0
 802ba1c:	f240 2132 	movw	r1, #562	; 0x232
 802ba20:	4839      	ldr	r0, [pc, #228]	; (802bb08 <__mdiff+0x110>)
 802ba22:	f7fb ffe9 	bl	80279f8 <__assert_func>
 802ba26:	2301      	movs	r3, #1
 802ba28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802ba2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ba30:	bfa4      	itt	ge
 802ba32:	4643      	movge	r3, r8
 802ba34:	46a0      	movge	r8, r4
 802ba36:	4630      	mov	r0, r6
 802ba38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802ba3c:	bfa6      	itte	ge
 802ba3e:	461c      	movge	r4, r3
 802ba40:	2500      	movge	r5, #0
 802ba42:	2501      	movlt	r5, #1
 802ba44:	f7ff fcf0 	bl	802b428 <_Balloc>
 802ba48:	b920      	cbnz	r0, 802ba54 <__mdiff+0x5c>
 802ba4a:	4b2e      	ldr	r3, [pc, #184]	; (802bb04 <__mdiff+0x10c>)
 802ba4c:	4602      	mov	r2, r0
 802ba4e:	f44f 7110 	mov.w	r1, #576	; 0x240
 802ba52:	e7e5      	b.n	802ba20 <__mdiff+0x28>
 802ba54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802ba58:	6926      	ldr	r6, [r4, #16]
 802ba5a:	60c5      	str	r5, [r0, #12]
 802ba5c:	f104 0914 	add.w	r9, r4, #20
 802ba60:	f108 0514 	add.w	r5, r8, #20
 802ba64:	f100 0e14 	add.w	lr, r0, #20
 802ba68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802ba6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802ba70:	f108 0210 	add.w	r2, r8, #16
 802ba74:	46f2      	mov	sl, lr
 802ba76:	2100      	movs	r1, #0
 802ba78:	f859 3b04 	ldr.w	r3, [r9], #4
 802ba7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802ba80:	fa1f f883 	uxth.w	r8, r3
 802ba84:	fa11 f18b 	uxtah	r1, r1, fp
 802ba88:	0c1b      	lsrs	r3, r3, #16
 802ba8a:	eba1 0808 	sub.w	r8, r1, r8
 802ba8e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802ba92:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802ba96:	fa1f f888 	uxth.w	r8, r8
 802ba9a:	1419      	asrs	r1, r3, #16
 802ba9c:	454e      	cmp	r6, r9
 802ba9e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802baa2:	f84a 3b04 	str.w	r3, [sl], #4
 802baa6:	d8e7      	bhi.n	802ba78 <__mdiff+0x80>
 802baa8:	1b33      	subs	r3, r6, r4
 802baaa:	3b15      	subs	r3, #21
 802baac:	f023 0303 	bic.w	r3, r3, #3
 802bab0:	3304      	adds	r3, #4
 802bab2:	3415      	adds	r4, #21
 802bab4:	42a6      	cmp	r6, r4
 802bab6:	bf38      	it	cc
 802bab8:	2304      	movcc	r3, #4
 802baba:	441d      	add	r5, r3
 802babc:	4473      	add	r3, lr
 802babe:	469e      	mov	lr, r3
 802bac0:	462e      	mov	r6, r5
 802bac2:	4566      	cmp	r6, ip
 802bac4:	d30e      	bcc.n	802bae4 <__mdiff+0xec>
 802bac6:	f10c 0203 	add.w	r2, ip, #3
 802baca:	1b52      	subs	r2, r2, r5
 802bacc:	f022 0203 	bic.w	r2, r2, #3
 802bad0:	3d03      	subs	r5, #3
 802bad2:	45ac      	cmp	ip, r5
 802bad4:	bf38      	it	cc
 802bad6:	2200      	movcc	r2, #0
 802bad8:	441a      	add	r2, r3
 802bada:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802bade:	b17b      	cbz	r3, 802bb00 <__mdiff+0x108>
 802bae0:	6107      	str	r7, [r0, #16]
 802bae2:	e7a3      	b.n	802ba2c <__mdiff+0x34>
 802bae4:	f856 8b04 	ldr.w	r8, [r6], #4
 802bae8:	fa11 f288 	uxtah	r2, r1, r8
 802baec:	1414      	asrs	r4, r2, #16
 802baee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802baf2:	b292      	uxth	r2, r2
 802baf4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802baf8:	f84e 2b04 	str.w	r2, [lr], #4
 802bafc:	1421      	asrs	r1, r4, #16
 802bafe:	e7e0      	b.n	802bac2 <__mdiff+0xca>
 802bb00:	3f01      	subs	r7, #1
 802bb02:	e7ea      	b.n	802bada <__mdiff+0xe2>
 802bb04:	0802f318 	.word	0x0802f318
 802bb08:	0802f3a4 	.word	0x0802f3a4

0802bb0c <__ulp>:
 802bb0c:	b082      	sub	sp, #8
 802bb0e:	ed8d 0b00 	vstr	d0, [sp]
 802bb12:	9b01      	ldr	r3, [sp, #4]
 802bb14:	4912      	ldr	r1, [pc, #72]	; (802bb60 <__ulp+0x54>)
 802bb16:	4019      	ands	r1, r3
 802bb18:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 802bb1c:	2900      	cmp	r1, #0
 802bb1e:	dd05      	ble.n	802bb2c <__ulp+0x20>
 802bb20:	2200      	movs	r2, #0
 802bb22:	460b      	mov	r3, r1
 802bb24:	ec43 2b10 	vmov	d0, r2, r3
 802bb28:	b002      	add	sp, #8
 802bb2a:	4770      	bx	lr
 802bb2c:	4249      	negs	r1, r1
 802bb2e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 802bb32:	ea4f 5021 	mov.w	r0, r1, asr #20
 802bb36:	f04f 0200 	mov.w	r2, #0
 802bb3a:	f04f 0300 	mov.w	r3, #0
 802bb3e:	da04      	bge.n	802bb4a <__ulp+0x3e>
 802bb40:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 802bb44:	fa41 f300 	asr.w	r3, r1, r0
 802bb48:	e7ec      	b.n	802bb24 <__ulp+0x18>
 802bb4a:	f1a0 0114 	sub.w	r1, r0, #20
 802bb4e:	291e      	cmp	r1, #30
 802bb50:	bfda      	itte	le
 802bb52:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 802bb56:	fa20 f101 	lsrle.w	r1, r0, r1
 802bb5a:	2101      	movgt	r1, #1
 802bb5c:	460a      	mov	r2, r1
 802bb5e:	e7e1      	b.n	802bb24 <__ulp+0x18>
 802bb60:	7ff00000 	.word	0x7ff00000

0802bb64 <__b2d>:
 802bb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bb66:	6905      	ldr	r5, [r0, #16]
 802bb68:	f100 0714 	add.w	r7, r0, #20
 802bb6c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 802bb70:	1f2e      	subs	r6, r5, #4
 802bb72:	f855 4c04 	ldr.w	r4, [r5, #-4]
 802bb76:	4620      	mov	r0, r4
 802bb78:	f7ff fd48 	bl	802b60c <__hi0bits>
 802bb7c:	f1c0 0320 	rsb	r3, r0, #32
 802bb80:	280a      	cmp	r0, #10
 802bb82:	f8df c07c 	ldr.w	ip, [pc, #124]	; 802bc00 <__b2d+0x9c>
 802bb86:	600b      	str	r3, [r1, #0]
 802bb88:	dc14      	bgt.n	802bbb4 <__b2d+0x50>
 802bb8a:	f1c0 0e0b 	rsb	lr, r0, #11
 802bb8e:	fa24 f10e 	lsr.w	r1, r4, lr
 802bb92:	42b7      	cmp	r7, r6
 802bb94:	ea41 030c 	orr.w	r3, r1, ip
 802bb98:	bf34      	ite	cc
 802bb9a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802bb9e:	2100      	movcs	r1, #0
 802bba0:	3015      	adds	r0, #21
 802bba2:	fa04 f000 	lsl.w	r0, r4, r0
 802bba6:	fa21 f10e 	lsr.w	r1, r1, lr
 802bbaa:	ea40 0201 	orr.w	r2, r0, r1
 802bbae:	ec43 2b10 	vmov	d0, r2, r3
 802bbb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802bbb4:	42b7      	cmp	r7, r6
 802bbb6:	bf3a      	itte	cc
 802bbb8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802bbbc:	f1a5 0608 	subcc.w	r6, r5, #8
 802bbc0:	2100      	movcs	r1, #0
 802bbc2:	380b      	subs	r0, #11
 802bbc4:	d017      	beq.n	802bbf6 <__b2d+0x92>
 802bbc6:	f1c0 0c20 	rsb	ip, r0, #32
 802bbca:	fa04 f500 	lsl.w	r5, r4, r0
 802bbce:	42be      	cmp	r6, r7
 802bbd0:	fa21 f40c 	lsr.w	r4, r1, ip
 802bbd4:	ea45 0504 	orr.w	r5, r5, r4
 802bbd8:	bf8c      	ite	hi
 802bbda:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 802bbde:	2400      	movls	r4, #0
 802bbe0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 802bbe4:	fa01 f000 	lsl.w	r0, r1, r0
 802bbe8:	fa24 f40c 	lsr.w	r4, r4, ip
 802bbec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802bbf0:	ea40 0204 	orr.w	r2, r0, r4
 802bbf4:	e7db      	b.n	802bbae <__b2d+0x4a>
 802bbf6:	ea44 030c 	orr.w	r3, r4, ip
 802bbfa:	460a      	mov	r2, r1
 802bbfc:	e7d7      	b.n	802bbae <__b2d+0x4a>
 802bbfe:	bf00      	nop
 802bc00:	3ff00000 	.word	0x3ff00000

0802bc04 <__d2b>:
 802bc04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802bc08:	4689      	mov	r9, r1
 802bc0a:	2101      	movs	r1, #1
 802bc0c:	ec57 6b10 	vmov	r6, r7, d0
 802bc10:	4690      	mov	r8, r2
 802bc12:	f7ff fc09 	bl	802b428 <_Balloc>
 802bc16:	4604      	mov	r4, r0
 802bc18:	b930      	cbnz	r0, 802bc28 <__d2b+0x24>
 802bc1a:	4602      	mov	r2, r0
 802bc1c:	4b25      	ldr	r3, [pc, #148]	; (802bcb4 <__d2b+0xb0>)
 802bc1e:	4826      	ldr	r0, [pc, #152]	; (802bcb8 <__d2b+0xb4>)
 802bc20:	f240 310a 	movw	r1, #778	; 0x30a
 802bc24:	f7fb fee8 	bl	80279f8 <__assert_func>
 802bc28:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802bc2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802bc30:	bb35      	cbnz	r5, 802bc80 <__d2b+0x7c>
 802bc32:	2e00      	cmp	r6, #0
 802bc34:	9301      	str	r3, [sp, #4]
 802bc36:	d028      	beq.n	802bc8a <__d2b+0x86>
 802bc38:	4668      	mov	r0, sp
 802bc3a:	9600      	str	r6, [sp, #0]
 802bc3c:	f7ff fd06 	bl	802b64c <__lo0bits>
 802bc40:	9900      	ldr	r1, [sp, #0]
 802bc42:	b300      	cbz	r0, 802bc86 <__d2b+0x82>
 802bc44:	9a01      	ldr	r2, [sp, #4]
 802bc46:	f1c0 0320 	rsb	r3, r0, #32
 802bc4a:	fa02 f303 	lsl.w	r3, r2, r3
 802bc4e:	430b      	orrs	r3, r1
 802bc50:	40c2      	lsrs	r2, r0
 802bc52:	6163      	str	r3, [r4, #20]
 802bc54:	9201      	str	r2, [sp, #4]
 802bc56:	9b01      	ldr	r3, [sp, #4]
 802bc58:	61a3      	str	r3, [r4, #24]
 802bc5a:	2b00      	cmp	r3, #0
 802bc5c:	bf14      	ite	ne
 802bc5e:	2202      	movne	r2, #2
 802bc60:	2201      	moveq	r2, #1
 802bc62:	6122      	str	r2, [r4, #16]
 802bc64:	b1d5      	cbz	r5, 802bc9c <__d2b+0x98>
 802bc66:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802bc6a:	4405      	add	r5, r0
 802bc6c:	f8c9 5000 	str.w	r5, [r9]
 802bc70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802bc74:	f8c8 0000 	str.w	r0, [r8]
 802bc78:	4620      	mov	r0, r4
 802bc7a:	b003      	add	sp, #12
 802bc7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802bc80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802bc84:	e7d5      	b.n	802bc32 <__d2b+0x2e>
 802bc86:	6161      	str	r1, [r4, #20]
 802bc88:	e7e5      	b.n	802bc56 <__d2b+0x52>
 802bc8a:	a801      	add	r0, sp, #4
 802bc8c:	f7ff fcde 	bl	802b64c <__lo0bits>
 802bc90:	9b01      	ldr	r3, [sp, #4]
 802bc92:	6163      	str	r3, [r4, #20]
 802bc94:	2201      	movs	r2, #1
 802bc96:	6122      	str	r2, [r4, #16]
 802bc98:	3020      	adds	r0, #32
 802bc9a:	e7e3      	b.n	802bc64 <__d2b+0x60>
 802bc9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802bca0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802bca4:	f8c9 0000 	str.w	r0, [r9]
 802bca8:	6918      	ldr	r0, [r3, #16]
 802bcaa:	f7ff fcaf 	bl	802b60c <__hi0bits>
 802bcae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802bcb2:	e7df      	b.n	802bc74 <__d2b+0x70>
 802bcb4:	0802f318 	.word	0x0802f318
 802bcb8:	0802f3a4 	.word	0x0802f3a4

0802bcbc <__ratio>:
 802bcbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bcc0:	4688      	mov	r8, r1
 802bcc2:	4669      	mov	r1, sp
 802bcc4:	4681      	mov	r9, r0
 802bcc6:	f7ff ff4d 	bl	802bb64 <__b2d>
 802bcca:	a901      	add	r1, sp, #4
 802bccc:	4640      	mov	r0, r8
 802bcce:	ec55 4b10 	vmov	r4, r5, d0
 802bcd2:	f7ff ff47 	bl	802bb64 <__b2d>
 802bcd6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802bcda:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802bcde:	eba3 0c02 	sub.w	ip, r3, r2
 802bce2:	e9dd 3200 	ldrd	r3, r2, [sp]
 802bce6:	1a9b      	subs	r3, r3, r2
 802bce8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802bcec:	ec51 0b10 	vmov	r0, r1, d0
 802bcf0:	2b00      	cmp	r3, #0
 802bcf2:	bfd6      	itet	le
 802bcf4:	460a      	movle	r2, r1
 802bcf6:	462a      	movgt	r2, r5
 802bcf8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802bcfc:	468b      	mov	fp, r1
 802bcfe:	462f      	mov	r7, r5
 802bd00:	bfd4      	ite	le
 802bd02:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 802bd06:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802bd0a:	4620      	mov	r0, r4
 802bd0c:	ee10 2a10 	vmov	r2, s0
 802bd10:	465b      	mov	r3, fp
 802bd12:	4639      	mov	r1, r7
 802bd14:	f7d4 fd9a 	bl	800084c <__aeabi_ddiv>
 802bd18:	ec41 0b10 	vmov	d0, r0, r1
 802bd1c:	b003      	add	sp, #12
 802bd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802bd22 <__copybits>:
 802bd22:	3901      	subs	r1, #1
 802bd24:	b570      	push	{r4, r5, r6, lr}
 802bd26:	1149      	asrs	r1, r1, #5
 802bd28:	6914      	ldr	r4, [r2, #16]
 802bd2a:	3101      	adds	r1, #1
 802bd2c:	f102 0314 	add.w	r3, r2, #20
 802bd30:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802bd34:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802bd38:	1f05      	subs	r5, r0, #4
 802bd3a:	42a3      	cmp	r3, r4
 802bd3c:	d30c      	bcc.n	802bd58 <__copybits+0x36>
 802bd3e:	1aa3      	subs	r3, r4, r2
 802bd40:	3b11      	subs	r3, #17
 802bd42:	f023 0303 	bic.w	r3, r3, #3
 802bd46:	3211      	adds	r2, #17
 802bd48:	42a2      	cmp	r2, r4
 802bd4a:	bf88      	it	hi
 802bd4c:	2300      	movhi	r3, #0
 802bd4e:	4418      	add	r0, r3
 802bd50:	2300      	movs	r3, #0
 802bd52:	4288      	cmp	r0, r1
 802bd54:	d305      	bcc.n	802bd62 <__copybits+0x40>
 802bd56:	bd70      	pop	{r4, r5, r6, pc}
 802bd58:	f853 6b04 	ldr.w	r6, [r3], #4
 802bd5c:	f845 6f04 	str.w	r6, [r5, #4]!
 802bd60:	e7eb      	b.n	802bd3a <__copybits+0x18>
 802bd62:	f840 3b04 	str.w	r3, [r0], #4
 802bd66:	e7f4      	b.n	802bd52 <__copybits+0x30>

0802bd68 <__any_on>:
 802bd68:	f100 0214 	add.w	r2, r0, #20
 802bd6c:	6900      	ldr	r0, [r0, #16]
 802bd6e:	114b      	asrs	r3, r1, #5
 802bd70:	4298      	cmp	r0, r3
 802bd72:	b510      	push	{r4, lr}
 802bd74:	db11      	blt.n	802bd9a <__any_on+0x32>
 802bd76:	dd0a      	ble.n	802bd8e <__any_on+0x26>
 802bd78:	f011 011f 	ands.w	r1, r1, #31
 802bd7c:	d007      	beq.n	802bd8e <__any_on+0x26>
 802bd7e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802bd82:	fa24 f001 	lsr.w	r0, r4, r1
 802bd86:	fa00 f101 	lsl.w	r1, r0, r1
 802bd8a:	428c      	cmp	r4, r1
 802bd8c:	d10b      	bne.n	802bda6 <__any_on+0x3e>
 802bd8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802bd92:	4293      	cmp	r3, r2
 802bd94:	d803      	bhi.n	802bd9e <__any_on+0x36>
 802bd96:	2000      	movs	r0, #0
 802bd98:	bd10      	pop	{r4, pc}
 802bd9a:	4603      	mov	r3, r0
 802bd9c:	e7f7      	b.n	802bd8e <__any_on+0x26>
 802bd9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802bda2:	2900      	cmp	r1, #0
 802bda4:	d0f5      	beq.n	802bd92 <__any_on+0x2a>
 802bda6:	2001      	movs	r0, #1
 802bda8:	e7f6      	b.n	802bd98 <__any_on+0x30>

0802bdaa <_calloc_r>:
 802bdaa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802bdac:	fba1 2402 	umull	r2, r4, r1, r2
 802bdb0:	b94c      	cbnz	r4, 802bdc6 <_calloc_r+0x1c>
 802bdb2:	4611      	mov	r1, r2
 802bdb4:	9201      	str	r2, [sp, #4]
 802bdb6:	f7fc f819 	bl	8027dec <_malloc_r>
 802bdba:	9a01      	ldr	r2, [sp, #4]
 802bdbc:	4605      	mov	r5, r0
 802bdbe:	b930      	cbnz	r0, 802bdce <_calloc_r+0x24>
 802bdc0:	4628      	mov	r0, r5
 802bdc2:	b003      	add	sp, #12
 802bdc4:	bd30      	pop	{r4, r5, pc}
 802bdc6:	220c      	movs	r2, #12
 802bdc8:	6002      	str	r2, [r0, #0]
 802bdca:	2500      	movs	r5, #0
 802bdcc:	e7f8      	b.n	802bdc0 <_calloc_r+0x16>
 802bdce:	4621      	mov	r1, r4
 802bdd0:	f7fb ff98 	bl	8027d04 <memset>
 802bdd4:	e7f4      	b.n	802bdc0 <_calloc_r+0x16>

0802bdd6 <_realloc_r>:
 802bdd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bdda:	4680      	mov	r8, r0
 802bddc:	4614      	mov	r4, r2
 802bdde:	460e      	mov	r6, r1
 802bde0:	b921      	cbnz	r1, 802bdec <_realloc_r+0x16>
 802bde2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802bde6:	4611      	mov	r1, r2
 802bde8:	f7fc b800 	b.w	8027dec <_malloc_r>
 802bdec:	b92a      	cbnz	r2, 802bdfa <_realloc_r+0x24>
 802bdee:	f7fb ff91 	bl	8027d14 <_free_r>
 802bdf2:	4625      	mov	r5, r4
 802bdf4:	4628      	mov	r0, r5
 802bdf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bdfa:	f000 f9db 	bl	802c1b4 <_malloc_usable_size_r>
 802bdfe:	4284      	cmp	r4, r0
 802be00:	4607      	mov	r7, r0
 802be02:	d802      	bhi.n	802be0a <_realloc_r+0x34>
 802be04:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802be08:	d812      	bhi.n	802be30 <_realloc_r+0x5a>
 802be0a:	4621      	mov	r1, r4
 802be0c:	4640      	mov	r0, r8
 802be0e:	f7fb ffed 	bl	8027dec <_malloc_r>
 802be12:	4605      	mov	r5, r0
 802be14:	2800      	cmp	r0, #0
 802be16:	d0ed      	beq.n	802bdf4 <_realloc_r+0x1e>
 802be18:	42bc      	cmp	r4, r7
 802be1a:	4622      	mov	r2, r4
 802be1c:	4631      	mov	r1, r6
 802be1e:	bf28      	it	cs
 802be20:	463a      	movcs	r2, r7
 802be22:	f7fb ff61 	bl	8027ce8 <memcpy>
 802be26:	4631      	mov	r1, r6
 802be28:	4640      	mov	r0, r8
 802be2a:	f7fb ff73 	bl	8027d14 <_free_r>
 802be2e:	e7e1      	b.n	802bdf4 <_realloc_r+0x1e>
 802be30:	4635      	mov	r5, r6
 802be32:	e7df      	b.n	802bdf4 <_realloc_r+0x1e>

0802be34 <__ssputs_r>:
 802be34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802be38:	688e      	ldr	r6, [r1, #8]
 802be3a:	429e      	cmp	r6, r3
 802be3c:	4682      	mov	sl, r0
 802be3e:	460c      	mov	r4, r1
 802be40:	4690      	mov	r8, r2
 802be42:	461f      	mov	r7, r3
 802be44:	d838      	bhi.n	802beb8 <__ssputs_r+0x84>
 802be46:	898a      	ldrh	r2, [r1, #12]
 802be48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802be4c:	d032      	beq.n	802beb4 <__ssputs_r+0x80>
 802be4e:	6825      	ldr	r5, [r4, #0]
 802be50:	6909      	ldr	r1, [r1, #16]
 802be52:	eba5 0901 	sub.w	r9, r5, r1
 802be56:	6965      	ldr	r5, [r4, #20]
 802be58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802be5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802be60:	3301      	adds	r3, #1
 802be62:	444b      	add	r3, r9
 802be64:	106d      	asrs	r5, r5, #1
 802be66:	429d      	cmp	r5, r3
 802be68:	bf38      	it	cc
 802be6a:	461d      	movcc	r5, r3
 802be6c:	0553      	lsls	r3, r2, #21
 802be6e:	d531      	bpl.n	802bed4 <__ssputs_r+0xa0>
 802be70:	4629      	mov	r1, r5
 802be72:	f7fb ffbb 	bl	8027dec <_malloc_r>
 802be76:	4606      	mov	r6, r0
 802be78:	b950      	cbnz	r0, 802be90 <__ssputs_r+0x5c>
 802be7a:	230c      	movs	r3, #12
 802be7c:	f8ca 3000 	str.w	r3, [sl]
 802be80:	89a3      	ldrh	r3, [r4, #12]
 802be82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802be86:	81a3      	strh	r3, [r4, #12]
 802be88:	f04f 30ff 	mov.w	r0, #4294967295
 802be8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802be90:	6921      	ldr	r1, [r4, #16]
 802be92:	464a      	mov	r2, r9
 802be94:	f7fb ff28 	bl	8027ce8 <memcpy>
 802be98:	89a3      	ldrh	r3, [r4, #12]
 802be9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802be9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802bea2:	81a3      	strh	r3, [r4, #12]
 802bea4:	6126      	str	r6, [r4, #16]
 802bea6:	6165      	str	r5, [r4, #20]
 802bea8:	444e      	add	r6, r9
 802beaa:	eba5 0509 	sub.w	r5, r5, r9
 802beae:	6026      	str	r6, [r4, #0]
 802beb0:	60a5      	str	r5, [r4, #8]
 802beb2:	463e      	mov	r6, r7
 802beb4:	42be      	cmp	r6, r7
 802beb6:	d900      	bls.n	802beba <__ssputs_r+0x86>
 802beb8:	463e      	mov	r6, r7
 802beba:	6820      	ldr	r0, [r4, #0]
 802bebc:	4632      	mov	r2, r6
 802bebe:	4641      	mov	r1, r8
 802bec0:	f7ff fa8c 	bl	802b3dc <memmove>
 802bec4:	68a3      	ldr	r3, [r4, #8]
 802bec6:	1b9b      	subs	r3, r3, r6
 802bec8:	60a3      	str	r3, [r4, #8]
 802beca:	6823      	ldr	r3, [r4, #0]
 802becc:	4433      	add	r3, r6
 802bece:	6023      	str	r3, [r4, #0]
 802bed0:	2000      	movs	r0, #0
 802bed2:	e7db      	b.n	802be8c <__ssputs_r+0x58>
 802bed4:	462a      	mov	r2, r5
 802bed6:	f7ff ff7e 	bl	802bdd6 <_realloc_r>
 802beda:	4606      	mov	r6, r0
 802bedc:	2800      	cmp	r0, #0
 802bede:	d1e1      	bne.n	802bea4 <__ssputs_r+0x70>
 802bee0:	6921      	ldr	r1, [r4, #16]
 802bee2:	4650      	mov	r0, sl
 802bee4:	f7fb ff16 	bl	8027d14 <_free_r>
 802bee8:	e7c7      	b.n	802be7a <__ssputs_r+0x46>
	...

0802beec <_svfiprintf_r>:
 802beec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bef0:	4698      	mov	r8, r3
 802bef2:	898b      	ldrh	r3, [r1, #12]
 802bef4:	061b      	lsls	r3, r3, #24
 802bef6:	b09d      	sub	sp, #116	; 0x74
 802bef8:	4607      	mov	r7, r0
 802befa:	460d      	mov	r5, r1
 802befc:	4614      	mov	r4, r2
 802befe:	d50e      	bpl.n	802bf1e <_svfiprintf_r+0x32>
 802bf00:	690b      	ldr	r3, [r1, #16]
 802bf02:	b963      	cbnz	r3, 802bf1e <_svfiprintf_r+0x32>
 802bf04:	2140      	movs	r1, #64	; 0x40
 802bf06:	f7fb ff71 	bl	8027dec <_malloc_r>
 802bf0a:	6028      	str	r0, [r5, #0]
 802bf0c:	6128      	str	r0, [r5, #16]
 802bf0e:	b920      	cbnz	r0, 802bf1a <_svfiprintf_r+0x2e>
 802bf10:	230c      	movs	r3, #12
 802bf12:	603b      	str	r3, [r7, #0]
 802bf14:	f04f 30ff 	mov.w	r0, #4294967295
 802bf18:	e0d1      	b.n	802c0be <_svfiprintf_r+0x1d2>
 802bf1a:	2340      	movs	r3, #64	; 0x40
 802bf1c:	616b      	str	r3, [r5, #20]
 802bf1e:	2300      	movs	r3, #0
 802bf20:	9309      	str	r3, [sp, #36]	; 0x24
 802bf22:	2320      	movs	r3, #32
 802bf24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802bf28:	f8cd 800c 	str.w	r8, [sp, #12]
 802bf2c:	2330      	movs	r3, #48	; 0x30
 802bf2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802c0d8 <_svfiprintf_r+0x1ec>
 802bf32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802bf36:	f04f 0901 	mov.w	r9, #1
 802bf3a:	4623      	mov	r3, r4
 802bf3c:	469a      	mov	sl, r3
 802bf3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 802bf42:	b10a      	cbz	r2, 802bf48 <_svfiprintf_r+0x5c>
 802bf44:	2a25      	cmp	r2, #37	; 0x25
 802bf46:	d1f9      	bne.n	802bf3c <_svfiprintf_r+0x50>
 802bf48:	ebba 0b04 	subs.w	fp, sl, r4
 802bf4c:	d00b      	beq.n	802bf66 <_svfiprintf_r+0x7a>
 802bf4e:	465b      	mov	r3, fp
 802bf50:	4622      	mov	r2, r4
 802bf52:	4629      	mov	r1, r5
 802bf54:	4638      	mov	r0, r7
 802bf56:	f7ff ff6d 	bl	802be34 <__ssputs_r>
 802bf5a:	3001      	adds	r0, #1
 802bf5c:	f000 80aa 	beq.w	802c0b4 <_svfiprintf_r+0x1c8>
 802bf60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802bf62:	445a      	add	r2, fp
 802bf64:	9209      	str	r2, [sp, #36]	; 0x24
 802bf66:	f89a 3000 	ldrb.w	r3, [sl]
 802bf6a:	2b00      	cmp	r3, #0
 802bf6c:	f000 80a2 	beq.w	802c0b4 <_svfiprintf_r+0x1c8>
 802bf70:	2300      	movs	r3, #0
 802bf72:	f04f 32ff 	mov.w	r2, #4294967295
 802bf76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802bf7a:	f10a 0a01 	add.w	sl, sl, #1
 802bf7e:	9304      	str	r3, [sp, #16]
 802bf80:	9307      	str	r3, [sp, #28]
 802bf82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802bf86:	931a      	str	r3, [sp, #104]	; 0x68
 802bf88:	4654      	mov	r4, sl
 802bf8a:	2205      	movs	r2, #5
 802bf8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bf90:	4851      	ldr	r0, [pc, #324]	; (802c0d8 <_svfiprintf_r+0x1ec>)
 802bf92:	f7d4 f925 	bl	80001e0 <memchr>
 802bf96:	9a04      	ldr	r2, [sp, #16]
 802bf98:	b9d8      	cbnz	r0, 802bfd2 <_svfiprintf_r+0xe6>
 802bf9a:	06d0      	lsls	r0, r2, #27
 802bf9c:	bf44      	itt	mi
 802bf9e:	2320      	movmi	r3, #32
 802bfa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802bfa4:	0711      	lsls	r1, r2, #28
 802bfa6:	bf44      	itt	mi
 802bfa8:	232b      	movmi	r3, #43	; 0x2b
 802bfaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802bfae:	f89a 3000 	ldrb.w	r3, [sl]
 802bfb2:	2b2a      	cmp	r3, #42	; 0x2a
 802bfb4:	d015      	beq.n	802bfe2 <_svfiprintf_r+0xf6>
 802bfb6:	9a07      	ldr	r2, [sp, #28]
 802bfb8:	4654      	mov	r4, sl
 802bfba:	2000      	movs	r0, #0
 802bfbc:	f04f 0c0a 	mov.w	ip, #10
 802bfc0:	4621      	mov	r1, r4
 802bfc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 802bfc6:	3b30      	subs	r3, #48	; 0x30
 802bfc8:	2b09      	cmp	r3, #9
 802bfca:	d94e      	bls.n	802c06a <_svfiprintf_r+0x17e>
 802bfcc:	b1b0      	cbz	r0, 802bffc <_svfiprintf_r+0x110>
 802bfce:	9207      	str	r2, [sp, #28]
 802bfd0:	e014      	b.n	802bffc <_svfiprintf_r+0x110>
 802bfd2:	eba0 0308 	sub.w	r3, r0, r8
 802bfd6:	fa09 f303 	lsl.w	r3, r9, r3
 802bfda:	4313      	orrs	r3, r2
 802bfdc:	9304      	str	r3, [sp, #16]
 802bfde:	46a2      	mov	sl, r4
 802bfe0:	e7d2      	b.n	802bf88 <_svfiprintf_r+0x9c>
 802bfe2:	9b03      	ldr	r3, [sp, #12]
 802bfe4:	1d19      	adds	r1, r3, #4
 802bfe6:	681b      	ldr	r3, [r3, #0]
 802bfe8:	9103      	str	r1, [sp, #12]
 802bfea:	2b00      	cmp	r3, #0
 802bfec:	bfbb      	ittet	lt
 802bfee:	425b      	neglt	r3, r3
 802bff0:	f042 0202 	orrlt.w	r2, r2, #2
 802bff4:	9307      	strge	r3, [sp, #28]
 802bff6:	9307      	strlt	r3, [sp, #28]
 802bff8:	bfb8      	it	lt
 802bffa:	9204      	strlt	r2, [sp, #16]
 802bffc:	7823      	ldrb	r3, [r4, #0]
 802bffe:	2b2e      	cmp	r3, #46	; 0x2e
 802c000:	d10c      	bne.n	802c01c <_svfiprintf_r+0x130>
 802c002:	7863      	ldrb	r3, [r4, #1]
 802c004:	2b2a      	cmp	r3, #42	; 0x2a
 802c006:	d135      	bne.n	802c074 <_svfiprintf_r+0x188>
 802c008:	9b03      	ldr	r3, [sp, #12]
 802c00a:	1d1a      	adds	r2, r3, #4
 802c00c:	681b      	ldr	r3, [r3, #0]
 802c00e:	9203      	str	r2, [sp, #12]
 802c010:	2b00      	cmp	r3, #0
 802c012:	bfb8      	it	lt
 802c014:	f04f 33ff 	movlt.w	r3, #4294967295
 802c018:	3402      	adds	r4, #2
 802c01a:	9305      	str	r3, [sp, #20]
 802c01c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802c0e8 <_svfiprintf_r+0x1fc>
 802c020:	7821      	ldrb	r1, [r4, #0]
 802c022:	2203      	movs	r2, #3
 802c024:	4650      	mov	r0, sl
 802c026:	f7d4 f8db 	bl	80001e0 <memchr>
 802c02a:	b140      	cbz	r0, 802c03e <_svfiprintf_r+0x152>
 802c02c:	2340      	movs	r3, #64	; 0x40
 802c02e:	eba0 000a 	sub.w	r0, r0, sl
 802c032:	fa03 f000 	lsl.w	r0, r3, r0
 802c036:	9b04      	ldr	r3, [sp, #16]
 802c038:	4303      	orrs	r3, r0
 802c03a:	3401      	adds	r4, #1
 802c03c:	9304      	str	r3, [sp, #16]
 802c03e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c042:	4826      	ldr	r0, [pc, #152]	; (802c0dc <_svfiprintf_r+0x1f0>)
 802c044:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802c048:	2206      	movs	r2, #6
 802c04a:	f7d4 f8c9 	bl	80001e0 <memchr>
 802c04e:	2800      	cmp	r0, #0
 802c050:	d038      	beq.n	802c0c4 <_svfiprintf_r+0x1d8>
 802c052:	4b23      	ldr	r3, [pc, #140]	; (802c0e0 <_svfiprintf_r+0x1f4>)
 802c054:	bb1b      	cbnz	r3, 802c09e <_svfiprintf_r+0x1b2>
 802c056:	9b03      	ldr	r3, [sp, #12]
 802c058:	3307      	adds	r3, #7
 802c05a:	f023 0307 	bic.w	r3, r3, #7
 802c05e:	3308      	adds	r3, #8
 802c060:	9303      	str	r3, [sp, #12]
 802c062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c064:	4433      	add	r3, r6
 802c066:	9309      	str	r3, [sp, #36]	; 0x24
 802c068:	e767      	b.n	802bf3a <_svfiprintf_r+0x4e>
 802c06a:	fb0c 3202 	mla	r2, ip, r2, r3
 802c06e:	460c      	mov	r4, r1
 802c070:	2001      	movs	r0, #1
 802c072:	e7a5      	b.n	802bfc0 <_svfiprintf_r+0xd4>
 802c074:	2300      	movs	r3, #0
 802c076:	3401      	adds	r4, #1
 802c078:	9305      	str	r3, [sp, #20]
 802c07a:	4619      	mov	r1, r3
 802c07c:	f04f 0c0a 	mov.w	ip, #10
 802c080:	4620      	mov	r0, r4
 802c082:	f810 2b01 	ldrb.w	r2, [r0], #1
 802c086:	3a30      	subs	r2, #48	; 0x30
 802c088:	2a09      	cmp	r2, #9
 802c08a:	d903      	bls.n	802c094 <_svfiprintf_r+0x1a8>
 802c08c:	2b00      	cmp	r3, #0
 802c08e:	d0c5      	beq.n	802c01c <_svfiprintf_r+0x130>
 802c090:	9105      	str	r1, [sp, #20]
 802c092:	e7c3      	b.n	802c01c <_svfiprintf_r+0x130>
 802c094:	fb0c 2101 	mla	r1, ip, r1, r2
 802c098:	4604      	mov	r4, r0
 802c09a:	2301      	movs	r3, #1
 802c09c:	e7f0      	b.n	802c080 <_svfiprintf_r+0x194>
 802c09e:	ab03      	add	r3, sp, #12
 802c0a0:	9300      	str	r3, [sp, #0]
 802c0a2:	462a      	mov	r2, r5
 802c0a4:	4b0f      	ldr	r3, [pc, #60]	; (802c0e4 <_svfiprintf_r+0x1f8>)
 802c0a6:	a904      	add	r1, sp, #16
 802c0a8:	4638      	mov	r0, r7
 802c0aa:	f7fc f90d 	bl	80282c8 <_printf_float>
 802c0ae:	1c42      	adds	r2, r0, #1
 802c0b0:	4606      	mov	r6, r0
 802c0b2:	d1d6      	bne.n	802c062 <_svfiprintf_r+0x176>
 802c0b4:	89ab      	ldrh	r3, [r5, #12]
 802c0b6:	065b      	lsls	r3, r3, #25
 802c0b8:	f53f af2c 	bmi.w	802bf14 <_svfiprintf_r+0x28>
 802c0bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 802c0be:	b01d      	add	sp, #116	; 0x74
 802c0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c0c4:	ab03      	add	r3, sp, #12
 802c0c6:	9300      	str	r3, [sp, #0]
 802c0c8:	462a      	mov	r2, r5
 802c0ca:	4b06      	ldr	r3, [pc, #24]	; (802c0e4 <_svfiprintf_r+0x1f8>)
 802c0cc:	a904      	add	r1, sp, #16
 802c0ce:	4638      	mov	r0, r7
 802c0d0:	f7fc fb9e 	bl	8028810 <_printf_i>
 802c0d4:	e7eb      	b.n	802c0ae <_svfiprintf_r+0x1c2>
 802c0d6:	bf00      	nop
 802c0d8:	0802f0f8 	.word	0x0802f0f8
 802c0dc:	0802f102 	.word	0x0802f102
 802c0e0:	080282c9 	.word	0x080282c9
 802c0e4:	0802be35 	.word	0x0802be35
 802c0e8:	0802f0fe 	.word	0x0802f0fe

0802c0ec <_read_r>:
 802c0ec:	b538      	push	{r3, r4, r5, lr}
 802c0ee:	4d07      	ldr	r5, [pc, #28]	; (802c10c <_read_r+0x20>)
 802c0f0:	4604      	mov	r4, r0
 802c0f2:	4608      	mov	r0, r1
 802c0f4:	4611      	mov	r1, r2
 802c0f6:	2200      	movs	r2, #0
 802c0f8:	602a      	str	r2, [r5, #0]
 802c0fa:	461a      	mov	r2, r3
 802c0fc:	f7d6 ff28 	bl	8002f50 <_read>
 802c100:	1c43      	adds	r3, r0, #1
 802c102:	d102      	bne.n	802c10a <_read_r+0x1e>
 802c104:	682b      	ldr	r3, [r5, #0]
 802c106:	b103      	cbz	r3, 802c10a <_read_r+0x1e>
 802c108:	6023      	str	r3, [r4, #0]
 802c10a:	bd38      	pop	{r3, r4, r5, pc}
 802c10c:	2000c654 	.word	0x2000c654

0802c110 <nan>:
 802c110:	ed9f 0b01 	vldr	d0, [pc, #4]	; 802c118 <nan+0x8>
 802c114:	4770      	bx	lr
 802c116:	bf00      	nop
 802c118:	00000000 	.word	0x00000000
 802c11c:	7ff80000 	.word	0x7ff80000

0802c120 <nanf>:
 802c120:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802c128 <nanf+0x8>
 802c124:	4770      	bx	lr
 802c126:	bf00      	nop
 802c128:	7fc00000 	.word	0x7fc00000

0802c12c <strncmp>:
 802c12c:	b510      	push	{r4, lr}
 802c12e:	b17a      	cbz	r2, 802c150 <strncmp+0x24>
 802c130:	4603      	mov	r3, r0
 802c132:	3901      	subs	r1, #1
 802c134:	1884      	adds	r4, r0, r2
 802c136:	f813 0b01 	ldrb.w	r0, [r3], #1
 802c13a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802c13e:	4290      	cmp	r0, r2
 802c140:	d101      	bne.n	802c146 <strncmp+0x1a>
 802c142:	42a3      	cmp	r3, r4
 802c144:	d101      	bne.n	802c14a <strncmp+0x1e>
 802c146:	1a80      	subs	r0, r0, r2
 802c148:	bd10      	pop	{r4, pc}
 802c14a:	2800      	cmp	r0, #0
 802c14c:	d1f3      	bne.n	802c136 <strncmp+0xa>
 802c14e:	e7fa      	b.n	802c146 <strncmp+0x1a>
 802c150:	4610      	mov	r0, r2
 802c152:	e7f9      	b.n	802c148 <strncmp+0x1c>

0802c154 <__ascii_wctomb>:
 802c154:	b149      	cbz	r1, 802c16a <__ascii_wctomb+0x16>
 802c156:	2aff      	cmp	r2, #255	; 0xff
 802c158:	bf85      	ittet	hi
 802c15a:	238a      	movhi	r3, #138	; 0x8a
 802c15c:	6003      	strhi	r3, [r0, #0]
 802c15e:	700a      	strbls	r2, [r1, #0]
 802c160:	f04f 30ff 	movhi.w	r0, #4294967295
 802c164:	bf98      	it	ls
 802c166:	2001      	movls	r0, #1
 802c168:	4770      	bx	lr
 802c16a:	4608      	mov	r0, r1
 802c16c:	4770      	bx	lr
	...

0802c170 <_fstat_r>:
 802c170:	b538      	push	{r3, r4, r5, lr}
 802c172:	4d07      	ldr	r5, [pc, #28]	; (802c190 <_fstat_r+0x20>)
 802c174:	2300      	movs	r3, #0
 802c176:	4604      	mov	r4, r0
 802c178:	4608      	mov	r0, r1
 802c17a:	4611      	mov	r1, r2
 802c17c:	602b      	str	r3, [r5, #0]
 802c17e:	f7d6 ff2c 	bl	8002fda <_fstat>
 802c182:	1c43      	adds	r3, r0, #1
 802c184:	d102      	bne.n	802c18c <_fstat_r+0x1c>
 802c186:	682b      	ldr	r3, [r5, #0]
 802c188:	b103      	cbz	r3, 802c18c <_fstat_r+0x1c>
 802c18a:	6023      	str	r3, [r4, #0]
 802c18c:	bd38      	pop	{r3, r4, r5, pc}
 802c18e:	bf00      	nop
 802c190:	2000c654 	.word	0x2000c654

0802c194 <_isatty_r>:
 802c194:	b538      	push	{r3, r4, r5, lr}
 802c196:	4d06      	ldr	r5, [pc, #24]	; (802c1b0 <_isatty_r+0x1c>)
 802c198:	2300      	movs	r3, #0
 802c19a:	4604      	mov	r4, r0
 802c19c:	4608      	mov	r0, r1
 802c19e:	602b      	str	r3, [r5, #0]
 802c1a0:	f7d6 ff2b 	bl	8002ffa <_isatty>
 802c1a4:	1c43      	adds	r3, r0, #1
 802c1a6:	d102      	bne.n	802c1ae <_isatty_r+0x1a>
 802c1a8:	682b      	ldr	r3, [r5, #0]
 802c1aa:	b103      	cbz	r3, 802c1ae <_isatty_r+0x1a>
 802c1ac:	6023      	str	r3, [r4, #0]
 802c1ae:	bd38      	pop	{r3, r4, r5, pc}
 802c1b0:	2000c654 	.word	0x2000c654

0802c1b4 <_malloc_usable_size_r>:
 802c1b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c1b8:	1f18      	subs	r0, r3, #4
 802c1ba:	2b00      	cmp	r3, #0
 802c1bc:	bfbc      	itt	lt
 802c1be:	580b      	ldrlt	r3, [r1, r0]
 802c1c0:	18c0      	addlt	r0, r0, r3
 802c1c2:	4770      	bx	lr

0802c1c4 <_init>:
 802c1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c1c6:	bf00      	nop
 802c1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c1ca:	bc08      	pop	{r3}
 802c1cc:	469e      	mov	lr, r3
 802c1ce:	4770      	bx	lr

0802c1d0 <_fini>:
 802c1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c1d2:	bf00      	nop
 802c1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c1d6:	bc08      	pop	{r3}
 802c1d8:	469e      	mov	lr, r3
 802c1da:	4770      	bx	lr
